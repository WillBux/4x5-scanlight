
scanlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197ec  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080198ac  080198ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019ccc  08019ccc  0001b1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08019ccc  08019ccc  0001b1fc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08019ccc  08019ccc  0001b1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019ccc  08019ccc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019cd0  08019cd0  0001acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08019cd4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a64  200001fc  08019ed0  0001b1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003c60  08019ed0  0001bc60  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001b1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d07b  00000000  00000000  0001b22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000076bd  00000000  00000000  000482a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002950  00000000  00000000  0004f968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f69  00000000  00000000  000522b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ce5f  00000000  00000000  00054221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031a9a  00000000  00000000  00061080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8345  00000000  00000000  00092b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000041e7  00000000  00000000  0017ae5f  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  0017f046  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  0017f384  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000a76c  00000000  00000000  0017f3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  00189b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08019894 	.word	0x08019894

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	08019894 	.word	0x08019894

08000108 <USBPD_CAD_Init>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	0015      	movs	r5, r2
 800010e:	001e      	movs	r6, r3
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7a00      	ldrb	r0, [r0, #8]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e01f      	b.n	800015e <USBPD_CAD_Init+0x56>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e01a      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000128:	200c      	movs	r0, #12
 800012a:	f019 fa97 	bl	801965c <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e013      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000136:	210c      	movs	r1, #12
 8000138:	f019 fb9d 	bl	8019876 <__aeabi_memclr>
 800013c:	603e      	str	r6, [r7, #0]
 800013e:	723c      	strb	r4, [r7, #8]
 8000140:	9800      	ldr	r0, [sp, #0]
 8000142:	6078      	str	r0, [r7, #4]
 8000144:	484a      	ldr	r0, [pc, #296]	@ (8000270 <.text_6>)
 8000146:	4669      	mov	r1, sp
 8000148:	7a09      	ldrb	r1, [r1, #8]
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	5047      	str	r7, [r0, r1]
 800014e:	9800      	ldr	r0, [sp, #0]
 8000150:	6843      	ldr	r3, [r0, #4]
 8000152:	0032      	movs	r2, r6
 8000154:	0029      	movs	r1, r5
 8000156:	4668      	mov	r0, sp
 8000158:	7a00      	ldrb	r0, [r0, #8]
 800015a:	f00f ff39 	bl	800ffd0 <CAD_Init>
 800015e:	0020      	movs	r0, r4
 8000160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000162 <USBPD_CAD_PortEnable>:
 8000162:	2803      	cmp	r0, #3
 8000164:	d203      	bcs.n	800016e <USBPD_CAD_PortEnable+0xc>
 8000166:	4a42      	ldr	r2, [pc, #264]	@ (8000270 <.text_6>)
 8000168:	0080      	lsls	r0, r0, #2
 800016a:	5810      	ldr	r0, [r2, r0]
 800016c:	7201      	strb	r1, [r0, #8]
 800016e:	4770      	bx	lr

08000170 <USBPD_CAD_Process>:
 8000170:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000172:	2400      	movs	r4, #0
 8000174:	4669      	mov	r1, sp
 8000176:	700c      	strb	r4, [r1, #0]
 8000178:	9401      	str	r4, [sp, #4]
 800017a:	2500      	movs	r5, #0
 800017c:	43ed      	mvns	r5, r5
 800017e:	4f3d      	ldr	r7, [pc, #244]	@ (8000274 <.text_7>)
 8000180:	483b      	ldr	r0, [pc, #236]	@ (8000270 <.text_6>)
 8000182:	00a1      	lsls	r1, r4, #2
 8000184:	1846      	adds	r6, r0, r1
 8000186:	6830      	ldr	r0, [r6, #0]
 8000188:	2800      	cmp	r0, #0
 800018a:	d06c      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800018c:	7a00      	ldrb	r0, [r0, #8]
 800018e:	2801      	cmp	r0, #1
 8000190:	d169      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 8000192:	aa01      	add	r2, sp, #4
 8000194:	4669      	mov	r1, sp
 8000196:	b2e0      	uxtb	r0, r4
 8000198:	f010 f8c2 	bl	8010320 <CAD_StateMachine>
 800019c:	42a8      	cmp	r0, r5
 800019e:	d800      	bhi.n	80001a2 <USBPD_CAD_Process+0x32>
 80001a0:	0005      	movs	r5, r0
 80001a2:	4668      	mov	r0, sp
 80001a4:	7800      	ldrb	r0, [r0, #0]
 80001a6:	2801      	cmp	r0, #1
 80001a8:	d004      	beq.n	80001b4 <USBPD_CAD_Process+0x44>
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d012      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d010      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001b2:	e040      	b.n	8000236 <USBPD_CAD_Process+0xc6>
 80001b4:	6830      	ldr	r0, [r6, #0]
 80001b6:	6801      	ldr	r1, [r0, #0]
 80001b8:	680a      	ldr	r2, [r1, #0]
 80001ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000278 <.text_8>)
 80001bc:	4013      	ands	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
 80001c0:	6801      	ldr	r1, [r0, #0]
 80001c2:	680a      	ldr	r2, [r1, #0]
 80001c4:	23c0      	movs	r3, #192	@ 0xc0
 80001c6:	439a      	bics	r2, r3
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	6800      	ldr	r0, [r0, #0]
 80001cc:	6801      	ldr	r1, [r0, #0]
 80001ce:	4039      	ands	r1, r7
 80001d0:	6001      	str	r1, [r0, #0]
 80001d2:	e034      	b.n	800023e <USBPD_CAD_Process+0xce>
 80001d4:	6830      	ldr	r0, [r6, #0]
 80001d6:	9901      	ldr	r1, [sp, #4]
 80001d8:	2901      	cmp	r1, #1
 80001da:	6801      	ldr	r1, [r0, #0]
 80001dc:	680a      	ldr	r2, [r1, #0]
 80001de:	d103      	bne.n	80001e8 <USBPD_CAD_Process+0x78>
 80001e0:	403a      	ands	r2, r7
 80001e2:	2380      	movs	r3, #128	@ 0x80
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	e002      	b.n	80001ee <USBPD_CAD_Process+0x7e>
 80001e8:	403a      	ands	r2, r7
 80001ea:	2380      	movs	r3, #128	@ 0x80
 80001ec:	019b      	lsls	r3, r3, #6
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	680b      	ldr	r3, [r1, #0]
 80001f6:	22c0      	movs	r2, #192	@ 0xc0
 80001f8:	4393      	bics	r3, r2
 80001fa:	469c      	mov	ip, r3
 80001fc:	9a01      	ldr	r2, [sp, #4]
 80001fe:	0193      	lsls	r3, r2, #6
 8000200:	22c0      	movs	r2, #192	@ 0xc0
 8000202:	401a      	ands	r2, r3
 8000204:	4663      	mov	r3, ip
 8000206:	431a      	orrs	r2, r3
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	6801      	ldr	r1, [r0, #0]
 800020c:	680a      	ldr	r2, [r1, #0]
 800020e:	2380      	movs	r3, #128	@ 0x80
 8000210:	015b      	lsls	r3, r3, #5
 8000212:	4313      	orrs	r3, r2
 8000214:	600b      	str	r3, [r1, #0]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	074a      	lsls	r2, r1, #29
 800021c:	0fd2      	lsrs	r2, r2, #31
 800021e:	d103      	bne.n	8000228 <USBPD_CAD_Process+0xb8>
 8000220:	2208      	movs	r2, #8
 8000222:	4391      	bics	r1, r2
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	e002      	b.n	800022e <USBPD_CAD_Process+0xbe>
 8000228:	2208      	movs	r2, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	6002      	str	r2, [r0, #0]
 800022e:	2168      	movs	r1, #104	@ 0x68
 8000230:	b2e0      	uxtb	r0, r4
 8000232:	f000 f925 	bl	8000480 <USBPD_PE_Notification>
 8000236:	4668      	mov	r0, sp
 8000238:	7800      	ldrb	r0, [r0, #0]
 800023a:	2800      	cmp	r0, #0
 800023c:	d013      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	4668      	mov	r0, sp
 8000242:	7801      	ldrb	r1, [r0, #0]
 8000244:	b2e0      	uxtb	r0, r4
 8000246:	6833      	ldr	r3, [r6, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4798      	blx	r3
 800024e:	4668      	mov	r0, sp
 8000250:	7800      	ldrb	r0, [r0, #0]
 8000252:	2801      	cmp	r0, #1
 8000254:	d003      	beq.n	800025e <USBPD_CAD_Process+0xee>
 8000256:	4668      	mov	r0, sp
 8000258:	7800      	ldrb	r0, [r0, #0]
 800025a:	2803      	cmp	r0, #3
 800025c:	d103      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 800025e:	2169      	movs	r1, #105	@ 0x69
 8000260:	b2e0      	uxtb	r0, r4
 8000262:	f000 f90d 	bl	8000480 <USBPD_PE_Notification>
 8000266:	1c64      	adds	r4, r4, #1
 8000268:	2c03      	cmp	r4, #3
 800026a:	d389      	bcc.n	8000180 <USBPD_CAD_Process+0x10>
 800026c:	0028      	movs	r0, r5
 800026e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000270 <.text_6>:
 8000270:	20000218 	.word	0x20000218

08000274 <.text_7>:
 8000274:	ffff9fff 	.word	0xffff9fff

08000278 <.text_8>:
 8000278:	ffffefff 	.word	0xffffefff

0800027c <USBPD_CAD_AssertRd>:
 800027c:	b510      	push	{r4, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	f011 fce0 	bl	8011c44 <USBPDM1_DeAssertRp>
 8000284:	0020      	movs	r0, r4
 8000286:	f011 fce7 	bl	8011c58 <USBPDM1_AssertRd>
 800028a:	bd10      	pop	{r4, pc}

0800028c <USBPD_CAD_AssertRp>:
 800028c:	b510      	push	{r4, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	f011 fd88 	bl	8011da4 <USBPDM1_DeAssertRd>
 8000294:	0020      	movs	r0, r4
 8000296:	f011 fc1d 	bl	8011ad4 <USBPDM1_AssertRp>
 800029a:	bd10      	pop	{r4, pc}

0800029c <USBPD_CAD_EnterErrorRecovery>:
 800029c:	b580      	push	{r7, lr}
 800029e:	f00f ff79 	bl	8010194 <CAD_Enter_ErrorRecovery>
 80002a2:	bd01      	pop	{r0, pc}

080002a4 <USBPD_CAD_SRC_SetRpResistor>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	2404      	movs	r4, #4
 80002a8:	f00f ffde 	bl	8010268 <CAD_Set_ResistorRp>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d100      	bne.n	80002b2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80002b0:	2400      	movs	r4, #0
 80002b2:	0020      	movs	r0, r4
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <USBPD_CAD_SetRpResistor>:
 80002b6:	b580      	push	{r7, lr}
 80002b8:	f7ff fff4 	bl	80002a4 <USBPD_CAD_SRC_SetRpResistor>
 80002bc:	bd02      	pop	{r1, pc}

080002be <USBPD_CAD_GetMemoryConsumption>:
 80002be:	2024      	movs	r0, #36	@ 0x24
 80002c0:	4770      	bx	lr
	...

080002c4 <USBPD_PE_Init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	000e      	movs	r6, r1
 80002c8:	0017      	movs	r7, r2
 80002ca:	001c      	movs	r4, r3
 80002cc:	6871      	ldr	r1, [r6, #4]
 80002ce:	070a      	lsls	r2, r1, #28
 80002d0:	0fd2      	lsrs	r2, r2, #31
 80002d2:	d002      	beq.n	80002da <USBPD_PE_Init+0x16>
 80002d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d002      	beq.n	80002e0 <USBPD_PE_Init+0x1c>
 80002da:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <USBPD_PE_Init+0x20>
 80002e0:	241b      	movs	r4, #27
 80002e2:	e04a      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002e4:	4669      	mov	r1, sp
 80002e6:	7008      	strb	r0, [r1, #0]
 80002e8:	4668      	mov	r0, sp
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	2803      	cmp	r0, #3
 80002ee:	d301      	bcc.n	80002f4 <USBPD_PE_Init+0x30>
 80002f0:	2417      	movs	r4, #23
 80002f2:	e042      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002f4:	2096      	movs	r0, #150	@ 0x96
 80002f6:	00c0      	lsls	r0, r0, #3
 80002f8:	f019 f9b0 	bl	801965c <malloc>
 80002fc:	0005      	movs	r5, r0
 80002fe:	d101      	bne.n	8000304 <USBPD_PE_Init+0x40>
 8000300:	2416      	movs	r4, #22
 8000302:	e03a      	b.n	800037a <USBPD_PE_Init+0xb6>
 8000304:	2196      	movs	r1, #150	@ 0x96
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	f019 fab5 	bl	8019876 <__aeabi_memclr>
 800030c:	487a      	ldr	r0, [pc, #488]	@ (80004f8 <.text_16>)
 800030e:	4669      	mov	r1, sp
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	5045      	str	r5, [r0, r1]
 8000316:	602e      	str	r6, [r5, #0]
 8000318:	606f      	str	r7, [r5, #4]
 800031a:	4668      	mov	r0, sp
 800031c:	7800      	ldrb	r0, [r0, #0]
 800031e:	7428      	strb	r0, [r5, #16]
 8000320:	60ac      	str	r4, [r5, #8]
 8000322:	4876      	ldr	r0, [pc, #472]	@ (80004fc <.text_17>)
 8000324:	182b      	adds	r3, r5, r0
 8000326:	4876      	ldr	r0, [pc, #472]	@ (8000500 <.text_18>)
 8000328:	182a      	adds	r2, r5, r0
 800032a:	0031      	movs	r1, r6
 800032c:	4668      	mov	r0, sp
 800032e:	7800      	ldrb	r0, [r0, #0]
 8000330:	f005 f98c 	bl	800564c <USBPD_PRL_Init>
 8000334:	0004      	movs	r4, r0
 8000336:	d120      	bne.n	800037a <USBPD_PE_Init+0xb6>
 8000338:	6868      	ldr	r0, [r5, #4]
 800033a:	6801      	ldr	r1, [r0, #0]
 800033c:	2703      	movs	r7, #3
 800033e:	682a      	ldr	r2, [r5, #0]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	0753      	lsls	r3, r2, #29
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	d006      	beq.n	8000356 <USBPD_PE_Init+0x92>
 8000348:	2208      	movs	r2, #8
 800034a:	430a      	orrs	r2, r1
 800034c:	6002      	str	r2, [r0, #0]
 800034e:	6873      	ldr	r3, [r6, #4]
 8000350:	403b      	ands	r3, r7
 8000352:	2201      	movs	r2, #1
 8000354:	e005      	b.n	8000362 <USBPD_PE_Init+0x9e>
 8000356:	2208      	movs	r2, #8
 8000358:	4391      	bics	r1, r2
 800035a:	6001      	str	r1, [r0, #0]
 800035c:	6873      	ldr	r3, [r6, #4]
 800035e:	403b      	ands	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	4668      	mov	r0, sp
 8000366:	7800      	ldrb	r0, [r0, #0]
 8000368:	f005 f9ab 	bl	80056c2 <USBPD_PRL_SetHeader>
 800036c:	6870      	ldr	r0, [r6, #4]
 800036e:	4007      	ands	r7, r0
 8000370:	0039      	movs	r1, r7
 8000372:	4668      	mov	r0, sp
 8000374:	7800      	ldrb	r0, [r0, #0]
 8000376:	f005 f9e2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 800037a:	0020      	movs	r0, r4
 800037c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800037e <USBPD_PE_TimerCounter>:
 800037e:	495e      	ldr	r1, [pc, #376]	@ (80004f8 <.text_16>)
 8000380:	0080      	lsls	r0, r0, #2
 8000382:	5808      	ldr	r0, [r1, r0]
 8000384:	49b4      	ldr	r1, [pc, #720]	@ (8000658 <.text_20>)
 8000386:	084a      	lsrs	r2, r1, #1
 8000388:	8bc3      	ldrh	r3, [r0, #30]
 800038a:	4213      	tst	r3, r2
 800038c:	d002      	beq.n	8000394 <USBPD_PE_TimerCounter+0x16>
 800038e:	8bc3      	ldrh	r3, [r0, #30]
 8000390:	185b      	adds	r3, r3, r1
 8000392:	83c3      	strh	r3, [r0, #30]
 8000394:	8c03      	ldrh	r3, [r0, #32]
 8000396:	4213      	tst	r3, r2
 8000398:	d002      	beq.n	80003a0 <USBPD_PE_TimerCounter+0x22>
 800039a:	8c03      	ldrh	r3, [r0, #32]
 800039c:	185b      	adds	r3, r3, r1
 800039e:	8403      	strh	r3, [r0, #32]
 80003a0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80003a2:	4213      	tst	r3, r2
 80003a4:	d002      	beq.n	80003ac <USBPD_PE_TimerCounter+0x2e>
 80003a6:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80003a8:	185b      	adds	r3, r3, r1
 80003aa:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80003ac:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80003ae:	4213      	tst	r3, r2
 80003b0:	d002      	beq.n	80003b8 <USBPD_PE_TimerCounter+0x3a>
 80003b2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	8443      	strh	r3, [r0, #34]	@ 0x22
 80003b8:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 80003ba:	4213      	tst	r3, r2
 80003bc:	d002      	beq.n	80003c4 <USBPD_PE_TimerCounter+0x46>
 80003be:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 80003c0:	1851      	adds	r1, r2, r1
 80003c2:	8481      	strh	r1, [r0, #36]	@ 0x24
 80003c4:	4770      	bx	lr

080003c6 <USBPD_PE_TimerCounteUpdate>:
 80003c6:	b570      	push	{r4, r5, r6, lr}
 80003c8:	000e      	movs	r6, r1
 80003ca:	494b      	ldr	r1, [pc, #300]	@ (80004f8 <.text_16>)
 80003cc:	0080      	lsls	r0, r0, #2
 80003ce:	580c      	ldr	r4, [r1, r0]
 80003d0:	2180      	movs	r1, #128	@ 0x80
 80003d2:	0209      	lsls	r1, r1, #8
 80003d4:	428e      	cmp	r6, r1
 80003d6:	da28      	bge.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 80003d8:	1e4d      	subs	r5, r1, #1
 80003da:	8be0      	ldrh	r0, [r4, #30]
 80003dc:	4228      	tst	r0, r5
 80003de:	d004      	beq.n	80003ea <USBPD_PE_TimerCounteUpdate+0x24>
 80003e0:	0031      	movs	r1, r6
 80003e2:	8be0      	ldrh	r0, [r4, #30]
 80003e4:	f000 ffcb 	bl	800137e <PE_UpdateTimer>
 80003e8:	83e0      	strh	r0, [r4, #30]
 80003ea:	8c20      	ldrh	r0, [r4, #32]
 80003ec:	4228      	tst	r0, r5
 80003ee:	d004      	beq.n	80003fa <USBPD_PE_TimerCounteUpdate+0x34>
 80003f0:	0031      	movs	r1, r6
 80003f2:	8c20      	ldrh	r0, [r4, #32]
 80003f4:	f000 ffc3 	bl	800137e <PE_UpdateTimer>
 80003f8:	8420      	strh	r0, [r4, #32]
 80003fa:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 80003fc:	4228      	tst	r0, r5
 80003fe:	d004      	beq.n	800040a <USBPD_PE_TimerCounteUpdate+0x44>
 8000400:	0031      	movs	r1, r6
 8000402:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8000404:	f000 ffbb 	bl	800137e <PE_UpdateTimer>
 8000408:	84e0      	strh	r0, [r4, #38]	@ 0x26
 800040a:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 800040c:	4228      	tst	r0, r5
 800040e:	d004      	beq.n	800041a <USBPD_PE_TimerCounteUpdate+0x54>
 8000410:	0031      	movs	r1, r6
 8000412:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000414:	f000 ffb3 	bl	800137e <PE_UpdateTimer>
 8000418:	8460      	strh	r0, [r4, #34]	@ 0x22
 800041a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800041c:	4228      	tst	r0, r5
 800041e:	d004      	beq.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 8000420:	0031      	movs	r1, r6
 8000422:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8000424:	f000 ffab 	bl	800137e <PE_UpdateTimer>
 8000428:	84a0      	strh	r0, [r4, #36]	@ 0x24
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <USBPD_PE_IsCableConnected>:
 800042c:	b510      	push	{r4, lr}
 800042e:	4a32      	ldr	r2, [pc, #200]	@ (80004f8 <.text_16>)
 8000430:	0080      	lsls	r0, r0, #2
 8000432:	5810      	ldr	r0, [r2, r0]
 8000434:	6842      	ldr	r2, [r0, #4]
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	4cb2      	ldr	r4, [pc, #712]	@ (8000704 <.text_22>)
 800043a:	401c      	ands	r4, r3
 800043c:	0309      	lsls	r1, r1, #12
 800043e:	2380      	movs	r3, #128	@ 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4019      	ands	r1, r3
 8000444:	4321      	orrs	r1, r4
 8000446:	6011      	str	r1, [r2, #0]
 8000448:	2148      	movs	r1, #72	@ 0x48
 800044a:	7441      	strb	r1, [r0, #17]
 800044c:	bd10      	pop	{r4, pc}

0800044e <USBPD_PE_StateMachine_Reset>:
 800044e:	2148      	movs	r1, #72	@ 0x48
 8000450:	4a29      	ldr	r2, [pc, #164]	@ (80004f8 <.text_16>)
 8000452:	0080      	lsls	r0, r0, #2
 8000454:	5810      	ldr	r0, [r2, r0]
 8000456:	7441      	strb	r1, [r0, #17]
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_StateMachine_Stop>:
 800045a:	b580      	push	{r7, lr}
 800045c:	f005 fc34 	bl	8005cc8 <USBPD_PRL_Stop>
 8000460:	bd01      	pop	{r0, pc}

08000462 <USBPD_PE_StateMachine_DRP>:
 8000462:	b580      	push	{r7, lr}
 8000464:	4924      	ldr	r1, [pc, #144]	@ (80004f8 <.text_16>)
 8000466:	0082      	lsls	r2, r0, #2
 8000468:	5889      	ldr	r1, [r1, r2]
 800046a:	6849      	ldr	r1, [r1, #4]
 800046c:	6809      	ldr	r1, [r1, #0]
 800046e:	074a      	lsls	r2, r1, #29
 8000470:	0fd2      	lsrs	r2, r2, #31
 8000472:	d002      	beq.n	800047a <USBPD_PE_StateMachine_DRP+0x18>
 8000474:	f002 fb8a 	bl	8002b8c <USBPD_PE_StateMachine_SRC>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	f001 fcd5 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 800047e:	bd02      	pop	{r1, pc}

08000480 <USBPD_PE_Notification>:
 8000480:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000482:	0004      	movs	r4, r0
 8000484:	2803      	cmp	r0, #3
 8000486:	d211      	bcs.n	80004ac <USBPD_PE_Notification+0x2c>
 8000488:	000d      	movs	r5, r1
 800048a:	2000      	movs	r0, #0
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	2300      	movs	r3, #0
 8000490:	002a      	movs	r2, r5
 8000492:	0021      	movs	r1, r4
 8000494:	2009      	movs	r0, #9
 8000496:	4eb2      	ldr	r6, [pc, #712]	@ (8000760 <.text_24>)
 8000498:	6836      	ldr	r6, [r6, #0]
 800049a:	47b0      	blx	r6
 800049c:	0029      	movs	r1, r5
 800049e:	0020      	movs	r0, r4
 80004a0:	4ab0      	ldr	r2, [pc, #704]	@ (8000764 <.text_25>)
 80004a2:	00a3      	lsls	r3, r4, #2
 80004a4:	58d2      	ldr	r2, [r2, r3]
 80004a6:	6892      	ldr	r2, [r2, #8]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	4790      	blx	r2
 80004ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080004ae <USBPD_PE_InitVDM_Callback>:
 80004ae:	4aad      	ldr	r2, [pc, #692]	@ (8000764 <.text_25>)
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	5810      	ldr	r0, [r2, r0]
 80004b4:	60c1      	str	r1, [r0, #12]
 80004b6:	4770      	bx	lr

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	49aa      	ldr	r1, [pc, #680]	@ (8000764 <.text_25>)
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	5889      	ldr	r1, [r1, r2]
 80004c0:	220f      	movs	r2, #15
 80004c2:	2332      	movs	r3, #50	@ 0x32
 80004c4:	54ca      	strb	r2, [r1, r3]
 80004c6:	6889      	ldr	r1, [r1, #8]
 80004c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80004ca:	4788      	blx	r1
 80004cc:	2000      	movs	r0, #0
 80004ce:	bd02      	pop	{r1, pc}

080004d0 <USBPD_PE_Request_CableReset>:
 80004d0:	b580      	push	{r7, lr}
 80004d2:	4909      	ldr	r1, [pc, #36]	@ (80004f8 <.text_16>)
 80004d4:	0082      	lsls	r2, r0, #2
 80004d6:	5889      	ldr	r1, [r1, r2]
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4ba2      	ldr	r3, [pc, #648]	@ (8000768 <.text_26>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4aa2      	ldr	r2, [pc, #648]	@ (800076c <.text_27>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d105      	bne.n	80004f2 <USBPD_PE_Request_CableReset+0x22>
 80004e6:	2299      	movs	r2, #153	@ 0x99
 80004e8:	2332      	movs	r3, #50	@ 0x32
 80004ea:	54ca      	strb	r2, [r1, r3]
 80004ec:	6889      	ldr	r1, [r1, #8]
 80004ee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80004f0:	4788      	blx	r1
 80004f2:	2010      	movs	r0, #16
 80004f4:	bd02      	pop	{r1, pc}
	...

080004f8 <.text_16>:
 80004f8:	20000224 	.word	0x20000224

080004fc <.text_17>:
 80004fc:	0000048e 	.word	0x0000048e

08000500 <.text_18>:
 8000500:	00000281 	.word	0x00000281

08000504 <USBPD_PE_Request_CtrlMessage>:
 8000504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000506:	b096      	sub	sp, #88	@ 0x58
 8000508:	4896      	ldr	r0, [pc, #600]	@ (8000764 <.text_25>)
 800050a:	a916      	add	r1, sp, #88	@ 0x58
 800050c:	7809      	ldrb	r1, [r1, #0]
 800050e:	0089      	lsls	r1, r1, #2
 8000510:	5840      	ldr	r0, [r0, r1]
 8000512:	9001      	str	r0, [sp, #4]
 8000514:	2400      	movs	r4, #0
 8000516:	a802      	add	r0, sp, #8
 8000518:	4995      	ldr	r1, [pc, #596]	@ (8000770 <.text_28>)
 800051a:	224c      	movs	r2, #76	@ 0x4c
 800051c:	f019 f9a0 	bl	8019860 <__aeabi_memcpy>
 8000520:	2303      	movs	r3, #3
 8000522:	9801      	ldr	r0, [sp, #4]
 8000524:	2132      	movs	r1, #50	@ 0x32
 8000526:	5c40      	ldrb	r0, [r0, r1]
 8000528:	2800      	cmp	r0, #0
 800052a:	d105      	bne.n	8000538 <USBPD_PE_Request_CtrlMessage+0x34>
 800052c:	9801      	ldr	r0, [sp, #4]
 800052e:	6840      	ldr	r0, [r0, #4]
 8000530:	6800      	ldr	r0, [r0, #0]
 8000532:	04c1      	lsls	r1, r0, #19
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	d101      	bne.n	800053c <USBPD_PE_Request_CtrlMessage+0x38>
 8000538:	2403      	movs	r4, #3
 800053a:	e089      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	684a      	ldr	r2, [r1, #4]
 8000542:	0712      	lsls	r2, r2, #28
 8000544:	0fd5      	lsrs	r5, r2, #31
 8000546:	466a      	mov	r2, sp
 8000548:	7055      	strb	r5, [r2, #1]
 800054a:	2201      	movs	r2, #1
 800054c:	0885      	lsrs	r5, r0, #2
 800054e:	4015      	ands	r5, r2
 8000550:	d103      	bne.n	800055a <USBPD_PE_Request_CtrlMessage+0x56>
 8000552:	2502      	movs	r5, #2
 8000554:	466f      	mov	r7, sp
 8000556:	703c      	strb	r4, [r7, #0]
 8000558:	e003      	b.n	8000562 <USBPD_PE_Request_CtrlMessage+0x5e>
 800055a:	2500      	movs	r5, #0
 800055c:	2604      	movs	r6, #4
 800055e:	466f      	mov	r7, sp
 8000560:	703e      	strb	r6, [r7, #0]
 8000562:	0546      	lsls	r6, r0, #21
 8000564:	0f76      	lsrs	r6, r6, #29
 8000566:	2e03      	cmp	r6, #3
 8000568:	d101      	bne.n	800056e <USBPD_PE_Request_CtrlMessage+0x6a>
 800056a:	2608      	movs	r6, #8
 800056c:	e000      	b.n	8000570 <USBPD_PE_Request_CtrlMessage+0x6c>
 800056e:	2600      	movs	r6, #0
 8000570:	4018      	ands	r0, r3
 8000572:	2802      	cmp	r0, #2
 8000574:	d101      	bne.n	800057a <USBPD_PE_Request_CtrlMessage+0x76>
 8000576:	2040      	movs	r0, #64	@ 0x40
 8000578:	e000      	b.n	800057c <USBPD_PE_Request_CtrlMessage+0x78>
 800057a:	2000      	movs	r0, #0
 800057c:	787f      	ldrb	r7, [r7, #1]
 800057e:	433d      	orrs	r5, r7
 8000580:	466f      	mov	r7, sp
 8000582:	783f      	ldrb	r7, [r7, #0]
 8000584:	432f      	orrs	r7, r5
 8000586:	433e      	orrs	r6, r7
 8000588:	4330      	orrs	r0, r6
 800058a:	4003      	ands	r3, r0
 800058c:	d002      	beq.n	8000594 <USBPD_PE_Request_CtrlMessage+0x90>
 800058e:	0003      	movs	r3, r0
 8000590:	2010      	movs	r0, #16
 8000592:	4318      	orrs	r0, r3
 8000594:	2505      	movs	r5, #5
 8000596:	4228      	tst	r0, r5
 8000598:	d002      	beq.n	80005a0 <USBPD_PE_Request_CtrlMessage+0x9c>
 800059a:	0003      	movs	r3, r0
 800059c:	2020      	movs	r0, #32
 800059e:	4318      	orrs	r0, r3
 80005a0:	ab17      	add	r3, sp, #92	@ 0x5c
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	005e      	lsls	r6, r3, #1
 80005a6:	18f3      	adds	r3, r6, r3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	ab02      	add	r3, sp, #8
 80005ac:	9e00      	ldr	r6, [sp, #0]
 80005ae:	5d9e      	ldrb	r6, [r3, r6]
 80005b0:	4030      	ands	r0, r6
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d11f      	bne.n	80005f6 <USBPD_PE_Request_CtrlMessage+0xf2>
 80005b6:	9e01      	ldr	r6, [sp, #4]
 80005b8:	2733      	movs	r7, #51	@ 0x33
 80005ba:	55f4      	strb	r4, [r6, r7]
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	4eb2      	ldr	r6, [pc, #712]	@ (8000888 <.text_30>)
 80005c0:	1980      	adds	r0, r0, r6
 80005c2:	ae17      	add	r6, sp, #92	@ 0x5c
 80005c4:	7836      	ldrb	r6, [r6, #0]
 80005c6:	2e05      	cmp	r6, #5
 80005c8:	d031      	beq.n	800062e <USBPD_PE_Request_CtrlMessage+0x12a>
 80005ca:	2e0b      	cmp	r6, #11
 80005cc:	d00e      	beq.n	80005ec <USBPD_PE_Request_CtrlMessage+0xe8>
 80005ce:	2e0d      	cmp	r6, #13
 80005d0:	d028      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005d2:	2e11      	cmp	r6, #17
 80005d4:	d011      	beq.n	80005fa <USBPD_PE_Request_CtrlMessage+0xf6>
 80005d6:	2e12      	cmp	r6, #18
 80005d8:	d013      	beq.n	8000602 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005da:	2e14      	cmp	r6, #20
 80005dc:	d013      	beq.n	8000606 <USBPD_PE_Request_CtrlMessage+0x102>
 80005de:	2e15      	cmp	r6, #21
 80005e0:	d017      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0x10e>
 80005e2:	2e16      	cmp	r6, #22
 80005e4:	d00b      	beq.n	80005fe <USBPD_PE_Request_CtrlMessage+0xfa>
 80005e6:	2e18      	cmp	r6, #24
 80005e8:	d01c      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005ea:	e021      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	6889      	ldr	r1, [r1, #8]
 80005f0:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d11c      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005f6:	2402      	movs	r4, #2
 80005f8:	e02a      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005fa:	2111      	movs	r1, #17
 80005fc:	e010      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 80005fe:	2116      	movs	r1, #22
 8000600:	e00e      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000602:	2112      	movs	r1, #18
 8000604:	e00c      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000606:	8909      	ldrh	r1, [r1, #8]
 8000608:	0889      	lsrs	r1, r1, #2
 800060a:	4211      	tst	r1, r2
 800060c:	d110      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800060e:	2410      	movs	r4, #16
 8000610:	e01e      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000612:	8909      	ldrh	r1, [r1, #8]
 8000614:	09c9      	lsrs	r1, r1, #7
 8000616:	4211      	tst	r1, r2
 8000618:	d101      	bne.n	800061e <USBPD_PE_Request_CtrlMessage+0x11a>
 800061a:	2010      	movs	r0, #16
 800061c:	e019      	b.n	8000652 <USBPD_PE_Request_CtrlMessage+0x14e>
 800061e:	2115      	movs	r1, #21
 8000620:	7001      	strb	r1, [r0, #0]
 8000622:	e005      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000624:	a918      	add	r1, sp, #96	@ 0x60
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	55d1      	strb	r1, [r2, r7]
 800062c:	e000      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800062e:	7005      	strb	r5, [r0, #0]
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	1859      	adds	r1, r3, r1
 8000634:	7849      	ldrb	r1, [r1, #1]
 8000636:	7041      	strb	r1, [r0, #1]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	1818      	adds	r0, r3, r0
 800063c:	7880      	ldrb	r0, [r0, #2]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	2232      	movs	r2, #50	@ 0x32
 8000642:	5488      	strb	r0, [r1, r2]
 8000644:	a816      	add	r0, sp, #88	@ 0x58
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	6889      	ldr	r1, [r1, #8]
 800064c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800064e:	4788      	blx	r1
 8000650:	0020      	movs	r0, r4
 8000652:	b019      	add	sp, #100	@ 0x64
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000658 <.text_20>:
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <USBPD_PE_Request_DataMessage>:
 800065c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	000b      	movs	r3, r1
 8000662:	0017      	movs	r7, r2
 8000664:	483f      	ldr	r0, [pc, #252]	@ (8000764 <.text_25>)
 8000666:	4669      	mov	r1, sp
 8000668:	7a09      	ldrb	r1, [r1, #8]
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	5841      	ldr	r1, [r0, r1]
 800066e:	2402      	movs	r4, #2
 8000670:	2032      	movs	r0, #50	@ 0x32
 8000672:	5c08      	ldrb	r0, [r1, r0]
 8000674:	2800      	cmp	r0, #0
 8000676:	d105      	bne.n	8000684 <USBPD_PE_Request_DataMessage+0x28>
 8000678:	2001      	movs	r0, #1
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	0b12      	lsrs	r2, r2, #12
 8000680:	4002      	ands	r2, r0
 8000682:	d101      	bne.n	8000688 <USBPD_PE_Request_DataMessage+0x2c>
 8000684:	2403      	movs	r4, #3
 8000686:	e021      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 8000688:	466a      	mov	r2, sp
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2533      	movs	r5, #51	@ 0x33
 8000690:	554a      	strb	r2, [r1, r5]
 8000692:	000b      	movs	r3, r1
 8000694:	3332      	adds	r3, #50	@ 0x32
 8000696:	4dc0      	ldr	r5, [pc, #768]	@ (8000998 <.text_36>)
 8000698:	4ec0      	ldr	r6, [pc, #768]	@ (800099c <.text_37>)
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	466f      	mov	r7, sp
 800069e:	783f      	ldrb	r7, [r7, #0]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d004      	beq.n	80006ae <USBPD_PE_Request_DataMessage+0x52>
 80006a4:	2f06      	cmp	r7, #6
 80006a6:	d013      	beq.n	80006d0 <USBPD_PE_Request_DataMessage+0x74>
 80006a8:	2f07      	cmp	r7, #7
 80006aa:	d01b      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x88>
 80006ac:	e027      	b.n	80006fe <USBPD_PE_Request_DataMessage+0xa2>
 80006ae:	684d      	ldr	r5, [r1, #4]
 80006b0:	682d      	ldr	r5, [r5, #0]
 80006b2:	08ad      	lsrs	r5, r5, #2
 80006b4:	4005      	ands	r5, r0
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006b8:	4cc1      	ldr	r4, [pc, #772]	@ (80009c0 <.text_39>)
 80006ba:	5508      	strb	r0, [r1, r4]
 80006bc:	2007      	movs	r0, #7
 80006be:	7018      	strb	r0, [r3, #0]
 80006c0:	2400      	movs	r4, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	7a00      	ldrb	r0, [r0, #8]
 80006c6:	6889      	ldr	r1, [r1, #8]
 80006c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80006ca:	4788      	blx	r1
 80006cc:	0020      	movs	r0, r4
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	6848      	ldr	r0, [r1, #4]
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	4006      	ands	r6, r0
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d1f8      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006da:	9801      	ldr	r0, [sp, #4]
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	6288      	str	r0, [r1, #40]	@ 0x28
 80006e0:	202b      	movs	r0, #43	@ 0x2b
 80006e2:	e7ec      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006e4:	6848      	ldr	r0, [r1, #4]
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	4006      	ands	r6, r0
 80006ea:	42ae      	cmp	r6, r5
 80006ec:	d1ee      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006ee:	9801      	ldr	r0, [sp, #4]
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	6288      	str	r0, [r1, #40]	@ 0x28
 80006f4:	205d      	movs	r0, #93	@ 0x5d
 80006f6:	4cb2      	ldr	r4, [pc, #712]	@ (80009c0 <.text_39>)
 80006f8:	5508      	strb	r0, [r1, r4]
 80006fa:	2062      	movs	r0, #98	@ 0x62
 80006fc:	e7df      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006fe:	2410      	movs	r4, #16
 8000700:	e7e4      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
	...

08000704 <.text_22>:
 8000704:	ffffefff 	.word	0xffffefff

08000708 <USBPD_PE_Send_Request>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	000b      	movs	r3, r1
 800070c:	4915      	ldr	r1, [pc, #84]	@ (8000764 <.text_25>)
 800070e:	0084      	lsls	r4, r0, #2
 8000710:	590d      	ldr	r5, [r1, r4]
 8000712:	2102      	movs	r1, #2
 8000714:	2432      	movs	r4, #50	@ 0x32
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	2c00      	cmp	r4, #0
 800071a:	d104      	bne.n	8000726 <USBPD_PE_Send_Request+0x1e>
 800071c:	686c      	ldr	r4, [r5, #4]
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	04e6      	lsls	r6, r4, #19
 8000722:	0ff6      	lsrs	r6, r6, #31
 8000724:	d101      	bne.n	800072a <USBPD_PE_Send_Request+0x22>
 8000726:	2103      	movs	r1, #3
 8000728:	e017      	b.n	800075a <USBPD_PE_Send_Request+0x52>
 800072a:	4ea6      	ldr	r6, [pc, #664]	@ (80009c4 <.text_40>)
 800072c:	4026      	ands	r6, r4
 800072e:	24c0      	movs	r4, #192	@ 0xc0
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d111      	bne.n	800075a <USBPD_PE_Send_Request+0x52>
 8000736:	2145      	movs	r1, #69	@ 0x45
 8000738:	2432      	movs	r4, #50	@ 0x32
 800073a:	5529      	strb	r1, [r5, r4]
 800073c:	61ab      	str	r3, [r5, #24]
 800073e:	6969      	ldr	r1, [r5, #20]
 8000740:	2318      	movs	r3, #24
 8000742:	4399      	bics	r1, r3
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	4013      	ands	r3, r2
 8000748:	430b      	orrs	r3, r1
 800074a:	616b      	str	r3, [r5, #20]
 800074c:	2400      	movs	r4, #0
 800074e:	2233      	movs	r2, #51	@ 0x33
 8000750:	54ac      	strb	r4, [r5, r2]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000756:	4788      	blx	r1
 8000758:	2100      	movs	r1, #0
 800075a:	0008      	movs	r0, r1
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000760 <.text_24>:
 8000760:	20000000 	.word	0x20000000

08000764 <.text_25>:
 8000764:	20000224 	.word	0x20000224

08000768 <.text_26>:
 8000768:	00008708 	.word	0x00008708

0800076c <.text_27>:
 800076c:	00008308 	.word	0x00008308

08000770 <.text_28>:
 8000770:	08019980 	.word	0x08019980

08000774 <USBPD_PE_SendExtendedMessage>:
 8000774:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	001f      	movs	r7, r3
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	48b5      	ldr	r0, [pc, #724]	@ (8000a54 <.text_43>)
 8000780:	4669      	mov	r1, sp
 8000782:	7b09      	ldrb	r1, [r1, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	5846      	ldr	r6, [r0, r1]
 8000788:	2003      	movs	r0, #3
 800078a:	2132      	movs	r1, #50	@ 0x32
 800078c:	5c71      	ldrb	r1, [r6, r1]
 800078e:	2900      	cmp	r1, #0
 8000790:	d107      	bne.n	80007a2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000792:	6871      	ldr	r1, [r6, #4]
 8000794:	6809      	ldr	r1, [r1, #0]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	400b      	ands	r3, r1
 80007a0:	d101      	bne.n	80007a6 <USBPD_PE_SendExtendedMessage+0x32>
 80007a2:	2503      	movs	r5, #3
 80007a4:	e06c      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	055b      	lsls	r3, r3, #21
 80007aa:	0f5b      	lsrs	r3, r3, #29
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10b      	bne.n	80007c8 <USBPD_PE_SendExtendedMessage+0x54>
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	4018      	ands	r0, r3
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d801      	bhi.n	80007bc <USBPD_PE_SendExtendedMessage+0x48>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e061      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007bc:	4668      	mov	r0, sp
 80007be:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 80007c0:	21ff      	movs	r1, #255	@ 0xff
 80007c2:	1d89      	adds	r1, r1, #6
 80007c4:	4288      	cmp	r0, r1
 80007c6:	d301      	bcc.n	80007cc <USBPD_PE_SendExtendedMessage+0x58>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e059      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007cc:	4668      	mov	r0, sp
 80007ce:	7002      	strb	r2, [r0, #0]
 80007d0:	6970      	ldr	r0, [r6, #20]
 80007d2:	2120      	movs	r1, #32
 80007d4:	4388      	bics	r0, r1
 80007d6:	6170      	str	r0, [r6, #20]
 80007d8:	2020      	movs	r0, #32
 80007da:	4669      	mov	r1, sp
 80007dc:	7809      	ldrb	r1, [r1, #0]
 80007de:	2903      	cmp	r1, #3
 80007e0:	d008      	beq.n	80007f4 <USBPD_PE_SendExtendedMessage+0x80>
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d020      	beq.n	8000828 <USBPD_PE_SendExtendedMessage+0xb4>
 80007e6:	2906      	cmp	r1, #6
 80007e8:	d020      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xb8>
 80007ea:	2908      	cmp	r1, #8
 80007ec:	d020      	beq.n	8000830 <USBPD_PE_SendExtendedMessage+0xbc>
 80007ee:	290a      	cmp	r1, #10
 80007f0:	d023      	beq.n	800083a <USBPD_PE_SendExtendedMessage+0xc6>
 80007f2:	e024      	b.n	800083e <USBPD_PE_SendExtendedMessage+0xca>
 80007f4:	210c      	movs	r1, #12
 80007f6:	4aac      	ldr	r2, [pc, #688]	@ (8000aa8 <.text_45>)
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	7091      	strb	r1, [r2, #2]
 80007fc:	6971      	ldr	r1, [r6, #20]
 80007fe:	4308      	orrs	r0, r1
 8000800:	6170      	str	r0, [r6, #20]
 8000802:	4668      	mov	r0, sp
 8000804:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000806:	2800      	cmp	r0, #0
 8000808:	d027      	beq.n	800085a <USBPD_PE_SendExtendedMessage+0xe6>
 800080a:	9401      	str	r4, [sp, #4]
 800080c:	4668      	mov	r0, sp
 800080e:	7b00      	ldrb	r0, [r0, #12]
 8000810:	f000 fa98 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8000814:	2801      	cmp	r0, #1
 8000816:	d101      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0xa8>
 8000818:	2004      	movs	r0, #4
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	9702      	str	r7, [sp, #8]
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	4669      	mov	r1, sp
 8000822:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8000824:	4fa1      	ldr	r7, [pc, #644]	@ (8000aac <.text_46>)
 8000826:	e012      	b.n	800084e <USBPD_PE_SendExtendedMessage+0xda>
 8000828:	210d      	movs	r1, #13
 800082a:	e7e4      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 800082c:	210e      	movs	r1, #14
 800082e:	e7e2      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 8000830:	205b      	movs	r0, #91	@ 0x5b
 8000832:	499d      	ldr	r1, [pc, #628]	@ (8000aa8 <.text_45>)
 8000834:	1871      	adds	r1, r6, r1
 8000836:	7088      	strb	r0, [r1, #2]
 8000838:	e7e3      	b.n	8000802 <USBPD_PE_SendExtendedMessage+0x8e>
 800083a:	205c      	movs	r0, #92	@ 0x5c
 800083c:	e7f9      	b.n	8000832 <USBPD_PE_SendExtendedMessage+0xbe>
 800083e:	2510      	movs	r5, #16
 8000840:	e01e      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	5d12      	ldrb	r2, [r2, r4]
 8000846:	1823      	adds	r3, r4, r0
 8000848:	18f3      	adds	r3, r6, r3
 800084a:	55da      	strb	r2, [r3, r7]
 800084c:	1c64      	adds	r4, r4, #1
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f7      	bcc.n	8000842 <USBPD_PE_SendExtendedMessage+0xce>
 8000852:	2092      	movs	r0, #146	@ 0x92
 8000854:	00c0      	lsls	r0, r0, #3
 8000856:	5231      	strh	r1, [r6, r0]
 8000858:	e002      	b.n	8000860 <USBPD_PE_SendExtendedMessage+0xec>
 800085a:	2092      	movs	r0, #146	@ 0x92
 800085c:	00c0      	lsls	r0, r0, #3
 800085e:	5234      	strh	r4, [r6, r0]
 8000860:	4668      	mov	r0, sp
 8000862:	7c00      	ldrb	r0, [r0, #16]
 8000864:	2133      	movs	r1, #51	@ 0x33
 8000866:	5470      	strb	r0, [r6, r1]
 8000868:	4668      	mov	r0, sp
 800086a:	7800      	ldrb	r0, [r0, #0]
 800086c:	498e      	ldr	r1, [pc, #568]	@ (8000aa8 <.text_45>)
 800086e:	5470      	strb	r0, [r6, r1]
 8000870:	2031      	movs	r0, #49	@ 0x31
 8000872:	2132      	movs	r1, #50	@ 0x32
 8000874:	5470      	strb	r0, [r6, r1]
 8000876:	4668      	mov	r0, sp
 8000878:	7b00      	ldrb	r0, [r0, #12]
 800087a:	68b1      	ldr	r1, [r6, #8]
 800087c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800087e:	4788      	blx	r1
 8000880:	0028      	movs	r0, r5
 8000882:	b005      	add	sp, #20
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000888 <.text_30>:
 8000888:	0000025e 	.word	0x0000025e

0800088c <PE_Send_RESET>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	2c05      	cmp	r4, #5
 8000894:	d101      	bne.n	800089a <PE_Send_RESET+0xe>
 8000896:	211f      	movs	r1, #31
 8000898:	e000      	b.n	800089c <PE_Send_RESET+0x10>
 800089a:	215e      	movs	r1, #94	@ 0x5e
 800089c:	7c28      	ldrb	r0, [r5, #16]
 800089e:	f7ff fdef 	bl	8000480 <USBPD_PE_Notification>
 80008a2:	0021      	movs	r1, r4
 80008a4:	7c28      	ldrb	r0, [r5, #16]
 80008a6:	f005 f9ab 	bl	8005c00 <USBPD_PRL_ResetRequestProcess>
 80008aa:	f3ef 8010 	mrs	r0, PRIMASK
 80008ae:	b672      	cpsid	i
 80008b0:	2100      	movs	r1, #0
 80008b2:	223c      	movs	r2, #60	@ 0x3c
 80008b4:	54a9      	strb	r1, [r5, r2]
 80008b6:	f380 8810 	msr	PRIMASK, r0
 80008ba:	bd31      	pop	{r0, r4, r5, pc}

080008bc <PE_Get_SpecRevision>:
 80008bc:	4965      	ldr	r1, [pc, #404]	@ (8000a54 <.text_43>)
 80008be:	0080      	lsls	r0, r0, #2
 80008c0:	5808      	ldr	r0, [r1, r0]
 80008c2:	6840      	ldr	r0, [r0, #4]
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	0780      	lsls	r0, r0, #30
 80008c8:	0f80      	lsrs	r0, r0, #30
 80008ca:	4770      	bx	lr

080008cc <PE_ChangePowerRole>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	6842      	ldr	r2, [r0, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	2404      	movs	r4, #4
 80008d4:	43a3      	bics	r3, r4
 80008d6:	008c      	lsls	r4, r1, #2
 80008d8:	2504      	movs	r5, #4
 80008da:	402c      	ands	r4, r5
 80008dc:	431c      	orrs	r4, r3
 80008de:	6014      	str	r4, [r2, #0]
 80008e0:	7c00      	ldrb	r0, [r0, #16]
 80008e2:	f004 ff0a 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80008e6:	bd31      	pop	{r0, r4, r5, pc}

080008e8 <PE_Get_RxEvent>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0001      	movs	r1, r0
 80008ec:	2014      	movs	r0, #20
 80008ee:	f3ef 8210 	mrs	r2, PRIMASK
 80008f2:	b672      	cpsid	i
 80008f4:	233c      	movs	r3, #60	@ 0x3c
 80008f6:	5ccc      	ldrb	r4, [r1, r3]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d029      	beq.n	8000950 <PE_Get_RxEvent+0x68>
 80008fc:	2393      	movs	r3, #147	@ 0x93
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18cb      	adds	r3, r1, r3
 8000902:	5d1d      	ldrb	r5, [r3, r4]
 8000904:	066d      	lsls	r5, r5, #25
 8000906:	d401      	bmi.n	800090c <PE_Get_RxEvent+0x24>
 8000908:	2003      	movs	r0, #3
 800090a:	e021      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800090c:	2584      	movs	r5, #132	@ 0x84
 800090e:	006d      	lsls	r5, r5, #1
 8000910:	436c      	muls	r4, r5
 8000912:	190c      	adds	r4, r1, r4
 8000914:	3ccb      	subs	r4, #203	@ 0xcb
 8000916:	638c      	str	r4, [r1, #56]	@ 0x38
 8000918:	7825      	ldrb	r5, [r4, #0]
 800091a:	7864      	ldrb	r4, [r4, #1]
 800091c:	0224      	lsls	r4, r4, #8
 800091e:	192c      	adds	r4, r5, r4
 8000920:	868c      	strh	r4, [r1, #52]	@ 0x34
 8000922:	000c      	movs	r4, r1
 8000924:	3430      	adds	r4, #48	@ 0x30
 8000926:	253c      	movs	r5, #60	@ 0x3c
 8000928:	5d49      	ldrb	r1, [r1, r5]
 800092a:	5c59      	ldrb	r1, [r3, r1]
 800092c:	06c9      	lsls	r1, r1, #27
 800092e:	0ec9      	lsrs	r1, r1, #27
 8000930:	2901      	cmp	r1, #1
 8000932:	d004      	beq.n	800093e <PE_Get_RxEvent+0x56>
 8000934:	2902      	cmp	r1, #2
 8000936:	d005      	beq.n	8000944 <PE_Get_RxEvent+0x5c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d006      	beq.n	800094a <PE_Get_RxEvent+0x62>
 800093c:	e008      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800093e:	2011      	movs	r0, #17
 8000940:	2100      	movs	r1, #0
 8000942:	e004      	b.n	800094e <PE_Get_RxEvent+0x66>
 8000944:	2012      	movs	r0, #18
 8000946:	2101      	movs	r1, #1
 8000948:	e001      	b.n	800094e <PE_Get_RxEvent+0x66>
 800094a:	2013      	movs	r0, #19
 800094c:	2102      	movs	r1, #2
 800094e:	7021      	strb	r1, [r4, #0]
 8000950:	f382 8810 	msr	PRIMASK, r2
 8000954:	bd30      	pop	{r4, r5, pc}

08000956 <PE_Clear_RxEvent>:
 8000956:	b510      	push	{r4, lr}
 8000958:	0001      	movs	r1, r0
 800095a:	f3ef 8010 	mrs	r0, PRIMASK
 800095e:	b672      	cpsid	i
 8000960:	223c      	movs	r2, #60	@ 0x3c
 8000962:	5c8a      	ldrb	r2, [r1, r2]
 8000964:	2a00      	cmp	r2, #0
 8000966:	d014      	beq.n	8000992 <PE_Clear_RxEvent+0x3c>
 8000968:	1e53      	subs	r3, r2, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4acb      	ldr	r2, [pc, #812]	@ (8000c9c <.text_56>)
 800096e:	188c      	adds	r4, r1, r2
 8000970:	2200      	movs	r2, #0
 8000972:	54e2      	strb	r2, [r4, r3]
 8000974:	1e5b      	subs	r3, r3, #1
 8000976:	419b      	sbcs	r3, r3
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	5ce4      	ldrb	r4, [r4, r3]
 800097c:	0664      	lsls	r4, r4, #25
 800097e:	d506      	bpl.n	800098e <PE_Clear_RxEvent+0x38>
 8000980:	1c5b      	adds	r3, r3, #1
 8000982:	223c      	movs	r2, #60	@ 0x3c
 8000984:	548b      	strb	r3, [r1, r2]
 8000986:	f380 8810 	msr	PRIMASK, r0
 800098a:	7c08      	ldrb	r0, [r1, #16]
 800098c:	e168      	b.n	8000c60 <.text_54>
 800098e:	233c      	movs	r3, #60	@ 0x3c
 8000990:	54ca      	strb	r2, [r1, r3]
 8000992:	f380 8810 	msr	PRIMASK, r0
 8000996:	bd10      	pop	{r4, pc}

08000998 <.text_36>:
 8000998:	00000302 	.word	0x00000302

0800099c <.text_37>:
 800099c:	00000703 	.word	0x00000703

080009a0 <PE_PRL_Control_RxEvent>:
 80009a0:	492c      	ldr	r1, [pc, #176]	@ (8000a54 <.text_43>)
 80009a2:	0080      	lsls	r0, r0, #2
 80009a4:	580a      	ldr	r2, [r1, r0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f3ef 8110 	mrs	r1, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	233c      	movs	r3, #60	@ 0x3c
 80009b0:	5cd2      	ldrb	r2, [r2, r3]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d000      	beq.n	80009b8 <PE_PRL_Control_RxEvent+0x18>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f381 8810 	msr	PRIMASK, r1
 80009bc:	4770      	bx	lr
	...

080009c0 <.text_39>:
 80009c0:	0000025f 	.word	0x0000025f

080009c4 <.text_40>:
 80009c4:	00000704 	.word	0x00000704

080009c8 <PE_Convert_SOPRxEvent>:
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d003      	beq.n	80009d4 <PE_Convert_SOPRxEvent+0xc>
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d005      	beq.n	80009dc <PE_Convert_SOPRxEvent+0x14>
 80009d0:	d302      	bcc.n	80009d8 <PE_Convert_SOPRxEvent+0x10>
 80009d2:	e005      	b.n	80009e0 <PE_Convert_SOPRxEvent+0x18>
 80009d4:	2011      	movs	r0, #17
 80009d6:	4770      	bx	lr
 80009d8:	2012      	movs	r0, #18
 80009da:	4770      	bx	lr
 80009dc:	2013      	movs	r0, #19
 80009de:	4770      	bx	lr
 80009e0:	2014      	movs	r0, #20
 80009e2:	4770      	bx	lr

080009e4 <PE_Check_AMSConflict>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0005      	movs	r5, r0
 80009e8:	2400      	movs	r4, #0
 80009ea:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80009ec:	49b7      	ldr	r1, [pc, #732]	@ (8000ccc <.text_58>)
 80009ee:	4001      	ands	r1, r0
 80009f0:	290d      	cmp	r1, #13
 80009f2:	d101      	bne.n	80009f8 <PE_Check_AMSConflict+0x14>
 80009f4:	2010      	movs	r0, #16
 80009f6:	e01b      	b.n	8000a30 <PE_Check_AMSConflict+0x4c>
 80009f8:	2603      	movs	r6, #3
 80009fa:	200f      	movs	r0, #15
 80009fc:	7f29      	ldrb	r1, [r5, #28]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d011      	beq.n	8000a26 <PE_Check_AMSConflict+0x42>
 8000a02:	1e49      	subs	r1, r1, #1
 8000a04:	2901      	cmp	r1, #1
 8000a06:	d912      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a08:	1e89      	subs	r1, r1, #2
 8000a0a:	d011      	beq.n	8000a30 <PE_Check_AMSConflict+0x4c>
 8000a0c:	1e49      	subs	r1, r1, #1
 8000a0e:	d01d      	beq.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a10:	1e49      	subs	r1, r1, #1
 8000a12:	2909      	cmp	r1, #9
 8000a14:	d90b      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a16:	390b      	subs	r1, #11
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d908      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a1c:	1e89      	subs	r1, r1, #2
 8000a1e:	d004      	beq.n	8000a2a <PE_Check_AMSConflict+0x46>
 8000a20:	394d      	subs	r1, #77	@ 0x4d
 8000a22:	d004      	beq.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a24:	e006      	b.n	8000a34 <PE_Check_AMSConflict+0x50>
 8000a26:	746e      	strb	r6, [r5, #17]
 8000a28:	e011      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2a:	7468      	strb	r0, [r5, #17]
 8000a2c:	e00f      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2e:	2011      	movs	r0, #17
 8000a30:	7468      	strb	r0, [r5, #17]
 8000a32:	e00b      	b.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a34:	215c      	movs	r1, #92	@ 0x5c
 8000a36:	7c28      	ldrb	r0, [r5, #16]
 8000a38:	f7ff fd22 	bl	8000480 <USBPD_PE_Notification>
 8000a3c:	746e      	strb	r6, [r5, #17]
 8000a3e:	6868      	ldr	r0, [r5, #4]
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	49c4      	ldr	r1, [pc, #784]	@ (8000d54 <.text_62>)
 8000a44:	4001      	ands	r1, r0
 8000a46:	0230      	lsls	r0, r6, #8
 8000a48:	4281      	cmp	r1, r0
 8000a4a:	d000      	beq.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a4c:	2415      	movs	r4, #21
 8000a4e:	0020      	movs	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a54 <.text_43>:
 8000a54:	20000224 	.word	0x20000224

08000a58 <PE_PRL_ResetReceived>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	48be      	ldr	r0, [pc, #760]	@ (8000d58 <.text_63>)
 8000a5e:	00a2      	lsls	r2, r4, #2
 8000a60:	5885      	ldr	r5, [r0, r2]
 8000a62:	2905      	cmp	r1, #5
 8000a64:	d115      	bne.n	8000a92 <PE_PRL_ResetReceived+0x3a>
 8000a66:	6868      	ldr	r0, [r5, #4]
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	4391      	bics	r1, r2
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6968      	ldr	r0, [r5, #20]
 8000a72:	49ba      	ldr	r1, [pc, #744]	@ (8000d5c <.text_64>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	0150      	lsls	r0, r2, #5
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6168      	str	r0, [r5, #20]
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	2132      	movs	r1, #50	@ 0x32
 8000a80:	5468      	strb	r0, [r5, r1]
 8000a82:	2000      	movs	r0, #0
 8000a84:	213c      	movs	r1, #60	@ 0x3c
 8000a86:	5468      	strb	r0, [r5, r1]
 8000a88:	211e      	movs	r1, #30
 8000a8a:	7c28      	ldrb	r0, [r5, #16]
 8000a8c:	f7ff fcf8 	bl	8000480 <USBPD_PE_Notification>
 8000a90:	e004      	b.n	8000a9c <PE_PRL_ResetReceived+0x44>
 8000a92:	6968      	ldr	r0, [r5, #20]
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	6169      	str	r1, [r5, #20]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	68a9      	ldr	r1, [r5, #8]
 8000aa0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000aa2:	4788      	blx	r1
 8000aa4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000aa8 <.text_45>:
 8000aa8:	0000025d 	.word	0x0000025d

08000aac <.text_46>:
 8000aac:	00000385 	.word	0x00000385

08000ab0 <PE_PRL_BistCompleted>:
 8000ab0:	4770      	bx	lr

08000ab2 <PE_Reset_HardReset>:
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	2032      	movs	r0, #50	@ 0x32
 8000ab8:	5c20      	ldrb	r0, [r4, r0]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d003      	beq.n	8000ac6 <PE_Reset_HardReset+0x14>
 8000abe:	215b      	movs	r1, #91	@ 0x5b
 8000ac0:	7c20      	ldrb	r0, [r4, #16]
 8000ac2:	f7ff fcdd 	bl	8000480 <USBPD_PE_Notification>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 f82c 	bl	8000b24 <PE_Reset_ZI>
 8000acc:	2503      	movs	r5, #3
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	6843      	ldr	r3, [r0, #4]
 8000ad2:	402b      	ands	r3, r5
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	6861      	ldr	r1, [r4, #4]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	074a      	lsls	r2, r1, #29
 8000adc:	0fd2      	lsrs	r2, r2, #31
 8000ade:	d008      	beq.n	8000af2 <PE_Reset_HardReset+0x40>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f004 fdee 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	2208      	movs	r2, #8
 8000aec:	430a      	orrs	r2, r1
 8000aee:	6002      	str	r2, [r0, #0]
 8000af0:	e007      	b.n	8000b02 <PE_Reset_HardReset+0x50>
 8000af2:	2100      	movs	r1, #0
 8000af4:	f004 fde5 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000af8:	6860      	ldr	r0, [r4, #4]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4391      	bics	r1, r2
 8000b00:	6001      	str	r1, [r0, #0]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	6840      	ldr	r0, [r0, #4]
 8000b06:	4005      	ands	r5, r0
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4391      	bics	r1, r2
 8000b10:	430d      	orrs	r5, r1
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	7c20      	ldrb	r0, [r4, #16]
 8000b18:	f004 fe44 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8000b1c:	7c20      	ldrb	r0, [r4, #16]
 8000b1e:	f005 f8ad 	bl	8005c7c <USBPD_PRL_Reset>
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Reset_ZI>:
 8000b24:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000b26:	0004      	movs	r4, r0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	6801      	ldr	r1, [r0, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	4391      	bics	r1, r2
 8000b34:	6001      	str	r1, [r0, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fc34 	bl	80013a6 <PE_SetPowerNegotiation>
 8000b3e:	2193      	movs	r1, #147	@ 0x93
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	0020      	movs	r0, r4
 8000b44:	3014      	adds	r0, #20
 8000b46:	f018 fe96 	bl	8019876 <__aeabi_memclr>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	aa01      	add	r2, sp, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	7c20      	ldrb	r0, [r4, #16]
 8000b52:	68a5      	ldr	r5, [r4, #8]
 8000b54:	69ad      	ldr	r5, [r5, #24]
 8000b56:	47a8      	blx	r5
 8000b58:	2080      	movs	r0, #128	@ 0x80
 8000b5a:	0440      	lsls	r0, r0, #17
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	2304      	movs	r3, #4
 8000b60:	466a      	mov	r2, sp
 8000b62:	2106      	movs	r1, #6
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	68a5      	ldr	r5, [r4, #8]
 8000b68:	69ad      	ldr	r5, [r5, #24]
 8000b6a:	47a8      	blx	r5
 8000b6c:	2503      	movs	r5, #3
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	6841      	ldr	r1, [r0, #4]
 8000b72:	4029      	ands	r1, r5
 8000b74:	7c20      	ldrb	r0, [r4, #16]
 8000b76:	f004 fde2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6840      	ldr	r0, [r0, #4]
 8000b7e:	4005      	ands	r5, r0
 8000b80:	6860      	ldr	r0, [r4, #4]
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	4a76      	ldr	r2, [pc, #472]	@ (8000d60 <.text_65>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	06a9      	lsls	r1, r5, #26
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	6001      	str	r1, [r0, #0]
 8000b8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b90 <PE_Reset_Counter>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	2103      	movs	r1, #3
 8000b94:	2298      	movs	r2, #152	@ 0x98
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	f018 fe6c 	bl	8019876 <__aeabi_memclr>
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <PE_Reset_StateMachine>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	2032      	movs	r0, #50	@ 0x32
 8000ba6:	5c20      	ldrb	r0, [r4, r0]
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d003      	beq.n	8000bb4 <PE_Reset_StateMachine+0x14>
 8000bac:	215b      	movs	r1, #91	@ 0x5b
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	f7ff fc66 	bl	8000480 <USBPD_PE_Notification>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f7ff ffb5 	bl	8000b24 <PE_Reset_ZI>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fbf2 	bl	80013a6 <PE_SetPowerNegotiation>
 8000bc2:	7c20      	ldrb	r0, [r4, #16]
 8000bc4:	f005 f85a 	bl	8005c7c <USBPD_PRL_Reset>
 8000bc8:	6860      	ldr	r0, [r4, #4]
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	2501      	movs	r5, #1
 8000bce:	08ca      	lsrs	r2, r1, #3
 8000bd0:	402a      	ands	r2, r5
 8000bd2:	078b      	lsls	r3, r1, #30
 8000bd4:	0f9b      	lsrs	r3, r3, #30
 8000bd6:	7c20      	ldrb	r0, [r4, #16]
 8000bd8:	0889      	lsrs	r1, r1, #2
 8000bda:	400d      	ands	r5, r1
 8000bdc:	d004      	beq.n	8000be8 <PE_Reset_StateMachine+0x48>
 8000bde:	2101      	movs	r1, #1
 8000be0:	f004 fd6f 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000be4:	2002      	movs	r0, #2
 8000be6:	e003      	b.n	8000bf0 <PE_Reset_StateMachine+0x50>
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fd6a 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000bee:	203e      	movs	r0, #62	@ 0x3e
 8000bf0:	7460      	strb	r0, [r4, #17]
 8000bf2:	bd31      	pop	{r0, r4, r5, pc}

08000bf4 <PE_ExtRevisionInteroperability>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4957      	ldr	r1, [pc, #348]	@ (8000d58 <.text_63>)
 8000bfa:	0083      	lsls	r3, r0, #2
 8000bfc:	58cb      	ldr	r3, [r1, r3]
 8000bfe:	685c      	ldr	r4, [r3, #4]
 8000c00:	6825      	ldr	r5, [r4, #0]
 8000c02:	2103      	movs	r1, #3
 8000c04:	2603      	movs	r6, #3
 8000c06:	402e      	ands	r6, r5
 8000c08:	42b2      	cmp	r2, r6
 8000c0a:	db00      	blt.n	8000c0e <PE_ExtRevisionInteroperability+0x1a>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	438d      	bics	r5, r1
 8000c10:	400a      	ands	r2, r1
 8000c12:	432a      	orrs	r2, r5
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	2503      	movs	r5, #3
 8000c1c:	4025      	ands	r5, r4
 8000c1e:	2d01      	cmp	r5, #1
 8000c20:	d101      	bne.n	8000c26 <PE_ExtRevisionInteroperability+0x32>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e000      	b.n	8000c28 <PE_ExtRevisionInteroperability+0x34>
 8000c26:	2520      	movs	r5, #32
 8000c28:	2620      	movs	r6, #32
 8000c2a:	43b4      	bics	r4, r6
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	6015      	str	r5, [r2, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4011      	ands	r1, r2
 8000c36:	f004 fd76 	bl	8005726 <USBPD_PRL_SetHeaderSpecification>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <PE_PRL_FastRoleSwapReception>:
 8000c3c:	4946      	ldr	r1, [pc, #280]	@ (8000d58 <.text_63>)
 8000c3e:	0082      	lsls	r2, r0, #2
 8000c40:	5889      	ldr	r1, [r1, r2]
 8000c42:	7f0a      	ldrb	r2, [r1, #28]
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d100      	bne.n	8000c4a <PE_PRL_FastRoleSwapReception+0xe>
 8000c48:	4770      	bx	lr
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	2410      	movs	r4, #16
 8000c52:	431c      	orrs	r4, r3
 8000c54:	6014      	str	r4, [r2, #0]
 8000c56:	694a      	ldr	r2, [r1, #20]
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]

08000c60 <.text_54>:
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000c64:	4788      	blx	r1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <PE_PRL_PostReceiveEvent>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d58 <.text_63>)
 8000c6c:	0080      	lsls	r0, r0, #2
 8000c6e:	5813      	ldr	r3, [r2, r0]
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	191a      	adds	r2, r3, r4
 8000c76:	4d09      	ldr	r5, [pc, #36]	@ (8000c9c <.text_56>)
 8000c78:	1952      	adds	r2, r2, r5
 8000c7a:	7815      	ldrb	r5, [r2, #0]
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d004      	beq.n	8000c8a <PE_PRL_PostReceiveEvent+0x22>
 8000c80:	1c64      	adds	r4, r4, #1
 8000c82:	b2e4      	uxtb	r4, r4
 8000c84:	2c01      	cmp	r4, #1
 8000c86:	d9f5      	bls.n	8000c74 <PE_PRL_PostReceiveEvent+0xc>
 8000c88:	bd30      	pop	{r4, r5, pc}
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	7010      	strb	r0, [r2, #0]
 8000c8e:	2001      	movs	r0, #1
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2401      	movs	r4, #1
 8000c94:	408c      	lsls	r4, r1
 8000c96:	431c      	orrs	r4, r3
 8000c98:	7014      	strb	r4, [r2, #0]
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <.text_56>:
 8000c9c:	0000024d 	.word	0x0000024d

08000ca0 <PE_PRL_PostReceiveEventError>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	492d      	ldr	r1, [pc, #180]	@ (8000d58 <.text_63>)
 8000ca4:	0080      	lsls	r0, r0, #2
 8000ca6:	5809      	ldr	r1, [r1, r0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	@ (8000d64 <.text_66>)
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	781c      	ldrb	r4, [r3, #0]
 8000cb6:	2560      	movs	r5, #96	@ 0x60
 8000cb8:	4025      	ands	r5, r4
 8000cba:	2d20      	cmp	r5, #32
 8000cbc:	d004      	beq.n	8000cc8 <PE_PRL_PostReceiveEventError+0x28>
 8000cbe:	1c52      	adds	r2, r2, #1
 8000cc0:	b2d3      	uxtb	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d3f2      	bcc.n	8000cac <PE_PRL_PostReceiveEventError+0xc>
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	7018      	strb	r0, [r3, #0]
 8000cca:	bd30      	pop	{r4, r5, pc}

08000ccc <.text_58>:
 8000ccc:	0000f01f 	.word	0x0000f01f

08000cd0 <PE_PRL_PostReceiveEventCopy>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <.text_63>)
 8000cd4:	0080      	lsls	r0, r0, #2
 8000cd6:	5813      	ldr	r3, [r2, r0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	181c      	adds	r4, r3, r0
 8000cde:	4d21      	ldr	r5, [pc, #132]	@ (8000d64 <.text_66>)
 8000ce0:	5d64      	ldrb	r4, [r4, r5]
 8000ce2:	2560      	movs	r5, #96	@ 0x60
 8000ce4:	4025      	ands	r5, r4
 8000ce6:	2d20      	cmp	r5, #32
 8000ce8:	d004      	beq.n	8000cf4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000cea:	1c52      	adds	r2, r2, #1
 8000cec:	b2d0      	uxtb	r0, r2
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d3f3      	bcc.n	8000cda <PE_PRL_PostReceiveEventCopy+0xa>
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}
 8000cf4:	2284      	movs	r2, #132	@ 0x84
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4350      	muls	r0, r2
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	303d      	adds	r0, #61	@ 0x3d
 8000cfe:	f018 fdaf 	bl	8019860 <__aeabi_memcpy>
 8000d02:	bd31      	pop	{r0, r4, r5, pc}

08000d04 <PE_PRL_PostReceiveEventComplete>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4914      	ldr	r1, [pc, #80]	@ (8000d58 <.text_63>)
 8000d08:	0082      	lsls	r2, r0, #2
 8000d0a:	5889      	ldr	r1, [r1, r2]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	18cb      	adds	r3, r1, r3
 8000d12:	4c14      	ldr	r4, [pc, #80]	@ (8000d64 <.text_66>)
 8000d14:	191b      	adds	r3, r3, r4
 8000d16:	781c      	ldrb	r4, [r3, #0]
 8000d18:	2560      	movs	r5, #96	@ 0x60
 8000d1a:	4025      	ands	r5, r4
 8000d1c:	2d20      	cmp	r5, #32
 8000d1e:	d003      	beq.n	8000d28 <PE_PRL_PostReceiveEventComplete+0x24>
 8000d20:	b2d3      	uxtb	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d3f3      	bcc.n	8000d0e <PE_PRL_PostReceiveEventComplete+0xa>
 8000d26:	bd31      	pop	{r0, r4, r5, pc}
 8000d28:	781c      	ldrb	r4, [r3, #0]
 8000d2a:	2540      	movs	r5, #64	@ 0x40
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	701d      	strb	r5, [r3, #0]
 8000d30:	233c      	movs	r3, #60	@ 0x3c
 8000d32:	5ccb      	ldrb	r3, [r1, r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <PE_PRL_PostReceiveEventComplete+0x38>
 8000d38:	233c      	movs	r3, #60	@ 0x3c
 8000d3a:	54ca      	strb	r2, [r1, r3]
 8000d3c:	6889      	ldr	r1, [r1, #8]
 8000d3e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000d40:	4788      	blx	r1
 8000d42:	bd31      	pop	{r0, r4, r5, pc}

08000d44 <PE_Get_UnchunkedSupport>:
 8000d44:	4904      	ldr	r1, [pc, #16]	@ (8000d58 <.text_63>)
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	5808      	ldr	r0, [r1, r0]
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	0181      	lsls	r1, r0, #6
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	4770      	bx	lr

08000d54 <.text_62>:
 8000d54:	00000704 	.word	0x00000704

08000d58 <.text_63>:
 8000d58:	20000224 	.word	0x20000224

08000d5c <.text_64>:
 8000d5c:	fffff9ff 	.word	0xfffff9ff

08000d60 <.text_65>:
 8000d60:	f3ffffff 	.word	0xf3ffffff

08000d64 <.text_66>:
 8000d64:	0000024d 	.word	0x0000024d

08000d68 <PE_SubStateMachine_Generic>:
 8000d68:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d6a:	b08d      	sub	sp, #52	@ 0x34
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9004      	str	r0, [sp, #16]
 8000d72:	2500      	movs	r5, #0
 8000d74:	9503      	str	r5, [sp, #12]
 8000d76:	2601      	movs	r6, #1
 8000d78:	2714      	movs	r7, #20
 8000d7a:	7c61      	ldrb	r1, [r4, #17]
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	d100      	bne.n	8000d82 <PE_SubStateMachine_Generic+0x1a>
 8000d80:	e195      	b.n	80010ae <PE_SubStateMachine_Generic+0x346>
 8000d82:	2918      	cmp	r1, #24
 8000d84:	d03f      	beq.n	8000e06 <PE_SubStateMachine_Generic+0x9e>
 8000d86:	2919      	cmp	r1, #25
 8000d88:	d050      	beq.n	8000e2c <PE_SubStateMachine_Generic+0xc4>
 8000d8a:	291d      	cmp	r1, #29
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x28>
 8000d8e:	e092      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x14e>
 8000d90:	2927      	cmp	r1, #39	@ 0x27
 8000d92:	d100      	bne.n	8000d96 <PE_SubStateMachine_Generic+0x2e>
 8000d94:	e0b0      	b.n	8000ef8 <PE_SubStateMachine_Generic+0x190>
 8000d96:	2928      	cmp	r1, #40	@ 0x28
 8000d98:	d100      	bne.n	8000d9c <PE_SubStateMachine_Generic+0x34>
 8000d9a:	e0b9      	b.n	8000f10 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2929      	cmp	r1, #41	@ 0x29
 8000d9e:	d100      	bne.n	8000da2 <PE_SubStateMachine_Generic+0x3a>
 8000da0:	e0c0      	b.n	8000f24 <PE_SubStateMachine_Generic+0x1bc>
 8000da2:	292c      	cmp	r1, #44	@ 0x2c
 8000da4:	d100      	bne.n	8000da8 <PE_SubStateMachine_Generic+0x40>
 8000da6:	e2bc      	b.n	8001322 <PE_SubStateMachine_Generic+0x5ba>
 8000da8:	2930      	cmp	r1, #48	@ 0x30
 8000daa:	d100      	bne.n	8000dae <PE_SubStateMachine_Generic+0x46>
 8000dac:	e1de      	b.n	800116c <PE_SubStateMachine_Generic+0x404>
 8000dae:	293a      	cmp	r1, #58	@ 0x3a
 8000db0:	d100      	bne.n	8000db4 <PE_SubStateMachine_Generic+0x4c>
 8000db2:	e28c      	b.n	80012ce <PE_SubStateMachine_Generic+0x566>
 8000db4:	293b      	cmp	r1, #59	@ 0x3b
 8000db6:	d100      	bne.n	8000dba <PE_SubStateMachine_Generic+0x52>
 8000db8:	e270      	b.n	800129c <PE_SubStateMachine_Generic+0x534>
 8000dba:	293c      	cmp	r1, #60	@ 0x3c
 8000dbc:	d100      	bne.n	8000dc0 <PE_SubStateMachine_Generic+0x58>
 8000dbe:	e247      	b.n	8001250 <PE_SubStateMachine_Generic+0x4e8>
 8000dc0:	294b      	cmp	r1, #75	@ 0x4b
 8000dc2:	d100      	bne.n	8000dc6 <PE_SubStateMachine_Generic+0x5e>
 8000dc4:	e114      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x288>
 8000dc6:	2963      	cmp	r1, #99	@ 0x63
 8000dc8:	d100      	bne.n	8000dcc <PE_SubStateMachine_Generic+0x64>
 8000dca:	e178      	b.n	80010be <PE_SubStateMachine_Generic+0x356>
 8000dcc:	2964      	cmp	r1, #100	@ 0x64
 8000dce:	d100      	bne.n	8000dd2 <PE_SubStateMachine_Generic+0x6a>
 8000dd0:	e1a0      	b.n	8001114 <PE_SubStateMachine_Generic+0x3ac>
 8000dd2:	2967      	cmp	r1, #103	@ 0x67
 8000dd4:	d100      	bne.n	8000dd8 <PE_SubStateMachine_Generic+0x70>
 8000dd6:	e120      	b.n	800101a <PE_SubStateMachine_Generic+0x2b2>
 8000dd8:	2968      	cmp	r1, #104	@ 0x68
 8000dda:	d100      	bne.n	8000dde <PE_SubStateMachine_Generic+0x76>
 8000ddc:	e138      	b.n	8001050 <PE_SubStateMachine_Generic+0x2e8>
 8000dde:	2974      	cmp	r1, #116	@ 0x74
 8000de0:	d100      	bne.n	8000de4 <PE_SubStateMachine_Generic+0x7c>
 8000de2:	e1f3      	b.n	80011cc <PE_SubStateMachine_Generic+0x464>
 8000de4:	2993      	cmp	r1, #147	@ 0x93
 8000de6:	d100      	bne.n	8000dea <PE_SubStateMachine_Generic+0x82>
 8000de8:	e0a6      	b.n	8000f38 <PE_SubStateMachine_Generic+0x1d0>
 8000dea:	2994      	cmp	r1, #148	@ 0x94
 8000dec:	d100      	bne.n	8000df0 <PE_SubStateMachine_Generic+0x88>
 8000dee:	e0a7      	b.n	8000f40 <PE_SubStateMachine_Generic+0x1d8>
 8000df0:	2995      	cmp	r1, #149	@ 0x95
 8000df2:	d100      	bne.n	8000df6 <PE_SubStateMachine_Generic+0x8e>
 8000df4:	e0bd      	b.n	8000f72 <PE_SubStateMachine_Generic+0x20a>
 8000df6:	2999      	cmp	r1, #153	@ 0x99
 8000df8:	d000      	beq.n	8000dfc <PE_SubStateMachine_Generic+0x94>
 8000dfa:	e297      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fd44 	bl	800088c <PE_Send_RESET>
 8000e04:	e220      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	0889      	lsrs	r1, r1, #2
 8000e0c:	400e      	ands	r6, r1
 8000e0e:	d002      	beq.n	8000e16 <PE_SubStateMachine_Generic+0xae>
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	0741      	lsls	r1, r0, #29
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	9000      	str	r0, [sp, #0]
 8000e18:	2319      	movs	r3, #25
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f000 fb76 	bl	8001510 <PE_Send_CtrlMessage>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d156      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000e28:	2007      	movs	r0, #7
 8000e2a:	e107      	b.n	800103c <PE_SubStateMachine_Generic+0x2d4>
 8000e2c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	2811      	cmp	r0, #17
 8000e32:	d13c      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e34:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8000e36:	0bc1      	lsrs	r1, r0, #15
 8000e38:	d11e      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e3a:	0441      	lsls	r1, r0, #17
 8000e3c:	0f49      	lsrs	r1, r1, #29
 8000e3e:	d01b      	beq.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e40:	06c0      	lsls	r0, r0, #27
 8000e42:	0ec0      	lsrs	r0, r0, #27
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d117      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e48:	008b      	lsls	r3, r1, #2
 8000e4a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8000e4c:	1c82      	adds	r2, r0, #2
 8000e4e:	2105      	movs	r1, #5
 8000e50:	7c20      	ldrb	r0, [r4, #16]
 8000e52:	68a6      	ldr	r6, [r4, #8]
 8000e54:	69b6      	ldr	r6, [r6, #24]
 8000e56:	47b0      	blx	r6
 8000e58:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	2814      	cmp	r0, #20
 8000e5e:	d004      	beq.n	8000e6a <PE_SubStateMachine_Generic+0x102>
 8000e60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8000e62:	700f      	strb	r7, [r1, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd76 	bl	8000956 <PE_Clear_RxEvent>
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	7460      	strb	r0, [r4, #17]
 8000e6e:	9504      	str	r5, [sp, #16]
 8000e70:	2107      	movs	r1, #7
 8000e72:	7c20      	ldrb	r0, [r4, #16]
 8000e74:	f7ff fb04 	bl	8000480 <USBPD_PE_Notification>
 8000e78:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8000e7a:	21f0      	movs	r1, #240	@ 0xf0
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	4001      	ands	r1, r0
 8000e80:	d115      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e82:	06c0      	lsls	r0, r0, #27
 8000e84:	0ec0      	lsrs	r0, r0, #27
 8000e86:	2804      	cmp	r0, #4
 8000e88:	d001      	beq.n	8000e8e <PE_SubStateMachine_Generic+0x126>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d10f      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e8e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	2814      	cmp	r0, #20
 8000e94:	d004      	beq.n	8000ea0 <PE_SubStateMachine_Generic+0x138>
 8000e96:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e98:	7007      	strb	r7, [r0, #0]
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff fd5b 	bl	8000956 <PE_Clear_RxEvent>
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	7460      	strb	r0, [r4, #17]
 8000ea4:	9504      	str	r5, [sp, #16]
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	7c20      	ldrb	r0, [r4, #16]
 8000eaa:	f7ff fae9 	bl	8000480 <USBPD_PE_Notification>
 8000eae:	8be0      	ldrh	r0, [r4, #30]
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0209      	lsls	r1, r1, #8
 8000eb4:	e099      	b.n	8000fea <PE_SubStateMachine_Generic+0x282>
 8000eb6:	9505      	str	r5, [sp, #20]
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	aa06      	add	r2, sp, #24
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	696d      	ldr	r5, [r5, #20]
 8000ec4:	47a8      	blx	r5
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	9805      	ldr	r0, [sp, #20]
 8000eca:	f000 fabf 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d002      	beq.n	8000ed8 <PE_SubStateMachine_Generic+0x170>
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	7460      	strb	r0, [r4, #17]
 8000ed6:	e22a      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	2003      	movs	r0, #3
 8000edc:	9001      	str	r0, [sp, #4]
 8000ede:	9805      	ldr	r0, [sp, #20]
 8000ee0:	0880      	lsrs	r0, r0, #2
 8000ee2:	9000      	str	r0, [sp, #0]
 8000ee4:	ab06      	add	r3, sp, #24
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb3b 	bl	8001566 <PE_Send_DataMessage>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	e165      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000ef8:	2012      	movs	r0, #18
 8000efa:	7720      	strb	r0, [r4, #28]
 8000efc:	2105      	movs	r1, #5
 8000efe:	7c20      	ldrb	r0, [r4, #16]
 8000f00:	f004 feab 	bl	8005c5a <USBDPD_PRL_BistCarrierEyeMode>
 8000f04:	2028      	movs	r0, #40	@ 0x28
 8000f06:	7460      	strb	r0, [r4, #17]
 8000f08:	484f      	ldr	r0, [pc, #316]	@ (8001048 <PE_SubStateMachine_Generic+0x2e0>)
 8000f0a:	83e0      	strh	r0, [r4, #30]
 8000f0c:	202d      	movs	r0, #45	@ 0x2d
 8000f0e:	e099      	b.n	8001044 <PE_SubStateMachine_Generic+0x2dc>
 8000f10:	8be0      	ldrh	r0, [r4, #30]
 8000f12:	03f1      	lsls	r1, r6, #15
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d10e      	bne.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f18:	2105      	movs	r1, #5
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f004 fea5 	bl	8005c6a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f20:	83e5      	strh	r5, [r4, #30]
 8000f22:	e191      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000f24:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000f26:	7800      	ldrb	r0, [r0, #0]
 8000f28:	2814      	cmp	r0, #20
 8000f2a:	d004      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f2c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000f2e:	7007      	strb	r7, [r0, #0]
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff fd10 	bl	8000956 <PE_Clear_RxEvent>
 8000f36:	e1fa      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f38:	0020      	movs	r0, r4
 8000f3a:	f000 f9fb 	bl	8001334 <PE_SubStateMachine_ReceiveDRS>
 8000f3e:	e1f6      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	0889      	lsrs	r1, r1, #2
 8000f46:	400e      	ands	r6, r1
 8000f48:	d002      	beq.n	8000f50 <PE_SubStateMachine_Generic+0x1e8>
 8000f4a:	6960      	ldr	r0, [r4, #20]
 8000f4c:	0741      	lsls	r1, r0, #29
 8000f4e:	0fc8      	lsrs	r0, r1, #31
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	2395      	movs	r3, #149	@ 0x95
 8000f54:	2209      	movs	r2, #9
 8000f56:	2100      	movs	r1, #0
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f000 fad9 	bl	8001510 <PE_Send_CtrlMessage>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ed      	bne.n	8000f3e <PE_SubStateMachine_Generic+0x1d6>
 8000f62:	2010      	movs	r0, #16
 8000f64:	7720      	strb	r0, [r4, #28]
 8000f66:	4839      	ldr	r0, [pc, #228]	@ (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8000f68:	83e0      	strh	r0, [r4, #30]
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	2122      	movs	r1, #34	@ 0x22
 8000f70:	e128      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000f72:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	2814      	cmp	r0, #20
 8000f78:	d035      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f7a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8000f7c:	21f0      	movs	r1, #240	@ 0xf0
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	4001      	ands	r1, r0
 8000f82:	d130      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f84:	211f      	movs	r1, #31
 8000f86:	231f      	movs	r3, #31
 8000f88:	4003      	ands	r3, r0
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d006      	beq.n	8000f9c <PE_SubStateMachine_Generic+0x234>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d008      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d006      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d015      	beq.n	8000fc6 <PE_SubStateMachine_Generic+0x25e>
 8000f9a:	e024      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 fa6d 	bl	800147c <PE_SwitchDataRole>
 8000fa2:	e008      	b.n	8000fb6 <PE_SubStateMachine_Generic+0x24e>
 8000fa4:	4001      	ands	r1, r0
 8000fa6:	290c      	cmp	r1, #12
 8000fa8:	d101      	bne.n	8000fae <PE_SubStateMachine_Generic+0x246>
 8000faa:	2126      	movs	r1, #38	@ 0x26
 8000fac:	e000      	b.n	8000fb0 <PE_SubStateMachine_Generic+0x248>
 8000fae:	2127      	movs	r1, #39	@ 0x27
 8000fb0:	7c20      	ldrb	r0, [r4, #16]
 8000fb2:	f7ff fa65 	bl	8000480 <USBPD_PE_Notification>
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	7460      	strb	r0, [r4, #17]
 8000fba:	9504      	str	r5, [sp, #16]
 8000fbc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	2814      	cmp	r0, #20
 8000fc2:	d10b      	bne.n	8000fdc <PE_SubStateMachine_Generic+0x274>
 8000fc4:	e00f      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fc6:	2128      	movs	r1, #40	@ 0x28
 8000fc8:	7c20      	ldrb	r0, [r4, #16]
 8000fca:	f7ff fa59 	bl	8000480 <USBPD_PE_Notification>
 8000fce:	2003      	movs	r0, #3
 8000fd0:	7460      	strb	r0, [r4, #17]
 8000fd2:	9504      	str	r5, [sp, #16]
 8000fd4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	2814      	cmp	r0, #20
 8000fda:	d004      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fdc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000fde:	7007      	strb	r7, [r0, #0]
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fcb8 	bl	8000956 <PE_Clear_RxEvent>
 8000fe6:	8be0      	ldrh	r0, [r4, #30]
 8000fe8:	03f1      	lsls	r1, r6, #15
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d12b      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 8000fee:	e12b      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	aa05      	add	r2, sp, #20
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	7c20      	ldrb	r0, [r4, #16]
 8000ff8:	68a5      	ldr	r5, [r4, #8]
 8000ffa:	696d      	ldr	r5, [r5, #20]
 8000ffc:	47a8      	blx	r5
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	2800      	cmp	r0, #0
 8001002:	d100      	bne.n	8001006 <PE_SubStateMachine_Generic+0x29e>
 8001004:	e192      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001006:	2000      	movs	r0, #0
 8001008:	9002      	str	r0, [sp, #8]
 800100a:	2003      	movs	r0, #3
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	9803      	ldr	r0, [sp, #12]
 8001010:	0880      	lsrs	r0, r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	ab05      	add	r3, sp, #20
 8001016:	220c      	movs	r2, #12
 8001018:	e154      	b.n	80012c4 <PE_SubStateMachine_Generic+0x55c>
 800101a:	6861      	ldr	r1, [r4, #4]
 800101c:	6809      	ldr	r1, [r1, #0]
 800101e:	0889      	lsrs	r1, r1, #2
 8001020:	4031      	ands	r1, r6
 8001022:	d000      	beq.n	8001026 <PE_SubStateMachine_Generic+0x2be>
 8001024:	2001      	movs	r0, #1
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	2368      	movs	r3, #104	@ 0x68
 800102a:	2218      	movs	r2, #24
 800102c:	2031      	movs	r0, #49	@ 0x31
 800102e:	5c21      	ldrb	r1, [r4, r0]
 8001030:	0020      	movs	r0, r4
 8001032:	f000 fa6d 	bl	8001510 <PE_Send_CtrlMessage>
 8001036:	2800      	cmp	r0, #0
 8001038:	d105      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 800103a:	200f      	movs	r0, #15
 800103c:	7720      	strb	r0, [r4, #28]
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8001040:	83e0      	strh	r0, [r4, #30]
 8001042:	201b      	movs	r0, #27
 8001044:	9004      	str	r0, [sp, #16]
 8001046:	e172      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001048:	0000802d 	.word	0x0000802d
 800104c:	0000801b 	.word	0x0000801b
 8001050:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001052:	7800      	ldrb	r0, [r0, #0]
 8001054:	2814      	cmp	r0, #20
 8001056:	d023      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001058:	2030      	movs	r0, #48	@ 0x30
 800105a:	5c20      	ldrb	r0, [r4, r0]
 800105c:	2131      	movs	r1, #49	@ 0x31
 800105e:	5c61      	ldrb	r1, [r4, r1]
 8001060:	4288      	cmp	r0, r1
 8001062:	d11d      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001064:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001066:	0bc1      	lsrs	r1, r0, #15
 8001068:	d11a      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 800106a:	0b01      	lsrs	r1, r0, #12
 800106c:	0749      	lsls	r1, r1, #29
 800106e:	d017      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001070:	06c0      	lsls	r0, r0, #27
 8001072:	0ec0      	lsrs	r0, r0, #27
 8001074:	280c      	cmp	r0, #12
 8001076:	d113      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001078:	2304      	movs	r3, #4
 800107a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800107c:	1c82      	adds	r2, r0, #2
 800107e:	2114      	movs	r1, #20
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a6      	ldr	r6, [r4, #8]
 8001084:	69b6      	ldr	r6, [r6, #24]
 8001086:	47b0      	blx	r6
 8001088:	2003      	movs	r0, #3
 800108a:	7460      	strb	r0, [r4, #17]
 800108c:	9504      	str	r5, [sp, #16]
 800108e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001090:	7800      	ldrb	r0, [r0, #0]
 8001092:	2814      	cmp	r0, #20
 8001094:	d004      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001096:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001098:	7007      	strb	r7, [r0, #0]
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fc5b 	bl	8000956 <PE_Clear_RxEvent>
 80010a0:	8be0      	ldrh	r0, [r4, #30]
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d108      	bne.n	80010bc <PE_SubStateMachine_Generic+0x354>
 80010aa:	2011      	movs	r0, #17
 80010ac:	e0cd      	b.n	800124a <PE_SubStateMachine_Generic+0x4e2>
 80010ae:	9500      	str	r5, [sp, #0]
 80010b0:	2303      	movs	r3, #3
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f000 fa2a 	bl	8001510 <PE_Send_CtrlMessage>
 80010bc:	e137      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80010be:	ab03      	add	r3, sp, #12
 80010c0:	48c9      	ldr	r0, [pc, #804]	@ (80013e8 <.text_73>)
 80010c2:	1822      	adds	r2, r4, r0
 80010c4:	2108      	movs	r1, #8
 80010c6:	7c20      	ldrb	r0, [r4, #16]
 80010c8:	68a7      	ldr	r7, [r4, #8]
 80010ca:	697f      	ldr	r7, [r7, #20]
 80010cc:	47b8      	blx	r7
 80010ce:	2119      	movs	r1, #25
 80010d0:	9803      	ldr	r0, [sp, #12]
 80010d2:	f000 f9bb 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d129      	bne.n	800112e <PE_SubStateMachine_Generic+0x3c6>
 80010da:	48c4      	ldr	r0, [pc, #784]	@ (80013ec <.text_74>)
 80010dc:	1826      	adds	r6, r4, r0
 80010de:	7035      	strb	r5, [r6, #0]
 80010e0:	7075      	strb	r5, [r6, #1]
 80010e2:	7c20      	ldrb	r0, [r4, #16]
 80010e4:	f7ff fe2e 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d103      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x38c>
 80010ec:	7870      	ldrb	r0, [r6, #1]
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	7071      	strb	r1, [r6, #1]
 80010f4:	9502      	str	r5, [sp, #8]
 80010f6:	2003      	movs	r0, #3
 80010f8:	9001      	str	r0, [sp, #4]
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	b280      	uxth	r0, r0
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	48bb      	ldr	r0, [pc, #748]	@ (80013f0 <.text_75>)
 8001104:	1823      	adds	r3, r4, r0
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f000 fb5e 	bl	80017cc <PE_Send_ExtendedMessage>
 8001110:	2148      	movs	r1, #72	@ 0x48
 8001112:	e057      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8001114:	ab03      	add	r3, sp, #12
 8001116:	48b4      	ldr	r0, [pc, #720]	@ (80013e8 <.text_73>)
 8001118:	1822      	adds	r2, r4, r0
 800111a:	2113      	movs	r1, #19
 800111c:	7c20      	ldrb	r0, [r4, #16]
 800111e:	68a7      	ldr	r7, [r4, #8]
 8001120:	697f      	ldr	r7, [r7, #20]
 8001122:	47b8      	blx	r7
 8001124:	2118      	movs	r1, #24
 8001126:	9803      	ldr	r0, [sp, #12]
 8001128:	f000 f990 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <PE_SubStateMachine_Generic+0x3ca>
 8001130:	e0fc      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001132:	48ae      	ldr	r0, [pc, #696]	@ (80013ec <.text_74>)
 8001134:	1826      	adds	r6, r4, r0
 8001136:	7035      	strb	r5, [r6, #0]
 8001138:	7075      	strb	r5, [r6, #1]
 800113a:	7c20      	ldrb	r0, [r4, #16]
 800113c:	f7ff fe02 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001140:	2800      	cmp	r0, #0
 8001142:	d103      	bne.n	800114c <PE_SubStateMachine_Generic+0x3e4>
 8001144:	7870      	ldrb	r0, [r6, #1]
 8001146:	2180      	movs	r1, #128	@ 0x80
 8001148:	4301      	orrs	r1, r0
 800114a:	7071      	strb	r1, [r6, #1]
 800114c:	9502      	str	r5, [sp, #8]
 800114e:	2003      	movs	r0, #3
 8001150:	9001      	str	r0, [sp, #4]
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	1d00      	adds	r0, r0, #4
 8001156:	b280      	uxth	r0, r0
 8001158:	9000      	str	r0, [sp, #0]
 800115a:	48a5      	ldr	r0, [pc, #660]	@ (80013f0 <.text_75>)
 800115c:	1823      	adds	r3, r4, r0
 800115e:	220f      	movs	r2, #15
 8001160:	2100      	movs	r1, #0
 8001162:	0020      	movs	r0, r4
 8001164:	f000 fb32 	bl	80017cc <PE_Send_ExtendedMessage>
 8001168:	2161      	movs	r1, #97	@ 0x61
 800116a:	e02b      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	489e      	ldr	r0, [pc, #632]	@ (80013e8 <.text_73>)
 8001170:	1822      	adds	r2, r4, r0
 8001172:	2109      	movs	r1, #9
 8001174:	7c20      	ldrb	r0, [r4, #16]
 8001176:	68a7      	ldr	r7, [r4, #8]
 8001178:	697f      	ldr	r7, [r7, #20]
 800117a:	47b8      	blx	r7
 800117c:	2107      	movs	r1, #7
 800117e:	9803      	ldr	r0, [sp, #12]
 8001180:	f000 f964 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001184:	2800      	cmp	r0, #0
 8001186:	d170      	bne.n	800126a <PE_SubStateMachine_Generic+0x502>
 8001188:	4998      	ldr	r1, [pc, #608]	@ (80013ec <.text_74>)
 800118a:	5465      	strb	r5, [r4, r1]
 800118c:	1860      	adds	r0, r4, r1
 800118e:	7045      	strb	r5, [r0, #1]
 8001190:	7c20      	ldrb	r0, [r4, #16]
 8001192:	f7ff fdd7 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001196:	2800      	cmp	r0, #0
 8001198:	d105      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x43e>
 800119a:	4894      	ldr	r0, [pc, #592]	@ (80013ec <.text_74>)
 800119c:	1820      	adds	r0, r4, r0
 800119e:	7841      	ldrb	r1, [r0, #1]
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7042      	strb	r2, [r0, #1]
 80011a6:	9502      	str	r5, [sp, #8]
 80011a8:	2003      	movs	r0, #3
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	9803      	ldr	r0, [sp, #12]
 80011ae:	1d00      	adds	r0, r0, #4
 80011b0:	b280      	uxth	r0, r0
 80011b2:	9000      	str	r0, [sp, #0]
 80011b4:	488e      	ldr	r0, [pc, #568]	@ (80013f0 <.text_75>)
 80011b6:	1823      	adds	r3, r4, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f000 fb05 	bl	80017cc <PE_Send_ExtendedMessage>
 80011c2:	214f      	movs	r1, #79	@ 0x4f
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	f7ff f95b 	bl	8000480 <USBPD_PE_Notification>
 80011ca:	e0b0      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80011cc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80011ce:	7800      	ldrb	r0, [r0, #0]
 80011d0:	2814      	cmp	r0, #20
 80011d2:	d034      	beq.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 80011d4:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80011d6:	0bc1      	lsrs	r1, r0, #15
 80011d8:	d11a      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011da:	0b01      	lsrs	r1, r0, #12
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	d017      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e0:	06c0      	lsls	r0, r0, #27
 80011e2:	0ec0      	lsrs	r0, r0, #27
 80011e4:	2805      	cmp	r0, #5
 80011e6:	d113      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e8:	2304      	movs	r3, #4
 80011ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80011ec:	1d02      	adds	r2, r0, #4
 80011ee:	210f      	movs	r1, #15
 80011f0:	7c20      	ldrb	r0, [r4, #16]
 80011f2:	68a6      	ldr	r6, [r4, #8]
 80011f4:	69b6      	ldr	r6, [r6, #24]
 80011f6:	47b0      	blx	r6
 80011f8:	2003      	movs	r0, #3
 80011fa:	7460      	strb	r0, [r4, #17]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001200:	7800      	ldrb	r0, [r0, #0]
 8001202:	2814      	cmp	r0, #20
 8001204:	d004      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 8001206:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001208:	700f      	strb	r7, [r1, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff fba3 	bl	8000956 <PE_Clear_RxEvent>
 8001210:	2034      	movs	r0, #52	@ 0x34
 8001212:	5c20      	ldrb	r0, [r4, r0]
 8001214:	06c0      	lsls	r0, r0, #27
 8001216:	0ec0      	lsrs	r0, r0, #27
 8001218:	2810      	cmp	r0, #16
 800121a:	d110      	bne.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 800121c:	2159      	movs	r1, #89	@ 0x59
 800121e:	7c20      	ldrb	r0, [r4, #16]
 8001220:	f7ff f92e 	bl	8000480 <USBPD_PE_Notification>
 8001224:	83e5      	strh	r5, [r4, #30]
 8001226:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001228:	7800      	ldrb	r0, [r0, #0]
 800122a:	2814      	cmp	r0, #20
 800122c:	d004      	beq.n	8001238 <PE_SubStateMachine_Generic+0x4d0>
 800122e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001230:	7007      	strb	r7, [r0, #0]
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff fb8f 	bl	8000956 <PE_Clear_RxEvent>
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	9504      	str	r5, [sp, #16]
 800123e:	8be0      	ldrh	r0, [r4, #30]
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	0209      	lsls	r1, r1, #8
 8001244:	4288      	cmp	r0, r1
 8001246:	d172      	bne.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	2003      	movs	r0, #3
 800124a:	7460      	strb	r0, [r4, #17]
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	e06e      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	4865      	ldr	r0, [pc, #404]	@ (80013e8 <.text_73>)
 8001254:	1822      	adds	r2, r4, r0
 8001256:	210d      	movs	r1, #13
 8001258:	7c20      	ldrb	r0, [r4, #16]
 800125a:	68a7      	ldr	r7, [r4, #8]
 800125c:	697f      	ldr	r7, [r7, #20]
 800125e:	47b8      	blx	r7
 8001260:	2104      	movs	r1, #4
 8001262:	9803      	ldr	r0, [sp, #12]
 8001264:	f000 f8f2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001268:	2800      	cmp	r0, #0
 800126a:	d15f      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 800126c:	485f      	ldr	r0, [pc, #380]	@ (80013ec <.text_74>)
 800126e:	1826      	adds	r6, r4, r0
 8001270:	7035      	strb	r5, [r6, #0]
 8001272:	7075      	strb	r5, [r6, #1]
 8001274:	7c20      	ldrb	r0, [r4, #16]
 8001276:	f7ff fd65 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800127a:	2800      	cmp	r0, #0
 800127c:	d103      	bne.n	8001286 <PE_SubStateMachine_Generic+0x51e>
 800127e:	7870      	ldrb	r0, [r6, #1]
 8001280:	2180      	movs	r1, #128	@ 0x80
 8001282:	4301      	orrs	r1, r0
 8001284:	7071      	strb	r1, [r6, #1]
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	2003      	movs	r0, #3
 800128a:	9001      	str	r0, [sp, #4]
 800128c:	9803      	ldr	r0, [sp, #12]
 800128e:	1d00      	adds	r0, r0, #4
 8001290:	b280      	uxth	r0, r0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4856      	ldr	r0, [pc, #344]	@ (80013f0 <.text_75>)
 8001296:	1823      	adds	r3, r4, r0
 8001298:	2207      	movs	r2, #7
 800129a:	e03d      	b.n	8001318 <PE_SubStateMachine_Generic+0x5b0>
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	ab03      	add	r3, sp, #12
 80012a0:	aa05      	add	r2, sp, #20
 80012a2:	210f      	movs	r1, #15
 80012a4:	7c20      	ldrb	r0, [r4, #16]
 80012a6:	68a5      	ldr	r5, [r4, #8]
 80012a8:	696d      	ldr	r5, [r5, #20]
 80012aa:	47a8      	blx	r5
 80012ac:	2104      	movs	r1, #4
 80012ae:	9803      	ldr	r0, [sp, #12]
 80012b0:	f000 f8cc 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d139      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	2003      	movs	r0, #3
 80012bc:	9001      	str	r0, [sp, #4]
 80012be:	9600      	str	r6, [sp, #0]
 80012c0:	ab05      	add	r3, sp, #20
 80012c2:	2205      	movs	r2, #5
 80012c4:	2100      	movs	r1, #0
 80012c6:	0020      	movs	r0, r4
 80012c8:	f000 f94d 	bl	8001566 <PE_Send_DataMessage>
 80012cc:	e02f      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4845      	ldr	r0, [pc, #276]	@ (80013e8 <.text_73>)
 80012d2:	1822      	adds	r2, r4, r0
 80012d4:	2111      	movs	r1, #17
 80012d6:	7c20      	ldrb	r0, [r4, #16]
 80012d8:	68a7      	ldr	r7, [r4, #8]
 80012da:	697f      	ldr	r7, [r7, #20]
 80012dc:	47b8      	blx	r7
 80012de:	2109      	movs	r1, #9
 80012e0:	9803      	ldr	r0, [sp, #12]
 80012e2:	f000 f8b3 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d120      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012ea:	4840      	ldr	r0, [pc, #256]	@ (80013ec <.text_74>)
 80012ec:	1826      	adds	r6, r4, r0
 80012ee:	7035      	strb	r5, [r6, #0]
 80012f0:	7075      	strb	r5, [r6, #1]
 80012f2:	7c20      	ldrb	r0, [r4, #16]
 80012f4:	f7ff fd26 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d103      	bne.n	8001304 <PE_SubStateMachine_Generic+0x59c>
 80012fc:	7870      	ldrb	r0, [r6, #1]
 80012fe:	2180      	movs	r1, #128	@ 0x80
 8001300:	4301      	orrs	r1, r0
 8001302:	7071      	strb	r1, [r6, #1]
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	2003      	movs	r0, #3
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	1d00      	adds	r0, r0, #4
 800130e:	b280      	uxth	r0, r0
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4837      	ldr	r0, [pc, #220]	@ (80013f0 <.text_75>)
 8001314:	1823      	adds	r3, r4, r0
 8001316:	2205      	movs	r2, #5
 8001318:	2100      	movs	r1, #0
 800131a:	0020      	movs	r0, r4
 800131c:	f000 fa56 	bl	80017cc <PE_Send_ExtendedMessage>
 8001320:	e005      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001322:	2150      	movs	r1, #80	@ 0x50
 8001324:	7c20      	ldrb	r0, [r4, #16]
 8001326:	f7ff f8ab 	bl	8000480 <USBPD_PE_Notification>
 800132a:	e78d      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 800132c:	7466      	strb	r6, [r4, #17]
 800132e:	9804      	ldr	r0, [sp, #16]
 8001330:	b00f      	add	sp, #60	@ 0x3c
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001334 <PE_SubStateMachine_ReceiveDRS>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	252a      	movs	r5, #42	@ 0x2a
 800133a:	7c20      	ldrb	r0, [r4, #16]
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8001340:	4788      	blx	r1
 8001342:	280a      	cmp	r0, #10
 8001344:	d002      	beq.n	800134c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001346:	280c      	cmp	r0, #12
 8001348:	d017      	beq.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 800134a:	e00d      	b.n	8001368 <PE_SubStateMachine_ReceiveDRS+0x34>
 800134c:	2000      	movs	r0, #0
 800134e:	9000      	str	r0, [sp, #0]
 8001350:	2303      	movs	r3, #3
 8001352:	2203      	movs	r2, #3
 8001354:	2100      	movs	r1, #0
 8001356:	0020      	movs	r0, r4
 8001358:	f000 f8da 	bl	8001510 <PE_Send_CtrlMessage>
 800135c:	2800      	cmp	r0, #0
 800135e:	d10d      	bne.n	800137c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001360:	0020      	movs	r0, r4
 8001362:	f000 f88b 	bl	800147c <PE_SwitchDataRole>
 8001366:	bd31      	pop	{r0, r4, r5, pc}
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	7800      	ldrb	r0, [r0, #0]
 800136c:	0780      	lsls	r0, r0, #30
 800136e:	0f80      	lsrs	r0, r0, #30
 8001370:	2802      	cmp	r0, #2
 8001372:	d102      	bne.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001374:	2001      	movs	r0, #1
 8001376:	7460      	strb	r0, [r4, #17]
 8001378:	bd31      	pop	{r0, r4, r5, pc}
 800137a:	7465      	strb	r5, [r4, #17]
 800137c:	bd31      	pop	{r0, r4, r5, pc}

0800137e <PE_UpdateTimer>:
 800137e:	b510      	push	{r4, lr}
 8001380:	0002      	movs	r2, r0
 8001382:	2080      	movs	r0, #128	@ 0x80
 8001384:	0200      	lsls	r0, r0, #8
 8001386:	0454      	lsls	r4, r2, #17
 8001388:	0c64      	lsrs	r4, r4, #17
 800138a:	42a1      	cmp	r1, r4
 800138c:	da00      	bge.n	8001390 <PE_UpdateTimer+0x12>
 800138e:	1a50      	subs	r0, r2, r1
 8001390:	b280      	uxth	r0, r0
 8001392:	bd10      	pop	{r4, pc}

08001394 <PE_CallHardResetCallback>:
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <PE_CallHardResetCallback+0xa>
 800139c:	4770      	bx	lr
 800139e:	b580      	push	{r7, lr}
 80013a0:	7c00      	ldrb	r0, [r0, #16]
 80013a2:	4798      	blx	r3
 80013a4:	bd01      	pop	{r0, pc}

080013a6 <PE_SetPowerNegotiation>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	055c      	lsls	r4, r3, #21
 80013ae:	0f64      	lsrs	r4, r4, #29
 80013b0:	42a1      	cmp	r1, r4
 80013b2:	d00b      	beq.n	80013cc <PE_SetPowerNegotiation+0x26>
 80013b4:	4c2e      	ldr	r4, [pc, #184]	@ (8001470 <.text_79>)
 80013b6:	401c      	ands	r4, r3
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	23e0      	movs	r3, #224	@ 0xe0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	400b      	ands	r3, r1
 80013c0:	4323      	orrs	r3, r4
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	215a      	movs	r1, #90	@ 0x5a
 80013c6:	7c00      	ldrb	r0, [r0, #16]
 80013c8:	f7ff f85a 	bl	8000480 <USBPD_PE_Notification>
 80013cc:	bd10      	pop	{r4, pc}

080013ce <USBPD_PE_ExecFastRoleSwapSignalling>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	4928      	ldr	r1, [pc, #160]	@ (8001474 <.text_80>)
 80013d2:	0082      	lsls	r2, r0, #2
 80013d4:	5889      	ldr	r1, [r1, r2]
 80013d6:	694a      	ldr	r2, [r1, #20]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4313      	orrs	r3, r2
 80013de:	614b      	str	r3, [r1, #20]
 80013e0:	6889      	ldr	r1, [r1, #8]
 80013e2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80013e4:	4788      	blx	r1
 80013e6:	bd01      	pop	{r0, pc}

080013e8 <.text_73>:
 80013e8:	00000267 	.word	0x00000267

080013ec <.text_74>:
 80013ec:	00000265 	.word	0x00000265

080013f0 <.text_75>:
 80013f0:	00000263 	.word	0x00000263

080013f4 <PE_CalculateMinTiming>:
 80013f4:	0001      	movs	r1, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	43c0      	mvns	r0, r0
 80013fa:	0c42      	lsrs	r2, r0, #17
 80013fc:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 80013fe:	4213      	tst	r3, r2
 8001400:	d001      	beq.n	8001406 <PE_CalculateMinTiming+0x12>
 8001402:	8c88      	ldrh	r0, [r1, #36]	@ 0x24
 8001404:	4010      	ands	r0, r2
 8001406:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001408:	4213      	tst	r3, r2
 800140a:	d006      	beq.n	800141a <PE_CalculateMinTiming+0x26>
 800140c:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 800140e:	4013      	ands	r3, r2
 8001410:	4298      	cmp	r0, r3
 8001412:	d302      	bcc.n	800141a <PE_CalculateMinTiming+0x26>
 8001414:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8001416:	0010      	movs	r0, r2
 8001418:	4008      	ands	r0, r1
 800141a:	4770      	bx	lr

0800141c <PE_SetPowerNegociation>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	6868      	ldr	r0, [r5, #4]
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	0540      	lsls	r0, r0, #21
 8001428:	0f40      	lsrs	r0, r0, #29
 800142a:	4284      	cmp	r4, r0
 800142c:	d003      	beq.n	8001436 <PE_SetPowerNegociation+0x1a>
 800142e:	215a      	movs	r1, #90	@ 0x5a
 8001430:	7c28      	ldrb	r0, [r5, #16]
 8001432:	f7ff f825 	bl	8000480 <USBPD_PE_Notification>
 8001436:	6868      	ldr	r0, [r5, #4]
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <.text_79>)
 800143c:	400a      	ands	r2, r1
 800143e:	0221      	lsls	r1, r4, #8
 8001440:	23e0      	movs	r3, #224	@ 0xe0
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	400b      	ands	r3, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	bd31      	pop	{r0, r4, r5, pc}

0800144c <PE_CheckDataSizeFromGetDataInfo>:
 800144c:	b51c      	push	{r2, r3, r4, lr}
 800144e:	0002      	movs	r2, r0
 8001450:	2000      	movs	r0, #0
 8001452:	428a      	cmp	r2, r1
 8001454:	d20a      	bcs.n	800146c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001456:	2018      	movs	r0, #24
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	bf00      	nop
 800145c:	a315      	add	r3, pc, #84	@ (adr r3, 80014b4 <.text_83>)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	4c04      	ldr	r4, [pc, #16]	@ (8001478 <.text_81>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	47a0      	blx	r4
 800146a:	2002      	movs	r0, #2
 800146c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001470 <.text_79>:
 8001470:	fffff8ff 	.word	0xfffff8ff

08001474 <.text_80>:
 8001474:	20000224 	.word	0x20000224

08001478 <.text_81>:
 8001478:	20000000 	.word	0x20000000

0800147c <PE_SwitchDataRole>:
 800147c:	b510      	push	{r4, lr}
 800147e:	0004      	movs	r4, r0
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	08d3      	lsrs	r3, r2, #3
 8001488:	400b      	ands	r3, r1
 800148a:	d107      	bne.n	800149c <PE_SwitchDataRole+0x20>
 800148c:	2308      	movs	r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	7c20      	ldrb	r0, [r4, #16]
 8001494:	f004 f93b 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 8001498:	2125      	movs	r1, #37	@ 0x25
 800149a:	e007      	b.n	80014ac <PE_SwitchDataRole+0x30>
 800149c:	2108      	movs	r1, #8
 800149e:	438a      	bics	r2, r1
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	7c20      	ldrb	r0, [r4, #16]
 80014a6:	f004 f932 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 80014aa:	2124      	movs	r1, #36	@ 0x24
 80014ac:	7c20      	ldrb	r0, [r4, #16]
 80014ae:	f7fe ffe7 	bl	8000480 <USBPD_PE_Notification>
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <.text_83>:
 80014b4:	61746144 	.word	0x61746144
 80014b8:	7a695320 	.word	0x7a695320
 80014bc:	73692065 	.word	0x73692065
 80014c0:	746f6e20 	.word	0x746f6e20
 80014c4:	726f6320 	.word	0x726f6320
 80014c8:	74636572 	.word	0x74636572
 80014cc:	00          	.byte	0x00
 80014cd:	00          	.byte	0x00
	...

080014d0 <USBPD_PE_SetTrace>:
 80014d0:	0001      	movs	r1, r0
 80014d2:	d100      	bne.n	80014d6 <USBPD_PE_SetTrace+0x6>
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <.text_5>)
 80014d6:	4906      	ldr	r1, [pc, #24]	@ (80014f0 <.text_6>)
 80014d8:	6008      	str	r0, [r1, #0]
 80014da:	4770      	bx	lr

080014dc <USBPD_PE_CheckLIB>:
 80014dc:	0001      	movs	r1, r0
 80014de:	2000      	movs	r0, #0
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <.text_7>)
 80014e2:	4291      	cmp	r1, r2
 80014e4:	d100      	bne.n	80014e8 <USBPD_PE_CheckLIB+0xc>
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
	...

080014ec <.text_5>:
 80014ec:	0800150f 	.word	0x0800150f

080014f0 <.text_6>:
 80014f0:	20000000 	.word	0x20000000

080014f4 <.text_7>:
 80014f4:	30410000 	.word	0x30410000

080014f8 <USBPD_PE_GetMemoryConsumption>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f004 f8df 	bl	80056bc <USBPD_PRL_GetMemoryConsumption>
 80014fe:	0004      	movs	r4, r0
 8001500:	f7fe fedd 	bl	80002be <USBPD_CAD_GetMemoryConsumption>
 8001504:	1820      	adds	r0, r4, r0
 8001506:	21e1      	movs	r1, #225	@ 0xe1
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	1840      	adds	r0, r0, r1
 800150c:	bd10      	pop	{r4, pc}

0800150e <PE_Trace_Empty>:
 800150e:	4770      	bx	lr

08001510 <PE_Send_CtrlMessage>:
 8001510:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001512:	2501      	movs	r5, #1
 8001514:	0004      	movs	r4, r0
 8001516:	000f      	movs	r7, r1
 8001518:	0016      	movs	r6, r2
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	0b00      	lsrs	r0, r0, #12
 8001520:	4028      	ands	r0, r5
 8001522:	d014      	beq.n	800154e <PE_Send_CtrlMessage+0x3e>
 8001524:	a808      	add	r0, sp, #32
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2002      	movs	r0, #2
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	48a2      	ldr	r0, [pc, #648]	@ (80017b8 <.text_5>)
 8001530:	1823      	adds	r3, r4, r0
 8001532:	0032      	movs	r2, r6
 8001534:	0039      	movs	r1, r7
 8001536:	7c20      	ldrb	r0, [r4, #16]
 8001538:	f004 f938 	bl	80057ac <USBPD_PRL_SendMessage>
 800153c:	2803      	cmp	r0, #3
 800153e:	d0ec      	beq.n	800151a <PE_Send_CtrlMessage+0xa>
 8001540:	0039      	movs	r1, r7
 8001542:	2810      	cmp	r0, #16
 8001544:	d00e      	beq.n	8001564 <PE_Send_CtrlMessage+0x54>
 8001546:	2e0d      	cmp	r6, #13
 8001548:	d104      	bne.n	8001554 <PE_Send_CtrlMessage+0x44>
 800154a:	2201      	movs	r2, #1
 800154c:	e003      	b.n	8001556 <PE_Send_CtrlMessage+0x46>
 800154e:	7460      	strb	r0, [r4, #17]
 8001550:	2010      	movs	r0, #16
 8001552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001554:	2200      	movs	r2, #0
 8001556:	466b      	mov	r3, sp
 8001558:	7a1b      	ldrb	r3, [r3, #8]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	f000 fc24 	bl	8001dac <PE_CheckSendMessageStatus>
 8001564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001566 <PE_Send_DataMessage>:
 8001566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	0004      	movs	r4, r0
 800156c:	2000      	movs	r0, #0
 800156e:	4e93      	ldr	r6, [pc, #588]	@ (80017bc <.text_6>)
 8001570:	e00c      	b.n	800158c <PE_Send_DataMessage+0x26>
 8001572:	2100      	movs	r1, #0
 8001574:	0082      	lsls	r2, r0, #2
 8001576:	18a2      	adds	r2, r4, r2
 8001578:	1855      	adds	r5, r2, r1
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	00cf      	lsls	r7, r1, #3
 800157e:	40fa      	lsrs	r2, r7
 8001580:	55aa      	strb	r2, [r5, r6]
 8001582:	1c49      	adds	r1, r1, #1
 8001584:	2904      	cmp	r1, #4
 8001586:	d3f5      	bcc.n	8001574 <PE_Send_DataMessage+0xe>
 8001588:	1d1b      	adds	r3, r3, #4
 800158a:	1c40      	adds	r0, r0, #1
 800158c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800158e:	4288      	cmp	r0, r1
 8001590:	d3ef      	bcc.n	8001572 <PE_Send_DataMessage+0xc>
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	04c1      	lsls	r1, r0, #19
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	d01f      	beq.n	80015dc <PE_Send_DataMessage+0x76>
 800159c:	a80c      	add	r0, sp, #48	@ 0x30
 800159e:	7800      	ldrb	r0, [r0, #0]
 80015a0:	9001      	str	r0, [sp, #4]
 80015a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80015a4:	0080      	lsls	r0, r0, #2
 80015a6:	1c80      	adds	r0, r0, #2
 80015a8:	b280      	uxth	r0, r0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	1eb0      	subs	r0, r6, #2
 80015ae:	1823      	adds	r3, r4, r0
 80015b0:	4668      	mov	r0, sp
 80015b2:	7c02      	ldrb	r2, [r0, #16]
 80015b4:	7b01      	ldrb	r1, [r0, #12]
 80015b6:	7c20      	ldrb	r0, [r4, #16]
 80015b8:	f004 f8f8 	bl	80057ac <USBPD_PRL_SendMessage>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d0e8      	beq.n	8001592 <PE_Send_DataMessage+0x2c>
 80015c0:	4669      	mov	r1, sp
 80015c2:	7b09      	ldrb	r1, [r1, #12]
 80015c4:	2810      	cmp	r0, #16
 80015c6:	d007      	beq.n	80015d8 <PE_Send_DataMessage+0x72>
 80015c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	0003      	movs	r3, r0
 80015d0:	2200      	movs	r2, #0
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fbea 	bl	8001dac <PE_CheckSendMessageStatus>
 80015d8:	b005      	add	sp, #20
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2010      	movs	r0, #16
 80015de:	e7fb      	b.n	80015d8 <PE_Send_DataMessage+0x72>

080015e0 <PE_Check_ExtendedMessage>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80015e6:	7881      	ldrb	r1, [r0, #2]
 80015e8:	78c0      	ldrb	r0, [r0, #3]
 80015ea:	0200      	lsls	r0, r0, #8
 80015ec:	1808      	adds	r0, r1, r0
 80015ee:	4974      	ldr	r1, [pc, #464]	@ (80017c0 <.text_7>)
 80015f0:	1861      	adds	r1, r4, r1
 80015f2:	8008      	strh	r0, [r1, #0]
 80015f4:	2234      	movs	r2, #52	@ 0x34
 80015f6:	5ca2      	ldrb	r2, [r4, r2]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	0ed2      	lsrs	r2, r2, #27
 80015fc:	708a      	strb	r2, [r1, #2]
 80015fe:	2501      	movs	r5, #1
 8001600:	0403      	lsls	r3, r0, #16
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	0403      	lsls	r3, r0, #16
 800160a:	0edb      	lsrs	r3, r3, #27
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d003      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001610:	0013      	movs	r3, r2
 8001612:	d001      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001614:	2034      	movs	r0, #52	@ 0x34
 8001616:	e09e      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001618:	05c6      	lsls	r6, r0, #23
 800161a:	0df6      	lsrs	r6, r6, #23
 800161c:	2300      	movs	r3, #0
 800161e:	0407      	lsls	r7, r0, #16
 8001620:	0fff      	lsrs	r7, r7, #31
 8001622:	d10d      	bne.n	8001640 <PE_Check_ExtendedMessage+0x60>
 8001624:	4867      	ldr	r0, [pc, #412]	@ (80017c4 <.text_8>)
 8001626:	5226      	strh	r6, [r4, r0]
 8001628:	4866      	ldr	r0, [pc, #408]	@ (80017c4 <.text_8>)
 800162a:	5a20      	ldrh	r0, [r4, r0]
 800162c:	4283      	cmp	r3, r0
 800162e:	d21b      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001630:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001632:	1d00      	adds	r0, r0, #4
 8001634:	5cc0      	ldrb	r0, [r0, r3]
 8001636:	4a64      	ldr	r2, [pc, #400]	@ (80017c8 <.text_9>)
 8001638:	18a2      	adds	r2, r4, r2
 800163a:	54d0      	strb	r0, [r2, r3]
 800163c:	1c5b      	adds	r3, r3, #1
 800163e:	e7f3      	b.n	8001628 <PE_Check_ExtendedMessage+0x48>
 8001640:	27f8      	movs	r7, #248	@ 0xf8
 8001642:	01ff      	lsls	r7, r7, #7
 8001644:	4007      	ands	r7, r0
 8001646:	d106      	bne.n	8001656 <PE_Check_ExtendedMessage+0x76>
 8001648:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800164a:	0440      	lsls	r0, r0, #17
 800164c:	0f40      	lsrs	r0, r0, #29
 800164e:	2807      	cmp	r0, #7
 8001650:	d30a      	bcc.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001652:	2e1a      	cmp	r6, #26
 8001654:	d908      	bls.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001656:	2a00      	cmp	r2, #0
 8001658:	d106      	bne.n	8001668 <PE_Check_ExtendedMessage+0x88>
 800165a:	485a      	ldr	r0, [pc, #360]	@ (80017c4 <.text_8>)
 800165c:	5a20      	ldrh	r0, [r4, r0]
 800165e:	42b0      	cmp	r0, r6
 8001660:	d202      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001662:	83e3      	strh	r3, [r4, #30]
 8001664:	2037      	movs	r0, #55	@ 0x37
 8001666:	e076      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001668:	7889      	ldrb	r1, [r1, #2]
 800166a:	2603      	movs	r6, #3
 800166c:	7f22      	ldrb	r2, [r4, #28]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d039      	beq.n	80016e6 <PE_Check_ExtendedMessage+0x106>
 8001672:	2901      	cmp	r1, #1
 8001674:	d008      	beq.n	8001688 <PE_Check_ExtendedMessage+0xa8>
 8001676:	2902      	cmp	r1, #2
 8001678:	d01c      	beq.n	80016b4 <PE_Check_ExtendedMessage+0xd4>
 800167a:	2905      	cmp	r1, #5
 800167c:	d02a      	beq.n	80016d4 <PE_Check_ExtendedMessage+0xf4>
 800167e:	2907      	cmp	r1, #7
 8001680:	d023      	beq.n	80016ca <PE_Check_ExtendedMessage+0xea>
 8001682:	290f      	cmp	r1, #15
 8001684:	d00b      	beq.n	800169e <PE_Check_ExtendedMessage+0xbe>
 8001686:	e094      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001688:	2319      	movs	r3, #25
 800168a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800168c:	1d02      	adds	r2, r0, #4
 800168e:	2108      	movs	r1, #8
 8001690:	7c20      	ldrb	r0, [r4, #16]
 8001692:	68a7      	ldr	r7, [r4, #8]
 8001694:	69bf      	ldr	r7, [r7, #24]
 8001696:	47b8      	blx	r7
 8001698:	7466      	strb	r6, [r4, #17]
 800169a:	2147      	movs	r1, #71	@ 0x47
 800169c:	e014      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 800169e:	2318      	movs	r3, #24
 80016a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016a2:	1d02      	adds	r2, r0, #4
 80016a4:	2113      	movs	r1, #19
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7466      	strb	r6, [r4, #17]
 80016b0:	2162      	movs	r1, #98	@ 0x62
 80016b2:	e009      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 80016b4:	2307      	movs	r3, #7
 80016b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016b8:	1d02      	adds	r2, r0, #4
 80016ba:	2109      	movs	r1, #9
 80016bc:	7c20      	ldrb	r0, [r4, #16]
 80016be:	68a7      	ldr	r7, [r4, #8]
 80016c0:	69bf      	ldr	r7, [r7, #24]
 80016c2:	47b8      	blx	r7
 80016c4:	7466      	strb	r6, [r4, #17]
 80016c6:	214e      	movs	r1, #78	@ 0x4e
 80016c8:	e2c7      	b.n	8001c5a <.text_21>
 80016ca:	231a      	movs	r3, #26
 80016cc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016ce:	1d02      	adds	r2, r0, #4
 80016d0:	210d      	movs	r1, #13
 80016d2:	e003      	b.n	80016dc <PE_Check_ExtendedMessage+0xfc>
 80016d4:	2309      	movs	r3, #9
 80016d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016d8:	1d02      	adds	r2, r0, #4
 80016da:	2111      	movs	r1, #17
 80016dc:	7c20      	ldrb	r0, [r4, #16]
 80016de:	68a7      	ldr	r7, [r4, #8]
 80016e0:	69bf      	ldr	r7, [r7, #24]
 80016e2:	47b8      	blx	r7
 80016e4:	e063      	b.n	80017ae <PE_Check_ExtendedMessage+0x1ce>
 80016e6:	1ec8      	subs	r0, r1, #3
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d862      	bhi.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 80016ec:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <PE_Check_ExtendedMessage+0x114>)
 80016ee:	5c12      	ldrb	r2, [r2, r0]
 80016f0:	4497      	add	pc, r2
 80016f2:	bf00      	nop
 80016f4:	46be280a 	.word	0x46be280a
 80016f8:	669884be 	.word	0x669884be
 80016fc:	006e      	.short	0x006e
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	8900      	ldrh	r0, [r0, #8]
 8001702:	0b00      	lsrs	r0, r0, #12
 8001704:	4228      	tst	r0, r5
 8001706:	d054      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001708:	2301      	movs	r3, #1
 800170a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800170c:	1d02      	adds	r2, r0, #4
 800170e:	2110      	movs	r1, #16
 8001710:	7c20      	ldrb	r0, [r4, #16]
 8001712:	68a5      	ldr	r5, [r4, #8]
 8001714:	69ad      	ldr	r5, [r5, #24]
 8001716:	47a8      	blx	r5
 8001718:	203a      	movs	r0, #58	@ 0x3a
 800171a:	e01c      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	8900      	ldrh	r0, [r0, #8]
 8001720:	0b00      	lsrs	r0, r0, #12
 8001722:	4228      	tst	r0, r5
 8001724:	d045      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001726:	2301      	movs	r3, #1
 8001728:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800172a:	1d02      	adds	r2, r0, #4
 800172c:	210e      	movs	r1, #14
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	68a5      	ldr	r5, [r4, #8]
 8001732:	69ad      	ldr	r5, [r5, #24]
 8001734:	47a8      	blx	r5
 8001736:	203b      	movs	r0, #59	@ 0x3b
 8001738:	e00d      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	8900      	ldrh	r0, [r0, #8]
 800173e:	0980      	lsrs	r0, r0, #6
 8001740:	4228      	tst	r0, r5
 8001742:	d036      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001744:	2302      	movs	r3, #2
 8001746:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001748:	1d02      	adds	r2, r0, #4
 800174a:	210c      	movs	r1, #12
 800174c:	7c20      	ldrb	r0, [r4, #16]
 800174e:	68a5      	ldr	r5, [r4, #8]
 8001750:	69ad      	ldr	r5, [r5, #24]
 8001752:	47a8      	blx	r5
 8001754:	203c      	movs	r0, #60	@ 0x3c
 8001756:	7460      	strb	r0, [r4, #17]
 8001758:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	8900      	ldrh	r0, [r0, #8]
 800175e:	0a80      	lsrs	r0, r0, #10
 8001760:	e00d      	b.n	800177e <PE_Check_ExtendedMessage+0x19e>
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	6905      	ldr	r5, [r0, #16]
 8001766:	2d00      	cmp	r5, #0
 8001768:	d024      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800176a:	4816      	ldr	r0, [pc, #88]	@ (80017c4 <.text_8>)
 800176c:	5a23      	ldrh	r3, [r4, r0]
 800176e:	4816      	ldr	r0, [pc, #88]	@ (80017c8 <.text_9>)
 8001770:	1822      	adds	r2, r4, r0
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	47a8      	blx	r5
 8001776:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	8900      	ldrh	r0, [r0, #8]
 800177c:	0a40      	lsrs	r0, r0, #9
 800177e:	4228      	tst	r0, r5
 8001780:	d017      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	6900      	ldr	r0, [r0, #16]
 8001786:	2800      	cmp	r0, #0
 8001788:	d109      	bne.n	800179e <PE_Check_ExtendedMessage+0x1be>
 800178a:	e012      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	8900      	ldrh	r0, [r0, #8]
 8001790:	0a40      	lsrs	r0, r0, #9
 8001792:	4228      	tst	r0, r5
 8001794:	d00e      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 8001796:	68a0      	ldr	r0, [r4, #8]
 8001798:	6900      	ldr	r0, [r0, #16]
 800179a:	2800      	cmp	r0, #0
 800179c:	d00a      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800179e:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <.text_8>)
 80017a0:	5a23      	ldrh	r3, [r4, r0]
 80017a2:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <.text_9>)
 80017a4:	1822      	adds	r2, r4, r0
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	68a5      	ldr	r5, [r4, #8]
 80017aa:	692d      	ldr	r5, [r5, #16]
 80017ac:	47a8      	blx	r5
 80017ae:	7466      	strb	r6, [r4, #17]
 80017b0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80017b2:	7465      	strb	r5, [r4, #17]
 80017b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080017b8 <.text_5>:
 80017b8:	00000263 	.word	0x00000263

080017bc <.text_6>:
 80017bc:	00000265 	.word	0x00000265

080017c0 <.text_7>:
 80017c0:	0000025a 	.word	0x0000025a

080017c4 <.text_8>:
 80017c4:	0000048e 	.word	0x0000048e

080017c8 <.text_9>:
 80017c8:	00000281 	.word	0x00000281

080017cc <PE_Send_ExtendedMessage>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80017d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	4668      	mov	r0, sp
 80017da:	7202      	strb	r2, [r0, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	04c1      	lsls	r1, r0, #19
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	d019      	beq.n	800181c <PE_Send_ExtendedMessage+0x50>
 80017e8:	9601      	str	r6, [sp, #4]
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	4668      	mov	r0, sp
 80017f0:	7a00      	ldrb	r0, [r0, #8]
 80017f2:	2280      	movs	r2, #128	@ 0x80
 80017f4:	4302      	orrs	r2, r0
 80017f6:	0029      	movs	r1, r5
 80017f8:	7c20      	ldrb	r0, [r4, #16]
 80017fa:	f003 ffd7 	bl	80057ac <USBPD_PRL_SendMessage>
 80017fe:	2803      	cmp	r0, #3
 8001800:	d0ed      	beq.n	80017de <PE_Send_ExtendedMessage+0x12>
 8001802:	0029      	movs	r1, r5
 8001804:	2810      	cmp	r0, #16
 8001806:	d007      	beq.n	8001818 <PE_Send_ExtendedMessage+0x4c>
 8001808:	aa0b      	add	r2, sp, #44	@ 0x2c
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	0003      	movs	r3, r0
 8001810:	2200      	movs	r2, #0
 8001812:	0020      	movs	r0, r4
 8001814:	f000 faca 	bl	8001dac <PE_CheckSendMessageStatus>
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2011      	movs	r0, #17
 800181e:	7460      	strb	r0, [r4, #17]
 8001820:	2010      	movs	r0, #16
 8001822:	e7f9      	b.n	8001818 <PE_Send_ExtendedMessage+0x4c>

08001824 <PE_SubStateMachine_ExtendedMessages>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	0004      	movs	r4, r0
 800182a:	2702      	movs	r7, #2
 800182c:	4889      	ldr	r0, [pc, #548]	@ (8001a54 <.text_12>)
 800182e:	1820      	adds	r0, r4, r0
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	2039      	movs	r0, #57	@ 0x39
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	466a      	mov	r2, sp
 8001838:	7211      	strb	r1, [r2, #8]
 800183a:	4a87      	ldr	r2, [pc, #540]	@ (8001a58 <.text_13>)
 800183c:	2500      	movs	r5, #0
 800183e:	2603      	movs	r6, #3
 8001840:	7c63      	ldrb	r3, [r4, #17]
 8001842:	2b31      	cmp	r3, #49	@ 0x31
 8001844:	d010      	beq.n	8001868 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001846:	2b33      	cmp	r3, #51	@ 0x33
 8001848:	d075      	beq.n	8001936 <PE_SubStateMachine_ExtendedMessages+0x112>
 800184a:	2b34      	cmp	r3, #52	@ 0x34
 800184c:	d07c      	beq.n	8001948 <PE_SubStateMachine_ExtendedMessages+0x124>
 800184e:	2b35      	cmp	r3, #53	@ 0x35
 8001850:	d100      	bne.n	8001854 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001852:	e0a8      	b.n	80019a6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001854:	2b36      	cmp	r3, #54	@ 0x36
 8001856:	d100      	bne.n	800185a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001858:	e0be      	b.n	80019d8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800185a:	2b37      	cmp	r3, #55	@ 0x37
 800185c:	d100      	bne.n	8001860 <PE_SubStateMachine_ExtendedMessages+0x3c>
 800185e:	e0be      	b.n	80019de <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001860:	2b38      	cmp	r3, #56	@ 0x38
 8001862:	d100      	bne.n	8001866 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001864:	e0ef      	b.n	8001a46 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001866:	e0f2      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001868:	487c      	ldr	r0, [pc, #496]	@ (8001a5c <.text_14>)
 800186a:	1820      	adds	r0, r4, r0
 800186c:	9004      	str	r0, [sp, #16]
 800186e:	4669      	mov	r1, sp
 8001870:	730d      	strb	r5, [r1, #12]
 8001872:	497b      	ldr	r1, [pc, #492]	@ (8001a60 <.text_15>)
 8001874:	5265      	strh	r5, [r4, r1]
 8001876:	7c20      	ldrb	r0, [r4, #16]
 8001878:	f7ff fa64 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800187c:	2801      	cmp	r0, #1
 800187e:	d107      	bne.n	8001890 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001880:	4878      	ldr	r0, [pc, #480]	@ (8001a64 <.text_16>)
 8001882:	1820      	adds	r0, r4, r0
 8001884:	7005      	strb	r5, [r0, #0]
 8001886:	7045      	strb	r5, [r0, #1]
 8001888:	4877      	ldr	r0, [pc, #476]	@ (8001a68 <.text_17>)
 800188a:	1820      	adds	r0, r4, r0
 800188c:	9004      	str	r0, [sp, #16]
 800188e:	e028      	b.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001890:	4976      	ldr	r1, [pc, #472]	@ (8001a6c <.text_18>)
 8001892:	1861      	adds	r1, r4, r1
 8001894:	72cd      	strb	r5, [r1, #11]
 8001896:	4975      	ldr	r1, [pc, #468]	@ (8001a6c <.text_18>)
 8001898:	1861      	adds	r1, r4, r1
 800189a:	730d      	strb	r5, [r1, #12]
 800189c:	7c20      	ldrb	r0, [r4, #16]
 800189e:	f7ff fa51 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d106      	bne.n	80018b4 <PE_SubStateMachine_ExtendedMessages+0x90>
 80018a6:	4871      	ldr	r0, [pc, #452]	@ (8001a6c <.text_18>)
 80018a8:	1820      	adds	r0, r4, r0
 80018aa:	7b01      	ldrb	r1, [r0, #12]
 80018ac:	466a      	mov	r2, sp
 80018ae:	7a12      	ldrb	r2, [r2, #8]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	7302      	strb	r2, [r0, #12]
 80018b4:	486a      	ldr	r0, [pc, #424]	@ (8001a60 <.text_15>)
 80018b6:	1820      	adds	r0, r4, r0
 80018b8:	8841      	ldrh	r1, [r0, #2]
 80018ba:	291b      	cmp	r1, #27
 80018bc:	d30e      	bcc.n	80018dc <PE_SubStateMachine_ExtendedMessages+0xb8>
 80018be:	486a      	ldr	r0, [pc, #424]	@ (8001a68 <.text_17>)
 80018c0:	1820      	adds	r0, r4, r0
 80018c2:	5d40      	ldrb	r0, [r0, r5]
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	5548      	strb	r0, [r1, r5]
 80018c8:	1c6d      	adds	r5, r5, #1
 80018ca:	2d1a      	cmp	r5, #26
 80018cc:	d209      	bcs.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80018ce:	e7f6      	b.n	80018be <PE_SubStateMachine_ExtendedMessages+0x9a>
 80018d0:	4965      	ldr	r1, [pc, #404]	@ (8001a68 <.text_17>)
 80018d2:	1861      	adds	r1, r4, r1
 80018d4:	5d49      	ldrb	r1, [r1, r5]
 80018d6:	9a00      	ldr	r2, [sp, #0]
 80018d8:	5551      	strb	r1, [r2, r5]
 80018da:	1c6d      	adds	r5, r5, #1
 80018dc:	8841      	ldrh	r1, [r0, #2]
 80018de:	428d      	cmp	r5, r1
 80018e0:	d3f6      	bcc.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0xac>
 80018e2:	2001      	movs	r0, #1
 80018e4:	6961      	ldr	r1, [r4, #20]
 80018e6:	0949      	lsrs	r1, r1, #5
 80018e8:	4001      	ands	r1, r0
 80018ea:	d00a      	beq.n	8001902 <PE_SubStateMachine_ExtendedMessages+0xde>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	0889      	lsrs	r1, r1, #2
 80018f2:	4001      	ands	r1, r0
 80018f4:	d002      	beq.n	80018fc <PE_SubStateMachine_ExtendedMessages+0xd8>
 80018f6:	4669      	mov	r1, sp
 80018f8:	7308      	strb	r0, [r1, #12]
 80018fa:	e001      	b.n	8001900 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80018fc:	4669      	mov	r1, sp
 80018fe:	730f      	strb	r7, [r1, #12]
 8001900:	2633      	movs	r6, #51	@ 0x33
 8001902:	4668      	mov	r0, sp
 8001904:	7b00      	ldrb	r0, [r0, #12]
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	4855      	ldr	r0, [pc, #340]	@ (8001a60 <.text_15>)
 800190c:	1820      	adds	r0, r4, r0
 800190e:	8840      	ldrh	r0, [r0, #2]
 8001910:	1d00      	adds	r0, r0, #4
 8001912:	b280      	uxth	r0, r0
 8001914:	9000      	str	r0, [sp, #0]
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4854      	ldr	r0, [pc, #336]	@ (8001a6c <.text_18>)
 800191a:	1820      	adds	r0, r4, r0
 800191c:	78c2      	ldrb	r2, [r0, #3]
 800191e:	2033      	movs	r0, #51	@ 0x33
 8001920:	5c21      	ldrb	r1, [r4, r0]
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff52 	bl	80017cc <PE_Send_ExtendedMessage>
 8001928:	2800      	cmp	r0, #0
 800192a:	d103      	bne.n	8001934 <PE_SubStateMachine_ExtendedMessages+0x110>
 800192c:	484f      	ldr	r0, [pc, #316]	@ (8001a6c <.text_18>)
 800192e:	1820      	adds	r0, r4, r0
 8001930:	7940      	ldrb	r0, [r0, #5]
 8001932:	7720      	strb	r0, [r4, #28]
 8001934:	e08b      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001936:	83e2      	strh	r2, [r4, #30]
 8001938:	271b      	movs	r7, #27
 800193a:	494c      	ldr	r1, [pc, #304]	@ (8001a6c <.text_18>)
 800193c:	1861      	adds	r1, r4, r1
 800193e:	78c9      	ldrb	r1, [r1, #3]
 8001940:	2904      	cmp	r1, #4
 8001942:	d151      	bne.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001944:	2074      	movs	r0, #116	@ 0x74
 8001946:	e04f      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001948:	4848      	ldr	r0, [pc, #288]	@ (8001a6c <.text_18>)
 800194a:	5a20      	ldrh	r0, [r4, r0]
 800194c:	0440      	lsls	r0, r0, #17
 800194e:	0f02      	lsrs	r2, r0, #28
 8001950:	211a      	movs	r1, #26
 8001952:	4351      	muls	r1, r2
 8001954:	4842      	ldr	r0, [pc, #264]	@ (8001a60 <.text_15>)
 8001956:	1820      	adds	r0, r4, r0
 8001958:	8843      	ldrh	r3, [r0, #2]
 800195a:	4299      	cmp	r1, r3
 800195c:	da01      	bge.n	8001962 <PE_SubStateMachine_ExtendedMessages+0x13e>
 800195e:	2a0a      	cmp	r2, #10
 8001960:	d301      	bcc.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001962:	7466      	strb	r6, [r4, #17]
 8001964:	e01d      	b.n	80019a2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001966:	1a5a      	subs	r2, r3, r1
 8001968:	2a1a      	cmp	r2, #26
 800196a:	d202      	bcs.n	8001972 <PE_SubStateMachine_ExtendedMessages+0x14e>
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001972:	231a      	movs	r3, #26
 8001974:	2200      	movs	r2, #0
 8001976:	e006      	b.n	8001986 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001978:	4e3b      	ldr	r6, [pc, #236]	@ (8001a68 <.text_17>)
 800197a:	19a6      	adds	r6, r4, r6
 800197c:	188f      	adds	r7, r1, r2
 800197e:	5df6      	ldrb	r6, [r6, r7]
 8001980:	9f00      	ldr	r7, [sp, #0]
 8001982:	54be      	strb	r6, [r7, r2]
 8001984:	1c52      	adds	r2, r2, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0x154>
 800198a:	4934      	ldr	r1, [pc, #208]	@ (8001a5c <.text_14>)
 800198c:	1863      	adds	r3, r4, r1
 800198e:	8842      	ldrh	r2, [r0, #2]
 8001990:	4836      	ldr	r0, [pc, #216]	@ (8001a6c <.text_18>)
 8001992:	5a20      	ldrh	r0, [r4, r0]
 8001994:	0440      	lsls	r0, r0, #17
 8001996:	0f01      	lsrs	r1, r0, #28
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f004 fba8 	bl	80060ee <USBPD_PRL_PrepareExtendedTxChunkSending>
 800199e:	2035      	movs	r0, #53	@ 0x35
 80019a0:	7460      	strb	r0, [r4, #17]
 80019a2:	2700      	movs	r7, #0
 80019a4:	e053      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019a6:	6960      	ldr	r0, [r4, #20]
 80019a8:	0681      	lsls	r1, r0, #26
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	d001      	beq.n	80019b2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80019ae:	2036      	movs	r0, #54	@ 0x36
 80019b0:	e000      	b.n	80019b4 <PE_SubStateMachine_ExtendedMessages+0x190>
 80019b2:	2003      	movs	r0, #3
 80019b4:	492a      	ldr	r1, [pc, #168]	@ (8001a60 <.text_15>)
 80019b6:	1866      	adds	r6, r4, r1
 80019b8:	9502      	str	r5, [sp, #8]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	8870      	ldrh	r0, [r6, #2]
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4826      	ldr	r0, [pc, #152]	@ (8001a5c <.text_14>)
 80019c2:	1823      	adds	r3, r4, r0
 80019c4:	3809      	subs	r0, #9
 80019c6:	1820      	adds	r0, r4, r0
 80019c8:	78c2      	ldrb	r2, [r0, #3]
 80019ca:	2030      	movs	r0, #48	@ 0x30
 80019cc:	5c21      	ldrb	r1, [r4, r0]
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fefc 	bl	80017cc <PE_Send_ExtendedMessage>
 80019d4:	8035      	strh	r5, [r6, #0]
 80019d6:	e03a      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019d8:	83e2      	strh	r2, [r4, #30]
 80019da:	271b      	movs	r7, #27
 80019dc:	e004      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019de:	8be0      	ldrh	r0, [r4, #30]
 80019e0:	020b      	lsls	r3, r1, #8
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d102      	bne.n	80019ec <PE_SubStateMachine_ExtendedMessages+0x1c8>
 80019e6:	200f      	movs	r0, #15
 80019e8:	7460      	strb	r0, [r4, #17]
 80019ea:	e030      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019ec:	83e2      	strh	r2, [r4, #30]
 80019ee:	271b      	movs	r7, #27
 80019f0:	481a      	ldr	r0, [pc, #104]	@ (8001a5c <.text_14>)
 80019f2:	1825      	adds	r5, r4, r0
 80019f4:	0029      	movs	r1, r5
 80019f6:	7c20      	ldrb	r0, [r4, #16]
 80019f8:	f004 fba1 	bl	800613e <USBPD_PRL_PrepareChunkRequest>
 80019fc:	6860      	ldr	r0, [r4, #4]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	04c1      	lsls	r1, r0, #19
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	d012      	beq.n	8001a2c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001a06:	2000      	movs	r0, #0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	9000      	str	r0, [sp, #0]
 8001a0e:	002b      	movs	r3, r5
 8001a10:	4816      	ldr	r0, [pc, #88]	@ (8001a6c <.text_18>)
 8001a12:	1820      	adds	r0, r4, r0
 8001a14:	7880      	ldrb	r0, [r0, #2]
 8001a16:	4669      	mov	r1, sp
 8001a18:	7a0a      	ldrb	r2, [r1, #8]
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	2030      	movs	r0, #48	@ 0x30
 8001a1e:	5c21      	ldrb	r1, [r4, r0]
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	f003 fec3 	bl	80057ac <USBPD_PRL_SendMessage>
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d0e8      	beq.n	80019fc <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001a2a:	e002      	b.n	8001a32 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	7460      	strb	r0, [r4, #17]
 8001a30:	2010      	movs	r0, #16
 8001a32:	2139      	movs	r1, #57	@ 0x39
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0003      	movs	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2030      	movs	r0, #48	@ 0x30
 8001a3c:	5c21      	ldrb	r1, [r4, r0]
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f000 f9b4 	bl	8001dac <PE_CheckSendMessageStatus>
 8001a44:	e003      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a46:	7466      	strb	r6, [r4, #17]
 8001a48:	2700      	movs	r7, #0
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <.text_15>)
 8001a4c:	5225      	strh	r5, [r4, r0]
 8001a4e:	0038      	movs	r0, r7
 8001a50:	b005      	add	sp, #20
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <.text_12>:
 8001a54:	00000267 	.word	0x00000267

08001a58 <.text_13>:
 8001a58:	0000801b 	.word	0x0000801b

08001a5c <.text_14>:
 8001a5c:	00000263 	.word	0x00000263

08001a60 <.text_15>:
 8001a60:	0000048e 	.word	0x0000048e

08001a64 <.text_16>:
 8001a64:	00000387 	.word	0x00000387

08001a68 <.text_17>:
 8001a68:	00000385 	.word	0x00000385

08001a6c <.text_18>:
 8001a6c:	0000025a 	.word	0x0000025a

08001a70 <PE_ManageRXEvent>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	2130      	movs	r1, #48	@ 0x30
 8001a74:	5c41      	ldrb	r1, [r0, r1]
 8001a76:	2231      	movs	r2, #49	@ 0x31
 8001a78:	5481      	strb	r1, [r0, r2]
 8001a7a:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 8001a7c:	0bca      	lsrs	r2, r1, #15
 8001a7e:	d002      	beq.n	8001a86 <PE_ManageRXEvent+0x16>
 8001a80:	f7ff fdae 	bl	80015e0 <PE_Check_ExtendedMessage>
 8001a84:	bd01      	pop	{r0, pc}
 8001a86:	22f0      	movs	r2, #240	@ 0xf0
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	d102      	bne.n	8001a94 <PE_ManageRXEvent+0x24>
 8001a8e:	f000 f805 	bl	8001a9c <PE_Check_ControlMessage>
 8001a92:	bd01      	pop	{r0, pc}
 8001a94:	f000 f8e5 	bl	8001c62 <PE_Check_DataMessage>
 8001a98:	bd01      	pop	{r0, pc}
	...

08001a9c <PE_Check_ControlMessage>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	272a      	movs	r7, #42	@ 0x2a
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	2134      	movs	r1, #52	@ 0x34
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	06c9      	lsls	r1, r1, #27
 8001aae:	0ec9      	lsrs	r1, r1, #27
 8001ab0:	1e49      	subs	r1, r1, #1
 8001ab2:	2917      	cmp	r1, #23
 8001ab4:	d900      	bls.n	8001ab8 <PE_Check_ControlMessage+0x1c>
 8001ab6:	e0c7      	b.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac0 <PE_Check_ControlMessage+0x24>)
 8001aba:	5c52      	ldrb	r2, [r2, r1]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	4497      	add	pc, r2
 8001ac0:	c0c00bcb 	.word	0xc0c00bcb
 8001ac4:	5b22c020 	.word	0x5b22c020
 8001ac8:	c0413449 	.word	0xc0413449
 8001acc:	bec3c319 	.word	0xbec3c319
 8001ad0:	9fb7936f 	.word	0x9fb7936f
 8001ad4:	bac383b0 	.word	0xbac383b0
 8001ad8:	6860      	ldr	r0, [r4, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	0880      	lsrs	r0, r0, #2
 8001ade:	4005      	ands	r5, r0
 8001ae0:	d000      	beq.n	8001ae4 <PE_Check_ControlMessage+0x48>
 8001ae2:	e0b9      	b.n	8001c58 <PE_Check_ControlMessage+0x1bc>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	7720      	strb	r0, [r4, #28]
 8001ae8:	212b      	movs	r1, #43	@ 0x2b
 8001aea:	7c20      	ldrb	r0, [r4, #16]
 8001aec:	f7fe fcc8 	bl	8000480 <USBPD_PE_Notification>
 8001af0:	2098      	movs	r0, #152	@ 0x98
 8001af2:	e0a7      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001af4:	7726      	strb	r6, [r4, #28]
 8001af6:	2132      	movs	r1, #50	@ 0x32
 8001af8:	7c20      	ldrb	r0, [r4, #16]
 8001afa:	f7fe fcc1 	bl	8000480 <USBPD_PE_Notification>
 8001afe:	2010      	movs	r0, #16
 8001b00:	e0a0      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b02:	2133      	movs	r1, #51	@ 0x33
 8001b04:	e09c      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001b06:	2006      	movs	r0, #6
 8001b08:	7720      	strb	r0, [r4, #28]
 8001b0a:	6860      	ldr	r0, [r4, #4]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	0881      	lsrs	r1, r0, #2
 8001b10:	4029      	ands	r1, r5
 8001b12:	d104      	bne.n	8001b1e <PE_Check_ControlMessage+0x82>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	08c9      	lsrs	r1, r1, #3
 8001b1a:	4029      	ands	r1, r5
 8001b1c:	d039      	beq.n	8001b92 <PE_Check_ControlMessage+0xf6>
 8001b1e:	210c      	movs	r1, #12
 8001b20:	7c20      	ldrb	r0, [r4, #16]
 8001b22:	f7fe fcad 	bl	8000480 <USBPD_PE_Notification>
 8001b26:	204c      	movs	r0, #76	@ 0x4c
 8001b28:	e08c      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6840      	ldr	r0, [r0, #4]
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	4028      	ands	r0, r5
 8001b32:	d00a      	beq.n	8001b4a <PE_Check_ControlMessage+0xae>
 8001b34:	2008      	movs	r0, #8
 8001b36:	7720      	strb	r0, [r4, #28]
 8001b38:	213c      	movs	r1, #60	@ 0x3c
 8001b3a:	7c20      	ldrb	r0, [r4, #16]
 8001b3c:	f7fe fca0 	bl	8000480 <USBPD_PE_Notification>
 8001b40:	2022      	movs	r0, #34	@ 0x22
 8001b42:	e07f      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b44:	68a0      	ldr	r0, [r4, #8]
 8001b46:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07d      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	7720      	strb	r0, [r4, #28]
 8001b50:	209d      	movs	r0, #157	@ 0x9d
 8001b52:	e077      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b54:	2123      	movs	r1, #35	@ 0x23
 8001b56:	7c20      	ldrb	r0, [r4, #16]
 8001b58:	f7fe fc92 	bl	8000480 <USBPD_PE_Notification>
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	05c0      	lsls	r0, r0, #23
 8001b60:	0f40      	lsrs	r0, r0, #29
 8001b62:	d001      	beq.n	8001b68 <PE_Check_ControlMessage+0xcc>
 8001b64:	200f      	movs	r0, #15
 8001b66:	e06d      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d06b      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b70:	2010      	movs	r0, #16
 8001b72:	7720      	strb	r0, [r4, #28]
 8001b74:	2093      	movs	r0, #147	@ 0x93
 8001b76:	e065      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	0541      	lsls	r1, r0, #21
 8001b7e:	0f49      	lsrs	r1, r1, #29
 8001b80:	2903      	cmp	r1, #3
 8001b82:	d163      	bne.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b84:	0881      	lsrs	r1, r0, #2
 8001b86:	4029      	ands	r1, r5
 8001b88:	d004      	beq.n	8001b94 <PE_Check_ControlMessage+0xf8>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	4029      	ands	r1, r5
 8001b92:	d05b      	beq.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b94:	2007      	movs	r0, #7
 8001b96:	7720      	strb	r0, [r4, #28]
 8001b98:	201d      	movs	r0, #29
 8001b9a:	7460      	strb	r0, [r4, #17]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	e04f      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	8901      	ldrh	r1, [r0, #8]
 8001ba4:	08c9      	lsrs	r1, r1, #3
 8001ba6:	4229      	tst	r1, r5
 8001ba8:	d053      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001baa:	6861      	ldr	r1, [r4, #4]
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	0889      	lsrs	r1, r1, #2
 8001bb0:	4029      	ands	r1, r5
 8001bb2:	d103      	bne.n	8001bbc <PE_Check_ControlMessage+0x120>
 8001bb4:	6840      	ldr	r0, [r0, #4]
 8001bb6:	08c0      	lsrs	r0, r0, #3
 8001bb8:	4028      	ands	r0, r5
 8001bba:	d04a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	7720      	strb	r0, [r4, #28]
 8001bc0:	2063      	movs	r0, #99	@ 0x63
 8001bc2:	7460      	strb	r0, [r4, #17]
 8001bc4:	2146      	movs	r1, #70	@ 0x46
 8001bc6:	e03b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001bc8:	6860      	ldr	r0, [r4, #4]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	0880      	lsrs	r0, r0, #2
 8001bce:	4028      	ands	r0, r5
 8001bd0:	d004      	beq.n	8001bdc <PE_Check_ControlMessage+0x140>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d03a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bdc:	205f      	movs	r0, #95	@ 0x5f
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	2064      	movs	r0, #100	@ 0x64
 8001be2:	7460      	strb	r0, [r4, #17]
 8001be4:	2160      	movs	r1, #96	@ 0x60
 8001be6:	e02b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	8909      	ldrh	r1, [r1, #8]
 8001bec:	0949      	lsrs	r1, r1, #5
 8001bee:	4229      	tst	r1, r5
 8001bf0:	d02f      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bf2:	7720      	strb	r0, [r4, #28]
 8001bf4:	214d      	movs	r1, #77	@ 0x4d
 8001bf6:	7c20      	ldrb	r0, [r4, #16]
 8001bf8:	f7fe fc42 	bl	8000480 <USBPD_PE_Notification>
 8001bfc:	2030      	movs	r0, #48	@ 0x30
 8001bfe:	e021      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c00:	6821      	ldr	r1, [r4, #0]
 8001c02:	8909      	ldrh	r1, [r1, #8]
 8001c04:	0889      	lsrs	r1, r1, #2
 8001c06:	4229      	tst	r1, r5
 8001c08:	d023      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c0a:	7720      	strb	r0, [r4, #28]
 8001c0c:	2149      	movs	r1, #73	@ 0x49
 8001c0e:	7c20      	ldrb	r0, [r4, #16]
 8001c10:	f7fe fc36 	bl	8000480 <USBPD_PE_Notification>
 8001c14:	6860      	ldr	r0, [r4, #4]
 8001c16:	6800      	ldr	r0, [r0, #0]
 8001c18:	0880      	lsrs	r0, r0, #2
 8001c1a:	4005      	ands	r5, r0
 8001c1c:	d011      	beq.n	8001c42 <PE_Check_ControlMessage+0x1a6>
 8001c1e:	202d      	movs	r0, #45	@ 0x2d
 8001c20:	e010      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	8900      	ldrh	r0, [r0, #8]
 8001c26:	09c0      	lsrs	r0, r0, #7
 8001c28:	4228      	tst	r0, r5
 8001c2a:	d012      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c2c:	202f      	movs	r0, #47	@ 0x2f
 8001c2e:	e009      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c30:	2009      	movs	r0, #9
 8001c32:	7720      	strb	r0, [r4, #28]
 8001c34:	e00d      	b.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c36:	200f      	movs	r0, #15
 8001c38:	7720      	strb	r0, [r4, #28]
 8001c3a:	204b      	movs	r0, #75	@ 0x4b
 8001c3c:	e002      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c3e:	2159      	movs	r1, #89	@ 0x59
 8001c40:	e00b      	b.n	8001c5a <.text_21>
 8001c42:	2011      	movs	r0, #17
 8001c44:	7460      	strb	r0, [r4, #17]
 8001c46:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	4006      	ands	r6, r0
 8001c4e:	2e02      	cmp	r6, #2
 8001c50:	d101      	bne.n	8001c56 <PE_Check_ControlMessage+0x1ba>
 8001c52:	7465      	strb	r5, [r4, #17]
 8001c54:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c56:	7467      	strb	r7, [r4, #17]
 8001c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c5a <.text_21>:
 8001c5a:	7c20      	ldrb	r0, [r4, #16]
 8001c5c:	f7fe fc10 	bl	8000480 <USBPD_PE_Notification>
 8001c60:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c62 <PE_Check_DataMessage>:
 8001c62:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c64:	0004      	movs	r4, r0
 8001c66:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001c68:	2501      	movs	r5, #1
 8001c6a:	2603      	movs	r6, #3
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	06c1      	lsls	r1, r0, #27
 8001c70:	0ec9      	lsrs	r1, r1, #27
 8001c72:	2901      	cmp	r1, #1
 8001c74:	d029      	beq.n	8001cca <PE_Check_DataMessage+0x68>
 8001c76:	2902      	cmp	r1, #2
 8001c78:	d00b      	beq.n	8001c92 <PE_Check_DataMessage+0x30>
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d03d      	beq.n	8001cfa <PE_Check_DataMessage+0x98>
 8001c7e:	2906      	cmp	r1, #6
 8001c80:	d079      	beq.n	8001d76 <PE_Check_DataMessage+0x114>
 8001c82:	2907      	cmp	r1, #7
 8001c84:	d100      	bne.n	8001c88 <PE_Check_DataMessage+0x26>
 8001c86:	e085      	b.n	8001d94 <PE_Check_DataMessage+0x132>
 8001c88:	290a      	cmp	r1, #10
 8001c8a:	d078      	beq.n	8001d7e <PE_Check_DataMessage+0x11c>
 8001c8c:	290f      	cmp	r1, #15
 8001c8e:	d06e      	beq.n	8001d6e <PE_Check_DataMessage+0x10c>
 8001c90:	e089      	b.n	8001da6 <PE_Check_DataMessage+0x144>
 8001c92:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001c94:	7881      	ldrb	r1, [r0, #2]
 8001c96:	78c2      	ldrb	r2, [r0, #3]
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	1889      	adds	r1, r1, r2
 8001c9c:	7902      	ldrb	r2, [r0, #4]
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	7940      	ldrb	r0, [r0, #5]
 8001ca4:	0600      	lsls	r0, r0, #24
 8001ca6:	1808      	adds	r0, r1, r0
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	6860      	ldr	r0, [r4, #4]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	0880      	lsrs	r0, r0, #2
 8001cb0:	4028      	ands	r0, r5
 8001cb2:	d07a      	beq.n	8001daa <PE_Check_DataMessage+0x148>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	2106      	movs	r1, #6
 8001cba:	7c20      	ldrb	r0, [r4, #16]
 8001cbc:	68a6      	ldr	r6, [r4, #8]
 8001cbe:	69b6      	ldr	r6, [r6, #24]
 8001cc0:	47b0      	blx	r6
 8001cc2:	7725      	strb	r5, [r4, #28]
 8001cc4:	84a7      	strh	r7, [r4, #36]	@ 0x24
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	e06e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	0889      	lsrs	r1, r1, #2
 8001cd0:	400d      	ands	r5, r1
 8001cd2:	d16a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001cd4:	0980      	lsrs	r0, r0, #6
 8001cd6:	4006      	ands	r6, r0
 8001cd8:	0031      	movs	r1, r6
 8001cda:	7c20      	ldrb	r0, [r4, #16]
 8001cdc:	f7fe ff8a 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8001ce0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001ce2:	0440      	lsls	r0, r0, #17
 8001ce4:	0f40      	lsrs	r0, r0, #29
 8001ce6:	0083      	lsls	r3, r0, #2
 8001ce8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001cea:	1c82      	adds	r2, r0, #2
 8001cec:	2104      	movs	r1, #4
 8001cee:	7c20      	ldrb	r0, [r4, #16]
 8001cf0:	68a5      	ldr	r5, [r4, #8]
 8001cf2:	69ad      	ldr	r5, [r5, #24]
 8001cf4:	47a8      	blx	r5
 8001cf6:	2044      	movs	r0, #68	@ 0x44
 8001cf8:	e056      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cfa:	9701      	str	r7, [sp, #4]
 8001cfc:	9700      	str	r7, [sp, #0]
 8001cfe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001d00:	7881      	ldrb	r1, [r0, #2]
 8001d02:	78c2      	ldrb	r2, [r0, #3]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	1889      	adds	r1, r1, r2
 8001d08:	7902      	ldrb	r2, [r0, #4]
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	1889      	adds	r1, r1, r2
 8001d0e:	7940      	ldrb	r0, [r0, #5]
 8001d10:	0600      	lsls	r0, r0, #24
 8001d12:	180d      	adds	r5, r1, r0
 8001d14:	466b      	mov	r3, sp
 8001d16:	aa01      	add	r2, sp, #4
 8001d18:	2103      	movs	r1, #3
 8001d1a:	7c20      	ldrb	r0, [r4, #16]
 8001d1c:	68a7      	ldr	r7, [r4, #8]
 8001d1e:	697f      	ldr	r7, [r7, #20]
 8001d20:	47b8      	blx	r7
 8001d22:	2104      	movs	r1, #4
 8001d24:	9800      	ldr	r0, [sp, #0]
 8001d26:	f7ff fb91 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d11d      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d2e:	6860      	ldr	r0, [r4, #4]
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	0540      	lsls	r0, r0, #21
 8001d34:	0f40      	lsrs	r0, r0, #29
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d117      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d3a:	9801      	ldr	r0, [sp, #4]
 8001d3c:	4938      	ldr	r1, [pc, #224]	@ (8001e20 <.text_24>)
 8001d3e:	4288      	cmp	r0, r1
 8001d40:	d113      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d42:	0f28      	lsrs	r0, r5, #28
 8001d44:	2805      	cmp	r0, #5
 8001d46:	d00e      	beq.n	8001d66 <PE_Check_DataMessage+0x104>
 8001d48:	2808      	cmp	r0, #8
 8001d4a:	d00a      	beq.n	8001d62 <PE_Check_DataMessage+0x100>
 8001d4c:	2809      	cmp	r0, #9
 8001d4e:	d003      	beq.n	8001d58 <PE_Check_DataMessage+0xf6>
 8001d50:	280a      	cmp	r0, #10
 8001d52:	d12a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001d54:	2166      	movs	r1, #102	@ 0x66
 8001d56:	e000      	b.n	8001d5a <PE_Check_DataMessage+0xf8>
 8001d58:	2165      	movs	r1, #101	@ 0x65
 8001d5a:	7c20      	ldrb	r0, [r4, #16]
 8001d5c:	f7fe fb90 	bl	8000480 <USBPD_PE_Notification>
 8001d60:	e003      	b.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d62:	2029      	movs	r0, #41	@ 0x29
 8001d64:	e020      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d66:	2027      	movs	r0, #39	@ 0x27
 8001d68:	e01e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d6a:	7466      	strb	r6, [r4, #17]
 8001d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f003 fabe 	bl	80052f0 <PE_Check_DataMessageVDM>
 8001d74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	0900      	lsrs	r0, r0, #4
 8001d7c:	4228      	tst	r0, r5
 8001d7e:	d010      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d80:	2304      	movs	r3, #4
 8001d82:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001d84:	1c82      	adds	r2, r0, #2
 8001d86:	210b      	movs	r1, #11
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	69ad      	ldr	r5, [r5, #24]
 8001d8e:	47a8      	blx	r5
 8001d90:	202c      	movs	r0, #44	@ 0x2c
 8001d92:	e009      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	8900      	ldrh	r0, [r0, #8]
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	4228      	tst	r0, r5
 8001d9c:	d001      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d9e:	203d      	movs	r0, #61	@ 0x3d
 8001da0:	e002      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001da2:	7465      	strb	r5, [r4, #17]
 8001da4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001da6:	2011      	movs	r0, #17
 8001da8:	7460      	strb	r0, [r4, #17]
 8001daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001dac <PE_CheckSendMessageStatus>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	000c      	movs	r4, r1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d006      	beq.n	8001dc4 <PE_CheckSendMessageStatus+0x18>
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d00e      	beq.n	8001dd8 <PE_CheckSendMessageStatus+0x2c>
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d011      	beq.n	8001de2 <PE_CheckSendMessageStatus+0x36>
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d008      	beq.n	8001dd4 <PE_CheckSendMessageStatus+0x28>
 8001dc2:	e02a      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dc4:	9902      	ldr	r1, [sp, #8]
 8001dc6:	7441      	strb	r1, [r0, #17]
 8001dc8:	6941      	ldr	r1, [r0, #20]
 8001dca:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <.text_25>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	6142      	str	r2, [r0, #20]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	e022      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	e020      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd8:	6942      	ldr	r2, [r0, #20]
 8001dda:	024b      	lsls	r3, r1, #9
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	e01b      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d005      	beq.n	8001df2 <PE_CheckSendMessageStatus+0x46>
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <PE_CheckSendMessageStatus+0x42>
 8001dea:	2299      	movs	r2, #153	@ 0x99
 8001dec:	e014      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001dee:	2107      	movs	r1, #7
 8001df0:	e013      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001df2:	6844      	ldr	r4, [r0, #4]
 8001df4:	6824      	ldr	r4, [r4, #0]
 8001df6:	0a24      	lsrs	r4, r4, #8
 8001df8:	4023      	ands	r3, r4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <PE_CheckSendMessageStatus+0x5a>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d109      	bne.n	8001e16 <PE_CheckSendMessageStatus+0x6a>
 8001e02:	220f      	movs	r2, #15
 8001e04:	e008      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d1fb      	bne.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d0f7      	beq.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e12:	2292      	movs	r2, #146	@ 0x92
 8001e14:	e000      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e16:	2211      	movs	r2, #17
 8001e18:	7442      	strb	r2, [r0, #17]
 8001e1a:	0008      	movs	r0, r1
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <.text_24>:
 8001e20:	00001388 	.word	0x00001388

08001e24 <.text_25>:
 8001e24:	ffffbfff 	.word	0xffffbfff

08001e28 <USBPD_PE_StateMachine_SNK>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	4828      	ldr	r0, [pc, #160]	@ (8001ed0 <USBPD_PE_StateMachine_SNK+0xa8>)
 8001e30:	00a1      	lsls	r1, r4, #2
 8001e32:	5845      	ldr	r5, [r0, r1]
 8001e34:	7c68      	ldrb	r0, [r5, #17]
 8001e36:	2848      	cmp	r0, #72	@ 0x48
 8001e38:	d133      	bne.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f7fe fe72 	bl	8000b24 <PE_Reset_ZI>
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fea5 	bl	8000b90 <PE_Reset_Counter>
 8001e46:	6828      	ldr	r0, [r5, #0]
 8001e48:	7900      	ldrb	r0, [r0, #4]
 8001e4a:	0783      	lsls	r3, r0, #30
 8001e4c:	0f9b      	lsrs	r3, r3, #30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	7c28      	ldrb	r0, [r5, #16]
 8001e54:	f003 fc35 	bl	80056c2 <USBPD_PRL_SetHeader>
 8001e58:	6868      	ldr	r0, [r5, #4]
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4391      	bics	r1, r2
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6868      	ldr	r0, [r5, #4]
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4391      	bics	r1, r2
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	0792      	lsls	r2, r2, #30
 8001e70:	0f92      	lsrs	r2, r2, #30
 8001e72:	430a      	orrs	r2, r1
 8001e74:	6002      	str	r2, [r0, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	7c28      	ldrb	r0, [r5, #16]
 8001e7a:	f003 fc93 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8001e7e:	7c28      	ldrb	r0, [r5, #16]
 8001e80:	f003 fefc 	bl	8005c7c <USBPD_PRL_Reset>
 8001e84:	203e      	movs	r0, #62	@ 0x3e
 8001e86:	7468      	strb	r0, [r5, #17]
 8001e88:	7ca9      	ldrb	r1, [r5, #18]
 8001e8a:	293e      	cmp	r1, #62	@ 0x3e
 8001e8c:	d009      	beq.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e8e:	74a8      	strb	r0, [r5, #18]
 8001e90:	2000      	movs	r0, #0
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	223e      	movs	r2, #62	@ 0x3e
 8001e98:	7c29      	ldrb	r1, [r5, #16]
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	4eb1      	ldr	r6, [pc, #708]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001e9e:	6836      	ldr	r6, [r6, #0]
 8001ea0:	47b0      	blx	r6
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	0341      	lsls	r1, r0, #13
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	d006      	beq.n	8001eb8 <USBPD_PE_StateMachine_SNK+0x90>
 8001eaa:	49af      	ldr	r1, [pc, #700]	@ (8002168 <__iar_annotation$$branch+0x8>)
 8001eac:	4001      	ands	r1, r0
 8001eae:	6169      	str	r1, [r5, #20]
 8001eb0:	2164      	movs	r1, #100	@ 0x64
 8001eb2:	7c28      	ldrb	r0, [r5, #16]
 8001eb4:	f7fe fae4 	bl	8000480 <USBPD_PE_Notification>
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f7fe fd15 	bl	80008e8 <PE_Get_RxEvent>
 8001ebe:	4669      	mov	r1, sp
 8001ec0:	7308      	strb	r0, [r1, #12]
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	7b00      	ldrb	r0, [r0, #12]
 8001ec6:	2803      	cmp	r0, #3
 8001ec8:	d104      	bne.n	8001ed4 <USBPD_PE_StateMachine_SNK+0xac>
 8001eca:	2001      	movs	r0, #1
 8001ecc:	b00d      	add	sp, #52	@ 0x34
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	20000224 	.word	0x20000224
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	7344      	strb	r4, [r0, #13]
 8001ed8:	2402      	movs	r4, #2
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	04c1      	lsls	r1, r0, #19
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	d100      	bne.n	8001ee6 <USBPD_PE_StateMachine_SNK+0xbe>
 8001ee4:	e148      	b.n	8002178 <__iar_annotation$$branch+0x18>
 8001ee6:	6968      	ldr	r0, [r5, #20]
 8001ee8:	0381      	lsls	r1, r0, #14
 8001eea:	0fc9      	lsrs	r1, r1, #31
 8001eec:	d014      	beq.n	8001f18 <USBPD_PE_StateMachine_SNK+0xf0>
 8001eee:	21a7      	movs	r1, #167	@ 0xa7
 8001ef0:	7469      	strb	r1, [r5, #17]
 8001ef2:	4a9e      	ldr	r2, [pc, #632]	@ (800216c <__iar_annotation$$branch+0xc>)
 8001ef4:	4002      	ands	r2, r0
 8001ef6:	616a      	str	r2, [r5, #20]
 8001ef8:	2000      	movs	r0, #0
 8001efa:	2232      	movs	r2, #50	@ 0x32
 8001efc:	54a8      	strb	r0, [r5, r2]
 8001efe:	7ca8      	ldrb	r0, [r5, #18]
 8001f00:	28a7      	cmp	r0, #167	@ 0xa7
 8001f02:	d02b      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f04:	74a9      	strb	r1, [r5, #18]
 8001f06:	2000      	movs	r0, #0
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	22a7      	movs	r2, #167	@ 0xa7
 8001f0e:	7c29      	ldrb	r1, [r5, #16]
 8001f10:	2004      	movs	r0, #4
 8001f12:	4e94      	ldr	r6, [pc, #592]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	47b0      	blx	r6
 8001f18:	2032      	movs	r0, #50	@ 0x32
 8001f1a:	5c28      	ldrb	r0, [r5, r0]
 8001f1c:	280f      	cmp	r0, #15
 8001f1e:	d001      	beq.n	8001f24 <USBPD_PE_StateMachine_SNK+0xfc>
 8001f20:	2814      	cmp	r0, #20
 8001f22:	d11b      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f24:	4668      	mov	r0, sp
 8001f26:	7b00      	ldrb	r0, [r0, #12]
 8001f28:	2814      	cmp	r0, #20
 8001f2a:	d005      	beq.n	8001f38 <USBPD_PE_StateMachine_SNK+0x110>
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	4669      	mov	r1, sp
 8001f30:	7308      	strb	r0, [r1, #12]
 8001f32:	0028      	movs	r0, r5
 8001f34:	f7fe fd0f 	bl	8000956 <PE_Clear_RxEvent>
 8001f38:	2032      	movs	r0, #50	@ 0x32
 8001f3a:	5c2a      	ldrb	r2, [r5, r0]
 8001f3c:	746a      	strb	r2, [r5, #17]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2132      	movs	r1, #50	@ 0x32
 8001f42:	5468      	strb	r0, [r5, r1]
 8001f44:	7ca8      	ldrb	r0, [r5, #18]
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d008      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f4a:	74aa      	strb	r2, [r5, #18]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	9000      	str	r0, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4e83      	ldr	r6, [pc, #524]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001f58:	6836      	ldr	r6, [r6, #0]
 8001f5a:	47b0      	blx	r6
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	7b00      	ldrb	r0, [r0, #12]
 8001f60:	2811      	cmp	r0, #17
 8001f62:	d11f      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f64:	6868      	ldr	r0, [r5, #4]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	0701      	lsls	r1, r0, #28
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8001f6e:	0680      	lsls	r0, r0, #26
 8001f70:	0fc2      	lsrs	r2, r0, #31
 8001f72:	4291      	cmp	r1, r2
 8001f74:	d116      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f76:	2014      	movs	r0, #20
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f7fe fcea 	bl	8000956 <PE_Clear_RxEvent>
 8001f82:	2092      	movs	r0, #146	@ 0x92
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	2892      	cmp	r0, #146	@ 0x92
 8001f8a:	d100      	bne.n	8001f8e <USBPD_PE_StateMachine_SNK+0x166>
 8001f8c:	e104      	b.n	8002198 <__iar_annotation$$branch+0x38>
 8001f8e:	2092      	movs	r0, #146	@ 0x92
 8001f90:	74a8      	strb	r0, [r5, #18]
 8001f92:	2000      	movs	r0, #0
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2292      	movs	r2, #146	@ 0x92
 8001f9a:	7c29      	ldrb	r1, [r5, #16]
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	4e71      	ldr	r6, [pc, #452]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	47b0      	blx	r6
 8001fa4:	7c68      	ldrb	r0, [r5, #17]
 8001fa6:	4669      	mov	r1, sp
 8001fa8:	7008      	strb	r0, [r1, #0]
 8001faa:	4f71      	ldr	r7, [pc, #452]	@ (8002170 <__iar_annotation$$branch+0x10>)
 8001fac:	20f0      	movs	r0, #240	@ 0xf0
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	4e70      	ldr	r6, [pc, #448]	@ (8002174 <__iar_annotation$$branch+0x14>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	d100      	bne.n	8001fbe <USBPD_PE_StateMachine_SNK+0x196>
 8001fbc:	e0e0      	b.n	8002180 <__iar_annotation$$branch+0x20>
 8001fbe:	1e52      	subs	r2, r2, #1
 8001fc0:	d040      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001fc2:	1e92      	subs	r2, r2, #2
 8001fc4:	2a01      	cmp	r2, #1
 8001fc6:	d800      	bhi.n	8001fca <USBPD_PE_StateMachine_SNK+0x1a2>
 8001fc8:	e323      	b.n	8002612 <__iar_annotation$$branch+0x4b2>
 8001fca:	1e92      	subs	r2, r2, #2
 8001fcc:	d100      	bne.n	8001fd0 <USBPD_PE_StateMachine_SNK+0x1a8>
 8001fce:	e1fb      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 8001fd0:	3a0a      	subs	r2, #10
 8001fd2:	d100      	bne.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001fd4:	e1fd      	b.n	80023d2 <__iar_annotation$$branch+0x272>
 8001fd6:	1e52      	subs	r2, r2, #1
 8001fd8:	d100      	bne.n	8001fdc <USBPD_PE_StateMachine_SNK+0x1b4>
 8001fda:	e299      	b.n	8002510 <__iar_annotation$$branch+0x3b0>
 8001fdc:	1e52      	subs	r2, r2, #1
 8001fde:	d100      	bne.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001fe0:	e2a3      	b.n	800252a <__iar_annotation$$branch+0x3ca>
 8001fe2:	1ed2      	subs	r2, r2, #3
 8001fe4:	d100      	bne.n	8001fe8 <USBPD_PE_StateMachine_SNK+0x1c0>
 8001fe6:	e228      	b.n	800243a <__iar_annotation$$branch+0x2da>
 8001fe8:	1f12      	subs	r2, r2, #4
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d92a      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 8001fee:	1e92      	subs	r2, r2, #2
 8001ff0:	d100      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x1cc>
 8001ff2:	e2d2      	b.n	800259a <__iar_annotation$$branch+0x43a>
 8001ff4:	1ed2      	subs	r2, r2, #3
 8001ff6:	d025      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001ff8:	1e52      	subs	r2, r2, #1
 8001ffa:	d100      	bne.n	8001ffe <USBPD_PE_StateMachine_SNK+0x1d6>
 8001ffc:	e3c3      	b.n	8002786 <__iar_annotation$$branch+0x626>
 8001ffe:	1f12      	subs	r2, r2, #4
 8002000:	d100      	bne.n	8002004 <USBPD_PE_StateMachine_SNK+0x1dc>
 8002002:	e316      	b.n	8002632 <__iar_annotation$$branch+0x4d2>
 8002004:	1f52      	subs	r2, r2, #5
 8002006:	2a02      	cmp	r2, #2
 8002008:	d91c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800200a:	1ed2      	subs	r2, r2, #3
 800200c:	d100      	bne.n	8002010 <USBPD_PE_StateMachine_SNK+0x1e8>
 800200e:	e2f7      	b.n	8002600 <__iar_annotation$$branch+0x4a0>
 8002010:	1e52      	subs	r2, r2, #1
 8002012:	d101      	bne.n	8002018 <__iar_annotation$$branch+0x4>

08002014 <__iar_annotation$$branch>:
 8002014:	f000 fc39 	bl	800288a <__iar_annotation$$branch+0x72a>
 8002018:	1e52      	subs	r2, r2, #1
 800201a:	d013      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800201c:	1e92      	subs	r2, r2, #2
 800201e:	d101      	bne.n	8002024 <__iar_annotation$$branch+0x4>

08002020 <__iar_annotation$$branch>:
 8002020:	f000 fc80 	bl	8002924 <__iar_annotation$$branch+0x7c4>
 8002024:	1e52      	subs	r2, r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d90c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800202a:	1e92      	subs	r2, r2, #2
 800202c:	d001      	beq.n	8002032 <__iar_annotation$$branch+0x12>
 800202e:	1e92      	subs	r2, r2, #2
 8002030:	2a05      	cmp	r2, #5
 8002032:	d801      	bhi.n	8002038 <__iar_annotation$$branch+0x4>

08002034 <__iar_annotation$$branch>:
 8002034:	f000 fcbc 	bl	80029b0 <__iar_annotation$$branch+0x850>
 8002038:	1f92      	subs	r2, r2, #6
 800203a:	d101      	bne.n	8002040 <__iar_annotation$$branch+0x4>

0800203c <__iar_annotation$$branch>:
 800203c:	f000 fc86 	bl	800294c <__iar_annotation$$branch+0x7ec>
 8002040:	1e52      	subs	r2, r2, #1
 8002042:	2a03      	cmp	r2, #3
 8002044:	d801      	bhi.n	800204a <__iar_annotation$$branch+0x4>

08002046 <__iar_annotation$$branch>:
 8002046:	f000 fcb7 	bl	80029b8 <__iar_annotation$$branch+0x858>
 800204a:	1f12      	subs	r2, r2, #4
 800204c:	d100      	bne.n	8002050 <__iar_annotation$$branch+0xa>
 800204e:	e0af      	b.n	80021b0 <__iar_annotation$$branch+0x50>
 8002050:	1e92      	subs	r2, r2, #2
 8002052:	d100      	bne.n	8002056 <__iar_annotation$$branch+0x10>
 8002054:	e221      	b.n	800249a <__iar_annotation$$branch+0x33a>
 8002056:	1ed2      	subs	r2, r2, #3
 8002058:	d100      	bne.n	800205c <__iar_annotation$$branch+0x16>
 800205a:	e0c1      	b.n	80021e0 <__iar_annotation$$branch+0x80>
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	d100      	bne.n	8002062 <__iar_annotation$$branch+0x1c>
 8002060:	e100      	b.n	8002264 <__iar_annotation$$branch+0x104>
 8002062:	1e52      	subs	r2, r2, #1
 8002064:	d100      	bne.n	8002068 <__iar_annotation$$branch+0x22>
 8002066:	e10f      	b.n	8002288 <__iar_annotation$$branch+0x128>
 8002068:	1e52      	subs	r2, r2, #1
 800206a:	d100      	bne.n	800206e <__iar_annotation$$branch+0x28>
 800206c:	e128      	b.n	80022c0 <__iar_annotation$$branch+0x160>
 800206e:	1e52      	subs	r2, r2, #1
 8002070:	d100      	bne.n	8002074 <__iar_annotation$$branch+0x2e>
 8002072:	e178      	b.n	8002366 <__iar_annotation$$branch+0x206>
 8002074:	1e92      	subs	r2, r2, #2
 8002076:	d0a6      	beq.n	8001fc6 <USBPD_PE_StateMachine_SNK+0x19e>
 8002078:	1e92      	subs	r2, r2, #2
 800207a:	d0e3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800207c:	1e52      	subs	r2, r2, #1
 800207e:	d101      	bne.n	8002084 <__iar_annotation$$branch+0x4>

08002080 <__iar_annotation$$branch>:
 8002080:	f000 fbe5 	bl	800284e <__iar_annotation$$branch+0x6ee>
 8002084:	1f12      	subs	r2, r2, #4
 8002086:	d100      	bne.n	800208a <__iar_annotation$$branch+0xa>
 8002088:	e26a      	b.n	8002560 <__iar_annotation$$branch+0x400>
 800208a:	1ed2      	subs	r2, r2, #3
 800208c:	d100      	bne.n	8002090 <__iar_annotation$$branch+0x10>
 800208e:	e334      	b.n	80026fa <__iar_annotation$$branch+0x59a>
 8002090:	1f52      	subs	r2, r2, #5
 8002092:	d100      	bne.n	8002096 <__iar_annotation$$branch+0x16>
 8002094:	e388      	b.n	80027a8 <__iar_annotation$$branch+0x648>
 8002096:	1e52      	subs	r2, r2, #1
 8002098:	d100      	bne.n	800209c <__iar_annotation$$branch+0x1c>
 800209a:	e2ff      	b.n	800269c <__iar_annotation$$branch+0x53c>
 800209c:	3a09      	subs	r2, #9
 800209e:	2a02      	cmp	r2, #2
 80020a0:	d9d0      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020a2:	1ed2      	subs	r2, r2, #3
 80020a4:	d101      	bne.n	80020aa <__iar_annotation$$branch+0x4>

080020a6 <__iar_annotation$$branch>:
 80020a6:	f000 fc01 	bl	80028ac <__iar_annotation$$branch+0x74c>
 80020aa:	1e52      	subs	r2, r2, #1
 80020ac:	d101      	bne.n	80020b2 <__iar_annotation$$branch+0x4>

080020ae <__iar_annotation$$branch>:
 80020ae:	f000 fc0f 	bl	80028d0 <__iar_annotation$$branch+0x770>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d9c5      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020b8:	3a0d      	subs	r2, #13
 80020ba:	d0c3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020bc:	3a12      	subs	r2, #18
 80020be:	d101      	bne.n	80020c4 <__iar_annotation$$branch+0x4>

080020c0 <__iar_annotation$$branch>:
 80020c0:	f000 fc92 	bl	80029e8 <__iar_annotation$$branch+0x888>
 80020c4:	3a0c      	subs	r2, #12
 80020c6:	d067      	beq.n	8002198 <__iar_annotation$$branch+0x38>
 80020c8:	1e52      	subs	r2, r2, #1
 80020ca:	2a02      	cmp	r2, #2
 80020cc:	d9ba      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020ce:	1f52      	subs	r2, r2, #5
 80020d0:	d100      	bne.n	80020d4 <__iar_annotation$$branch+0x14>
 80020d2:	e271      	b.n	80025b8 <__iar_annotation$$branch+0x458>
 80020d4:	1e52      	subs	r2, r2, #1
 80020d6:	d0b5      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d100      	bne.n	80020de <__iar_annotation$$branch+0x1e>
 80020dc:	e174      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 80020de:	1e52      	subs	r2, r2, #1
 80020e0:	d100      	bne.n	80020e4 <__iar_annotation$$branch+0x24>
 80020e2:	e1be      	b.n	8002462 <__iar_annotation$$branch+0x302>
 80020e4:	1e52      	subs	r2, r2, #1
 80020e6:	2a08      	cmp	r2, #8
 80020e8:	d801      	bhi.n	80020ee <__iar_annotation$$branch+0x4>

080020ea <__iar_annotation$$branch>:
 80020ea:	f000 fc6a 	bl	80029c2 <__iar_annotation$$branch+0x862>
 80020ee:	3a0b      	subs	r2, #11
 80020f0:	d101      	bne.n	80020f6 <__iar_annotation$$branch+0x4>

080020f2 <__iar_annotation$$branch>:
 80020f2:	f000 fc7f 	bl	80029f4 <__iar_annotation$$branch+0x894>
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	0028      	movs	r0, r5
 80020fa:	f002 f9e3 	bl	80044c4 <PE_StateMachine_VDM>
 80020fe:	0004      	movs	r4, r0
 8002100:	7c6a      	ldrb	r2, [r5, #17]
 8002102:	7ca8      	ldrb	r0, [r5, #18]
 8002104:	4290      	cmp	r0, r2
 8002106:	d008      	beq.n	800211a <__iar_annotation$$branch+0x28>
 8002108:	74aa      	strb	r2, [r5, #18]
 800210a:	2000      	movs	r0, #0
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	7c29      	ldrb	r1, [r5, #16]
 8002112:	2004      	movs	r0, #4
 8002114:	4e13      	ldr	r6, [pc, #76]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8002116:	6836      	ldr	r6, [r6, #0]
 8002118:	47b0      	blx	r6
 800211a:	4e12      	ldr	r6, [pc, #72]	@ (8002164 <__iar_annotation$$branch+0x4>)
 800211c:	4668      	mov	r0, sp
 800211e:	7b00      	ldrb	r0, [r0, #12]
 8002120:	2814      	cmp	r0, #20
 8002122:	d101      	bne.n	8002128 <__iar_annotation$$branch+0x4>

08002124 <__iar_annotation$$branch>:
 8002124:	f000 fc73 	bl	8002a0e <__iar_annotation$$branch+0x8ae>
 8002128:	0028      	movs	r0, r5
 800212a:	f7fe fc5b 	bl	80009e4 <PE_Check_AMSConflict>
 800212e:	2815      	cmp	r0, #21
 8002130:	d109      	bne.n	8002146 <__iar_annotation$$branch+0x22>
 8002132:	4668      	mov	r0, sp
 8002134:	7b00      	ldrb	r0, [r0, #12]
 8002136:	2814      	cmp	r0, #20
 8002138:	d005      	beq.n	8002146 <__iar_annotation$$branch+0x22>
 800213a:	2014      	movs	r0, #20
 800213c:	4669      	mov	r1, sp
 800213e:	7308      	strb	r0, [r1, #12]
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe fc08 	bl	8000956 <PE_Clear_RxEvent>
 8002146:	7c6a      	ldrb	r2, [r5, #17]
 8002148:	7ca8      	ldrb	r0, [r5, #18]
 800214a:	4290      	cmp	r0, r2
 800214c:	d007      	beq.n	800215e <__iar_annotation$$branch+0x3a>
 800214e:	74aa      	strb	r2, [r5, #18]
 8002150:	2000      	movs	r0, #0
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	7c29      	ldrb	r1, [r5, #16]
 8002158:	2004      	movs	r0, #4
 800215a:	6834      	ldr	r4, [r6, #0]
 800215c:	47a0      	blx	r4
 800215e:	2400      	movs	r4, #0

08002160 <__iar_annotation$$branch>:
 8002160:	f000 fc74 	bl	8002a4c <__iar_annotation$$branch+0x8ec>
 8002164:	20000000 	.word	0x20000000
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	fffdffff 	.word	0xfffdffff
 8002170:	000081f4 	.word	0x000081f4
 8002174:	0000801b 	.word	0x0000801b
 8002178:	2400      	movs	r4, #0
 800217a:	43e4      	mvns	r4, r4
 800217c:	0020      	movs	r0, r4
 800217e:	e6a5      	b.n	8001ecc <USBPD_PE_StateMachine_SNK+0xa4>
 8002180:	6868      	ldr	r0, [r5, #4]
 8002182:	6801      	ldr	r1, [r0, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4391      	bics	r1, r2
 8002188:	6001      	str	r1, [r0, #0]
 800218a:	215f      	movs	r1, #95	@ 0x5f
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	f7fe f977 	bl	8000480 <USBPD_PE_Notification>
 8002192:	2400      	movs	r4, #0
 8002194:	43e4      	mvns	r4, r4
 8002196:	e7b3      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002198:	6868      	ldr	r0, [r5, #4]
 800219a:	6801      	ldr	r1, [r0, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4391      	bics	r1, r2
 80021a0:	6001      	str	r1, [r0, #0]
 80021a2:	68a8      	ldr	r0, [r5, #8]
 80021a4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80021a6:	2900      	cmp	r1, #0
 80021a8:	d0f3      	beq.n	8002192 <__iar_annotation$$branch+0x32>
 80021aa:	7c28      	ldrb	r0, [r5, #16]
 80021ac:	4788      	blx	r1
 80021ae:	e7f0      	b.n	8002192 <__iar_annotation$$branch+0x32>
 80021b0:	6868      	ldr	r0, [r5, #4]
 80021b2:	6801      	ldr	r1, [r0, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0b0b      	lsrs	r3, r1, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0a1      	beq.n	8002100 <__iar_annotation$$branch+0xe>
 80021bc:	078b      	lsls	r3, r1, #30
 80021be:	0f9b      	lsrs	r3, r3, #30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <__iar_annotation$$branch+0x68>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <__iar_annotation$$branch+0x6a>
 80021c8:	2320      	movs	r3, #32
 80021ca:	2420      	movs	r4, #32
 80021cc:	43a1      	bics	r1, r4
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	772a      	strb	r2, [r5, #28]
 80021d4:	83ef      	strh	r7, [r5, #30]
 80021d6:	24fa      	movs	r4, #250	@ 0xfa
 80021d8:	0064      	lsls	r4, r4, #1
 80021da:	2043      	movs	r0, #67	@ 0x43
 80021dc:	7468      	strb	r0, [r5, #17]
 80021de:	e78f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80021e0:	4668      	mov	r0, sp
 80021e2:	7b00      	ldrb	r0, [r0, #12]
 80021e4:	2811      	cmp	r0, #17
 80021e6:	d135      	bne.n	8002254 <__iar_annotation$$branch+0xf4>
 80021e8:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80021ea:	0bc2      	lsrs	r2, r0, #15
 80021ec:	d12c      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021ee:	2607      	movs	r6, #7
 80021f0:	0b02      	lsrs	r2, r0, #12
 80021f2:	4232      	tst	r2, r6
 80021f4:	d028      	beq.n	8002248 <__iar_annotation$$branch+0xe8>
 80021f6:	06c2      	lsls	r2, r0, #27
 80021f8:	0ed2      	lsrs	r2, r2, #27
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d124      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021fe:	2200      	movs	r2, #0
 8002200:	4bc1      	ldr	r3, [pc, #772]	@ (8002508 <__iar_annotation$$branch+0x3a8>)
 8002202:	18eb      	adds	r3, r5, r3
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	696a      	ldr	r2, [r5, #20]
 8002208:	4311      	orrs	r1, r2
 800220a:	6169      	str	r1, [r5, #20]
 800220c:	0600      	lsls	r0, r0, #24
 800220e:	0f81      	lsrs	r1, r0, #30
 8002210:	4668      	mov	r0, sp
 8002212:	7b40      	ldrb	r0, [r0, #13]
 8002214:	f7fe fcee 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8002218:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800221a:	0b00      	lsrs	r0, r0, #12
 800221c:	4006      	ands	r6, r0
 800221e:	00b3      	lsls	r3, r6, #2
 8002220:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8002222:	1c82      	adds	r2, r0, #2
 8002224:	2104      	movs	r1, #4
 8002226:	7c28      	ldrb	r0, [r5, #16]
 8002228:	68ae      	ldr	r6, [r5, #8]
 800222a:	69b6      	ldr	r6, [r6, #24]
 800222c:	47b0      	blx	r6
 800222e:	2001      	movs	r0, #1
 8002230:	7728      	strb	r0, [r5, #28]
 8002232:	6868      	ldr	r0, [r5, #4]
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4391      	bics	r1, r2
 800223a:	6001      	str	r1, [r0, #0]
 800223c:	2044      	movs	r0, #68	@ 0x44
 800223e:	7468      	strb	r0, [r5, #17]
 8002240:	4668      	mov	r0, sp
 8002242:	7b00      	ldrb	r0, [r0, #12]
 8002244:	2814      	cmp	r0, #20
 8002246:	d005      	beq.n	8002254 <__iar_annotation$$branch+0xf4>
 8002248:	2014      	movs	r0, #20
 800224a:	4669      	mov	r1, sp
 800224c:	7308      	strb	r0, [r1, #12]
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe fb81 	bl	8000956 <PE_Clear_RxEvent>
 8002254:	8be8      	ldrh	r0, [r5, #30]
 8002256:	03a1      	lsls	r1, r4, #14
 8002258:	4288      	cmp	r0, r1
 800225a:	d102      	bne.n	8002262 <__iar_annotation$$branch+0x102>
 800225c:	200f      	movs	r0, #15
 800225e:	7468      	strb	r0, [r5, #17]
 8002260:	2400      	movs	r4, #0
 8002262:	e74d      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002264:	466a      	mov	r2, sp
 8002266:	0029      	movs	r1, r5
 8002268:	3118      	adds	r1, #24
 800226a:	7c28      	ldrb	r0, [r5, #16]
 800226c:	68ab      	ldr	r3, [r5, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4798      	blx	r3
 8002272:	6968      	ldr	r0, [r5, #20]
 8002274:	2118      	movs	r1, #24
 8002276:	4388      	bics	r0, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	2218      	movs	r2, #24
 800227e:	400a      	ands	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	616a      	str	r2, [r5, #20]
 8002284:	2045      	movs	r0, #69	@ 0x45
 8002286:	e7ea      	b.n	800225e <__iar_annotation$$branch+0xfe>
 8002288:	6968      	ldr	r0, [r5, #20]
 800228a:	0401      	lsls	r1, r0, #16
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	d001      	beq.n	8002294 <__iar_annotation$$branch+0x134>
 8002290:	2002      	movs	r0, #2
 8002292:	e000      	b.n	8002296 <__iar_annotation$$branch+0x136>
 8002294:	2000      	movs	r0, #0
 8002296:	9002      	str	r0, [sp, #8]
 8002298:	2046      	movs	r0, #70	@ 0x46
 800229a:	9001      	str	r0, [sp, #4]
 800229c:	2001      	movs	r0, #1
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	002b      	movs	r3, r5
 80022a2:	3318      	adds	r3, #24
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	f7ff f95c 	bl	8001566 <PE_Send_DataMessage>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d105      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 80022b2:	6968      	ldr	r0, [r5, #20]
 80022b4:	4995      	ldr	r1, [pc, #596]	@ (800250c <__iar_annotation$$branch+0x3ac>)
 80022b6:	4001      	ands	r1, r0
 80022b8:	6169      	str	r1, [r5, #20]
 80022ba:	83ee      	strh	r6, [r5, #30]
 80022bc:	241b      	movs	r4, #27
 80022be:	e71f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80022c0:	4669      	mov	r1, sp
 80022c2:	7b09      	ldrb	r1, [r1, #12]
 80022c4:	2911      	cmp	r1, #17
 80022c6:	d148      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022c8:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80022ca:	4201      	tst	r1, r0
 80022cc:	d145      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022ce:	20fa      	movs	r0, #250	@ 0xfa
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	261f      	movs	r6, #31
 80022d4:	221f      	movs	r2, #31
 80022d6:	400a      	ands	r2, r1
 80022d8:	1e92      	subs	r2, r2, #2
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d917      	bls.n	800230e <__iar_annotation$$branch+0x1ae>
 80022de:	1e92      	subs	r2, r2, #2
 80022e0:	d001      	beq.n	80022e6 <__iar_annotation$$branch+0x186>
 80022e2:	3a08      	subs	r2, #8
 80022e4:	d125      	bne.n	8002332 <__iar_annotation$$branch+0x1d2>
 80022e6:	686a      	ldr	r2, [r5, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	0f52      	lsrs	r2, r2, #29
 80022ee:	2a03      	cmp	r2, #3
 80022f0:	d004      	beq.n	80022fc <__iar_annotation$$branch+0x19c>
 80022f2:	2143      	movs	r1, #67	@ 0x43
 80022f4:	7469      	strb	r1, [r5, #17]
 80022f6:	83ef      	strh	r7, [r5, #30]
 80022f8:	0004      	movs	r4, r0
 80022fa:	e014      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 80022fc:	4031      	ands	r1, r6
 80022fe:	290c      	cmp	r1, #12
 8002300:	d101      	bne.n	8002306 <__iar_annotation$$branch+0x1a6>
 8002302:	2049      	movs	r0, #73	@ 0x49
 8002304:	e000      	b.n	8002308 <__iar_annotation$$branch+0x1a8>
 8002306:	2003      	movs	r0, #3
 8002308:	7468      	strb	r0, [r5, #17]
 800230a:	2400      	movs	r4, #0
 800230c:	e00b      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 800230e:	83ef      	strh	r7, [r5, #30]
 8002310:	0004      	movs	r4, r0
 8002312:	2104      	movs	r1, #4
 8002314:	0028      	movs	r0, r5
 8002316:	f7ff f846 	bl	80013a6 <PE_SetPowerNegotiation>
 800231a:	2047      	movs	r0, #71	@ 0x47
 800231c:	7468      	strb	r0, [r5, #17]
 800231e:	4668      	mov	r0, sp
 8002320:	7b00      	ldrb	r0, [r0, #12]
 8002322:	2814      	cmp	r0, #20
 8002324:	d005      	beq.n	8002332 <__iar_annotation$$branch+0x1d2>
 8002326:	2014      	movs	r0, #20
 8002328:	4669      	mov	r1, sp
 800232a:	7308      	strb	r0, [r1, #12]
 800232c:	0028      	movs	r0, r5
 800232e:	f7fe fb12 	bl	8000956 <PE_Clear_RxEvent>
 8002332:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002334:	4006      	ands	r6, r0
 8002336:	2e02      	cmp	r6, #2
 8002338:	d009      	beq.n	800234e <__iar_annotation$$branch+0x1ee>
 800233a:	2e03      	cmp	r6, #3
 800233c:	d009      	beq.n	8002352 <__iar_annotation$$branch+0x1f2>
 800233e:	2e04      	cmp	r6, #4
 8002340:	d003      	beq.n	800234a <__iar_annotation$$branch+0x1ea>
 8002342:	2e0c      	cmp	r6, #12
 8002344:	d109      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002346:	2103      	movs	r1, #3
 8002348:	e004      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234a:	2102      	movs	r1, #2
 800234c:	e002      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234e:	2104      	movs	r1, #4
 8002350:	e000      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 8002352:	2101      	movs	r1, #1
 8002354:	7c28      	ldrb	r0, [r5, #16]
 8002356:	f7fe f893 	bl	8000480 <USBPD_PE_Notification>
 800235a:	8be8      	ldrh	r0, [r5, #30]
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	4288      	cmp	r0, r1
 8002362:	d1ac      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 8002364:	e77a      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002366:	4668      	mov	r0, sp
 8002368:	7b00      	ldrb	r0, [r0, #12]
 800236a:	2811      	cmp	r0, #17
 800236c:	d1f5      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 800236e:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002370:	499f      	ldr	r1, [pc, #636]	@ (80025f0 <__iar_annotation$$branch+0x490>)
 8002372:	4001      	ands	r1, r0
 8002374:	2906      	cmp	r1, #6
 8002376:	d1f0      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002378:	2014      	movs	r0, #20
 800237a:	4669      	mov	r1, sp
 800237c:	7308      	strb	r0, [r1, #12]
 800237e:	0028      	movs	r0, r5
 8002380:	f7fe fae9 	bl	8000956 <PE_Clear_RxEvent>
 8002384:	2103      	movs	r1, #3
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff f80d 	bl	80013a6 <PE_SetPowerNegotiation>
 800238c:	2110      	movs	r1, #16
 800238e:	7c28      	ldrb	r0, [r5, #16]
 8002390:	f7fe f876 	bl	8000480 <USBPD_PE_Notification>
 8002394:	6868      	ldr	r0, [r5, #4]
 8002396:	6800      	ldr	r0, [r0, #0]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d002      	beq.n	80023a4 <__iar_annotation$$branch+0x244>
 800239e:	6828      	ldr	r0, [r5, #0]
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	e000      	b.n	80023a6 <__iar_annotation$$branch+0x246>
 80023a4:	2101      	movs	r1, #1
 80023a6:	4668      	mov	r0, sp
 80023a8:	7b40      	ldrb	r0, [r0, #13]
 80023aa:	f003 f9fb 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80023ae:	2000      	movs	r0, #0
 80023b0:	84a8      	strh	r0, [r5, #36]	@ 0x24
 80023b2:	2003      	movs	r0, #3
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	08c9      	lsrs	r1, r1, #3
 80023b8:	4001      	ands	r1, r0
 80023ba:	2903      	cmp	r1, #3
 80023bc:	d101      	bne.n	80023c2 <__iar_annotation$$branch+0x262>
 80023be:	498d      	ldr	r1, [pc, #564]	@ (80025f4 <__iar_annotation$$branch+0x494>)
 80023c0:	84a9      	strh	r1, [r5, #36]	@ 0x24
 80023c2:	7468      	strb	r0, [r5, #17]
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7c8      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 80023c8:	a903      	add	r1, sp, #12
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fbac 	bl	8003b28 <PE_StateMachine_VDMCable>
 80023d0:	e695      	b.n	80020fe <__iar_annotation$$branch+0xc>
 80023d2:	2601      	movs	r6, #1
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	0bc0      	lsrs	r0, r0, #15
 80023da:	4030      	ands	r0, r6
 80023dc:	d006      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023de:	68a8      	ldr	r0, [r5, #8]
 80023e0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d002      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	7c28      	ldrb	r0, [r5, #16]
 80023ea:	4790      	blx	r2
 80023ec:	6868      	ldr	r0, [r5, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4391      	bics	r1, r2
 80023f4:	6001      	str	r1, [r0, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7fe ffd4 	bl	80013a6 <PE_SetPowerNegotiation>
 80023fe:	4842      	ldr	r0, [pc, #264]	@ (8002508 <__iar_annotation$$branch+0x3a8>)
 8002400:	1829      	adds	r1, r5, r0
 8002402:	7888      	ldrb	r0, [r1, #2]
 8002404:	2803      	cmp	r0, #3
 8002406:	d309      	bcc.n	800241c <__iar_annotation$$branch+0x2bc>
 8002408:	6968      	ldr	r0, [r5, #20]
 800240a:	0880      	lsrs	r0, r0, #2
 800240c:	4006      	ands	r6, r0
 800240e:	d003      	beq.n	8002418 <__iar_annotation$$branch+0x2b8>
 8002410:	68a8      	ldr	r0, [r5, #8]
 8002412:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002414:	2800      	cmp	r0, #0
 8002416:	d171      	bne.n	80024fc <__iar_annotation$$branch+0x39c>
 8002418:	2000      	movs	r0, #0
 800241a:	e6df      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 800241c:	1c40      	adds	r0, r0, #1
 800241e:	7088      	strb	r0, [r1, #2]
 8002420:	2105      	movs	r1, #5
 8002422:	0028      	movs	r0, r5
 8002424:	f7fe fa32 	bl	800088c <PE_Send_RESET>
 8002428:	4873      	ldr	r0, [pc, #460]	@ (80025f8 <__iar_annotation$$branch+0x498>)
 800242a:	83e8      	strh	r0, [r5, #30]
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	0028      	movs	r0, r5
 8002432:	f7fe ffaf 	bl	8001394 <PE_CallHardResetCallback>
 8002436:	209b      	movs	r0, #155	@ 0x9b
 8002438:	e711      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	0401      	lsls	r1, r0, #16
 8002440:	0fc9      	lsrs	r1, r1, #31
 8002442:	d006      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 8002444:	68a8      	ldr	r0, [r5, #8]
 8002446:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002448:	2a00      	cmp	r2, #0
 800244a:	d002      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 800244c:	2100      	movs	r1, #0
 800244e:	7c28      	ldrb	r0, [r5, #16]
 8002450:	4790      	blx	r2
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	0028      	movs	r0, r5
 8002458:	f7fe ff9c 	bl	8001394 <PE_CallHardResetCallback>
 800245c:	4866      	ldr	r0, [pc, #408]	@ (80025f8 <__iar_annotation$$branch+0x498>)
 800245e:	83e8      	strh	r0, [r5, #30]
 8002460:	e7e9      	b.n	8002436 <__iar_annotation$$branch+0x2d6>
 8002462:	2100      	movs	r1, #0
 8002464:	4668      	mov	r0, sp
 8002466:	7b40      	ldrb	r0, [r0, #13]
 8002468:	68aa      	ldr	r2, [r5, #8]
 800246a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800246c:	4790      	blx	r2
 800246e:	2801      	cmp	r0, #1
 8002470:	d10d      	bne.n	800248e <__iar_annotation$$branch+0x32e>
 8002472:	4862      	ldr	r0, [pc, #392]	@ (80025fc <__iar_annotation$$branch+0x49c>)
 8002474:	83e8      	strh	r0, [r5, #30]
 8002476:	2169      	movs	r1, #105	@ 0x69
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe f800 	bl	8000480 <USBPD_PE_Notification>
 8002480:	2040      	movs	r0, #64	@ 0x40
 8002482:	7468      	strb	r0, [r5, #17]
 8002484:	2400      	movs	r4, #0
 8002486:	2113      	movs	r1, #19
 8002488:	7c28      	ldrb	r0, [r5, #16]
 800248a:	f7fd fff9 	bl	8000480 <USBPD_PE_Notification>
 800248e:	8be8      	ldrh	r0, [r5, #30]
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	4288      	cmp	r0, r1
 8002496:	d135      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002498:	e01e      	b.n	80024d8 <__iar_annotation$$branch+0x378>
 800249a:	2101      	movs	r1, #1
 800249c:	4668      	mov	r0, sp
 800249e:	7b40      	ldrb	r0, [r0, #13]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024a4:	4790      	blx	r2
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d111      	bne.n	80024ce <__iar_annotation$$branch+0x36e>
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7fe fb01 	bl	8000ab2 <PE_Reset_HardReset>
 80024b0:	2205      	movs	r2, #5
 80024b2:	2100      	movs	r1, #0
 80024b4:	0028      	movs	r0, r5
 80024b6:	f7fe ff6d 	bl	8001394 <PE_CallHardResetCallback>
 80024ba:	2168      	movs	r1, #104	@ 0x68
 80024bc:	4668      	mov	r0, sp
 80024be:	7b40      	ldrb	r0, [r0, #13]
 80024c0:	f7fd ffde 	bl	8000480 <USBPD_PE_Notification>
 80024c4:	83ef      	strh	r7, [r5, #30]
 80024c6:	24fa      	movs	r4, #250	@ 0xfa
 80024c8:	0064      	lsls	r4, r4, #1
 80024ca:	2043      	movs	r0, #67	@ 0x43
 80024cc:	7468      	strb	r0, [r5, #17]
 80024ce:	8be8      	ldrh	r0, [r5, #30]
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	4288      	cmp	r0, r1
 80024d6:	d115      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 80024d8:	2206      	movs	r2, #6
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	f7fe ff59 	bl	8001394 <PE_CallHardResetCallback>
 80024e2:	4809      	ldr	r0, [pc, #36]	@ (8002508 <__iar_annotation$$branch+0x3a8>)
 80024e4:	1828      	adds	r0, r5, r0
 80024e6:	7880      	ldrb	r0, [r0, #2]
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d200      	bcs.n	80024ee <__iar_annotation$$branch+0x38e>
 80024ec:	e6b6      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80024ee:	6968      	ldr	r0, [r5, #20]
 80024f0:	0741      	lsls	r1, r0, #29
 80024f2:	0fc9      	lsrs	r1, r1, #31
 80024f4:	d004      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024f6:	68a8      	ldr	r0, [r5, #8]
 80024f8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d000      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024fe:	e0fa      	b.n	80026f6 <__iar_annotation$$branch+0x596>
 8002500:	2400      	movs	r4, #0
 8002502:	746c      	strb	r4, [r5, #17]
 8002504:	e5fc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002506:	bf00      	nop
 8002508:	0000025e 	.word	0x0000025e
 800250c:	ffff7fff 	.word	0xffff7fff
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2303      	movs	r3, #3
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	0028      	movs	r0, r5
 800251c:	f7fe fff8 	bl	8001510 <PE_Send_CtrlMessage>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ef      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002524:	2001      	movs	r0, #1
 8002526:	7728      	strb	r0, [r5, #28]
 8002528:	e654      	b.n	80021d4 <__iar_annotation$$branch+0x74>
 800252a:	6868      	ldr	r0, [r5, #4]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	0540      	lsls	r0, r0, #21
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	2804      	cmp	r0, #4
 8002534:	d100      	bne.n	8002538 <__iar_annotation$$branch+0x3d8>
 8002536:	e691      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002538:	2000      	movs	r0, #0
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	2350      	movs	r3, #80	@ 0x50
 800253e:	220d      	movs	r2, #13
 8002540:	2031      	movs	r0, #49	@ 0x31
 8002542:	5c29      	ldrb	r1, [r5, r0]
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe ffe3 	bl	8001510 <PE_Send_CtrlMessage>
 800254a:	2800      	cmp	r0, #0
 800254c:	d107      	bne.n	800255e <__iar_annotation$$branch+0x3fe>
 800254e:	2003      	movs	r0, #3
 8002550:	7728      	strb	r0, [r5, #28]
 8002552:	83ee      	strh	r6, [r5, #30]
 8002554:	241b      	movs	r4, #27
 8002556:	2130      	movs	r1, #48	@ 0x30
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	f7fd ff91 	bl	8000480 <USBPD_PE_Notification>
 800255e:	e5cf      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d017      	beq.n	8002598 <__iar_annotation$$branch+0x438>
 8002568:	2030      	movs	r0, #48	@ 0x30
 800256a:	5c28      	ldrb	r0, [r5, r0]
 800256c:	2131      	movs	r1, #49	@ 0x31
 800256e:	5c69      	ldrb	r1, [r5, r1]
 8002570:	4288      	cmp	r0, r1
 8002572:	d111      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 8002574:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002576:	491e      	ldr	r1, [pc, #120]	@ (80025f0 <__iar_annotation$$branch+0x490>)
 8002578:	4001      	ands	r1, r0
 800257a:	2903      	cmp	r1, #3
 800257c:	d10c      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 800257e:	2001      	movs	r0, #1
 8002580:	7728      	strb	r0, [r5, #28]
 8002582:	83ef      	strh	r7, [r5, #30]
 8002584:	24fa      	movs	r4, #250	@ 0xfa
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	2043      	movs	r0, #67	@ 0x43
 800258a:	7468      	strb	r0, [r5, #17]
 800258c:	2014      	movs	r0, #20
 800258e:	4669      	mov	r1, sp
 8002590:	7308      	strb	r0, [r1, #12]
 8002592:	0028      	movs	r0, r5
 8002594:	f7fe f9df 	bl	8000956 <PE_Clear_RxEvent>
 8002598:	e6df      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 800259a:	9400      	str	r4, [sp, #0]
 800259c:	2343      	movs	r3, #67	@ 0x43
 800259e:	2207      	movs	r2, #7
 80025a0:	2100      	movs	r1, #0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f7fe ffb4 	bl	8001510 <PE_Send_CtrlMessage>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d11f      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ac:	2006      	movs	r0, #6
 80025ae:	7728      	strb	r0, [r5, #28]
 80025b0:	83ee      	strh	r6, [r5, #30]
 80025b2:	241b      	movs	r4, #27
 80025b4:	210b      	movs	r1, #11
 80025b6:	e7cf      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80025b8:	4668      	mov	r0, sp
 80025ba:	7b00      	ldrb	r0, [r0, #12]
 80025bc:	2811      	cmp	r0, #17
 80025be:	d115      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025c0:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80025c2:	490b      	ldr	r1, [pc, #44]	@ (80025f0 <__iar_annotation$$branch+0x490>)
 80025c4:	4001      	ands	r1, r0
 80025c6:	2906      	cmp	r1, #6
 80025c8:	d110      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ca:	212c      	movs	r1, #44	@ 0x2c
 80025cc:	7c28      	ldrb	r0, [r5, #16]
 80025ce:	f7fd ff57 	bl	8000480 <USBPD_PE_Notification>
 80025d2:	2003      	movs	r0, #3
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	4668      	mov	r0, sp
 80025da:	7b00      	ldrb	r0, [r0, #12]
 80025dc:	2814      	cmp	r0, #20
 80025de:	d005      	beq.n	80025ec <__iar_annotation$$branch+0x48c>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe f9b5 	bl	8000956 <PE_Clear_RxEvent>
 80025ec:	e588      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80025ee:	bf00      	nop
 80025f0:	0000f01f 	.word	0x0000f01f
 80025f4:	0000a328 	.word	0x0000a328
 80025f8:	000083e8 	.word	0x000083e8
 80025fc:	000088e3 	.word	0x000088e3
 8002600:	2000      	movs	r0, #0
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	2303      	movs	r3, #3
 8002606:	2204      	movs	r2, #4
 8002608:	2100      	movs	r1, #0
 800260a:	0028      	movs	r0, r5
 800260c:	f7fe ff80 	bl	8001510 <PE_Send_CtrlMessage>
 8002610:	e576      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002612:	4668      	mov	r0, sp
 8002614:	7800      	ldrb	r0, [r0, #0]
 8002616:	2804      	cmp	r0, #4
 8002618:	d006      	beq.n	8002628 <__iar_annotation$$branch+0x4c8>
 800261a:	2000      	movs	r0, #0
 800261c:	7728      	strb	r0, [r5, #28]
 800261e:	7469      	strb	r1, [r5, #17]
 8002620:	2120      	movs	r1, #32
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	f7fd ff2c 	bl	8000480 <USBPD_PE_Notification>
 8002628:	a903      	add	r1, sp, #12
 800262a:	0028      	movs	r0, r5
 800262c:	f000 fa1a 	bl	8002a64 <PE_StateMachine_SNK_ReadyWait>
 8002630:	e565      	b.n	80020fe <__iar_annotation$$branch+0xc>
 8002632:	68a8      	ldr	r0, [r5, #8]
 8002634:	6881      	ldr	r1, [r0, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d02e      	beq.n	8002698 <__iar_annotation$$branch+0x538>
 800263a:	4668      	mov	r0, sp
 800263c:	7b40      	ldrb	r0, [r0, #13]
 800263e:	4788      	blx	r1
 8002640:	280a      	cmp	r0, #10
 8002642:	d002      	beq.n	800264a <__iar_annotation$$branch+0x4ea>
 8002644:	280d      	cmp	r0, #13
 8002646:	d022      	beq.n	800268e <__iar_annotation$$branch+0x52e>
 8002648:	e026      	b.n	8002698 <__iar_annotation$$branch+0x538>
 800264a:	2201      	movs	r2, #1
 800264c:	2100      	movs	r1, #0
 800264e:	7c28      	ldrb	r0, [r5, #16]
 8002650:	68ab      	ldr	r3, [r5, #8]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	4798      	blx	r3
 8002656:	2000      	movs	r0, #0
 8002658:	9000      	str	r0, [sp, #0]
 800265a:	2359      	movs	r3, #89	@ 0x59
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ff55 	bl	8001510 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d110      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 800266a:	2008      	movs	r0, #8
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	6868      	ldr	r0, [r5, #4]
 8002670:	6801      	ldr	r1, [r0, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	6002      	str	r2, [r0, #0]
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	7c28      	ldrb	r0, [r5, #16]
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	4798      	blx	r3
 8002684:	48b0      	ldr	r0, [pc, #704]	@ (8002948 <__iar_annotation$$branch+0x7e8>)
 8002686:	83e8      	strh	r0, [r5, #30]
 8002688:	24e1      	movs	r4, #225	@ 0xe1
 800268a:	00a4      	lsls	r4, r4, #2
 800268c:	e538      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800268e:	2000      	movs	r0, #0
 8002690:	9000      	str	r0, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	220c      	movs	r2, #12
 8002696:	e7b7      	b.n	8002608 <__iar_annotation$$branch+0x4a8>
 8002698:	202a      	movs	r0, #42	@ 0x2a
 800269a:	e5e0      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800269c:	4668      	mov	r0, sp
 800269e:	7b00      	ldrb	r0, [r0, #12]
 80026a0:	2811      	cmp	r0, #17
 80026a2:	d119      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80026a6:	49c1      	ldr	r1, [pc, #772]	@ (80029ac <__iar_annotation$$branch+0x84c>)
 80026a8:	4001      	ands	r1, r0
 80026aa:	2906      	cmp	r1, #6
 80026ac:	d114      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026ae:	7f28      	ldrb	r0, [r5, #28]
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d005      	beq.n	80026c0 <__iar_annotation$$branch+0x560>
 80026b4:	2209      	movs	r2, #9
 80026b6:	2100      	movs	r1, #0
 80026b8:	7c28      	ldrb	r0, [r5, #16]
 80026ba:	68ab      	ldr	r3, [r5, #8]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	4798      	blx	r3
 80026c0:	2053      	movs	r0, #83	@ 0x53
 80026c2:	7468      	strb	r0, [r5, #17]
 80026c4:	4668      	mov	r0, sp
 80026c6:	7b00      	ldrb	r0, [r0, #12]
 80026c8:	2814      	cmp	r0, #20
 80026ca:	d005      	beq.n	80026d8 <__iar_annotation$$branch+0x578>
 80026cc:	2014      	movs	r0, #20
 80026ce:	4669      	mov	r1, sp
 80026d0:	7308      	strb	r0, [r1, #12]
 80026d2:	0028      	movs	r0, r5
 80026d4:	f7fe f93f 	bl	8000956 <PE_Clear_RxEvent>
 80026d8:	8be8      	ldrh	r0, [r5, #30]
 80026da:	03a1      	lsls	r1, r4, #14
 80026dc:	4288      	cmp	r0, r1
 80026de:	d1d5      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 80026e0:	220f      	movs	r2, #15
 80026e2:	2100      	movs	r1, #0
 80026e4:	7c28      	ldrb	r0, [r5, #16]
 80026e6:	68ab      	ldr	r3, [r5, #8]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	4798      	blx	r3
 80026ec:	68a8      	ldr	r0, [r5, #8]
 80026ee:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d100      	bne.n	80026f6 <__iar_annotation$$branch+0x596>
 80026f4:	e5b2      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80026f6:	2092      	movs	r0, #146	@ 0x92
 80026f8:	e5b1      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f7fe fe53 	bl	80013a6 <PE_SetPowerNegotiation>
 8002700:	220a      	movs	r2, #10
 8002702:	2100      	movs	r1, #0
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	68ab      	ldr	r3, [r5, #8]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	4798      	blx	r3
 800270c:	6868      	ldr	r0, [r5, #4]
 800270e:	7800      	ldrb	r0, [r0, #0]
 8002710:	0780      	lsls	r0, r0, #30
 8002712:	0f80      	lsrs	r0, r0, #30
 8002714:	2802      	cmp	r0, #2
 8002716:	d102      	bne.n	800271e <__iar_annotation$$branch+0x5be>
 8002718:	7c28      	ldrb	r0, [r5, #16]
 800271a:	f003 f820 	bl	800575e <USBPD_PRL_SRCSetSinkNG>
 800271e:	2101      	movs	r1, #1
 8002720:	0028      	movs	r0, r5
 8002722:	f7fe f8d3 	bl	80008cc <PE_ChangePowerRole>
 8002726:	7f28      	ldrb	r0, [r5, #28]
 8002728:	2809      	cmp	r0, #9
 800272a:	d005      	beq.n	8002738 <__iar_annotation$$branch+0x5d8>
 800272c:	220b      	movs	r2, #11
 800272e:	2101      	movs	r1, #1
 8002730:	7c28      	ldrb	r0, [r5, #16]
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	4798      	blx	r3
 8002738:	2000      	movs	r0, #0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	235b      	movs	r3, #91	@ 0x5b
 800273e:	2206      	movs	r2, #6
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7fe fee4 	bl	8001510 <PE_Send_CtrlMessage>
 8002748:	2800      	cmp	r0, #0
 800274a:	d108      	bne.n	800275e <__iar_annotation$$branch+0x5fe>
 800274c:	220c      	movs	r2, #12
 800274e:	2100      	movs	r1, #0
 8002750:	7c28      	ldrb	r0, [r5, #16]
 8002752:	68ab      	ldr	r3, [r5, #8]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	4798      	blx	r3
 8002758:	48c1      	ldr	r0, [pc, #772]	@ (8002a60 <.text_3>)
 800275a:	83e8      	strh	r0, [r5, #30]
 800275c:	2414      	movs	r4, #20
 800275e:	7c68      	ldrb	r0, [r5, #17]
 8002760:	285b      	cmp	r0, #91	@ 0x5b
 8002762:	d00f      	beq.n	8002784 <__iar_annotation$$branch+0x624>
 8002764:	2100      	movs	r1, #0
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f8b0 	bl	80008cc <PE_ChangePowerRole>
 800276c:	2206      	movs	r2, #6
 800276e:	2101      	movs	r1, #1
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	68ab      	ldr	r3, [r5, #8]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	4798      	blx	r3
 8002778:	2207      	movs	r2, #7
 800277a:	2100      	movs	r1, #0
 800277c:	7c28      	ldrb	r0, [r5, #16]
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	4798      	blx	r3
 8002784:	e4bc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	2358      	movs	r3, #88	@ 0x58
 800278a:	220a      	movs	r2, #10
 800278c:	2100      	movs	r1, #0
 800278e:	0028      	movs	r0, r5
 8002790:	f7fe febe 	bl	8001510 <PE_Send_CtrlMessage>
 8002794:	2800      	cmp	r0, #0
 8002796:	d105      	bne.n	80027a4 <__iar_annotation$$branch+0x644>
 8002798:	2008      	movs	r0, #8
 800279a:	7728      	strb	r0, [r5, #28]
 800279c:	83ee      	strh	r6, [r5, #30]
 800279e:	241b      	movs	r4, #27
 80027a0:	2202      	movs	r2, #2
 80027a2:	e7ea      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a4:	220f      	movs	r2, #15
 80027a6:	e7e8      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a8:	4669      	mov	r1, sp
 80027aa:	7b09      	ldrb	r1, [r1, #12]
 80027ac:	2911      	cmp	r1, #17
 80027ae:	d10c      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b0:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80027b2:	4201      	tst	r1, r0
 80027b4:	d109      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b6:	06c8      	lsls	r0, r1, #27
 80027b8:	0ec0      	lsrs	r0, r0, #27
 80027ba:	2803      	cmp	r0, #3
 80027bc:	d006      	beq.n	80027cc <__iar_annotation$$branch+0x66c>
 80027be:	2804      	cmp	r0, #4
 80027c0:	d02d      	beq.n	800281e <__iar_annotation$$branch+0x6be>
 80027c2:	280c      	cmp	r0, #12
 80027c4:	d029      	beq.n	800281a <__iar_annotation$$branch+0x6ba>
 80027c6:	2810      	cmp	r0, #16
 80027c8:	d032      	beq.n	8002830 <__iar_annotation$$branch+0x6d0>
 80027ca:	e0a5      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 80027cc:	6868      	ldr	r0, [r5, #4]
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	430a      	orrs	r2, r1
 80027d4:	6002      	str	r2, [r0, #0]
 80027d6:	485c      	ldr	r0, [pc, #368]	@ (8002948 <__iar_annotation$$branch+0x7e8>)
 80027d8:	83e8      	strh	r0, [r5, #30]
 80027da:	24e1      	movs	r4, #225	@ 0xe1
 80027dc:	00a4      	lsls	r4, r4, #2
 80027de:	7f28      	ldrb	r0, [r5, #28]
 80027e0:	2809      	cmp	r0, #9
 80027e2:	d005      	beq.n	80027f0 <__iar_annotation$$branch+0x690>
 80027e4:	2206      	movs	r2, #6
 80027e6:	2100      	movs	r1, #0
 80027e8:	7c28      	ldrb	r0, [r5, #16]
 80027ea:	68ab      	ldr	r3, [r5, #8]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	4798      	blx	r3
 80027f0:	2104      	movs	r1, #4
 80027f2:	0028      	movs	r0, r5
 80027f4:	f7fe fdd7 	bl	80013a6 <PE_SetPowerNegotiation>
 80027f8:	213a      	movs	r1, #58	@ 0x3a
 80027fa:	7c28      	ldrb	r0, [r5, #16]
 80027fc:	f7fd fe40 	bl	8000480 <USBPD_PE_Notification>
 8002800:	4668      	mov	r0, sp
 8002802:	7b00      	ldrb	r0, [r0, #12]
 8002804:	2814      	cmp	r0, #20
 8002806:	d005      	beq.n	8002814 <__iar_annotation$$branch+0x6b4>
 8002808:	2014      	movs	r0, #20
 800280a:	4669      	mov	r1, sp
 800280c:	7308      	strb	r0, [r1, #12]
 800280e:	0028      	movs	r0, r5
 8002810:	f7fe f8a1 	bl	8000956 <PE_Clear_RxEvent>
 8002814:	2059      	movs	r0, #89	@ 0x59
 8002816:	7468      	strb	r0, [r5, #17]
 8002818:	e07e      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 800281a:	213b      	movs	r1, #59	@ 0x3b
 800281c:	e000      	b.n	8002820 <__iar_annotation$$branch+0x6c0>
 800281e:	2116      	movs	r1, #22
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	f7fd fe2d 	bl	8000480 <USBPD_PE_Notification>
 8002826:	4668      	mov	r0, sp
 8002828:	7b00      	ldrb	r0, [r0, #12]
 800282a:	2814      	cmp	r0, #20
 800282c:	d108      	bne.n	8002840 <__iar_annotation$$branch+0x6e0>
 800282e:	e070      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002830:	2117      	movs	r1, #23
 8002832:	7c28      	ldrb	r0, [r5, #16]
 8002834:	f7fd fe24 	bl	8000480 <USBPD_PE_Notification>
 8002838:	4668      	mov	r0, sp
 800283a:	7b00      	ldrb	r0, [r0, #12]
 800283c:	2814      	cmp	r0, #20
 800283e:	d068      	beq.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002840:	2014      	movs	r0, #20
 8002842:	4669      	mov	r1, sp
 8002844:	7308      	strb	r0, [r1, #12]
 8002846:	0028      	movs	r0, r5
 8002848:	f7fe f885 	bl	8000956 <PE_Clear_RxEvent>
 800284c:	e061      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 800284e:	2000      	movs	r0, #0
 8002850:	9004      	str	r0, [sp, #16]
 8002852:	ab04      	add	r3, sp, #16
 8002854:	aa05      	add	r2, sp, #20
 8002856:	2100      	movs	r1, #0
 8002858:	7c28      	ldrb	r0, [r5, #16]
 800285a:	68ae      	ldr	r6, [r5, #8]
 800285c:	6976      	ldr	r6, [r6, #20]
 800285e:	47b0      	blx	r6
 8002860:	2104      	movs	r1, #4
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	f7fe fdf2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8002868:	2800      	cmp	r0, #0
 800286a:	d001      	beq.n	8002870 <__iar_annotation$$branch+0x710>
 800286c:	2003      	movs	r0, #3
 800286e:	e4b5      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	2003      	movs	r0, #3
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	9804      	ldr	r0, [sp, #16]
 8002878:	0880      	lsrs	r0, r0, #2
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	ab05      	add	r3, sp, #20
 800287e:	2201      	movs	r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe fe6f 	bl	8001566 <PE_Send_DataMessage>
 8002888:	e43a      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800288a:	2000      	movs	r0, #0
 800288c:	9002      	str	r0, [sp, #8]
 800288e:	2003      	movs	r0, #3
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	2001      	movs	r0, #1
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	002b      	movs	r3, r5
 8002898:	332c      	adds	r3, #44	@ 0x2c
 800289a:	2206      	movs	r2, #6
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe fe61 	bl	8001566 <PE_Send_DataMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1ef      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028a8:	215d      	movs	r1, #93	@ 0x5d
 80028aa:	e655      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	2366      	movs	r3, #102	@ 0x66
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	0028      	movs	r0, r5
 80028b6:	f7fe fe2b 	bl	8001510 <PE_Send_CtrlMessage>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1e4      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028be:	83ee      	strh	r6, [r5, #30]
 80028c0:	241b      	movs	r4, #27
 80028c2:	214a      	movs	r1, #74	@ 0x4a
 80028c4:	7c28      	ldrb	r0, [r5, #16]
 80028c6:	f7fd fddb 	bl	8000480 <USBPD_PE_Notification>
 80028ca:	200b      	movs	r0, #11
 80028cc:	7728      	strb	r0, [r5, #28]
 80028ce:	e7db      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80028d0:	4668      	mov	r0, sp
 80028d2:	7b00      	ldrb	r0, [r0, #12]
 80028d4:	2811      	cmp	r0, #17
 80028d6:	d11f      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028d8:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80028da:	0bc1      	lsrs	r1, r0, #15
 80028dc:	d01c      	beq.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028de:	06c0      	lsls	r0, r0, #27
 80028e0:	0ec0      	lsrs	r0, r0, #27
 80028e2:	280c      	cmp	r0, #12
 80028e4:	d118      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028e6:	2304      	movs	r3, #4
 80028e8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80028ea:	1d02      	adds	r2, r0, #4
 80028ec:	210a      	movs	r1, #10
 80028ee:	7c28      	ldrb	r0, [r5, #16]
 80028f0:	68ac      	ldr	r4, [r5, #8]
 80028f2:	69a4      	ldr	r4, [r4, #24]
 80028f4:	47a0      	blx	r4
 80028f6:	4668      	mov	r0, sp
 80028f8:	7b00      	ldrb	r0, [r0, #12]
 80028fa:	2814      	cmp	r0, #20
 80028fc:	d005      	beq.n	800290a <__iar_annotation$$branch+0x7aa>
 80028fe:	2014      	movs	r0, #20
 8002900:	4669      	mov	r1, sp
 8002902:	7308      	strb	r0, [r1, #12]
 8002904:	0028      	movs	r0, r5
 8002906:	f7fe f826 	bl	8000956 <PE_Clear_RxEvent>
 800290a:	214b      	movs	r1, #75	@ 0x4b
 800290c:	7c28      	ldrb	r0, [r5, #16]
 800290e:	f7fd fdb7 	bl	8000480 <USBPD_PE_Notification>
 8002912:	2003      	movs	r0, #3
 8002914:	7468      	strb	r0, [r5, #17]
 8002916:	2400      	movs	r4, #0
 8002918:	8be8      	ldrh	r0, [r5, #30]
 800291a:	2180      	movs	r1, #128	@ 0x80
 800291c:	0209      	lsls	r1, r1, #8
 800291e:	4288      	cmp	r0, r1
 8002920:	d1b2      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 8002922:	e041      	b.n	80029a8 <__iar_annotation$$branch+0x848>
 8002924:	4895      	ldr	r0, [pc, #596]	@ (8002b7c <.text_5>)
 8002926:	182f      	adds	r7, r5, r0
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	2339      	movs	r3, #57	@ 0x39
 800292c:	783a      	ldrb	r2, [r7, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	0028      	movs	r0, r5
 8002932:	f7fe fded 	bl	8001510 <PE_Send_CtrlMessage>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1a6      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 800293a:	7878      	ldrb	r0, [r7, #1]
 800293c:	7728      	strb	r0, [r5, #28]
 800293e:	2144      	movs	r1, #68	@ 0x44
 8002940:	7c28      	ldrb	r0, [r5, #16]
 8002942:	f7fd fd9d 	bl	8000480 <USBPD_PE_Notification>
 8002946:	e4b8      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002948:	00008384 	.word	0x00008384
 800294c:	4668      	mov	r0, sp
 800294e:	7b00      	ldrb	r0, [r0, #12]
 8002950:	2814      	cmp	r0, #20
 8002952:	d024      	beq.n	800299e <__iar_annotation$$branch+0x83e>
 8002954:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002956:	0bc0      	lsrs	r0, r0, #15
 8002958:	d00e      	beq.n	8002978 <__iar_annotation$$branch+0x818>
 800295a:	0028      	movs	r0, r5
 800295c:	f7fe fe40 	bl	80015e0 <PE_Check_ExtendedMessage>
 8002960:	4668      	mov	r0, sp
 8002962:	7b00      	ldrb	r0, [r0, #12]
 8002964:	2814      	cmp	r0, #20
 8002966:	d005      	beq.n	8002974 <__iar_annotation$$branch+0x814>
 8002968:	2014      	movs	r0, #20
 800296a:	4669      	mov	r1, sp
 800296c:	7308      	strb	r0, [r1, #12]
 800296e:	0028      	movs	r0, r5
 8002970:	f7fd fff1 	bl	8000956 <PE_Clear_RxEvent>
 8002974:	2000      	movs	r0, #0
 8002976:	83e8      	strh	r0, [r5, #30]
 8002978:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800297a:	490c      	ldr	r1, [pc, #48]	@ (80029ac <__iar_annotation$$branch+0x84c>)
 800297c:	4001      	ands	r1, r0
 800297e:	2910      	cmp	r1, #16
 8002980:	d10d      	bne.n	800299e <__iar_annotation$$branch+0x83e>
 8002982:	2003      	movs	r0, #3
 8002984:	7468      	strb	r0, [r5, #17]
 8002986:	2400      	movs	r4, #0
 8002988:	4668      	mov	r0, sp
 800298a:	7b00      	ldrb	r0, [r0, #12]
 800298c:	2814      	cmp	r0, #20
 800298e:	d005      	beq.n	800299c <__iar_annotation$$branch+0x83c>
 8002990:	2014      	movs	r0, #20
 8002992:	4669      	mov	r1, sp
 8002994:	7308      	strb	r0, [r1, #12]
 8002996:	0028      	movs	r0, r5
 8002998:	f7fd ffdd 	bl	8000956 <PE_Clear_RxEvent>
 800299c:	83ec      	strh	r4, [r5, #30]
 800299e:	8be8      	ldrh	r0, [r5, #30]
 80029a0:	2180      	movs	r1, #128	@ 0x80
 80029a2:	0209      	lsls	r1, r1, #8
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d11c      	bne.n	80029e2 <__iar_annotation$$branch+0x882>
 80029a8:	2003      	movs	r0, #3
 80029aa:	e458      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80029ac:	0000f01f 	.word	0x0000f01f
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7fe ff37 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80029b6:	e63b      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029b8:	a903      	add	r1, sp, #12
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe f9d4 	bl	8000d68 <PE_SubStateMachine_Generic>
 80029c0:	e636      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029c2:	a903      	add	r1, sp, #12
 80029c4:	0028      	movs	r0, r5
 80029c6:	f001 f9ef 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80029ca:	0004      	movs	r4, r0
 80029cc:	6868      	ldr	r0, [r5, #4]
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	0401      	lsls	r1, r0, #16
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	d006      	beq.n	80029e4 <__iar_annotation$$branch+0x884>
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4668      	mov	r0, sp
 80029dc:	7b40      	ldrb	r0, [r0, #13]
 80029de:	f002 fee1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80029e2:	e751      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029e4:	2101      	movs	r1, #1
 80029e6:	e7f8      	b.n	80029da <__iar_annotation$$branch+0x87a>
 80029e8:	4668      	mov	r0, sp
 80029ea:	7b01      	ldrb	r1, [r0, #12]
 80029ec:	0028      	movs	r0, r5
 80029ee:	f002 fc3b 	bl	8005268 <PE_StateMachine_UVDM>
 80029f2:	e749      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029f4:	2000      	movs	r0, #0
 80029f6:	9000      	str	r0, [sp, #0]
 80029f8:	2358      	movs	r3, #88	@ 0x58
 80029fa:	2213      	movs	r2, #19
 80029fc:	2100      	movs	r1, #0
 80029fe:	0028      	movs	r0, r5
 8002a00:	f7fe fd86 	bl	8001510 <PE_Send_CtrlMessage>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f4      	bne.n	80029f2 <__iar_annotation$$branch+0x892>
 8002a08:	2009      	movs	r0, #9
 8002a0a:	7728      	strb	r0, [r5, #28]
 8002a0c:	e455      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002a0e:	6968      	ldr	r0, [r5, #20]
 8002a10:	2701      	movs	r7, #1
 8002a12:	0b41      	lsrs	r1, r0, #13
 8002a14:	4039      	ands	r1, r7
 8002a16:	d019      	beq.n	8002a4c <__iar_annotation$$branch+0x8ec>
 8002a18:	0b80      	lsrs	r0, r0, #14
 8002a1a:	4038      	ands	r0, r7
 8002a1c:	d007      	beq.n	8002a2e <__iar_annotation$$branch+0x8ce>
 8002a1e:	215b      	movs	r1, #91	@ 0x5b
 8002a20:	7c28      	ldrb	r0, [r5, #16]
 8002a22:	f7fd fd2d 	bl	8000480 <USBPD_PE_Notification>
 8002a26:	6968      	ldr	r0, [r5, #20]
 8002a28:	4955      	ldr	r1, [pc, #340]	@ (8002b80 <.text_6>)
 8002a2a:	4001      	ands	r1, r0
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	7ca9      	ldrb	r1, [r5, #18]
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d008      	beq.n	8002a4a <__iar_annotation$$branch+0x8ea>
 8002a38:	74a8      	strb	r0, [r5, #18]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2203      	movs	r2, #3
 8002a42:	7c29      	ldrb	r1, [r5, #16]
 8002a44:	2004      	movs	r0, #4
 8002a46:	6834      	ldr	r4, [r6, #0]
 8002a48:	47a0      	blx	r4
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	6968      	ldr	r0, [r5, #20]
 8002a4e:	494d      	ldr	r1, [pc, #308]	@ (8002b84 <.text_7>)
 8002a50:	4001      	ands	r1, r0
 8002a52:	6169      	str	r1, [r5, #20]
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d101      	bne.n	8002a5c <__iar_annotation$$branch>

08002a58 <__iar_annotation$$branch>:
 8002a58:	f7ff fa3e 	bl	8001ed8 <USBPD_PE_StateMachine_SNK+0xb0>

08002a5c <__iar_annotation$$branch>:
 8002a5c:	f7ff fb8e 	bl	800217c <__iar_annotation$$branch+0x1c>

08002a60 <.text_3>:
 8002a60:	00008014 	.word	0x00008014

08002a64 <PE_StateMachine_SNK_ReadyWait>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000e      	movs	r6, r1
 8002a6a:	2702      	movs	r7, #2
 8002a6c:	7830      	ldrb	r0, [r6, #0]
 8002a6e:	2814      	cmp	r0, #20
 8002a70:	d00b      	beq.n	8002a8a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fe fffc 	bl	8001a70 <PE_ManageRXEvent>
 8002a78:	7830      	ldrb	r0, [r6, #0]
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d07b      	beq.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a7e:	2014      	movs	r0, #20
 8002a80:	7030      	strb	r0, [r6, #0]
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7fd ff67 	bl	8000956 <PE_Clear_RxEvent>
 8002a88:	e075      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a8a:	6961      	ldr	r1, [r4, #20]
 8002a8c:	0cc8      	lsrs	r0, r1, #19
 8002a8e:	03be      	lsls	r6, r7, #14
 8002a90:	2700      	movs	r7, #0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d021      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x76>
 8002a96:	8c21      	ldrh	r1, [r4, #32]
 8002a98:	42b1      	cmp	r1, r6
 8002a9a:	d111      	bne.n	8002ac0 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	7460      	strb	r0, [r4, #17]
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2270      	movs	r2, #112	@ 0x70
 8002aa6:	7c21      	ldrb	r1, [r4, #16]
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	4d37      	ldr	r5, [pc, #220]	@ (8002b88 <.text_8>)
 8002aac:	682d      	ldr	r5, [r5, #0]
 8002aae:	47a8      	blx	r5
 8002ab0:	2098      	movs	r0, #152	@ 0x98
 8002ab2:	0080      	lsls	r0, r0, #2
 8002ab4:	5c20      	ldrb	r0, [r4, r0]
 8002ab6:	1c40      	adds	r0, r0, #1
 8002ab8:	2198      	movs	r1, #152	@ 0x98
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	5460      	strb	r0, [r4, r1]
 8002abe:	e05a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ac0:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002ac2:	0509      	lsls	r1, r1, #20
 8002ac4:	0f49      	lsrs	r1, r1, #29
 8002ac6:	180a      	adds	r2, r1, r0
 8002ac8:	2333      	movs	r3, #51	@ 0x33
 8002aca:	435a      	muls	r2, r3
 8002acc:	4316      	orrs	r6, r2
 8002ace:	8426      	strh	r6, [r4, #32]
 8002ad0:	180f      	adds	r7, r1, r0
 8002ad2:	2033      	movs	r0, #51	@ 0x33
 8002ad4:	4347      	muls	r7, r0
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	e04d      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ada:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8002adc:	42b0      	cmp	r0, r6
 8002ade:	d104      	bne.n	8002aea <PE_StateMachine_SNK_ReadyWait+0x86>
 8002ae0:	2045      	movs	r0, #69	@ 0x45
 8002ae2:	7460      	strb	r0, [r4, #17]
 8002ae4:	430e      	orrs	r6, r1
 8002ae6:	6166      	str	r6, [r4, #20]
 8002ae8:	e045      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002aea:	7c20      	ldrb	r0, [r4, #16]
 8002aec:	f7fd ff58 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d128      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002af4:	2032      	movs	r0, #50	@ 0x32
 8002af6:	5c20      	ldrb	r0, [r4, r0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d024      	beq.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	2203      	movs	r2, #3
 8002b04:	4002      	ands	r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d007      	beq.n	8002b1a <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	d11a      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b10:	7c20      	ldrb	r0, [r4, #16]
 8002b12:	f002 fe3b 	bl	800578c <USBPD_PRL_IsResistor_SinkTxOK>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d115      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b1a:	2033      	movs	r0, #51	@ 0x33
 8002b1c:	5c20      	ldrb	r0, [r4, r0]
 8002b1e:	2131      	movs	r1, #49	@ 0x31
 8002b20:	5460      	strb	r0, [r4, r1]
 8002b22:	2032      	movs	r0, #50	@ 0x32
 8002b24:	5c20      	ldrb	r0, [r4, r0]
 8002b26:	7460      	strb	r0, [r4, #17]
 8002b28:	2845      	cmp	r0, #69	@ 0x45
 8002b2a:	d102      	bne.n	8002b32 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002b2c:	6960      	ldr	r0, [r4, #20]
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	6166      	str	r6, [r4, #20]
 8002b32:	2132      	movs	r1, #50	@ 0x32
 8002b34:	5467      	strb	r7, [r4, r1]
 8002b36:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002b38:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002b3a:	6960      	ldr	r0, [r4, #20]
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	01c9      	lsls	r1, r1, #7
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6161      	str	r1, [r4, #20]
 8002b44:	e017      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b46:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002b48:	42b0      	cmp	r0, r6
 8002b4a:	d109      	bne.n	8002b60 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002b4c:	8467      	strh	r7, [r4, #34]	@ 0x22
 8002b4e:	2098      	movs	r0, #152	@ 0x98
 8002b50:	0080      	lsls	r0, r0, #2
 8002b52:	1820      	adds	r0, r4, r0
 8002b54:	7881      	ldrb	r1, [r0, #2]
 8002b56:	1c49      	adds	r1, r1, #1
 8002b58:	7081      	strb	r1, [r0, #2]
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	7460      	strb	r0, [r4, #17]
 8002b5e:	e00a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fe fc47 	bl	80013f4 <PE_CalculateMinTiming>
 8002b66:	2132      	movs	r1, #50	@ 0x32
 8002b68:	5c61      	ldrb	r1, [r4, r1]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d002      	beq.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d300      	bcc.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b72:	2002      	movs	r0, #2
 8002b74:	0007      	movs	r7, r0
 8002b76:	0038      	movs	r0, r7
 8002b78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002b7c <.text_5>:
 8002b7c:	0000025e 	.word	0x0000025e

08002b80 <.text_6>:
 8002b80:	ffffbfff 	.word	0xffffbfff

08002b84 <.text_7>:
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <.text_8>:
 8002b88:	20000000 	.word	0x20000000

08002b8c <USBPD_PE_StateMachine_SRC>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	0005      	movs	r5, r0
 8002b92:	4829      	ldr	r0, [pc, #164]	@ (8002c38 <USBPD_PE_StateMachine_SRC+0xac>)
 8002b94:	00a9      	lsls	r1, r5, #2
 8002b96:	5844      	ldr	r4, [r0, r1]
 8002b98:	7c60      	ldrb	r0, [r4, #17]
 8002b9a:	2848      	cmp	r0, #72	@ 0x48
 8002b9c:	d134      	bne.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7fd ffc0 	bl	8000b24 <PE_Reset_ZI>
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f7fd fff3 	bl	8000b90 <PE_Reset_Counter>
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	7900      	ldrb	r0, [r0, #4]
 8002bae:	0783      	lsls	r3, r0, #30
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	7c20      	ldrb	r0, [r4, #16]
 8002bb8:	f002 fd83 	bl	80056c2 <USBPD_PRL_SetHeader>
 8002bbc:	6860      	ldr	r0, [r4, #4]
 8002bbe:	6801      	ldr	r1, [r0, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	6002      	str	r2, [r0, #0]
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	6801      	ldr	r1, [r0, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4391      	bics	r1, r2
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	7912      	ldrb	r2, [r2, #4]
 8002bd2:	0792      	lsls	r2, r2, #30
 8002bd4:	0f92      	lsrs	r2, r2, #30
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	6002      	str	r2, [r0, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	7c20      	ldrb	r0, [r4, #16]
 8002bde:	f002 fde1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002be2:	7c20      	ldrb	r0, [r4, #16]
 8002be4:	f003 f84a 	bl	8005c7c <USBPD_PRL_Reset>
 8002be8:	2002      	movs	r0, #2
 8002bea:	7460      	strb	r0, [r4, #17]
 8002bec:	7ca0      	ldrb	r0, [r4, #18]
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d00a      	beq.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	74a0      	strb	r0, [r4, #18]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	7c21      	ldrb	r1, [r4, #16]
 8002c00:	2004      	movs	r0, #4
 8002c02:	4eca      	ldr	r6, [pc, #808]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002c04:	6836      	ldr	r6, [r6, #0]
 8002c06:	47b0      	blx	r6
 8002c08:	6960      	ldr	r0, [r4, #20]
 8002c0a:	0341      	lsls	r1, r0, #13
 8002c0c:	0fc9      	lsrs	r1, r1, #31
 8002c0e:	d006      	beq.n	8002c1e <USBPD_PE_StateMachine_SRC+0x92>
 8002c10:	49c7      	ldr	r1, [pc, #796]	@ (8002f30 <__iar_annotation$$branch+0x70>)
 8002c12:	4001      	ands	r1, r0
 8002c14:	6161      	str	r1, [r4, #20]
 8002c16:	2164      	movs	r1, #100	@ 0x64
 8002c18:	7c20      	ldrb	r0, [r4, #16]
 8002c1a:	f7fd fc31 	bl	8000480 <USBPD_PE_Notification>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fe62 	bl	80008e8 <PE_Get_RxEvent>
 8002c24:	4669      	mov	r1, sp
 8002c26:	7308      	strb	r0, [r1, #12]
 8002c28:	4668      	mov	r0, sp
 8002c2a:	7b00      	ldrb	r0, [r0, #12]
 8002c2c:	2803      	cmp	r0, #3
 8002c2e:	d105      	bne.n	8002c3c <USBPD_PE_StateMachine_SRC+0xb0>
 8002c30:	2001      	movs	r0, #1
 8002c32:	b007      	add	sp, #28
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000224 	.word	0x20000224
 8002c3c:	4668      	mov	r0, sp
 8002c3e:	7345      	strb	r5, [r0, #13]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	04c1      	lsls	r1, r0, #19
 8002c46:	0fc9      	lsrs	r1, r1, #31
 8002c48:	d100      	bne.n	8002c4c <USBPD_PE_StateMachine_SRC+0xc0>
 8002c4a:	e13b      	b.n	8002ec4 <__iar_annotation$$branch+0x4>
 8002c4c:	6960      	ldr	r0, [r4, #20]
 8002c4e:	0381      	lsls	r1, r0, #14
 8002c50:	0fc9      	lsrs	r1, r1, #31
 8002c52:	d100      	bne.n	8002c56 <USBPD_PE_StateMachine_SRC+0xca>
 8002c54:	e144      	b.n	8002ee0 <__iar_annotation$$branch+0x20>
 8002c56:	4668      	mov	r0, sp
 8002c58:	7b40      	ldrb	r0, [r0, #13]
 8002c5a:	f002 fd9b 	bl	8005794 <USBPD_PRL_FastRoleSwapSignalling>
 8002c5e:	20a6      	movs	r0, #166	@ 0xa6
 8002c60:	7460      	strb	r0, [r4, #17]
 8002c62:	2109      	movs	r1, #9
 8002c64:	7721      	strb	r1, [r4, #28]
 8002c66:	2100      	movs	r1, #0
 8002c68:	2232      	movs	r2, #50	@ 0x32
 8002c6a:	54a1      	strb	r1, [r4, r2]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	4ab1      	ldr	r2, [pc, #708]	@ (8002f34 <__iar_annotation$$branch+0x74>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	6162      	str	r2, [r4, #20]
 8002c74:	49b0      	ldr	r1, [pc, #704]	@ (8002f38 <__iar_annotation$$branch+0x78>)
 8002c76:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8002c78:	7ca1      	ldrb	r1, [r4, #18]
 8002c7a:	29a6      	cmp	r1, #166	@ 0xa6
 8002c7c:	d000      	beq.n	8002c80 <USBPD_PE_StateMachine_SRC+0xf4>
 8002c7e:	e125      	b.n	8002ecc <__iar_annotation$$branch+0xc>
 8002c80:	2502      	movs	r5, #2
 8002c82:	4668      	mov	r0, sp
 8002c84:	7b00      	ldrb	r0, [r0, #12]
 8002c86:	2811      	cmp	r0, #17
 8002c88:	d11f      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	0701      	lsls	r1, r0, #28
 8002c90:	0fc9      	lsrs	r1, r1, #31
 8002c92:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8002c94:	0680      	lsls	r0, r0, #26
 8002c96:	0fc2      	lsrs	r2, r0, #31
 8002c98:	4291      	cmp	r1, r2
 8002c9a:	d116      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	7308      	strb	r0, [r1, #12]
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fe57 	bl	8000956 <PE_Clear_RxEvent>
 8002ca8:	2092      	movs	r0, #146	@ 0x92
 8002caa:	7460      	strb	r0, [r4, #17]
 8002cac:	7ca0      	ldrb	r0, [r4, #18]
 8002cae:	2892      	cmp	r0, #146	@ 0x92
 8002cb0:	d100      	bne.n	8002cb4 <USBPD_PE_StateMachine_SRC+0x128>
 8002cb2:	e155      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002cb4:	2092      	movs	r0, #146	@ 0x92
 8002cb6:	74a0      	strb	r0, [r4, #18]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2292      	movs	r2, #146	@ 0x92
 8002cc0:	7c21      	ldrb	r1, [r4, #16]
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	4e99      	ldr	r6, [pc, #612]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002cc6:	6836      	ldr	r6, [r6, #0]
 8002cc8:	47b0      	blx	r6
 8002cca:	7c60      	ldrb	r0, [r4, #17]
 8002ccc:	499b      	ldr	r1, [pc, #620]	@ (8002f3c <__iar_annotation$$branch+0x7c>)
 8002cce:	1866      	adds	r6, r4, r1
 8002cd0:	4f9b      	ldr	r7, [pc, #620]	@ (8002f40 <__iar_annotation$$branch+0x80>)
 8002cd2:	499c      	ldr	r1, [pc, #624]	@ (8002f44 <__iar_annotation$$branch+0x84>)
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <USBPD_PE_StateMachine_SRC+0x14e>
 8002cd8:	e136      	b.n	8002f48 <__iar_annotation$$branch+0x88>
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	d067      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	d100      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x158>
 8002ce2:	e149      	b.n	8002f78 <__iar_annotation$$branch+0xb8>
 8002ce4:	1e52      	subs	r2, r2, #1
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d801      	bhi.n	8002cee <__iar_annotation$$branch+0x4>

08002cea <__iar_annotation$$branch>:
 8002cea:	f000 fd90 	bl	800380e <__iar_annotation$$branch+0x94e>
 8002cee:	1e92      	subs	r2, r2, #2
 8002cf0:	d100      	bne.n	8002cf4 <__iar_annotation$$branch+0xa>
 8002cf2:	e189      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002cf4:	1e52      	subs	r2, r2, #1
 8002cf6:	d100      	bne.n	8002cfa <__iar_annotation$$branch+0x10>
 8002cf8:	e18b      	b.n	8003012 <__iar_annotation$$branch+0x152>
 8002cfa:	1e52      	subs	r2, r2, #1
 8002cfc:	d100      	bne.n	8002d00 <__iar_annotation$$branch+0x16>
 8002cfe:	e190      	b.n	8003022 <__iar_annotation$$branch+0x162>
 8002d00:	1e52      	subs	r2, r2, #1
 8002d02:	d100      	bne.n	8002d06 <__iar_annotation$$branch+0x1c>
 8002d04:	e1e1      	b.n	80030ca <__iar_annotation$$branch+0x20a>
 8002d06:	1e52      	subs	r2, r2, #1
 8002d08:	d100      	bne.n	8002d0c <__iar_annotation$$branch+0x22>
 8002d0a:	e223      	b.n	8003154 <__iar_annotation$$branch+0x294>
 8002d0c:	1ed2      	subs	r2, r2, #3
 8002d0e:	d100      	bne.n	8002d12 <__iar_annotation$$branch+0x28>
 8002d10:	e276      	b.n	8003200 <__iar_annotation$$branch+0x340>
 8002d12:	1e52      	subs	r2, r2, #1
 8002d14:	d100      	bne.n	8002d18 <__iar_annotation$$branch+0x2e>
 8002d16:	e286      	b.n	8003226 <__iar_annotation$$branch+0x366>
 8002d18:	1e52      	subs	r2, r2, #1
 8002d1a:	d100      	bne.n	8002d1e <__iar_annotation$$branch+0x34>
 8002d1c:	e11d      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002d1e:	1e52      	subs	r2, r2, #1
 8002d20:	d100      	bne.n	8002d24 <__iar_annotation$$branch+0x3a>
 8002d22:	e30d      	b.n	8003340 <__iar_annotation$$branch+0x480>
 8002d24:	1e52      	subs	r2, r2, #1
 8002d26:	d100      	bne.n	8002d2a <__iar_annotation$$branch+0x40>
 8002d28:	e2c6      	b.n	80032b8 <__iar_annotation$$branch+0x3f8>
 8002d2a:	1e52      	subs	r2, r2, #1
 8002d2c:	d100      	bne.n	8002d30 <__iar_annotation$$branch+0x46>
 8002d2e:	e2cc      	b.n	80032ca <__iar_annotation$$branch+0x40a>
 8002d30:	1e52      	subs	r2, r2, #1
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x4c>
 8002d34:	e2d8      	b.n	80032e8 <__iar_annotation$$branch+0x428>
 8002d36:	1e52      	subs	r2, r2, #1
 8002d38:	d100      	bne.n	8002d3c <__iar_annotation$$branch+0x52>
 8002d3a:	e389      	b.n	8003450 <__iar_annotation$$branch+0x590>
 8002d3c:	1e52      	subs	r2, r2, #1
 8002d3e:	d100      	bne.n	8002d42 <__iar_annotation$$branch+0x58>
 8002d40:	e32b      	b.n	800339a <__iar_annotation$$branch+0x4da>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	d100      	bne.n	8002d48 <__iar_annotation$$branch+0x5e>
 8002d46:	e332      	b.n	80033ae <__iar_annotation$$branch+0x4ee>
 8002d48:	1e52      	subs	r2, r2, #1
 8002d4a:	d100      	bne.n	8002d4e <__iar_annotation$$branch+0x64>
 8002d4c:	e1d5      	b.n	80030fa <__iar_annotation$$branch+0x23a>
 8002d4e:	1e52      	subs	r2, r2, #1
 8002d50:	d100      	bne.n	8002d54 <__iar_annotation$$branch+0x6a>
 8002d52:	e34c      	b.n	80033ee <__iar_annotation$$branch+0x52e>
 8002d54:	1e52      	subs	r2, r2, #1
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d929      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002d5a:	1e92      	subs	r2, r2, #2
 8002d5c:	d100      	bne.n	8002d60 <__iar_annotation$$branch+0x76>
 8002d5e:	e3a3      	b.n	80034a8 <__iar_annotation$$branch+0x5e8>
 8002d60:	1e52      	subs	r2, r2, #1
 8002d62:	d100      	bne.n	8002d66 <__iar_annotation$$branch+0x7c>
 8002d64:	e3b0      	b.n	80034c8 <__iar_annotation$$branch+0x608>
 8002d66:	1e92      	subs	r2, r2, #2
 8002d68:	d021      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002d6a:	1e52      	subs	r2, r2, #1
 8002d6c:	d101      	bne.n	8002d72 <__iar_annotation$$branch+0x4>

08002d6e <__iar_annotation$$branch>:
 8002d6e:	f000 fc88 	bl	8003682 <__iar_annotation$$branch+0x7c2>
 8002d72:	1e52      	subs	r2, r2, #1
 8002d74:	d101      	bne.n	8002d7a <__iar_annotation$$branch+0x4>

08002d76 <__iar_annotation$$branch>:
 8002d76:	f000 fc9a 	bl	80036ae <__iar_annotation$$branch+0x7ee>
 8002d7a:	1e52      	subs	r2, r2, #1
 8002d7c:	d101      	bne.n	8002d82 <__iar_annotation$$branch+0x4>

08002d7e <__iar_annotation$$branch>:
 8002d7e:	f000 fce6 	bl	800374e <__iar_annotation$$branch+0x88e>
 8002d82:	1e52      	subs	r2, r2, #1
 8002d84:	d101      	bne.n	8002d8a <__iar_annotation$$branch+0x4>

08002d86 <__iar_annotation$$branch>:
 8002d86:	f000 fd0f 	bl	80037a8 <__iar_annotation$$branch+0x8e8>
 8002d8a:	1e52      	subs	r2, r2, #1
 8002d8c:	d101      	bne.n	8002d92 <__iar_annotation$$branch+0x4>

08002d8e <__iar_annotation$$branch>:
 8002d8e:	f000 fbe5 	bl	800355c <__iar_annotation$$branch+0x69c>
 8002d92:	1e92      	subs	r2, r2, #2
 8002d94:	d101      	bne.n	8002d9a <__iar_annotation$$branch+0x4>

08002d96 <__iar_annotation$$branch>:
 8002d96:	f000 fc0a 	bl	80035ae <__iar_annotation$$branch+0x6ee>
 8002d9a:	1e52      	subs	r2, r2, #1
 8002d9c:	d101      	bne.n	8002da2 <__iar_annotation$$branch+0x4>

08002d9e <__iar_annotation$$branch>:
 8002d9e:	f000 fc2e 	bl	80035fe <__iar_annotation$$branch+0x73e>
 8002da2:	1e52      	subs	r2, r2, #1
 8002da4:	d101      	bne.n	8002daa <__iar_annotation$$branch+0x4>

08002da6 <__iar_annotation$$branch>:
 8002da6:	f000 fc49 	bl	800363c <__iar_annotation$$branch+0x77c>
 8002daa:	1e52      	subs	r2, r2, #1
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	d801      	bhi.n	8002db4 <__iar_annotation$$branch+0x4>

08002db0 <__iar_annotation$$branch>:
 8002db0:	f000 fe1b 	bl	80039ea <__iar_annotation$$branch+0x106>
 8002db4:	1ed2      	subs	r2, r2, #3
 8002db6:	d101      	bne.n	8002dbc <__iar_annotation$$branch+0x4>

08002db8 <__iar_annotation$$branch>:
 8002db8:	f000 fbf4 	bl	80035a4 <__iar_annotation$$branch+0x6e4>
 8002dbc:	1e52      	subs	r2, r2, #1
 8002dbe:	d101      	bne.n	8002dc4 <__iar_annotation$$branch+0x4>

08002dc0 <__iar_annotation$$branch>:
 8002dc0:	f000 fd96 	bl	80038f0 <__iar_annotation$$branch+0xc>
 8002dc4:	1e52      	subs	r2, r2, #1
 8002dc6:	d0f2      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dc8:	1e52      	subs	r2, r2, #1
 8002dca:	d101      	bne.n	8002dd0 <__iar_annotation$$branch+0x4>

08002dcc <__iar_annotation$$branch>:
 8002dcc:	f000 fda1 	bl	8003912 <__iar_annotation$$branch+0x2e>
 8002dd0:	1e52      	subs	r2, r2, #1
 8002dd2:	d101      	bne.n	8002dd8 <__iar_annotation$$branch+0x4>

08002dd4 <__iar_annotation$$branch>:
 8002dd4:	f000 fdcf 	bl	8003976 <__iar_annotation$$branch+0x92>
 8002dd8:	1e52      	subs	r2, r2, #1
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d9e7      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dde:	1e92      	subs	r2, r2, #2
 8002de0:	d001      	beq.n	8002de6 <__iar_annotation$$branch+0x12>
 8002de2:	1e92      	subs	r2, r2, #2
 8002de4:	2a05      	cmp	r2, #5
 8002de6:	d801      	bhi.n	8002dec <__iar_annotation$$branch+0x4>

08002de8 <__iar_annotation$$branch>:
 8002de8:	f000 fdfb 	bl	80039e2 <__iar_annotation$$branch+0xfe>
 8002dec:	1f92      	subs	r2, r2, #6
 8002dee:	d101      	bne.n	8002df4 <__iar_annotation$$branch+0x4>

08002df0 <__iar_annotation$$branch>:
 8002df0:	f000 fdd2 	bl	8003998 <__iar_annotation$$branch+0xb4>
 8002df4:	1e52      	subs	r2, r2, #1
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d9d9      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfa:	3a11      	subs	r2, #17
 8002dfc:	d0d7      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	d100      	bne.n	8002e04 <__iar_annotation$$branch+0x14>
 8002e02:	e150      	b.n	80030a6 <__iar_annotation$$branch+0x1e6>
 8002e04:	3a0f      	subs	r2, #15
 8002e06:	d101      	bne.n	8002e0c <__iar_annotation$$branch+0x4>

08002e08 <__iar_annotation$$branch>:
 8002e08:	f000 fce9 	bl	80037de <__iar_annotation$$branch+0x91e>
 8002e0c:	1fd2      	subs	r2, r2, #7
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d9cd      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e12:	1f52      	subs	r2, r2, #5
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d9ca      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e18:	3a0d      	subs	r2, #13
 8002e1a:	d0c8      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e1c:	3a12      	subs	r2, #18
 8002e1e:	d101      	bne.n	8002e24 <__iar_annotation$$branch+0x4>

08002e20 <__iar_annotation$$branch>:
 8002e20:	f000 fe18 	bl	8003a54 <__iar_annotation$$branch+0x62>
 8002e24:	3a0c      	subs	r2, #12
 8002e26:	d100      	bne.n	8002e2a <__iar_annotation$$branch+0xa>
 8002e28:	e09a      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002e2a:	1e52      	subs	r2, r2, #1
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d9be      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e30:	1ed2      	subs	r2, r2, #3
 8002e32:	d100      	bne.n	8002e36 <__iar_annotation$$branch+0x16>
 8002e34:	e213      	b.n	800325e <__iar_annotation$$branch+0x39e>
 8002e36:	1e52      	subs	r2, r2, #1
 8002e38:	d100      	bne.n	8002e3c <__iar_annotation$$branch+0x1c>
 8002e3a:	e229      	b.n	8003290 <__iar_annotation$$branch+0x3d0>
 8002e3c:	1e92      	subs	r2, r2, #2
 8002e3e:	d0b6      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e40:	1e52      	subs	r2, r2, #1
 8002e42:	d100      	bne.n	8002e46 <__iar_annotation$$branch+0x26>
 8002e44:	e0e0      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002e46:	1e92      	subs	r2, r2, #2
 8002e48:	2a08      	cmp	r2, #8
 8002e4a:	d801      	bhi.n	8002e50 <__iar_annotation$$branch+0x4>

08002e4c <__iar_annotation$$branch>:
 8002e4c:	f000 fdd3 	bl	80039f6 <__iar_annotation$$branch+0x4>
 8002e50:	3a0a      	subs	r2, #10
 8002e52:	d101      	bne.n	8002e58 <__iar_annotation$$branch+0x4>

08002e54 <__iar_annotation$$branch>:
 8002e54:	f000 fde2 	bl	8003a1c <__iar_annotation$$branch+0x2a>
 8002e58:	a903      	add	r1, sp, #12
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f001 fb32 	bl	80044c4 <PE_StateMachine_VDM>
 8002e60:	0005      	movs	r5, r0
 8002e62:	7c62      	ldrb	r2, [r4, #17]
 8002e64:	4e31      	ldr	r6, [pc, #196]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002e66:	7ca0      	ldrb	r0, [r4, #18]
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d007      	beq.n	8002e7c <__iar_annotation$$branch+0x28>
 8002e6c:	74a2      	strb	r2, [r4, #18]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	7c21      	ldrb	r1, [r4, #16]
 8002e76:	2004      	movs	r0, #4
 8002e78:	6837      	ldr	r7, [r6, #0]
 8002e7a:	47b8      	blx	r7
 8002e7c:	4668      	mov	r0, sp
 8002e7e:	7b00      	ldrb	r0, [r0, #12]
 8002e80:	2814      	cmp	r0, #20
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fdec 	bl	8003a60 <__iar_annotation$$branch+0x6e>
 8002e88:	0020      	movs	r0, r4
 8002e8a:	f7fd fdab 	bl	80009e4 <PE_Check_AMSConflict>
 8002e8e:	2815      	cmp	r0, #21
 8002e90:	d109      	bne.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e92:	4668      	mov	r0, sp
 8002e94:	7b00      	ldrb	r0, [r0, #12]
 8002e96:	2814      	cmp	r0, #20
 8002e98:	d005      	beq.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e9a:	2014      	movs	r0, #20
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	7308      	strb	r0, [r1, #12]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f7fd fd58 	bl	8000956 <PE_Clear_RxEvent>
 8002ea6:	7c62      	ldrb	r2, [r4, #17]
 8002ea8:	7ca0      	ldrb	r0, [r4, #18]
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d007      	beq.n	8002ebe <__iar_annotation$$branch+0x3a>
 8002eae:	74a2      	strb	r2, [r4, #18]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	9000      	str	r0, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7c21      	ldrb	r1, [r4, #16]
 8002eb8:	2004      	movs	r0, #4
 8002eba:	6835      	ldr	r5, [r6, #0]
 8002ebc:	47a8      	blx	r5
 8002ebe:	2500      	movs	r5, #0

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fded 	bl	8003a9e <__iar_annotation$$branch+0xac>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	43ed      	mvns	r5, r5
 8002ec8:	0028      	movs	r0, r5
 8002eca:	e6b2      	b.n	8002c32 <USBPD_PE_StateMachine_SRC+0xa6>
 8002ecc:	74a0      	strb	r0, [r4, #18]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	22a6      	movs	r2, #166	@ 0xa6
 8002ed6:	7c21      	ldrb	r1, [r4, #16]
 8002ed8:	2004      	movs	r0, #4
 8002eda:	4d14      	ldr	r5, [pc, #80]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	47a8      	blx	r5
 8002ee0:	2502      	movs	r5, #2
 8002ee2:	2032      	movs	r0, #50	@ 0x32
 8002ee4:	5c20      	ldrb	r0, [r4, r0]
 8002ee6:	280f      	cmp	r0, #15
 8002ee8:	d001      	beq.n	8002eee <__iar_annotation$$branch+0x2e>
 8002eea:	2814      	cmp	r0, #20
 8002eec:	d11c      	bne.n	8002f28 <__iar_annotation$$branch+0x68>
 8002eee:	4668      	mov	r0, sp
 8002ef0:	7b00      	ldrb	r0, [r0, #12]
 8002ef2:	2814      	cmp	r0, #20
 8002ef4:	d005      	beq.n	8002f02 <__iar_annotation$$branch+0x42>
 8002ef6:	2014      	movs	r0, #20
 8002ef8:	4669      	mov	r1, sp
 8002efa:	7308      	strb	r0, [r1, #12]
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7fd fd2a 	bl	8000956 <PE_Clear_RxEvent>
 8002f02:	2032      	movs	r0, #50	@ 0x32
 8002f04:	5c22      	ldrb	r2, [r4, r0]
 8002f06:	7462      	strb	r2, [r4, #17]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	2332      	movs	r3, #50	@ 0x32
 8002f0c:	54e0      	strb	r0, [r4, r3]
 8002f0e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002f10:	7ca0      	ldrb	r0, [r4, #18]
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d008      	beq.n	8002f28 <__iar_annotation$$branch+0x68>
 8002f16:	74a2      	strb	r2, [r4, #18]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	7c21      	ldrb	r1, [r4, #16]
 8002f20:	2004      	movs	r0, #4
 8002f22:	4e02      	ldr	r6, [pc, #8]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002f24:	6836      	ldr	r6, [r6, #0]
 8002f26:	47b0      	blx	r6
 8002f28:	e6ab      	b.n	8002c82 <USBPD_PE_StateMachine_SRC+0xf6>
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	00008011 	.word	0x00008011
 8002f3c:	0000025e 	.word	0x0000025e
 8002f40:	0000801b 	.word	0x0000801b
 8002f44:	0000f01f 	.word	0x0000f01f
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4391      	bics	r1, r2
 8002f50:	6001      	str	r1, [r0, #0]
 8002f52:	215f      	movs	r1, #95	@ 0x5f
 8002f54:	7c20      	ldrb	r0, [r4, #16]
 8002f56:	f7fd fa93 	bl	8000480 <USBPD_PE_Notification>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	e780      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	4391      	bics	r1, r2
 8002f68:	6001      	str	r1, [r0, #0]
 8002f6a:	68a0      	ldr	r0, [r4, #8]
 8002f6c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d0f3      	beq.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f72:	7c20      	ldrb	r0, [r4, #16]
 8002f74:	4788      	blx	r1
 8002f76:	e7f0      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	6860      	ldr	r0, [r4, #4]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	0bc0      	lsrs	r0, r0, #15
 8002f80:	4038      	ands	r0, r7
 8002f82:	d002      	beq.n	8002f8a <__iar_annotation$$branch+0xca>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	e000      	b.n	8002f8c <__iar_annotation$$branch+0xcc>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	7b40      	ldrb	r0, [r0, #13]
 8002f90:	f002 fc08 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	6801      	ldr	r1, [r0, #0]
 8002f98:	0b0a      	lsrs	r2, r1, #12
 8002f9a:	403a      	ands	r2, r7
 8002f9c:	d02f      	beq.n	8002ffe <__iar_annotation$$branch+0x13e>
 8002f9e:	078a      	lsls	r2, r1, #30
 8002fa0:	0f92      	lsrs	r2, r2, #30
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d101      	bne.n	8002faa <__iar_annotation$$branch+0xea>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e000      	b.n	8002fac <__iar_annotation$$branch+0xec>
 8002faa:	2220      	movs	r2, #32
 8002fac:	2320      	movs	r3, #32
 8002fae:	4399      	bics	r1, r3
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	6002      	str	r2, [r0, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	70f0      	strb	r0, [r6, #3]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fe f9f3 	bl	80013a6 <PE_SetPowerNegotiation>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	0901      	lsrs	r1, r0, #4
 8002fc6:	4039      	ands	r1, r7
 8002fc8:	d005      	beq.n	8002fd6 <__iar_annotation$$branch+0x116>
 8002fca:	48ae      	ldr	r0, [pc, #696]	@ (8003284 <__iar_annotation$$branch+0x3c4>)
 8002fcc:	83e0      	strh	r0, [r4, #30]
 8002fce:	2514      	movs	r5, #20
 8002fd0:	2006      	movs	r0, #6
 8002fd2:	7460      	strb	r0, [r4, #17]
 8002fd4:	e745      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002fd6:	0bc0      	lsrs	r0, r0, #15
 8002fd8:	4007      	ands	r7, r0
 8002fda:	d00a      	beq.n	8002ff2 <__iar_annotation$$branch+0x132>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	7800      	ldrb	r0, [r0, #0]
 8002fe0:	0780      	lsls	r0, r0, #30
 8002fe2:	d400      	bmi.n	8002fe6 <__iar_annotation$$branch+0x126>
 8002fe4:	e087      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fe6:	7930      	ldrb	r0, [r6, #4]
 8002fe8:	2814      	cmp	r0, #20
 8002fea:	d300      	bcc.n	8002fee <__iar_annotation$$branch+0x12e>
 8002fec:	e083      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d100      	bne.n	8002ff6 <__iar_annotation$$branch+0x136>
 8002ff4:	e07f      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002ff6:	1c40      	adds	r0, r0, #1
 8002ff8:	7130      	strb	r0, [r6, #4]
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	e7e9      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8002ffe:	2121      	movs	r1, #33	@ 0x21
 8003000:	7c20      	ldrb	r0, [r4, #16]
 8003002:	f7fd fa3d 	bl	8000480 <USBPD_PE_Notification>
 8003006:	e04c      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003008:	a903      	add	r1, sp, #12
 800300a:	0020      	movs	r0, r4
 800300c:	f000 fd8c 	bl	8003b28 <PE_StateMachine_VDMCable>
 8003010:	e726      	b.n	8002e60 <__iar_annotation$$branch+0xc>
 8003012:	8be0      	ldrh	r0, [r4, #30]
 8003014:	03a9      	lsls	r1, r5, #14
 8003016:	4288      	cmp	r0, r1
 8003018:	d102      	bne.n	8003020 <__iar_annotation$$branch+0x160>
 800301a:	2007      	movs	r0, #7
 800301c:	7460      	strb	r0, [r4, #17]
 800301e:	2500      	movs	r5, #0
 8003020:	e71f      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	0740      	lsls	r0, r0, #29
 8003026:	0fc1      	lsrs	r1, r0, #31
 8003028:	0020      	movs	r0, r4
 800302a:	f000 fd45 	bl	8003ab8 <PE_Send_SRCCapabilities>
 800302e:	2805      	cmp	r0, #5
 8003030:	d002      	beq.n	8003038 <__iar_annotation$$branch+0x178>
 8003032:	2809      	cmp	r0, #9
 8003034:	d0f4      	beq.n	8003020 <__iar_annotation$$branch+0x160>
 8003036:	e011      	b.n	800305c <__iar_annotation$$branch+0x19c>
 8003038:	2001      	movs	r0, #1
 800303a:	7720      	strb	r0, [r4, #28]
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	2104      	movs	r1, #4
 8003040:	4301      	orrs	r1, r0
 8003042:	6161      	str	r1, [r4, #20]
 8003044:	2000      	movs	r0, #0
 8003046:	70f0      	strb	r0, [r6, #3]
 8003048:	70b0      	strb	r0, [r6, #2]
 800304a:	83e7      	strh	r7, [r4, #30]
 800304c:	251b      	movs	r5, #27
 800304e:	2016      	movs	r0, #22
 8003050:	7460      	strb	r0, [r4, #17]
 8003052:	210f      	movs	r1, #15
 8003054:	7c20      	ldrb	r0, [r4, #16]
 8003056:	f7fd fa13 	bl	8000480 <USBPD_PE_Notification>
 800305a:	e702      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800305c:	6960      	ldr	r0, [r4, #20]
 800305e:	0741      	lsls	r1, r0, #29
 8003060:	0fc9      	lsrs	r1, r1, #31
 8003062:	d10f      	bne.n	8003084 <__iar_annotation$$branch+0x1c4>
 8003064:	78f0      	ldrb	r0, [r6, #3]
 8003066:	2833      	cmp	r0, #51	@ 0x33
 8003068:	d217      	bcs.n	800309a <__iar_annotation$$branch+0x1da>
 800306a:	4887      	ldr	r0, [pc, #540]	@ (8003288 <__iar_annotation$$branch+0x3c8>)
 800306c:	83e0      	strh	r0, [r4, #30]
 800306e:	2596      	movs	r5, #150	@ 0x96
 8003070:	2008      	movs	r0, #8
 8003072:	7460      	strb	r0, [r4, #17]
 8003074:	4885      	ldr	r0, [pc, #532]	@ (800328c <__iar_annotation$$branch+0x3cc>)
 8003076:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003078:	4201      	tst	r1, r0
 800307a:	d002      	beq.n	8003082 <__iar_annotation$$branch+0x1c2>
 800307c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 800307e:	0005      	movs	r5, r0
 8003080:	400d      	ands	r5, r1
 8003082:	e6ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	7800      	ldrb	r0, [r0, #0]
 8003088:	0780      	lsls	r0, r0, #30
 800308a:	0f80      	lsrs	r0, r0, #30
 800308c:	2802      	cmp	r0, #2
 800308e:	d102      	bne.n	8003096 <__iar_annotation$$branch+0x1d6>
 8003090:	7c20      	ldrb	r0, [r4, #16]
 8003092:	f002 fb68 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003096:	2011      	movs	r0, #17
 8003098:	e7c0      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800309a:	2121      	movs	r1, #33	@ 0x21
 800309c:	7c20      	ldrb	r0, [r4, #16]
 800309e:	f7fd f9ef 	bl	8000480 <USBPD_PE_Notification>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e795      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030a6:	2100      	movs	r1, #0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 fd05 	bl	8003ab8 <PE_Send_SRCCapabilities>
 80030ae:	2805      	cmp	r0, #5
 80030b0:	d107      	bne.n	80030c2 <__iar_annotation$$branch+0x202>
 80030b2:	2104      	movs	r1, #4
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7fe f976 	bl	80013a6 <PE_SetPowerNegotiation>
 80030ba:	2001      	movs	r0, #1
 80030bc:	7720      	strb	r0, [r4, #28]
 80030be:	83e7      	strh	r7, [r4, #30]
 80030c0:	e7c5      	b.n	800304e <__iar_annotation$$branch+0x18e>
 80030c2:	2000      	movs	r0, #0
 80030c4:	7720      	strb	r0, [r4, #28]
 80030c6:	2011      	movs	r0, #17
 80030c8:	e783      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030ca:	03a8      	lsls	r0, r5, #14
 80030cc:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d106      	bne.n	80030e0 <__iar_annotation$$branch+0x220>
 80030d2:	2100      	movs	r1, #0
 80030d4:	8461      	strh	r1, [r4, #34]	@ 0x22
 80030d6:	7931      	ldrb	r1, [r6, #4]
 80030d8:	1c49      	adds	r1, r1, #1
 80030da:	7131      	strb	r1, [r6, #4]
 80030dc:	2105      	movs	r1, #5
 80030de:	7461      	strb	r1, [r4, #17]
 80030e0:	8be1      	ldrh	r1, [r4, #30]
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d1cd      	bne.n	8003082 <__iar_annotation$$branch+0x1c2>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6840      	ldr	r0, [r0, #4]
 80030ea:	0601      	lsls	r1, r0, #24
 80030ec:	0fc9      	lsrs	r1, r1, #31
 80030ee:	d002      	beq.n	80030f6 <__iar_annotation$$branch+0x236>
 80030f0:	78f0      	ldrb	r0, [r6, #3]
 80030f2:	1c40      	adds	r0, r0, #1
 80030f4:	70f0      	strb	r0, [r6, #3]
 80030f6:	2007      	movs	r0, #7
 80030f8:	e76b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2811      	cmp	r0, #17
 8003100:	d109      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003102:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003104:	0bc1      	lsrs	r1, r0, #15
 8003106:	d106      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003108:	0b01      	lsrs	r1, r0, #12
 800310a:	0749      	lsls	r1, r1, #29
 800310c:	d100      	bne.n	8003110 <__iar_annotation$$branch+0x250>
 800310e:	e111      	b.n	8003334 <__iar_annotation$$branch+0x474>
 8003110:	06c0      	lsls	r0, r0, #27
 8003112:	0ec0      	lsrs	r0, r0, #27
 8003114:	2802      	cmp	r0, #2
 8003116:	d000      	beq.n	800311a <__iar_annotation$$branch+0x25a>
 8003118:	e10c      	b.n	8003334 <__iar_annotation$$branch+0x474>
 800311a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800311c:	7881      	ldrb	r1, [r0, #2]
 800311e:	78c2      	ldrb	r2, [r0, #3]
 8003120:	0212      	lsls	r2, r2, #8
 8003122:	1889      	adds	r1, r1, r2
 8003124:	7902      	ldrb	r2, [r0, #4]
 8003126:	0412      	lsls	r2, r2, #16
 8003128:	1889      	adds	r1, r1, r2
 800312a:	7940      	ldrb	r0, [r0, #5]
 800312c:	0600      	lsls	r0, r0, #24
 800312e:	1808      	adds	r0, r1, r0
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003134:	0600      	lsls	r0, r0, #24
 8003136:	0f81      	lsrs	r1, r0, #30
 8003138:	7c20      	ldrb	r0, [r4, #16]
 800313a:	f7fd fd5b 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 800313e:	2304      	movs	r3, #4
 8003140:	466a      	mov	r2, sp
 8003142:	2106      	movs	r1, #6
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	68a5      	ldr	r5, [r4, #8]
 8003148:	69ad      	ldr	r5, [r5, #24]
 800314a:	47a8      	blx	r5
 800314c:	2009      	movs	r0, #9
 800314e:	7460      	strb	r0, [r4, #17]
 8003150:	2500      	movs	r5, #0
 8003152:	e0e5      	b.n	8003320 <__iar_annotation$$branch+0x460>
 8003154:	2702      	movs	r7, #2
 8003156:	2507      	movs	r5, #7
 8003158:	a901      	add	r1, sp, #4
 800315a:	7c20      	ldrb	r0, [r4, #16]
 800315c:	68a2      	ldr	r2, [r4, #8]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	4790      	blx	r2
 8003162:	280a      	cmp	r0, #10
 8003164:	d010      	beq.n	8003188 <__iar_annotation$$branch+0x2c8>
 8003166:	280b      	cmp	r0, #11
 8003168:	d035      	beq.n	80031d6 <__iar_annotation$$branch+0x316>
 800316a:	280d      	cmp	r0, #13
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	d136      	bne.n	80031e0 <__iar_annotation$$branch+0x320>
 8003172:	0a00      	lsrs	r0, r0, #8
 8003174:	4005      	ands	r5, r0
 8003176:	2d03      	cmp	r5, #3
 8003178:	d101      	bne.n	800317e <__iar_annotation$$branch+0x2be>
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <__iar_annotation$$branch+0x2c0>
 800317e:	230e      	movs	r3, #14
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	e035      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 8003188:	48a9      	ldr	r0, [pc, #676]	@ (8003430 <__iar_annotation$$branch+0x570>)
 800318a:	83e0      	strh	r0, [r4, #30]
 800318c:	271e      	movs	r7, #30
 800318e:	6860      	ldr	r0, [r4, #4]
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	0a00      	lsrs	r0, r0, #8
 8003194:	4005      	ands	r5, r0
 8003196:	2d01      	cmp	r5, #1
 8003198:	d00b      	beq.n	80031b2 <__iar_annotation$$branch+0x2f2>
 800319a:	9801      	ldr	r0, [sp, #4]
 800319c:	2803      	cmp	r0, #3
 800319e:	d108      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	06c0      	lsls	r0, r0, #27
 80031a4:	0f80      	lsrs	r0, r0, #30
 80031a6:	2803      	cmp	r0, #3
 80031a8:	d103      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031aa:	2080      	movs	r0, #128	@ 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	83e0      	strh	r0, [r4, #30]
 80031b0:	2700      	movs	r7, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	230c      	movs	r3, #12
 80031b8:	2203      	movs	r2, #3
 80031ba:	2100      	movs	r1, #0
 80031bc:	0020      	movs	r0, r4
 80031be:	f7fe f9a7 	bl	8001510 <PE_Send_CtrlMessage>
 80031c2:	6960      	ldr	r0, [r4, #20]
 80031c4:	2118      	movs	r1, #24
 80031c6:	4388      	bics	r0, r1
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	2218      	movs	r2, #24
 80031ce:	400a      	ands	r2, r1
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6162      	str	r2, [r4, #20]
 80031d4:	e012      	b.n	80031fc <__iar_annotation$$branch+0x33c>
 80031d6:	2000      	movs	r0, #0
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	230c      	movs	r3, #12
 80031dc:	2202      	movs	r2, #2
 80031de:	e009      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	4005      	ands	r5, r0
 80031e4:	2d03      	cmp	r5, #3
 80031e6:	d101      	bne.n	80031ec <__iar_annotation$$branch+0x32c>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e000      	b.n	80031ee <__iar_annotation$$branch+0x32e>
 80031ec:	230e      	movs	r3, #14
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	0020      	movs	r0, r4
 80031f8:	f7fe f98a 	bl	8001510 <PE_Send_CtrlMessage>
 80031fc:	003d      	movs	r5, r7
 80031fe:	e630      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003200:	8be0      	ldrh	r0, [r4, #30]
 8003202:	03a9      	lsls	r1, r5, #14
 8003204:	4288      	cmp	r0, r1
 8003206:	d1fa      	bne.n	80031fe <__iar_annotation$$branch+0x33e>
 8003208:	2104      	movs	r1, #4
 800320a:	0020      	movs	r0, r4
 800320c:	f7fe f8cb 	bl	80013a6 <PE_SetPowerNegotiation>
 8003210:	68a0      	ldr	r0, [r4, #8]
 8003212:	6801      	ldr	r1, [r0, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0f2      	beq.n	80031fe <__iar_annotation$$branch+0x33e>
 8003218:	7c20      	ldrb	r0, [r4, #16]
 800321a:	4788      	blx	r1
 800321c:	2800      	cmp	r0, #0
 800321e:	d000      	beq.n	8003222 <__iar_annotation$$branch+0x362>
 8003220:	e2db      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003222:	200d      	movs	r0, #13
 8003224:	e6d5      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8003226:	2000      	movs	r0, #0
 8003228:	9000      	str	r0, [sp, #0]
 800322a:	2303      	movs	r3, #3
 800322c:	2206      	movs	r2, #6
 800322e:	2100      	movs	r1, #0
 8003230:	0020      	movs	r0, r4
 8003232:	f7fe f96d 	bl	8001510 <PE_Send_CtrlMessage>
 8003236:	2800      	cmp	r0, #0
 8003238:	d110      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 800323a:	2103      	movs	r1, #3
 800323c:	0020      	movs	r0, r4
 800323e:	f7fe f8b2 	bl	80013a6 <PE_SetPowerNegotiation>
 8003242:	2110      	movs	r1, #16
 8003244:	7c20      	ldrb	r0, [r4, #16]
 8003246:	f7fd f91b 	bl	8000480 <USBPD_PE_Notification>
 800324a:	2000      	movs	r0, #0
 800324c:	84a0      	strh	r0, [r4, #36]	@ 0x24
 800324e:	6960      	ldr	r0, [r4, #20]
 8003250:	06c0      	lsls	r0, r0, #27
 8003252:	0f80      	lsrs	r0, r0, #30
 8003254:	2803      	cmp	r0, #3
 8003256:	d101      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003258:	4876      	ldr	r0, [pc, #472]	@ (8003434 <__iar_annotation$$branch+0x574>)
 800325a:	84a0      	strh	r0, [r4, #36]	@ 0x24
 800325c:	e601      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800325e:	2001      	movs	r0, #1
 8003260:	9000      	str	r0, [sp, #0]
 8003262:	2397      	movs	r3, #151	@ 0x97
 8003264:	2202      	movs	r2, #2
 8003266:	2100      	movs	r1, #0
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe f951 	bl	8001510 <PE_Send_CtrlMessage>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f4      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003272:	7725      	strb	r5, [r4, #28]
 8003274:	2129      	movs	r1, #41	@ 0x29
 8003276:	7c20      	ldrb	r0, [r4, #16]
 8003278:	f7fd f902 	bl	8000480 <USBPD_PE_Notification>
 800327c:	486e      	ldr	r0, [pc, #440]	@ (8003438 <__iar_annotation$$branch+0x578>)
 800327e:	83e0      	strh	r0, [r4, #30]
 8003280:	4d6e      	ldr	r5, [pc, #440]	@ (800343c <__iar_annotation$$branch+0x57c>)
 8003282:	e5ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003284:	00008014 	.word	0x00008014
 8003288:	00008096 	.word	0x00008096
 800328c:	00007fff 	.word	0x00007fff
 8003290:	8be0      	ldrh	r0, [r4, #30]
 8003292:	03a9      	lsls	r1, r5, #14
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <__iar_annotation$$branch+0x3c2>
 8003298:	212a      	movs	r1, #42	@ 0x2a
 800329a:	7c20      	ldrb	r0, [r4, #16]
 800329c:	f7fd f8f0 	bl	8000480 <USBPD_PE_Notification>
 80032a0:	2000      	movs	r0, #0
 80032a2:	9000      	str	r0, [sp, #0]
 80032a4:	2303      	movs	r3, #3
 80032a6:	2206      	movs	r2, #6
 80032a8:	2100      	movs	r1, #0
 80032aa:	0020      	movs	r0, r4
 80032ac:	f7fe f930 	bl	8001510 <PE_Send_CtrlMessage>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d109      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032b4:	212e      	movs	r1, #46	@ 0x2e
 80032b6:	e6cd      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032b8:	2000      	movs	r0, #0
 80032ba:	9000      	str	r0, [sp, #0]
 80032bc:	2307      	movs	r3, #7
 80032be:	2203      	movs	r2, #3
 80032c0:	2100      	movs	r1, #0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7fe f924 	bl	8001510 <PE_Send_CtrlMessage>
 80032c8:	e5cb      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80032ca:	2000      	movs	r0, #0
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2312      	movs	r3, #18
 80032d0:	220d      	movs	r2, #13
 80032d2:	2031      	movs	r0, #49	@ 0x31
 80032d4:	5c21      	ldrb	r1, [r4, r0]
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fe f91a 	bl	8001510 <PE_Send_CtrlMessage>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f3      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032e0:	83e7      	strh	r7, [r4, #30]
 80032e2:	251b      	movs	r5, #27
 80032e4:	2130      	movs	r1, #48	@ 0x30
 80032e6:	e6b5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032e8:	4668      	mov	r0, sp
 80032ea:	7b00      	ldrb	r0, [r0, #12]
 80032ec:	2814      	cmp	r0, #20
 80032ee:	d021      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 80032f0:	2030      	movs	r0, #48	@ 0x30
 80032f2:	5c20      	ldrb	r0, [r4, r0]
 80032f4:	2231      	movs	r2, #49	@ 0x31
 80032f6:	5ca2      	ldrb	r2, [r4, r2]
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d11b      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 80032fc:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80032fe:	4001      	ands	r1, r0
 8003300:	2903      	cmp	r1, #3
 8003302:	d117      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 8003304:	2131      	movs	r1, #49	@ 0x31
 8003306:	7c20      	ldrb	r0, [r4, #16]
 8003308:	f7fd f8ba 	bl	8000480 <USBPD_PE_Notification>
 800330c:	2030      	movs	r0, #48	@ 0x30
 800330e:	5c20      	ldrb	r0, [r4, r0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d102      	bne.n	800331a <__iar_annotation$$branch+0x45a>
 8003314:	2007      	movs	r0, #7
 8003316:	7460      	strb	r0, [r4, #17]
 8003318:	e002      	b.n	8003320 <__iar_annotation$$branch+0x460>
 800331a:	2003      	movs	r0, #3
 800331c:	7460      	strb	r0, [r4, #17]
 800331e:	2500      	movs	r5, #0
 8003320:	4668      	mov	r0, sp
 8003322:	7b00      	ldrb	r0, [r0, #12]
 8003324:	2814      	cmp	r0, #20
 8003326:	d005      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 8003328:	2014      	movs	r0, #20
 800332a:	4669      	mov	r1, sp
 800332c:	7308      	strb	r0, [r1, #12]
 800332e:	0020      	movs	r0, r4
 8003330:	f7fd fb11 	bl	8000956 <PE_Clear_RxEvent>
 8003334:	8be0      	ldrh	r0, [r4, #30]
 8003336:	2180      	movs	r1, #128	@ 0x80
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	4288      	cmp	r0, r1
 800333c:	d1c4      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 800333e:	e24c      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	7800      	ldrb	r0, [r0, #0]
 8003344:	0780      	lsls	r0, r0, #30
 8003346:	0f80      	lsrs	r0, r0, #30
 8003348:	2802      	cmp	r0, #2
 800334a:	d102      	bne.n	8003352 <__iar_annotation$$branch+0x492>
 800334c:	7c20      	ldrb	r0, [r4, #16]
 800334e:	f002 fa0a 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003352:	2105      	movs	r1, #5
 8003354:	0020      	movs	r0, r4
 8003356:	f7fd fa99 	bl	800088c <PE_Send_RESET>
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	6801      	ldr	r1, [r0, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4391      	bics	r1, r2
 8003362:	6001      	str	r1, [r0, #0]
 8003364:	78b0      	ldrb	r0, [r6, #2]
 8003366:	1c40      	adds	r0, r0, #1
 8003368:	70b0      	strb	r0, [r6, #2]
 800336a:	6961      	ldr	r1, [r4, #20]
 800336c:	4834      	ldr	r0, [pc, #208]	@ (8003440 <__iar_annotation$$branch+0x580>)
 800336e:	4008      	ands	r0, r1
 8003370:	6160      	str	r0, [r4, #20]
 8003372:	2100      	movs	r1, #0
 8003374:	2232      	movs	r2, #50	@ 0x32
 8003376:	54a1      	strb	r1, [r4, r2]
 8003378:	4932      	ldr	r1, [pc, #200]	@ (8003444 <__iar_annotation$$branch+0x584>)
 800337a:	4001      	ands	r1, r0
 800337c:	6161      	str	r1, [r4, #20]
 800337e:	2202      	movs	r2, #2
 8003380:	2101      	movs	r1, #1
 8003382:	0020      	movs	r0, r4
 8003384:	f7fe f806 	bl	8001394 <PE_CallHardResetCallback>
 8003388:	2169      	movs	r1, #105	@ 0x69
 800338a:	4668      	mov	r0, sp
 800338c:	7b40      	ldrb	r0, [r0, #13]
 800338e:	f7fd f877 	bl	8000480 <USBPD_PE_Notification>
 8003392:	83e7      	strh	r7, [r4, #30]
 8003394:	251b      	movs	r5, #27
 8003396:	2015      	movs	r0, #21
 8003398:	e61b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	7800      	ldrb	r0, [r0, #0]
 800339e:	0780      	lsls	r0, r0, #30
 80033a0:	0f80      	lsrs	r0, r0, #30
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d1f0      	bne.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033a6:	7c20      	ldrb	r0, [r4, #16]
 80033a8:	f002 f9dd 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 80033ac:	e7ec      	b.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033ae:	8be0      	ldrh	r0, [r4, #30]
 80033b0:	03a9      	lsls	r1, r5, #14
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d11a      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 80033b6:	6960      	ldr	r0, [r4, #20]
 80033b8:	78b1      	ldrb	r1, [r6, #2]
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d303      	bcc.n	80033c6 <__iar_annotation$$branch+0x506>
 80033be:	0741      	lsls	r1, r0, #29
 80033c0:	0fc9      	lsrs	r1, r1, #31
 80033c2:	d130      	bne.n	8003426 <__iar_annotation$$branch+0x566>
 80033c4:	e66d      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 80033c6:	4920      	ldr	r1, [pc, #128]	@ (8003448 <__iar_annotation$$branch+0x588>)
 80033c8:	83e1      	strh	r1, [r4, #30]
 80033ca:	2117      	movs	r1, #23
 80033cc:	7461      	strb	r1, [r4, #17]
 80033ce:	2500      	movs	r5, #0
 80033d0:	0540      	lsls	r0, r0, #21
 80033d2:	0f80      	lsrs	r0, r0, #30
 80033d4:	1e42      	subs	r2, r0, #1
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	0fd2      	lsrs	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	0020      	movs	r0, r4
 80033de:	f7fd ffd9 	bl	8001394 <PE_CallHardResetCallback>
 80033e2:	2203      	movs	r2, #3
 80033e4:	2101      	movs	r1, #1
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fd ffd4 	bl	8001394 <PE_CallHardResetCallback>
 80033ec:	e539      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80033ee:	2100      	movs	r1, #0
 80033f0:	4668      	mov	r0, sp
 80033f2:	7b40      	ldrb	r0, [r0, #13]
 80033f4:	68a2      	ldr	r2, [r4, #8]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033f8:	4790      	blx	r2
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d105      	bne.n	800340a <__iar_annotation$$branch+0x54a>
 80033fe:	4813      	ldr	r0, [pc, #76]	@ (800344c <__iar_annotation$$branch+0x58c>)
 8003400:	83e0      	strh	r0, [r4, #30]
 8003402:	25c8      	movs	r5, #200	@ 0xc8
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	2013      	movs	r0, #19
 8003408:	7460      	strb	r0, [r4, #17]
 800340a:	8be0      	ldrh	r0, [r4, #30]
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	4288      	cmp	r0, r1
 8003412:	d1eb      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 8003414:	2206      	movs	r2, #6
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7fd ffbb 	bl	8001394 <PE_CallHardResetCallback>
 800341e:	6960      	ldr	r0, [r4, #20]
 8003420:	0741      	lsls	r1, r0, #29
 8003422:	0fc9      	lsrs	r1, r1, #31
 8003424:	d003      	beq.n	800342e <__iar_annotation$$branch+0x56e>
 8003426:	68a0      	ldr	r0, [r4, #8]
 8003428:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800342a:	2800      	cmp	r0, #0
 800342c:	d137      	bne.n	800349e <__iar_annotation$$branch+0x5de>
 800342e:	e638      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003430:	0000801e 	.word	0x0000801e
 8003434:	0000b6b0 	.word	0x0000b6b0
 8003438:	00008226 	.word	0x00008226
 800343c:	00000226 	.word	0x00000226
 8003440:	fffff9ff 	.word	0xfffff9ff
 8003444:	fffffe3f 	.word	0xfffffe3f
 8003448:	0000828a 	.word	0x0000828a
 800344c:	00008320 	.word	0x00008320
 8003450:	8be0      	ldrh	r0, [r4, #30]
 8003452:	03a9      	lsls	r1, r5, #14
 8003454:	4288      	cmp	r0, r1
 8003456:	d126      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 8003458:	2204      	movs	r2, #4
 800345a:	2101      	movs	r1, #1
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff99 	bl	8001394 <PE_CallHardResetCallback>
 8003462:	2101      	movs	r1, #1
 8003464:	4668      	mov	r0, sp
 8003466:	7b40      	ldrb	r0, [r0, #13]
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800346c:	4790      	blx	r2
 800346e:	2801      	cmp	r0, #1
 8003470:	d10d      	bne.n	800348e <__iar_annotation$$branch+0x5ce>
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fb1d 	bl	8000ab2 <PE_Reset_HardReset>
 8003478:	2168      	movs	r1, #104	@ 0x68
 800347a:	4668      	mov	r0, sp
 800347c:	7b40      	ldrb	r0, [r0, #13]
 800347e:	f7fc ffff 	bl	8000480 <USBPD_PE_Notification>
 8003482:	2205      	movs	r2, #5
 8003484:	2101      	movs	r1, #1
 8003486:	0020      	movs	r0, r4
 8003488:	f7fd ff84 	bl	8001394 <PE_CallHardResetCallback>
 800348c:	e633      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 800348e:	2206      	movs	r2, #6
 8003490:	2101      	movs	r1, #1
 8003492:	0020      	movs	r0, r4
 8003494:	f7fd ff7e 	bl	8001394 <PE_CallHardResetCallback>
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <__iar_annotation$$branch+0x5e2>
 80034a0:	e2d6      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80034a2:	2500      	movs	r5, #0
 80034a4:	7465      	strb	r5, [r4, #17]
 80034a6:	e4dc      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80034a8:	2001      	movs	r0, #1
 80034aa:	9000      	str	r0, [sp, #0]
 80034ac:	231b      	movs	r3, #27
 80034ae:	2207      	movs	r2, #7
 80034b0:	2100      	movs	r1, #0
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7fe f82c 	bl	8001510 <PE_Send_CtrlMessage>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 80034bc:	2006      	movs	r0, #6
 80034be:	7720      	strb	r0, [r4, #28]
 80034c0:	83e7      	strh	r7, [r4, #30]
 80034c2:	251b      	movs	r5, #27
 80034c4:	210b      	movs	r1, #11
 80034c6:	e5c5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80034c8:	4668      	mov	r0, sp
 80034ca:	7b00      	ldrb	r0, [r0, #12]
 80034cc:	2811      	cmp	r0, #17
 80034ce:	d13e      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 80034d0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80034d2:	0bc1      	lsrs	r1, r0, #15
 80034d4:	d11f      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034d6:	0441      	lsls	r1, r0, #17
 80034d8:	0f49      	lsrs	r1, r1, #29
 80034da:	d01c      	beq.n	8003516 <__iar_annotation$$branch+0x656>
 80034dc:	06c0      	lsls	r0, r0, #27
 80034de:	0ec0      	lsrs	r0, r0, #27
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80034e8:	1c82      	adds	r2, r0, #2
 80034ea:	2104      	movs	r1, #4
 80034ec:	7c20      	ldrb	r0, [r4, #16]
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	69ad      	ldr	r5, [r5, #24]
 80034f2:	47a8      	blx	r5
 80034f4:	2003      	movs	r0, #3
 80034f6:	7460      	strb	r0, [r4, #17]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4668      	mov	r0, sp
 80034fc:	7b00      	ldrb	r0, [r0, #12]
 80034fe:	2814      	cmp	r0, #20
 8003500:	d005      	beq.n	800350e <__iar_annotation$$branch+0x64e>
 8003502:	2014      	movs	r0, #20
 8003504:	4669      	mov	r1, sp
 8003506:	7308      	strb	r0, [r1, #12]
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa24 	bl	8000956 <PE_Clear_RxEvent>
 800350e:	210d      	movs	r1, #13
 8003510:	7c20      	ldrb	r0, [r4, #16]
 8003512:	f7fc ffb5 	bl	8000480 <USBPD_PE_Notification>
 8003516:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003518:	21f0      	movs	r1, #240	@ 0xf0
 800351a:	0209      	lsls	r1, r1, #8
 800351c:	4001      	ands	r1, r0
 800351e:	d116      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 8003520:	06c0      	lsls	r0, r0, #27
 8003522:	0ec0      	lsrs	r0, r0, #27
 8003524:	2804      	cmp	r0, #4
 8003526:	d001      	beq.n	800352c <__iar_annotation$$branch+0x66c>
 8003528:	2810      	cmp	r0, #16
 800352a:	d110      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 800352c:	2003      	movs	r0, #3
 800352e:	7460      	strb	r0, [r4, #17]
 8003530:	2500      	movs	r5, #0
 8003532:	4668      	mov	r0, sp
 8003534:	7b00      	ldrb	r0, [r0, #12]
 8003536:	2814      	cmp	r0, #20
 8003538:	d005      	beq.n	8003546 <__iar_annotation$$branch+0x686>
 800353a:	2014      	movs	r0, #20
 800353c:	4669      	mov	r1, sp
 800353e:	7308      	strb	r0, [r1, #12]
 8003540:	0020      	movs	r0, r4
 8003542:	f7fd fa08 	bl	8000956 <PE_Clear_RxEvent>
 8003546:	210e      	movs	r1, #14
 8003548:	7c20      	ldrb	r0, [r4, #16]
 800354a:	f7fc ff99 	bl	8000480 <USBPD_PE_Notification>
 800354e:	8be0      	ldrh	r0, [r4, #30]
 8003550:	2180      	movs	r1, #128	@ 0x80
 8003552:	0209      	lsls	r1, r1, #8
 8003554:	4288      	cmp	r0, r1
 8003556:	d11f      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003558:	2003      	movs	r0, #3
 800355a:	e55f      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800355c:	68a0      	ldr	r0, [r4, #8]
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	2900      	cmp	r1, #0
 8003562:	d01f      	beq.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003564:	7c20      	ldrb	r0, [r4, #16]
 8003566:	4788      	blx	r1
 8003568:	280a      	cmp	r0, #10
 800356a:	d002      	beq.n	8003572 <__iar_annotation$$branch+0x6b2>
 800356c:	280d      	cmp	r0, #13
 800356e:	d014      	beq.n	800359a <__iar_annotation$$branch+0x6da>
 8003570:	e018      	b.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003572:	1cf8      	adds	r0, r7, #3
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	251e      	movs	r5, #30
 8003578:	2000      	movs	r0, #0
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	2324      	movs	r3, #36	@ 0x24
 800357e:	2203      	movs	r2, #3
 8003580:	2100      	movs	r1, #0
 8003582:	0020      	movs	r0, r4
 8003584:	f7fd ffc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003588:	2800      	cmp	r0, #0
 800358a:	d105      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	7c20      	ldrb	r0, [r4, #16]
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	4798      	blx	r3
 8003598:	e463      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	2303      	movs	r3, #3
 80035a0:	220c      	movs	r2, #12
 80035a2:	e68d      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035a4:	2000      	movs	r0, #0
 80035a6:	9000      	str	r0, [sp, #0]
 80035a8:	2303      	movs	r3, #3
 80035aa:	2204      	movs	r2, #4
 80035ac:	e688      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035ae:	8be0      	ldrh	r0, [r4, #30]
 80035b0:	03a9      	lsls	r1, r5, #14
 80035b2:	4288      	cmp	r0, r1
 80035b4:	d1f0      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035b6:	2104      	movs	r1, #4
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7fd fef4 	bl	80013a6 <PE_SetPowerNegotiation>
 80035be:	6860      	ldr	r0, [r4, #4]
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	430a      	orrs	r2, r1
 80035c6:	6002      	str	r2, [r0, #0]
 80035c8:	2206      	movs	r2, #6
 80035ca:	2101      	movs	r1, #1
 80035cc:	7c20      	ldrb	r0, [r4, #16]
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	4798      	blx	r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	7c20      	ldrb	r0, [r4, #16]
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	4798      	blx	r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	7c20      	ldrb	r0, [r4, #16]
 80035e4:	f002 f889 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80035e8:	2000      	movs	r0, #0
 80035ea:	9000      	str	r0, [sp, #0]
 80035ec:	2325      	movs	r3, #37	@ 0x25
 80035ee:	2206      	movs	r2, #6
 80035f0:	2100      	movs	r1, #0
 80035f2:	0020      	movs	r0, r4
 80035f4:	f7fd ff8c 	bl	8001510 <PE_Send_CtrlMessage>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1cd      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035fc:	e0c9      	b.n	8003792 <__iar_annotation$$branch+0x8d2>
 80035fe:	4668      	mov	r0, sp
 8003600:	7b00      	ldrb	r0, [r0, #12]
 8003602:	2811      	cmp	r0, #17
 8003604:	d10b      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 8003606:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003608:	4001      	ands	r1, r0
 800360a:	2906      	cmp	r1, #6
 800360c:	d107      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 800360e:	2014      	movs	r0, #20
 8003610:	4669      	mov	r1, sp
 8003612:	7308      	strb	r0, [r1, #12]
 8003614:	0020      	movs	r0, r4
 8003616:	f7fd f99e 	bl	8000956 <PE_Clear_RxEvent>
 800361a:	2026      	movs	r0, #38	@ 0x26
 800361c:	7460      	strb	r0, [r4, #17]
 800361e:	8be0      	ldrh	r0, [r4, #30]
 8003620:	03a9      	lsls	r1, r5, #14
 8003622:	4288      	cmp	r0, r1
 8003624:	d1b8      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800362a:	2800      	cmp	r0, #0
 800362c:	d000      	beq.n	8003630 <__iar_annotation$$branch+0x770>
 800362e:	e20f      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 8003630:	220a      	movs	r2, #10
 8003632:	2101      	movs	r1, #1
 8003634:	7c20      	ldrb	r0, [r4, #16]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	4798      	blx	r3
 800363a:	e0ce      	b.n	80037da <__iar_annotation$$branch+0x91a>
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f7fd f944 	bl	80008cc <PE_ChangePowerRole>
 8003644:	220d      	movs	r2, #13
 8003646:	2100      	movs	r1, #0
 8003648:	7c20      	ldrb	r0, [r4, #16]
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	4798      	blx	r3
 8003650:	2114      	movs	r1, #20
 8003652:	7c20      	ldrb	r0, [r4, #16]
 8003654:	f7fc ff14 	bl	8000480 <USBPD_PE_Notification>
 8003658:	220e      	movs	r2, #14
 800365a:	2100      	movs	r1, #0
 800365c:	7c20      	ldrb	r0, [r4, #16]
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	4798      	blx	r3
 8003664:	6860      	ldr	r0, [r4, #4]
 8003666:	7800      	ldrb	r0, [r0, #0]
 8003668:	0780      	lsls	r0, r0, #30
 800366a:	0f80      	lsrs	r0, r0, #30
 800366c:	2801      	cmp	r0, #1
 800366e:	d104      	bne.n	800367a <__iar_annotation$$branch+0x7ba>
 8003670:	2101      	movs	r1, #1
 8003672:	4668      	mov	r0, sp
 8003674:	7b40      	ldrb	r0, [r0, #13]
 8003676:	f002 f895 	bl	80057a4 <USBPD_PRL_SOPCapability>
 800367a:	0020      	movs	r0, r4
 800367c:	f7fd fa90 	bl	8000ba0 <PE_Reset_StateMachine>
 8003680:	e4cd      	b.n	800301e <__iar_annotation$$branch+0x15e>
 8003682:	2001      	movs	r0, #1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	231f      	movs	r3, #31
 8003688:	220a      	movs	r2, #10
 800368a:	2100      	movs	r1, #0
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd ff3f 	bl	8001510 <PE_Send_CtrlMessage>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1c6      	bne.n	8003624 <__iar_annotation$$branch+0x764>
 8003696:	2008      	movs	r0, #8
 8003698:	7720      	strb	r0, [r4, #28]
 800369a:	83e7      	strh	r7, [r4, #30]
 800369c:	251b      	movs	r5, #27
 800369e:	2202      	movs	r2, #2
 80036a0:	2101      	movs	r1, #1
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	4798      	blx	r3
 80036aa:	2139      	movs	r1, #57	@ 0x39
 80036ac:	e4d2      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80036ae:	4668      	mov	r0, sp
 80036b0:	7b00      	ldrb	r0, [r0, #12]
 80036b2:	2811      	cmp	r0, #17
 80036b4:	d145      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036b6:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80036b8:	391f      	subs	r1, #31
 80036ba:	4001      	ands	r1, r0
 80036bc:	d141      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036be:	06c0      	lsls	r0, r0, #27
 80036c0:	0ec0      	lsrs	r0, r0, #27
 80036c2:	2803      	cmp	r0, #3
 80036c4:	d006      	beq.n	80036d4 <__iar_annotation$$branch+0x814>
 80036c6:	2804      	cmp	r0, #4
 80036c8:	d012      	beq.n	80036f0 <__iar_annotation$$branch+0x830>
 80036ca:	280c      	cmp	r0, #12
 80036cc:	d008      	beq.n	80036e0 <__iar_annotation$$branch+0x820>
 80036ce:	2810      	cmp	r0, #16
 80036d0:	d020      	beq.n	8003714 <__iar_annotation$$branch+0x854>
 80036d2:	e036      	b.n	8003742 <__iar_annotation$$branch+0x882>
 80036d4:	213a      	movs	r1, #58	@ 0x3a
 80036d6:	7c20      	ldrb	r0, [r4, #16]
 80036d8:	f7fc fed2 	bl	8000480 <USBPD_PE_Notification>
 80036dc:	2020      	movs	r0, #32
 80036de:	e012      	b.n	8003706 <__iar_annotation$$branch+0x846>
 80036e0:	2205      	movs	r2, #5
 80036e2:	2101      	movs	r1, #1
 80036e4:	7c20      	ldrb	r0, [r4, #16]
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	4798      	blx	r3
 80036ec:	213b      	movs	r1, #59	@ 0x3b
 80036ee:	e006      	b.n	80036fe <__iar_annotation$$branch+0x83e>
 80036f0:	2204      	movs	r2, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	7c20      	ldrb	r0, [r4, #16]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	4798      	blx	r3
 80036fc:	2116      	movs	r1, #22
 80036fe:	7c20      	ldrb	r0, [r4, #16]
 8003700:	f7fc febe 	bl	8000480 <USBPD_PE_Notification>
 8003704:	2003      	movs	r0, #3
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	2500      	movs	r5, #0
 800370a:	4668      	mov	r0, sp
 800370c:	7b00      	ldrb	r0, [r0, #12]
 800370e:	2814      	cmp	r0, #20
 8003710:	d111      	bne.n	8003736 <__iar_annotation$$branch+0x876>
 8003712:	e016      	b.n	8003742 <__iar_annotation$$branch+0x882>
 8003714:	2204      	movs	r2, #4
 8003716:	2101      	movs	r1, #1
 8003718:	7c20      	ldrb	r0, [r4, #16]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	4798      	blx	r3
 8003720:	2117      	movs	r1, #23
 8003722:	7c20      	ldrb	r0, [r4, #16]
 8003724:	f7fc feac 	bl	8000480 <USBPD_PE_Notification>
 8003728:	2003      	movs	r0, #3
 800372a:	7460      	strb	r0, [r4, #17]
 800372c:	2500      	movs	r5, #0
 800372e:	4668      	mov	r0, sp
 8003730:	7b00      	ldrb	r0, [r0, #12]
 8003732:	2814      	cmp	r0, #20
 8003734:	d005      	beq.n	8003742 <__iar_annotation$$branch+0x882>
 8003736:	2014      	movs	r0, #20
 8003738:	4669      	mov	r1, sp
 800373a:	7308      	strb	r0, [r1, #12]
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd f90a 	bl	8000956 <PE_Clear_RxEvent>
 8003742:	8be0      	ldrh	r0, [r4, #30]
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	4288      	cmp	r0, r1
 800374a:	d12c      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 800374c:	e704      	b.n	8003558 <__iar_annotation$$branch+0x698>
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	6002      	str	r2, [r0, #0]
 8003758:	7f20      	ldrb	r0, [r4, #28]
 800375a:	2809      	cmp	r0, #9
 800375c:	d005      	beq.n	800376a <__iar_annotation$$branch+0x8aa>
 800375e:	2206      	movs	r2, #6
 8003760:	2101      	movs	r1, #1
 8003762:	7c20      	ldrb	r0, [r4, #16]
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	4798      	blx	r3
 800376a:	2207      	movs	r2, #7
 800376c:	2101      	movs	r1, #1
 800376e:	7c20      	ldrb	r0, [r4, #16]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	4798      	blx	r3
 8003776:	2100      	movs	r1, #0
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f001 ffbe 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 800377e:	2000      	movs	r0, #0
 8003780:	9000      	str	r0, [sp, #0]
 8003782:	2321      	movs	r3, #33	@ 0x21
 8003784:	2206      	movs	r2, #6
 8003786:	2100      	movs	r1, #0
 8003788:	0020      	movs	r0, r4
 800378a:	f7fd fec1 	bl	8001510 <PE_Send_CtrlMessage>
 800378e:	2800      	cmp	r0, #0
 8003790:	d109      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 8003792:	2208      	movs	r2, #8
 8003794:	2101      	movs	r1, #1
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	4798      	blx	r3
 800379e:	48c5      	ldr	r0, [pc, #788]	@ (8003ab4 <.text_3>)
 80037a0:	83e0      	strh	r0, [r4, #30]
 80037a2:	25eb      	movs	r5, #235	@ 0xeb
 80037a4:	006d      	lsls	r5, r5, #1
 80037a6:	e6f7      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80037a8:	4668      	mov	r0, sp
 80037aa:	7b00      	ldrb	r0, [r0, #12]
 80037ac:	2811      	cmp	r0, #17
 80037ae:	d10b      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80037b2:	4001      	ands	r1, r0
 80037b4:	2906      	cmp	r1, #6
 80037b6:	d107      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b8:	2026      	movs	r0, #38	@ 0x26
 80037ba:	7460      	strb	r0, [r4, #17]
 80037bc:	2014      	movs	r0, #20
 80037be:	4669      	mov	r1, sp
 80037c0:	7308      	strb	r0, [r1, #12]
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8c7 	bl	8000956 <PE_Clear_RxEvent>
 80037c8:	8be0      	ldrh	r0, [r4, #30]
 80037ca:	03a9      	lsls	r1, r5, #14
 80037cc:	4288      	cmp	r0, r1
 80037ce:	d1ea      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037d0:	68a0      	ldr	r0, [r4, #8]
 80037d2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80037d8:	e13a      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80037da:	200f      	movs	r0, #15
 80037dc:	e6bd      	b.n	800355a <__iar_annotation$$branch+0x69a>
 80037de:	8be0      	ldrh	r0, [r4, #30]
 80037e0:	03a9      	lsls	r1, r5, #14
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d1df      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037e6:	220e      	movs	r2, #14
 80037e8:	2101      	movs	r1, #1
 80037ea:	7c20      	ldrb	r0, [r4, #16]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	4798      	blx	r3
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	7800      	ldrb	r0, [r0, #0]
 80037f6:	0780      	lsls	r0, r0, #30
 80037f8:	0f80      	lsrs	r0, r0, #30
 80037fa:	2802      	cmp	r0, #2
 80037fc:	d102      	bne.n	8003804 <__iar_annotation$$branch+0x944>
 80037fe:	7c20      	ldrb	r0, [r4, #16]
 8003800:	f001 ffb1 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003804:	0020      	movs	r0, r4
 8003806:	f7fd f9cb 	bl	8000ba0 <PE_Reset_StateMachine>
 800380a:	2115      	movs	r1, #21
 800380c:	e74e      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 800380e:	2803      	cmp	r0, #3
 8003810:	d110      	bne.n	8003834 <__iar_annotation$$branch+0x974>
 8003812:	2000      	movs	r0, #0
 8003814:	7720      	strb	r0, [r4, #28]
 8003816:	6860      	ldr	r0, [r4, #4]
 8003818:	7800      	ldrb	r0, [r0, #0]
 800381a:	0780      	lsls	r0, r0, #30
 800381c:	0f80      	lsrs	r0, r0, #30
 800381e:	2802      	cmp	r0, #2
 8003820:	d102      	bne.n	8003828 <__iar_annotation$$branch+0x968>
 8003822:	7c20      	ldrb	r0, [r4, #16]
 8003824:	f001 ff9f 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003828:	2004      	movs	r0, #4
 800382a:	7460      	strb	r0, [r4, #17]
 800382c:	2167      	movs	r1, #103	@ 0x67
 800382e:	7c20      	ldrb	r0, [r4, #16]
 8003830:	f7fc fe26 	bl	8000480 <USBPD_PE_Notification>
 8003834:	4668      	mov	r0, sp
 8003836:	7b00      	ldrb	r0, [r0, #12]
 8003838:	2814      	cmp	r0, #20
 800383a:	d00d      	beq.n	8003858 <__iar_annotation$$branch+0x998>
 800383c:	0020      	movs	r0, r4
 800383e:	f7fe f917 	bl	8001a70 <PE_ManageRXEvent>
 8003842:	4668      	mov	r0, sp
 8003844:	7b00      	ldrb	r0, [r0, #12]
 8003846:	2814      	cmp	r0, #20
 8003848:	d005      	beq.n	8003856 <__iar_annotation$$branch+0x996>
 800384a:	2014      	movs	r0, #20
 800384c:	4669      	mov	r1, sp
 800384e:	7308      	strb	r0, [r1, #12]
 8003850:	0020      	movs	r0, r4
 8003852:	f7fd f880 	bl	8000956 <PE_Clear_RxEvent>
 8003856:	e69f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	0cc0      	lsrs	r0, r0, #19
 800385c:	03ad      	lsls	r5, r5, #14
 800385e:	2800      	cmp	r0, #0
 8003860:	d01e      	beq.n	80038a0 <__iar_annotation$$branch+0x9e0>
 8003862:	8c21      	ldrh	r1, [r4, #32]
 8003864:	42a9      	cmp	r1, r5
 8003866:	d10e      	bne.n	8003886 <__iar_annotation$$branch+0x9c6>
 8003868:	200f      	movs	r0, #15
 800386a:	7460      	strb	r0, [r4, #17]
 800386c:	2000      	movs	r0, #0
 800386e:	9000      	str	r0, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	2270      	movs	r2, #112	@ 0x70
 8003874:	7c21      	ldrb	r1, [r4, #16]
 8003876:	2009      	movs	r0, #9
 8003878:	4da5      	ldr	r5, [pc, #660]	@ (8003b10 <.text_5>)
 800387a:	682d      	ldr	r5, [r5, #0]
 800387c:	47a8      	blx	r5
 800387e:	78b0      	ldrb	r0, [r6, #2]
 8003880:	1c40      	adds	r0, r0, #1
 8003882:	70b0      	strb	r0, [r6, #2]
 8003884:	e6fc      	b.n	8003680 <__iar_annotation$$branch+0x7c0>
 8003886:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003888:	0509      	lsls	r1, r1, #20
 800388a:	0f49      	lsrs	r1, r1, #29
 800388c:	180a      	adds	r2, r1, r0
 800388e:	2333      	movs	r3, #51	@ 0x33
 8003890:	435a      	muls	r2, r3
 8003892:	4315      	orrs	r5, r2
 8003894:	8425      	strh	r5, [r4, #32]
 8003896:	180d      	adds	r5, r1, r0
 8003898:	2033      	movs	r0, #51	@ 0x33
 800389a:	4345      	muls	r5, r0
 800389c:	b2ad      	uxth	r5, r5
 800389e:	e67b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038a0:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d099      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fd f87a 	bl	80009a0 <PE_PRL_Control_RxEvent>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d113      	bne.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b0:	2032      	movs	r0, #50	@ 0x32
 80038b2:	5c20      	ldrb	r0, [r4, r0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00f      	beq.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b8:	2133      	movs	r1, #51	@ 0x33
 80038ba:	5c61      	ldrb	r1, [r4, r1]
 80038bc:	2231      	movs	r2, #49	@ 0x31
 80038be:	54a1      	strb	r1, [r4, r2]
 80038c0:	7460      	strb	r0, [r4, #17]
 80038c2:	2500      	movs	r5, #0
 80038c4:	2132      	movs	r1, #50	@ 0x32
 80038c6:	5465      	strb	r5, [r4, r1]
 80038c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80038ca:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80038cc:	6960      	ldr	r0, [r4, #20]
 80038ce:	2180      	movs	r1, #128	@ 0x80
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6161      	str	r1, [r4, #20]
 80038d6:	e65f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038d8:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d104      	bne.n	80038e8 <__iar_annotation$$branch+0x4>
 80038de:	2500      	movs	r5, #0
 80038e0:	8465      	strh	r5, [r4, #34]	@ 0x22
 80038e2:	7930      	ldrb	r0, [r6, #4]

080038e4 <__iar_annotation$$branch>:
 80038e4:	f7ff fb87 	bl	8002ff6 <__iar_annotation$$branch+0x136>
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7fd fd83 	bl	80013f4 <PE_CalculateMinTiming>
 80038ee:	e080      	b.n	80039f2 <__iar_annotation$$branch>
 80038f0:	2000      	movs	r0, #0
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	2003      	movs	r0, #3
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2001      	movs	r0, #1
 80038fa:	9000      	str	r0, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	332c      	adds	r3, #44	@ 0x2c
 8003900:	2206      	movs	r2, #6
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f7fd fe2e 	bl	8001566 <PE_Send_DataMessage>
 800390a:	2800      	cmp	r0, #0
 800390c:	d1e3      	bne.n	80038d6 <__iar_annotation$$branch+0xa16>
 800390e:	215d      	movs	r1, #93	@ 0x5d
 8003910:	e6cc      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003912:	2000      	movs	r0, #0
 8003914:	9004      	str	r0, [sp, #16]
 8003916:	ab04      	add	r3, sp, #16
 8003918:	aa05      	add	r2, sp, #20
 800391a:	210a      	movs	r1, #10
 800391c:	4668      	mov	r0, sp
 800391e:	7b40      	ldrb	r0, [r0, #13]
 8003920:	68a7      	ldr	r7, [r4, #8]
 8003922:	697f      	ldr	r7, [r7, #20]
 8003924:	47b8      	blx	r7
 8003926:	2104      	movs	r1, #4
 8003928:	9804      	ldr	r0, [sp, #16]
 800392a:	f7fd fd8f 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800392e:	2800      	cmp	r0, #0
 8003930:	d11f      	bne.n	8003972 <__iar_annotation$$branch+0x8e>
 8003932:	71f0      	strb	r0, [r6, #7]
 8003934:	7230      	strb	r0, [r6, #8]
 8003936:	7c20      	ldrb	r0, [r4, #16]
 8003938:	f7fd fa04 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800393c:	2800      	cmp	r0, #0
 800393e:	d103      	bne.n	8003948 <__iar_annotation$$branch+0x64>
 8003940:	7a30      	ldrb	r0, [r6, #8]
 8003942:	2180      	movs	r1, #128	@ 0x80
 8003944:	4301      	orrs	r1, r0
 8003946:	7231      	strb	r1, [r6, #8]
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	a905      	add	r1, sp, #20
 800394c:	4871      	ldr	r0, [pc, #452]	@ (8003b14 <.text_6>)
 800394e:	1820      	adds	r0, r4, r0
 8003950:	f015 ff86 	bl	8019860 <__aeabi_memcpy>
 8003954:	2000      	movs	r0, #0
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2003      	movs	r0, #3
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2008      	movs	r0, #8
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	486d      	ldr	r0, [pc, #436]	@ (8003b18 <.text_7>)
 8003962:	1823      	adds	r3, r4, r0
 8003964:	220c      	movs	r2, #12
 8003966:	2100      	movs	r1, #0
 8003968:	0020      	movs	r0, r4
 800396a:	f7fd ff2f 	bl	80017cc <PE_Send_ExtendedMessage>
 800396e:	214c      	movs	r1, #76	@ 0x4c
 8003970:	e69c      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003972:	2001      	movs	r0, #1
 8003974:	e510      	b.n	8003398 <__iar_annotation$$branch+0x4d8>
 8003976:	2001      	movs	r0, #1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	2339      	movs	r3, #57	@ 0x39
 800397c:	7832      	ldrb	r2, [r6, #0]
 800397e:	2033      	movs	r0, #51	@ 0x33
 8003980:	5c21      	ldrb	r1, [r4, r0]
 8003982:	0020      	movs	r0, r4
 8003984:	f7fd fdc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003988:	2800      	cmp	r0, #0
 800398a:	d144      	bne.n	8003a16 <__iar_annotation$$branch+0x24>
 800398c:	7870      	ldrb	r0, [r6, #1]
 800398e:	7720      	strb	r0, [r4, #28]
 8003990:	83e7      	strh	r7, [r4, #30]
 8003992:	251b      	movs	r5, #27
 8003994:	2144      	movs	r1, #68	@ 0x44
 8003996:	e689      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003998:	8be0      	ldrh	r0, [r4, #30]
 800399a:	03a9      	lsls	r1, r5, #14
 800399c:	4288      	cmp	r0, r1
 800399e:	d104      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a0:	4668      	mov	r0, sp
 80039a2:	7b00      	ldrb	r0, [r0, #12]
 80039a4:	2814      	cmp	r0, #20
 80039a6:	d100      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a8:	e5d6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7b00      	ldrb	r0, [r0, #12]
 80039ae:	2814      	cmp	r0, #20
 80039b0:	d031      	beq.n	8003a16 <__iar_annotation$$branch+0x24>
 80039b2:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80039b4:	0bc1      	lsrs	r1, r0, #15
 80039b6:	d003      	beq.n	80039c0 <__iar_annotation$$branch+0xdc>
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fd fe11 	bl	80015e0 <PE_Check_ExtendedMessage>
 80039be:	e740      	b.n	8003842 <__iar_annotation$$branch+0x982>
 80039c0:	06c0      	lsls	r0, r0, #27
 80039c2:	0ec0      	lsrs	r0, r0, #27
 80039c4:	2810      	cmp	r0, #16
 80039c6:	d000      	beq.n	80039ca <__iar_annotation$$branch+0xe6>
 80039c8:	e5c6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039ca:	2014      	movs	r0, #20
 80039cc:	4669      	mov	r1, sp
 80039ce:	7308      	strb	r0, [r1, #12]
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc ffc0 	bl	8000956 <PE_Clear_RxEvent>
 80039d6:	2500      	movs	r5, #0
 80039d8:	83e5      	strh	r5, [r4, #30]
 80039da:	2003      	movs	r0, #3
 80039dc:	7460      	strb	r0, [r4, #17]
 80039de:	2159      	movs	r1, #89	@ 0x59
 80039e0:	e664      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7fd ff1e 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80039e8:	e003      	b.n	80039f2 <__iar_annotation$$branch>
 80039ea:	a903      	add	r1, sp, #12
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7fd f9bb 	bl	8000d68 <PE_SubStateMachine_Generic>

080039f2 <__iar_annotation$$branch>:
 80039f2:	f7ff fa35 	bl	8002e60 <__iar_annotation$$branch+0xc>
 80039f6:	a903      	add	r1, sp, #12
 80039f8:	0020      	movs	r0, r4
 80039fa:	f000 f9d5 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80039fe:	0005      	movs	r5, r0
 8003a00:	6860      	ldr	r0, [r4, #4]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	0401      	lsls	r1, r0, #16
 8003a06:	0fc9      	lsrs	r1, r1, #31
 8003a08:	d006      	beq.n	8003a18 <__iar_annotation$$branch+0x26>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	4668      	mov	r0, sp
 8003a10:	7b40      	ldrb	r0, [r0, #13]
 8003a12:	f001 fec7 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8003a16:	e5bf      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a18:	2101      	movs	r1, #1
 8003a1a:	e7f8      	b.n	8003a0e <__iar_annotation$$branch+0x1c>
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	7b00      	ldrb	r0, [r0, #12]
 8003a20:	2811      	cmp	r0, #17
 8003a22:	d111      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a24:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003a26:	4001      	ands	r1, r0
 8003a28:	2913      	cmp	r1, #19
 8003a2a:	d10d      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	4669      	mov	r1, sp
 8003a30:	7308      	strb	r0, [r1, #12]
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7fc ff8f 	bl	8000956 <PE_Clear_RxEvent>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	9000      	str	r0, [sp, #0]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	2203      	movs	r2, #3
 8003a40:	2100      	movs	r1, #0
 8003a42:	0020      	movs	r0, r4
 8003a44:	f7fd fd64 	bl	8001510 <PE_Send_CtrlMessage>
 8003a48:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8003a4a:	03a9      	lsls	r1, r5, #14
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	d106      	bne.n	8003a5e <__iar_annotation$$branch+0x6c>
 8003a50:	2092      	movs	r0, #146	@ 0x92
 8003a52:	e582      	b.n	800355a <__iar_annotation$$branch+0x69a>
 8003a54:	4668      	mov	r0, sp
 8003a56:	7b01      	ldrb	r1, [r0, #12]
 8003a58:	0020      	movs	r0, r4
 8003a5a:	f001 fc05 	bl	8005268 <PE_StateMachine_UVDM>
 8003a5e:	e59b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	2701      	movs	r7, #1
 8003a64:	0b41      	lsrs	r1, r0, #13
 8003a66:	4039      	ands	r1, r7
 8003a68:	d019      	beq.n	8003a9e <__iar_annotation$$branch+0xac>
 8003a6a:	0b80      	lsrs	r0, r0, #14
 8003a6c:	4038      	ands	r0, r7
 8003a6e:	d007      	beq.n	8003a80 <__iar_annotation$$branch+0x8e>
 8003a70:	215b      	movs	r1, #91	@ 0x5b
 8003a72:	7c20      	ldrb	r0, [r4, #16]
 8003a74:	f7fc fd04 	bl	8000480 <USBPD_PE_Notification>
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	4928      	ldr	r1, [pc, #160]	@ (8003b1c <.text_8>)
 8003a7c:	4001      	ands	r1, r0
 8003a7e:	6161      	str	r1, [r4, #20]
 8003a80:	2003      	movs	r0, #3
 8003a82:	7460      	strb	r0, [r4, #17]
 8003a84:	7ca1      	ldrb	r1, [r4, #18]
 8003a86:	2903      	cmp	r1, #3
 8003a88:	d008      	beq.n	8003a9c <__iar_annotation$$branch+0xaa>
 8003a8a:	74a0      	strb	r0, [r4, #18]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2203      	movs	r2, #3
 8003a94:	7c21      	ldrb	r1, [r4, #16]
 8003a96:	2004      	movs	r0, #4
 8003a98:	6835      	ldr	r5, [r6, #0]
 8003a9a:	47a8      	blx	r5
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	491f      	ldr	r1, [pc, #124]	@ (8003b20 <.text_9>)
 8003aa2:	4001      	ands	r1, r0
 8003aa4:	6161      	str	r1, [r4, #20]
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d101      	bne.n	8003aae <__iar_annotation$$branch>

08003aaa <__iar_annotation$$branch>:
 8003aaa:	f7ff f8c9 	bl	8002c40 <USBPD_PE_StateMachine_SRC+0xb4>

08003aae <__iar_annotation$$branch>:
 8003aae:	f7ff fa0b 	bl	8002ec8 <__iar_annotation$$branch+0x8>
	...

08003ab4 <.text_3>:
 8003ab4:	000081d6 	.word	0x000081d6

08003ab8 <PE_Send_SRCCapabilities>:
 8003ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	2000      	movs	r0, #0
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	ab02      	add	r3, sp, #8
 8003ac4:	4817      	ldr	r0, [pc, #92]	@ (8003b24 <.text_10>)
 8003ac6:	1822      	adds	r2, r4, r0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	68a6      	ldr	r6, [r4, #8]
 8003ace:	6976      	ldr	r6, [r6, #20]
 8003ad0:	47b0      	blx	r6
 8003ad2:	9802      	ldr	r0, [sp, #8]
 8003ad4:	1c80      	adds	r0, r0, #2
 8003ad6:	9002      	str	r0, [sp, #8]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	9802      	ldr	r0, [sp, #8]
 8003adc:	f7fd fcb6 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d113      	bne.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003ae4:	6860      	ldr	r0, [r4, #4]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	04c1      	lsls	r1, r0, #19
 8003aea:	0fc9      	lsrs	r1, r1, #31
 8003aec:	d00e      	beq.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9802      	ldr	r0, [sp, #8]
 8003af2:	b280      	uxth	r0, r0
 8003af4:	9000      	str	r0, [sp, #0]
 8003af6:	4808      	ldr	r0, [pc, #32]	@ (8003b18 <.text_7>)
 8003af8:	1823      	adds	r3, r4, r0
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	7c20      	ldrb	r0, [r4, #16]
 8003b00:	f001 fe54 	bl	80057ac <USBPD_PRL_SendMessage>
 8003b04:	2803      	cmp	r0, #3
 8003b06:	d0e7      	beq.n	8003ad8 <PE_Send_SRCCapabilities+0x20>
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	e7fb      	b.n	8003b08 <PE_Send_SRCCapabilities+0x50>

08003b10 <.text_5>:
 8003b10:	20000000 	.word	0x20000000

08003b14 <.text_6>:
 8003b14:	00000267 	.word	0x00000267

08003b18 <.text_7>:
 8003b18:	00000263 	.word	0x00000263

08003b1c <.text_8>:
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <.text_9>:
 8003b20:	ffffdfff 	.word	0xffffdfff

08003b24 <.text_10>:
 8003b24:	00000265 	.word	0x00000265

08003b28 <PE_StateMachine_VDMCable>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	b08c      	sub	sp, #48	@ 0x30
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2502      	movs	r5, #2
 8003b30:	2607      	movs	r6, #7
 8003b32:	7c60      	ldrb	r0, [r4, #17]
 8003b34:	2805      	cmp	r0, #5
 8003b36:	d002      	beq.n	8003b3e <PE_StateMachine_VDMCable+0x16>
 8003b38:	289a      	cmp	r0, #154	@ 0x9a
 8003b3a:	d072      	beq.n	8003c22 <PE_StateMachine_VDMCable+0xfa>
 8003b3c:	e127      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003b3e:	6860      	ldr	r0, [r4, #4]
 8003b40:	7800      	ldrb	r0, [r0, #0]
 8003b42:	0781      	lsls	r1, r0, #30
 8003b44:	0f89      	lsrs	r1, r1, #30
 8003b46:	0020      	movs	r0, r4
 8003b48:	f000 fa5e 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003b4c:	2094      	movs	r0, #148	@ 0x94
 8003b4e:	0080      	lsls	r0, r0, #2
 8003b50:	5821      	ldr	r1, [r4, r0]
 8003b52:	201f      	movs	r0, #31
 8003b54:	4381      	bics	r1, r0
 8003b56:	488f      	ldr	r0, [pc, #572]	@ (8003d94 <.text_3>)
 8003b58:	4308      	orrs	r0, r1
 8003b5a:	2194      	movs	r1, #148	@ 0x94
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	5060      	str	r0, [r4, r1]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	9a00      	ldr	r2, [sp, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	0953      	lsrs	r3, r2, #5
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	@ (8003d98 <.text_4>)
 8003b70:	4002      	ands	r2, r0
 8003b72:	0358      	lsls	r0, r3, #13
 8003b74:	4310      	orrs	r0, r2
 8003b76:	22ff      	movs	r2, #255	@ 0xff
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	2094      	movs	r0, #148	@ 0x94
 8003b7e:	0080      	lsls	r0, r0, #2
 8003b80:	5022      	str	r2, [r4, r0]
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	0880      	lsrs	r0, r0, #2
 8003b88:	4001      	ands	r1, r0
 8003b8a:	d003      	beq.n	8003b94 <PE_StateMachine_VDMCable+0x6c>
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	0741      	lsls	r1, r0, #29
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	e000      	b.n	8003b96 <PE_StateMachine_VDMCable+0x6e>
 8003b94:	2002      	movs	r0, #2
 8003b96:	2194      	movs	r1, #148	@ 0x94
 8003b98:	0089      	lsls	r1, r1, #2
 8003b9a:	1867      	adds	r7, r4, r1
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	209a      	movs	r0, #154	@ 0x9a
 8003ba0:	9001      	str	r0, [sp, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	9000      	str	r0, [sp, #0]
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	220f      	movs	r2, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fd fcda 	bl	8001566 <PE_Send_DataMessage>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d109      	bne.n	8003bca <PE_StateMachine_VDMCable+0xa2>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	03e9      	lsls	r1, r5, #15
 8003bba:	4301      	orrs	r1, r0
 8003bbc:	6161      	str	r1, [r4, #20]
 8003bbe:	2051      	movs	r0, #81	@ 0x51
 8003bc0:	7720      	strb	r0, [r4, #28]
 8003bc2:	4876      	ldr	r0, [pc, #472]	@ (8003d9c <.text_5>)
 8003bc4:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003bc6:	251e      	movs	r5, #30
 8003bc8:	e0e1      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003bca:	2809      	cmp	r0, #9
 8003bcc:	d0fc      	beq.n	8003bc8 <PE_StateMachine_VDMCable+0xa0>
 8003bce:	7cb8      	ldrb	r0, [r7, #18]
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d202      	bcs.n	8003bda <PE_StateMachine_VDMCable+0xb2>
 8003bd4:	4872      	ldr	r0, [pc, #456]	@ (8003da0 <.text_6>)
 8003bd6:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003bd8:	e00a      	b.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	6940      	ldr	r0, [r0, #20]
 8003bde:	9000      	str	r0, [sp, #0]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2205      	movs	r2, #5
 8003be8:	2101      	movs	r1, #1
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	47b8      	blx	r7
 8003bf0:	6860      	ldr	r0, [r4, #4]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	0a00      	lsrs	r0, r0, #8
 8003bf6:	4030      	ands	r0, r6
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	d100      	bne.n	8003bfe <PE_StateMachine_VDMCable+0xd6>
 8003bfc:	e0a4      	b.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003bfe:	4869      	ldr	r0, [pc, #420]	@ (8003da4 <.text_7>)
 8003c00:	8be1      	ldrh	r1, [r4, #30]
 8003c02:	4201      	tst	r1, r0
 8003c04:	d00b      	beq.n	8003c1e <PE_StateMachine_VDMCable+0xf6>
 8003c06:	2108      	movs	r1, #8
 8003c08:	7461      	strb	r1, [r4, #17]
 8003c0a:	8be1      	ldrh	r1, [r4, #30]
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	292d      	cmp	r1, #45	@ 0x2d
 8003c10:	d203      	bcs.n	8003c1a <PE_StateMachine_VDMCable+0xf2>
 8003c12:	8be1      	ldrh	r1, [r4, #30]
 8003c14:	0005      	movs	r5, r0
 8003c16:	400d      	ands	r5, r1
 8003c18:	e0b9      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1a:	252d      	movs	r5, #45	@ 0x2d
 8003c1c:	e0b7      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1e:	7466      	strb	r6, [r4, #17]
 8003c20:	e0b5      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fc fecf 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8003c2a:	4669      	mov	r1, sp
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003c30:	2700      	movs	r7, #0
 8003c32:	221f      	movs	r2, #31
 8003c34:	9801      	ldr	r0, [sp, #4]
 8003c36:	7800      	ldrb	r0, [r0, #0]
 8003c38:	466b      	mov	r3, sp
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d14f      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c40:	0bc8      	lsrs	r0, r1, #15
 8003c42:	d14d      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c44:	0b08      	lsrs	r0, r1, #12
 8003c46:	4230      	tst	r0, r6
 8003c48:	d04a      	beq.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	4008      	ands	r0, r1
 8003c4e:	280f      	cmp	r0, #15
 8003c50:	d146      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c52:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003c54:	7880      	ldrb	r0, [r0, #2]
 8003c56:	9000      	str	r0, [sp, #0]
 8003c58:	4002      	ands	r2, r0
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d13b      	bne.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c5e:	0980      	lsrs	r0, r0, #6
 8003c60:	d039      	beq.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	0f81      	lsrs	r1, r0, #30
 8003c66:	0020      	movs	r0, r4
 8003c68:	f000 f9ce 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	6940      	ldr	r0, [r0, #20]
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d023      	beq.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c74:	9800      	ldr	r0, [sp, #0]
 8003c76:	0985      	lsrs	r5, r0, #6
 8003c78:	07a8      	lsls	r0, r5, #30
 8003c7a:	0f80      	lsrs	r0, r0, #30
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d11d      	bne.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003c84:	1d81      	adds	r1, r0, #6
 8003c86:	7c20      	ldrb	r0, [r4, #16]
 8003c88:	f001 fb9a 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d111      	bne.n	8003cb4 <PE_StateMachine_VDMCable+0x18c>
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	07aa      	lsls	r2, r5, #30
 8003c94:	0f92      	lsrs	r2, r2, #30
 8003c96:	2101      	movs	r1, #1
 8003c98:	7c20      	ldrb	r0, [r4, #16]
 8003c9a:	68e5      	ldr	r5, [r4, #12]
 8003c9c:	696d      	ldr	r5, [r5, #20]
 8003c9e:	47a8      	blx	r5
 8003ca0:	2152      	movs	r1, #82	@ 0x52
 8003ca2:	7c20      	ldrb	r0, [r4, #16]
 8003ca4:	f7fc fbec 	bl	8000480 <USBPD_PE_Notification>
 8003ca8:	2014      	movs	r0, #20
 8003caa:	2194      	movs	r1, #148	@ 0x94
 8003cac:	0089      	lsls	r1, r1, #2
 8003cae:	1861      	adds	r1, r4, r1
 8003cb0:	7488      	strb	r0, [r1, #18]
 8003cb2:	e003      	b.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003cb4:	211b      	movs	r1, #27
 8003cb6:	7c20      	ldrb	r0, [r4, #16]
 8003cb8:	f7fc fbe2 	bl	8000480 <USBPD_PE_Notification>
 8003cbc:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003cbe:	6860      	ldr	r0, [r4, #4]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	0a00      	lsrs	r0, r0, #8
 8003cc4:	4030      	ands	r0, r6
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	d102      	bne.n	8003cd0 <PE_StateMachine_VDMCable+0x1a8>
 8003cca:	7460      	strb	r0, [r4, #17]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e002      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003cd0:	7466      	strb	r6, [r4, #17]
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	7727      	strb	r7, [r4, #28]
 8003cd6:	9801      	ldr	r0, [sp, #4]
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	2814      	cmp	r0, #20
 8003cdc:	d119      	bne.n	8003d12 <PE_StateMachine_VDMCable+0x1ea>
 8003cde:	e056      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	2a10      	cmp	r2, #16
 8003ce6:	d11b      	bne.n	8003d20 <PE_StateMachine_VDMCable+0x1f8>
 8003ce8:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003cea:	6861      	ldr	r1, [r4, #4]
 8003cec:	6809      	ldr	r1, [r1, #0]
 8003cee:	0a09      	lsrs	r1, r1, #8
 8003cf0:	4031      	ands	r1, r6
 8003cf2:	2903      	cmp	r1, #3
 8003cf4:	d102      	bne.n	8003cfc <PE_StateMachine_VDMCable+0x1d4>
 8003cf6:	7460      	strb	r0, [r4, #17]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e002      	b.n	8003d02 <PE_StateMachine_VDMCable+0x1da>
 8003cfc:	7466      	strb	r6, [r4, #17]
 8003cfe:	2500      	movs	r5, #0
 8003d00:	7727      	strb	r7, [r4, #28]
 8003d02:	2159      	movs	r1, #89	@ 0x59
 8003d04:	7c20      	ldrb	r0, [r4, #16]
 8003d06:	f7fc fbbb 	bl	8000480 <USBPD_PE_Notification>
 8003d0a:	9801      	ldr	r0, [sp, #4]
 8003d0c:	7800      	ldrb	r0, [r0, #0]
 8003d0e:	2814      	cmp	r0, #20
 8003d10:	d03d      	beq.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d12:	2014      	movs	r0, #20
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	7008      	strb	r0, [r1, #0]
 8003d18:	0020      	movs	r0, r4
 8003d1a:	f7fc fe1c 	bl	8000956 <PE_Clear_RxEvent>
 8003d1e:	e036      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d20:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003d22:	03aa      	lsls	r2, r5, #14
 8003d24:	4291      	cmp	r1, r2
 8003d26:	d132      	bne.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d28:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a13      	lsrs	r3, r2, #8
 8003d30:	4033      	ands	r3, r6
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10c      	bne.n	8003d50 <PE_StateMachine_VDMCable+0x228>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	6945      	ldr	r5, [r0, #20]
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d004      	beq.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2204      	movs	r2, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	7c20      	ldrb	r0, [r4, #16]
 8003d46:	47a8      	blx	r5
 8003d48:	2003      	movs	r0, #3
 8003d4a:	7460      	strb	r0, [r4, #17]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e01e      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d50:	0e93      	lsrs	r3, r2, #26
 8003d52:	4018      	ands	r0, r3
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d10e      	bne.n	8003d76 <PE_StateMachine_VDMCable+0x24e>
 8003d58:	48b7      	ldr	r0, [pc, #732]	@ (8004038 <.text_10>)
 8003d5a:	4010      	ands	r0, r2
 8003d5c:	066a      	lsls	r2, r5, #25
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	600a      	str	r2, [r1, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	7c20      	ldrb	r0, [r4, #16]
 8003d66:	f001 fcea 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d6a:	480d      	ldr	r0, [pc, #52]	@ (8003da0 <.text_6>)
 8003d6c:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003d6e:	252d      	movs	r5, #45	@ 0x2d
 8003d70:	2008      	movs	r0, #8
 8003d72:	7460      	strb	r0, [r4, #17]
 8003d74:	e00a      	b.n	8003d8c <PE_StateMachine_VDMCable+0x264>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	6945      	ldr	r5, [r0, #20]
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d004      	beq.n	8003d88 <PE_StateMachine_VDMCable+0x260>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2204      	movs	r2, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	7c20      	ldrb	r0, [r4, #16]
 8003d86:	47a8      	blx	r5
 8003d88:	7466      	strb	r6, [r4, #17]
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	7727      	strb	r7, [r4, #28]
 8003d8e:	0028      	movs	r0, r5
 8003d90:	b00d      	add	sp, #52	@ 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <.text_3>:
 8003d94:	00008001 	.word	0x00008001

08003d98 <.text_4>:
 8003d98:	0000983f 	.word	0x0000983f

08003d9c <.text_5>:
 8003d9c:	0000801e 	.word	0x0000801e

08003da0 <.text_6>:
 8003da0:	0000802d 	.word	0x0000802d

08003da4 <.text_7>:
 8003da4:	00007fff 	.word	0x00007fff

08003da8 <PE_SubStateMachine_VconnSwap>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	2502      	movs	r5, #2
 8003dae:	2703      	movs	r7, #3
 8003db0:	4ea2      	ldr	r6, [pc, #648]	@ (800403c <.text_11>)
 8003db2:	2014      	movs	r0, #20
 8003db4:	7c62      	ldrb	r2, [r4, #17]
 8003db6:	2a9d      	cmp	r2, #157	@ 0x9d
 8003db8:	d010      	beq.n	8003ddc <PE_SubStateMachine_VconnSwap+0x34>
 8003dba:	d30e      	bcc.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dbc:	2a9f      	cmp	r2, #159	@ 0x9f
 8003dbe:	d057      	beq.n	8003e70 <PE_SubStateMachine_VconnSwap+0xc8>
 8003dc0:	d33d      	bcc.n	8003e3e <PE_SubStateMachine_VconnSwap+0x96>
 8003dc2:	2aa1      	cmp	r2, #161	@ 0xa1
 8003dc4:	d100      	bne.n	8003dc8 <PE_SubStateMachine_VconnSwap+0x20>
 8003dc6:	e085      	b.n	8003ed4 <PE_SubStateMachine_VconnSwap+0x12c>
 8003dc8:	d377      	bcc.n	8003eba <PE_SubStateMachine_VconnSwap+0x112>
 8003dca:	2aa3      	cmp	r2, #163	@ 0xa3
 8003dcc:	d100      	bne.n	8003dd0 <PE_SubStateMachine_VconnSwap+0x28>
 8003dce:	e0a3      	b.n	8003f18 <PE_SubStateMachine_VconnSwap+0x170>
 8003dd0:	d200      	bcs.n	8003dd4 <PE_SubStateMachine_VconnSwap+0x2c>
 8003dd2:	e08e      	b.n	8003ef2 <PE_SubStateMachine_VconnSwap+0x14a>
 8003dd4:	2aa4      	cmp	r2, #164	@ 0xa4
 8003dd6:	d100      	bne.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dd8:	e106      	b.n	8003fe8 <PE_SubStateMachine_VconnSwap+0x240>
 8003dda:	e113      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ddc:	6860      	ldr	r0, [r4, #4]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	21b8      	movs	r1, #184	@ 0xb8
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	4001      	ands	r1, r0
 8003de6:	2098      	movs	r0, #152	@ 0x98
 8003de8:	0140      	lsls	r0, r0, #5
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d121      	bne.n	8003e32 <PE_SubStateMachine_VconnSwap+0x8a>
 8003dee:	7c20      	ldrb	r0, [r4, #16]
 8003df0:	68a1      	ldr	r1, [r4, #8]
 8003df2:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8003df4:	4788      	blx	r1
 8003df6:	280a      	cmp	r0, #10
 8003df8:	d002      	beq.n	8003e00 <PE_SubStateMachine_VconnSwap+0x58>
 8003dfa:	280d      	cmp	r0, #13
 8003dfc:	d007      	beq.n	8003e0e <PE_SubStateMachine_VconnSwap+0x66>
 8003dfe:	e00f      	b.n	8003e20 <PE_SubStateMachine_VconnSwap+0x78>
 8003e00:	209e      	movs	r0, #158	@ 0x9e
 8003e02:	7460      	strb	r0, [r4, #17]
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	02e9      	lsls	r1, r5, #11
 8003e08:	4301      	orrs	r1, r0
 8003e0a:	6161      	str	r1, [r4, #20]
 8003e0c:	e0fa      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	220c      	movs	r2, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f7fd fb79 	bl	8001510 <PE_Send_CtrlMessage>
 8003e1e:	e0f1      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e20:	2000      	movs	r0, #0
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	2204      	movs	r2, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	f7fd fb70 	bl	8001510 <PE_Send_CtrlMessage>
 8003e30:	e002      	b.n	8003e38 <PE_SubStateMachine_VconnSwap+0x90>
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	4006      	ands	r6, r0
 8003e36:	6166      	str	r6, [r4, #20]
 8003e38:	7467      	strb	r7, [r4, #17]
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	e0e2      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	9000      	str	r0, [sp, #0]
 8003e42:	239e      	movs	r3, #158	@ 0x9e
 8003e44:	2203      	movs	r2, #3
 8003e46:	2100      	movs	r1, #0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7fd fb61 	bl	8001510 <PE_Send_CtrlMessage>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1f4      	bne.n	8003e3c <PE_SubStateMachine_VconnSwap+0x94>
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	0401      	lsls	r1, r0, #16
 8003e58:	0fc9      	lsrs	r1, r1, #31
 8003e5a:	d005      	beq.n	8003e68 <PE_SubStateMachine_VconnSwap+0xc0>
 8003e5c:	209f      	movs	r0, #159	@ 0x9f
 8003e5e:	7460      	strb	r0, [r4, #17]
 8003e60:	4877      	ldr	r0, [pc, #476]	@ (8004040 <.text_12>)
 8003e62:	83e0      	strh	r0, [r4, #30]
 8003e64:	2596      	movs	r5, #150	@ 0x96
 8003e66:	e001      	b.n	8003e6c <PE_SubStateMachine_VconnSwap+0xc4>
 8003e68:	20a0      	movs	r0, #160	@ 0xa0
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	213f      	movs	r1, #63	@ 0x3f
 8003e6e:	e0b7      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003e70:	8be2      	ldrh	r2, [r4, #30]
 8003e72:	03ab      	lsls	r3, r5, #14
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d100      	bne.n	8003e7a <PE_SubStateMachine_VconnSwap+0xd2>
 8003e78:	e0ac      	b.n	8003fd4 <PE_SubStateMachine_VconnSwap+0x22c>
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	2a11      	cmp	r2, #17
 8003e7e:	d11b      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e80:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8003e82:	4b70      	ldr	r3, [pc, #448]	@ (8004044 <.text_13>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d116      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fd62 	bl	8000956 <PE_Clear_RxEvent>
 8003e92:	68a0      	ldr	r0, [r4, #8]
 8003e94:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d002      	beq.n	8003ea0 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	7c20      	ldrb	r0, [r4, #16]
 8003e9e:	4790      	blx	r2
 8003ea0:	6960      	ldr	r0, [r4, #20]
 8003ea2:	4006      	ands	r6, r0
 8003ea4:	6166      	str	r6, [r4, #20]
 8003ea6:	7467      	strb	r7, [r4, #17]
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2142      	movs	r1, #66	@ 0x42
 8003eac:	7c20      	ldrb	r0, [r4, #16]
 8003eae:	f7fc fae7 	bl	8000480 <USBPD_PE_Notification>
 8003eb2:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003eb4:	4964      	ldr	r1, [pc, #400]	@ (8004048 <.text_14>)
 8003eb6:	5465      	strb	r5, [r4, r1]
 8003eb8:	e0a4      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003eba:	68a0      	ldr	r0, [r4, #8]
 8003ebc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d002      	beq.n	8003ec8 <PE_SubStateMachine_VconnSwap+0x120>
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	7c20      	ldrb	r0, [r4, #16]
 8003ec6:	4790      	blx	r2
 8003ec8:	20a1      	movs	r0, #161	@ 0xa1
 8003eca:	7460      	strb	r0, [r4, #17]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	495e      	ldr	r1, [pc, #376]	@ (8004048 <.text_14>)
 8003ed0:	5460      	strb	r0, [r4, r1]
 8003ed2:	e097      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	2206      	movs	r2, #6
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fd fb16 	bl	8001510 <PE_Send_CtrlMessage>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f4      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003ee8:	6960      	ldr	r0, [r4, #20]
 8003eea:	4006      	ands	r6, r0
 8003eec:	6166      	str	r6, [r4, #20]
 8003eee:	2142      	movs	r1, #66	@ 0x42
 8003ef0:	e076      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	23a3      	movs	r3, #163	@ 0xa3
 8003ef8:	220b      	movs	r2, #11
 8003efa:	2100      	movs	r1, #0
 8003efc:	0020      	movs	r0, r4
 8003efe:	f7fd fb07 	bl	8001510 <PE_Send_CtrlMessage>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1e5      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003f06:	6960      	ldr	r0, [r4, #20]
 8003f08:	02e9      	lsls	r1, r5, #11
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	6161      	str	r1, [r4, #20]
 8003f0e:	484f      	ldr	r0, [pc, #316]	@ (800404c <.text_15>)
 8003f10:	83e0      	strh	r0, [r4, #30]
 8003f12:	251b      	movs	r5, #27
 8003f14:	213e      	movs	r1, #62	@ 0x3e
 8003f16:	e063      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003f18:	780a      	ldrb	r2, [r1, #0]
 8003f1a:	2a11      	cmp	r2, #17
 8003f1c:	d155      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f1e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8003f20:	23f0      	movs	r3, #240	@ 0xf0
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d150      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f28:	06d2      	lsls	r2, r2, #27
 8003f2a:	0ed2      	lsrs	r2, r2, #27
 8003f2c:	2a03      	cmp	r2, #3
 8003f2e:	d006      	beq.n	8003f3e <PE_SubStateMachine_VconnSwap+0x196>
 8003f30:	2a04      	cmp	r2, #4
 8003f32:	d024      	beq.n	8003f7e <PE_SubStateMachine_VconnSwap+0x1d6>
 8003f34:	2a0c      	cmp	r2, #12
 8003f36:	d014      	beq.n	8003f62 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003f38:	2a10      	cmp	r2, #16
 8003f3a:	d02e      	beq.n	8003f9a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003f3c:	e045      	b.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	0413      	lsls	r3, r2, #16
 8003f44:	0fdb      	lsrs	r3, r3, #31
 8003f46:	d001      	beq.n	8003f4c <PE_SubStateMachine_VconnSwap+0x1a4>
 8003f48:	229f      	movs	r2, #159	@ 0x9f
 8003f4a:	e000      	b.n	8003f4e <PE_SubStateMachine_VconnSwap+0x1a6>
 8003f4c:	22a0      	movs	r2, #160	@ 0xa0
 8003f4e:	7462      	strb	r2, [r4, #17]
 8003f50:	780a      	ldrb	r2, [r1, #0]
 8003f52:	2a14      	cmp	r2, #20
 8003f54:	d003      	beq.n	8003f5e <PE_SubStateMachine_VconnSwap+0x1b6>
 8003f56:	7008      	strb	r0, [r1, #0]
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc fcfc 	bl	8000956 <PE_Clear_RxEvent>
 8003f5e:	213f      	movs	r1, #63	@ 0x3f
 8003f60:	e030      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	4032      	ands	r2, r6
 8003f66:	6162      	str	r2, [r4, #20]
 8003f68:	7467      	strb	r7, [r4, #17]
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	780a      	ldrb	r2, [r1, #0]
 8003f6e:	2a14      	cmp	r2, #20
 8003f70:	d003      	beq.n	8003f7a <PE_SubStateMachine_VconnSwap+0x1d2>
 8003f72:	7008      	strb	r0, [r1, #0]
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7fc fcee 	bl	8000956 <PE_Clear_RxEvent>
 8003f7a:	2140      	movs	r1, #64	@ 0x40
 8003f7c:	e022      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	4032      	ands	r2, r6
 8003f82:	6162      	str	r2, [r4, #20]
 8003f84:	7467      	strb	r7, [r4, #17]
 8003f86:	2500      	movs	r5, #0
 8003f88:	780a      	ldrb	r2, [r1, #0]
 8003f8a:	2a14      	cmp	r2, #20
 8003f8c:	d003      	beq.n	8003f96 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f8e:	7008      	strb	r0, [r1, #0]
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc fce0 	bl	8000956 <PE_Clear_RxEvent>
 8003f96:	2141      	movs	r1, #65	@ 0x41
 8003f98:	e014      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	0413      	lsls	r3, r2, #16
 8003fa0:	0fdb      	lsrs	r3, r3, #31
 8003fa2:	d102      	bne.n	8003faa <PE_SubStateMachine_VconnSwap+0x202>
 8003fa4:	22a4      	movs	r2, #164	@ 0xa4
 8003fa6:	7462      	strb	r2, [r4, #17]
 8003fa8:	e004      	b.n	8003fb4 <PE_SubStateMachine_VconnSwap+0x20c>
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4032      	ands	r2, r6
 8003fae:	6162      	str	r2, [r4, #20]
 8003fb0:	7467      	strb	r7, [r4, #17]
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	780a      	ldrb	r2, [r1, #0]
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d003      	beq.n	8003fc2 <PE_SubStateMachine_VconnSwap+0x21a>
 8003fba:	7008      	strb	r0, [r1, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fc fcca 	bl	8000956 <PE_Clear_RxEvent>
 8003fc2:	2143      	movs	r1, #67	@ 0x43
 8003fc4:	7c20      	ldrb	r0, [r4, #16]
 8003fc6:	f7fc fa5b 	bl	8000480 <USBPD_PE_Notification>
 8003fca:	8be0      	ldrh	r0, [r4, #30]
 8003fcc:	2180      	movs	r1, #128	@ 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	d117      	bne.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fd4:	6960      	ldr	r0, [r4, #20]
 8003fd6:	4006      	ands	r6, r0
 8003fd8:	6166      	str	r6, [r4, #20]
 8003fda:	7467      	strb	r7, [r4, #17]
 8003fdc:	2500      	movs	r5, #0
 8003fde:	211c      	movs	r1, #28
 8003fe0:	7c20      	ldrb	r0, [r4, #16]
 8003fe2:	f7fc fa4d 	bl	8000480 <USBPD_PE_Notification>
 8003fe6:	e00d      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fe8:	68a0      	ldr	r0, [r4, #8]
 8003fea:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d002      	beq.n	8003ff6 <PE_SubStateMachine_VconnSwap+0x24e>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	7c20      	ldrb	r0, [r4, #16]
 8003ff4:	4790      	blx	r2
 8003ff6:	6960      	ldr	r0, [r4, #20]
 8003ff8:	4006      	ands	r6, r0
 8003ffa:	6166      	str	r6, [r4, #20]
 8003ffc:	7467      	strb	r7, [r4, #17]
 8003ffe:	2500      	movs	r5, #0
 8004000:	4813      	ldr	r0, [pc, #76]	@ (8004050 <.text_16>)
 8004002:	8460      	strh	r0, [r4, #34]	@ 0x22
 8004004:	0028      	movs	r0, r5
 8004006:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004008 <PE_ExtRevisionInteroperability_Cable>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	000a      	movs	r2, r1
 800400c:	6843      	ldr	r3, [r0, #4]
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	2103      	movs	r1, #3
 8004012:	2503      	movs	r5, #3
 8004014:	4025      	ands	r5, r4
 8004016:	42aa      	cmp	r2, r5
 8004018:	d300      	bcc.n	800401c <PE_ExtRevisionInteroperability_Cable+0x14>
 800401a:	002a      	movs	r2, r5
 800401c:	4d06      	ldr	r5, [pc, #24]	@ (8004038 <.text_10>)
 800401e:	4025      	ands	r5, r4
 8004020:	0694      	lsls	r4, r2, #26
 8004022:	068a      	lsls	r2, r1, #26
 8004024:	4022      	ands	r2, r4
 8004026:	432a      	orrs	r2, r5
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	0e92      	lsrs	r2, r2, #26
 800402c:	4011      	ands	r1, r2
 800402e:	7c00      	ldrb	r0, [r0, #16]
 8004030:	f001 fb85 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8004034:	bd31      	pop	{r0, r4, r5, pc}
	...

08004038 <.text_10>:
 8004038:	f3ffffff 	.word	0xf3ffffff

0800403c <.text_11>:
 800403c:	ffffefff 	.word	0xffffefff

08004040 <.text_12>:
 8004040:	00008096 	.word	0x00008096

08004044 <.text_13>:
 8004044:	0000f01f 	.word	0x0000f01f

08004048 <.text_14>:
 8004048:	00000262 	.word	0x00000262

0800404c <.text_15>:
 800404c:	0000801b 	.word	0x0000801b

08004050 <.text_16>:
 8004050:	0000802d 	.word	0x0000802d

08004054 <USBPD_PE_SVDM_RequestIdentity>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	000a      	movs	r2, r1
 8004058:	49aa      	ldr	r1, [pc, #680]	@ (8004304 <.text_8>)
 800405a:	0083      	lsls	r3, r0, #2
 800405c:	58cb      	ldr	r3, [r1, r3]
 800405e:	2110      	movs	r1, #16
 8004060:	2401      	movs	r4, #1
 8004062:	681d      	ldr	r5, [r3, #0]
 8004064:	686d      	ldr	r5, [r5, #4]
 8004066:	0a6d      	lsrs	r5, r5, #9
 8004068:	4025      	ands	r5, r4
 800406a:	d004      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800406c:	68dd      	ldr	r5, [r3, #12]
 800406e:	2d00      	cmp	r5, #0
 8004070:	d001      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004072:	2a02      	cmp	r2, #2
 8004074:	d101      	bne.n	800407a <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004076:	2102      	movs	r1, #2
 8004078:	e02d      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800407a:	2532      	movs	r5, #50	@ 0x32
 800407c:	5d5d      	ldrb	r5, [r3, r5]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d104      	bne.n	800408c <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004082:	685d      	ldr	r5, [r3, #4]
 8004084:	682d      	ldr	r5, [r5, #0]
 8004086:	0b2d      	lsrs	r5, r5, #12
 8004088:	402c      	ands	r4, r5
 800408a:	d101      	bne.n	8004090 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 800408c:	2103      	movs	r1, #3
 800408e:	e022      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004090:	2433      	movs	r4, #51	@ 0x33
 8004092:	551a      	strb	r2, [r3, r4]
 8004094:	2507      	movs	r5, #7
 8004096:	2a00      	cmp	r2, #0
 8004098:	d002      	beq.n	80040a0 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800409a:	2a01      	cmp	r2, #1
 800409c:	d008      	beq.n	80040b0 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800409e:	e01a      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	4015      	ands	r5, r2
 80040a8:	2d03      	cmp	r5, #3
 80040aa:	d114      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040ac:	217d      	movs	r1, #125	@ 0x7d
 80040ae:	e00c      	b.n	80040ca <USBPD_PE_SVDM_RequestIdentity+0x76>
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4eab      	ldr	r6, [pc, #684]	@ (8004364 <.text_10>)
 80040b6:	4016      	ands	r6, r2
 80040b8:	2782      	movs	r7, #130	@ 0x82
 80040ba:	007f      	lsls	r7, r7, #1
 80040bc:	42be      	cmp	r6, r7
 80040be:	d003      	beq.n	80040c8 <USBPD_PE_SVDM_RequestIdentity+0x74>
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	4015      	ands	r5, r2
 80040c4:	2d03      	cmp	r5, #3
 80040c6:	d106      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040c8:	2105      	movs	r1, #5
 80040ca:	2232      	movs	r2, #50	@ 0x32
 80040cc:	5499      	strb	r1, [r3, r2]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80040d2:	4788      	blx	r1
 80040d4:	2100      	movs	r1, #0
 80040d6:	0008      	movs	r0, r1
 80040d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040da <USBPD_PE_SVDM_RequestSVID>:
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	000a      	movs	r2, r1
 80040de:	4989      	ldr	r1, [pc, #548]	@ (8004304 <.text_8>)
 80040e0:	0083      	lsls	r3, r0, #2
 80040e2:	58cb      	ldr	r3, [r1, r3]
 80040e4:	2110      	movs	r1, #16
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d001      	beq.n	80040f0 <USBPD_PE_SVDM_RequestSVID+0x16>
 80040ec:	2a02      	cmp	r2, #2
 80040ee:	d101      	bne.n	80040f4 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80040f0:	2102      	movs	r1, #2
 80040f2:	e020      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80040f4:	2432      	movs	r4, #50	@ 0x32
 80040f6:	5d1c      	ldrb	r4, [r3, r4]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d105      	bne.n	8004108 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80040fc:	685c      	ldr	r4, [r3, #4]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	2401      	movs	r4, #1
 8004102:	0b2e      	lsrs	r6, r5, #12
 8004104:	4026      	ands	r6, r4
 8004106:	d101      	bne.n	800410c <USBPD_PE_SVDM_RequestSVID+0x32>
 8004108:	2103      	movs	r1, #3
 800410a:	e014      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800410c:	056d      	lsls	r5, r5, #21
 800410e:	0f6d      	lsrs	r5, r5, #29
 8004110:	2d03      	cmp	r5, #3
 8004112:	d110      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004114:	2533      	movs	r5, #51	@ 0x33
 8004116:	555a      	strb	r2, [r3, r5]
 8004118:	257f      	movs	r5, #127	@ 0x7f
 800411a:	2632      	movs	r6, #50	@ 0x32
 800411c:	559d      	strb	r5, [r3, r6]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d005      	beq.n	800412e <USBPD_PE_SVDM_RequestSVID+0x54>
 8004122:	2a01      	cmp	r2, #1
 8004124:	d107      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	4014      	ands	r4, r2
 800412c:	d003      	beq.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004132:	4788      	blx	r1
 8004134:	2100      	movs	r1, #0
 8004136:	0008      	movs	r0, r1
 8004138:	bd70      	pop	{r4, r5, r6, pc}

0800413a <USBPD_PE_SVDM_RequestMode>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	000b      	movs	r3, r1
 800413e:	4971      	ldr	r1, [pc, #452]	@ (8004304 <.text_8>)
 8004140:	0084      	lsls	r4, r0, #2
 8004142:	590c      	ldr	r4, [r1, r4]
 8004144:	2110      	movs	r1, #16
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	2d00      	cmp	r5, #0
 800414a:	d001      	beq.n	8004150 <USBPD_PE_SVDM_RequestMode+0x16>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d101      	bne.n	8004154 <USBPD_PE_SVDM_RequestMode+0x1a>
 8004150:	2102      	movs	r1, #2
 8004152:	e023      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004154:	2532      	movs	r5, #50	@ 0x32
 8004156:	5d65      	ldrb	r5, [r4, r5]
 8004158:	2d00      	cmp	r5, #0
 800415a:	d105      	bne.n	8004168 <USBPD_PE_SVDM_RequestMode+0x2e>
 800415c:	6865      	ldr	r5, [r4, #4]
 800415e:	682e      	ldr	r6, [r5, #0]
 8004160:	2501      	movs	r5, #1
 8004162:	0b37      	lsrs	r7, r6, #12
 8004164:	402f      	ands	r7, r5
 8004166:	d101      	bne.n	800416c <USBPD_PE_SVDM_RequestMode+0x32>
 8004168:	2103      	movs	r1, #3
 800416a:	e017      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800416c:	0576      	lsls	r6, r6, #21
 800416e:	0f76      	lsrs	r6, r6, #29
 8004170:	2e03      	cmp	r6, #3
 8004172:	d113      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004174:	2633      	movs	r6, #51	@ 0x33
 8004176:	55a3      	strb	r3, [r4, r6]
 8004178:	2681      	movs	r6, #129	@ 0x81
 800417a:	2732      	movs	r7, #50	@ 0x32
 800417c:	55e6      	strb	r6, [r4, r7]
 800417e:	2696      	movs	r6, #150	@ 0x96
 8004180:	00b6      	lsls	r6, r6, #2
 8004182:	53a2      	strh	r2, [r4, r6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800418c:	6962      	ldr	r2, [r4, #20]
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	4015      	ands	r5, r2
 8004192:	d003      	beq.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004198:	4788      	blx	r1
 800419a:	2100      	movs	r1, #0
 800419c:	0008      	movs	r0, r1
 800419e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041a0 <USBPD_PE_SVDM_RequestModeEnter>:
 80041a0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80041a2:	4858      	ldr	r0, [pc, #352]	@ (8004304 <.text_8>)
 80041a4:	466c      	mov	r4, sp
 80041a6:	7824      	ldrb	r4, [r4, #0]
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	5904      	ldr	r4, [r0, r4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	68e5      	ldr	r5, [r4, #12]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d101      	bne.n	80041b8 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 80041b4:	2002      	movs	r0, #2
 80041b6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041b8:	2532      	movs	r5, #50	@ 0x32
 80041ba:	5d65      	ldrb	r5, [r4, r5]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d105      	bne.n	80041cc <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 80041c0:	6865      	ldr	r5, [r4, #4]
 80041c2:	682e      	ldr	r6, [r5, #0]
 80041c4:	2501      	movs	r5, #1
 80041c6:	0b37      	lsrs	r7, r6, #12
 80041c8:	402f      	ands	r7, r5
 80041ca:	d101      	bne.n	80041d0 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80041cc:	2003      	movs	r0, #3
 80041ce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041d0:	27e1      	movs	r7, #225	@ 0xe1
 80041d2:	00ff      	lsls	r7, r7, #3
 80041d4:	4037      	ands	r7, r6
 80041d6:	26c2      	movs	r6, #194	@ 0xc2
 80041d8:	00b6      	lsls	r6, r6, #2
 80041da:	42b7      	cmp	r7, r6
 80041dc:	d11e      	bne.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80041de:	2633      	movs	r6, #51	@ 0x33
 80041e0:	55a1      	strb	r1, [r4, r6]
 80041e2:	2682      	movs	r6, #130	@ 0x82
 80041e4:	2732      	movs	r7, #50	@ 0x32
 80041e6:	55e6      	strb	r6, [r4, r7]
 80041e8:	2696      	movs	r6, #150	@ 0x96
 80041ea:	00b6      	lsls	r6, r6, #2
 80041ec:	53a2      	strh	r2, [r4, r6]
 80041ee:	6966      	ldr	r6, [r4, #20]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	@ (80044b0 <.text_13>)
 80041f2:	4032      	ands	r2, r6
 80041f4:	019e      	lsls	r6, r3, #6
 80041f6:	23e0      	movs	r3, #224	@ 0xe0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4033      	ands	r3, r6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	2900      	cmp	r1, #0
 8004202:	d005      	beq.n	8004210 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004204:	2902      	cmp	r1, #2
 8004206:	d000      	beq.n	800420a <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004208:	d208      	bcs.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800420a:	0c19      	lsrs	r1, r3, #16
 800420c:	400d      	ands	r5, r1
 800420e:	d005      	beq.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004210:	4668      	mov	r0, sp
 8004212:	7800      	ldrb	r0, [r0, #0]
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004218:	4788      	blx	r1
 800421a:	2000      	movs	r0, #0
 800421c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800421e <USBPD_PE_SVDM_RequestModeExit>:
 800421e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004220:	4838      	ldr	r0, [pc, #224]	@ (8004304 <.text_8>)
 8004222:	466c      	mov	r4, sp
 8004224:	7824      	ldrb	r4, [r4, #0]
 8004226:	00a4      	lsls	r4, r4, #2
 8004228:	5904      	ldr	r4, [r0, r4]
 800422a:	2010      	movs	r0, #16
 800422c:	68e5      	ldr	r5, [r4, #12]
 800422e:	2d00      	cmp	r5, #0
 8004230:	d101      	bne.n	8004236 <USBPD_PE_SVDM_RequestModeExit+0x18>
 8004232:	2002      	movs	r0, #2
 8004234:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004236:	2532      	movs	r5, #50	@ 0x32
 8004238:	5d65      	ldrb	r5, [r4, r5]
 800423a:	2d00      	cmp	r5, #0
 800423c:	d105      	bne.n	800424a <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	682e      	ldr	r6, [r5, #0]
 8004242:	2501      	movs	r5, #1
 8004244:	0b37      	lsrs	r7, r6, #12
 8004246:	402f      	ands	r7, r5
 8004248:	d101      	bne.n	800424e <USBPD_PE_SVDM_RequestModeExit+0x30>
 800424a:	2003      	movs	r0, #3
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424e:	27e1      	movs	r7, #225	@ 0xe1
 8004250:	00ff      	lsls	r7, r7, #3
 8004252:	4037      	ands	r7, r6
 8004254:	26c2      	movs	r6, #194	@ 0xc2
 8004256:	00b6      	lsls	r6, r6, #2
 8004258:	42b7      	cmp	r7, r6
 800425a:	d11e      	bne.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800425c:	2633      	movs	r6, #51	@ 0x33
 800425e:	55a1      	strb	r1, [r4, r6]
 8004260:	2683      	movs	r6, #131	@ 0x83
 8004262:	2732      	movs	r7, #50	@ 0x32
 8004264:	55e6      	strb	r6, [r4, r7]
 8004266:	2696      	movs	r6, #150	@ 0x96
 8004268:	00b6      	lsls	r6, r6, #2
 800426a:	53a2      	strh	r2, [r4, r6]
 800426c:	6966      	ldr	r6, [r4, #20]
 800426e:	4a90      	ldr	r2, [pc, #576]	@ (80044b0 <.text_13>)
 8004270:	4032      	ands	r2, r6
 8004272:	019e      	lsls	r6, r3, #6
 8004274:	23e0      	movs	r3, #224	@ 0xe0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4033      	ands	r3, r6
 800427a:	4313      	orrs	r3, r2
 800427c:	6163      	str	r3, [r4, #20]
 800427e:	2900      	cmp	r1, #0
 8004280:	d005      	beq.n	800428e <USBPD_PE_SVDM_RequestModeExit+0x70>
 8004282:	2902      	cmp	r1, #2
 8004284:	d000      	beq.n	8004288 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004286:	d208      	bcs.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	400d      	ands	r5, r1
 800428c:	d005      	beq.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800428e:	4668      	mov	r0, sp
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	68a1      	ldr	r1, [r4, #8]
 8004294:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004296:	4788      	blx	r1
 8004298:	2000      	movs	r0, #0
 800429a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800429c <USBPD_PE_SVDM_RequestSpecific>:
 800429c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800429e:	4819      	ldr	r0, [pc, #100]	@ (8004304 <.text_8>)
 80042a0:	466c      	mov	r4, sp
 80042a2:	7824      	ldrb	r4, [r4, #0]
 80042a4:	00a4      	lsls	r4, r4, #2
 80042a6:	5904      	ldr	r4, [r0, r4]
 80042a8:	2010      	movs	r0, #16
 80042aa:	68e5      	ldr	r5, [r4, #12]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d101      	bne.n	80042b4 <USBPD_PE_SVDM_RequestSpecific+0x18>
 80042b0:	2002      	movs	r0, #2
 80042b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042b4:	2532      	movs	r5, #50	@ 0x32
 80042b6:	5d65      	ldrb	r5, [r4, r5]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d105      	bne.n	80042c8 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 80042bc:	6865      	ldr	r5, [r4, #4]
 80042be:	682d      	ldr	r5, [r5, #0]
 80042c0:	2601      	movs	r6, #1
 80042c2:	0b2f      	lsrs	r7, r5, #12
 80042c4:	4037      	ands	r7, r6
 80042c6:	d101      	bne.n	80042cc <USBPD_PE_SVDM_RequestSpecific+0x30>
 80042c8:	2003      	movs	r0, #3
 80042ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042cc:	6967      	ldr	r7, [r4, #20]
 80042ce:	0c3f      	lsrs	r7, r7, #16
 80042d0:	403e      	ands	r6, r7
 80042d2:	d101      	bne.n	80042d8 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80042d4:	000e      	movs	r6, r1
 80042d6:	d113      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042d8:	056d      	lsls	r5, r5, #21
 80042da:	0f6d      	lsrs	r5, r5, #29
 80042dc:	2d03      	cmp	r5, #3
 80042de:	d10f      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042e0:	2033      	movs	r0, #51	@ 0x33
 80042e2:	5421      	strb	r1, [r4, r0]
 80042e4:	2085      	movs	r0, #133	@ 0x85
 80042e6:	2132      	movs	r1, #50	@ 0x32
 80042e8:	5460      	strb	r0, [r4, r1]
 80042ea:	2095      	movs	r0, #149	@ 0x95
 80042ec:	0080      	lsls	r0, r0, #2
 80042ee:	1820      	adds	r0, r4, r0
 80042f0:	6002      	str	r2, [r0, #0]
 80042f2:	8083      	strh	r3, [r0, #4]
 80042f4:	4668      	mov	r0, sp
 80042f6:	7800      	ldrb	r0, [r0, #0]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80042fc:	4788      	blx	r1
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004304 <.text_8>:
 8004304:	20000224 	.word	0x20000224

08004308 <USBPD_PE_SVDM_RequestAttention>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	000b      	movs	r3, r1
 800430c:	4969      	ldr	r1, [pc, #420]	@ (80044b4 <.text_14>)
 800430e:	0084      	lsls	r4, r0, #2
 8004310:	590d      	ldr	r5, [r1, r4]
 8004312:	2110      	movs	r1, #16
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d001      	beq.n	800431e <USBPD_PE_SVDM_RequestAttention+0x16>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <USBPD_PE_SVDM_RequestAttention+0x1a>
 800431e:	2102      	movs	r1, #2
 8004320:	e01e      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004322:	2332      	movs	r3, #50	@ 0x32
 8004324:	5ceb      	ldrb	r3, [r5, r3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800432a:	686b      	ldr	r3, [r5, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	04dc      	lsls	r4, r3, #19
 8004330:	0fe4      	lsrs	r4, r4, #31
 8004332:	d101      	bne.n	8004338 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004334:	2103      	movs	r1, #3
 8004336:	e013      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10f      	bne.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004340:	2400      	movs	r4, #0
 8004342:	2333      	movs	r3, #51	@ 0x33
 8004344:	54ec      	strb	r4, [r5, r3]
 8004346:	2184      	movs	r1, #132	@ 0x84
 8004348:	2332      	movs	r3, #50	@ 0x32
 800434a:	54e9      	strb	r1, [r5, r3]
 800434c:	2195      	movs	r1, #149	@ 0x95
 800434e:	0089      	lsls	r1, r1, #2
 8004350:	1869      	adds	r1, r5, r1
 8004352:	2306      	movs	r3, #6
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	808a      	strh	r2, [r1, #4]
 8004358:	68a9      	ldr	r1, [r5, #8]
 800435a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800435c:	4788      	blx	r1
 800435e:	2100      	movs	r1, #0
 8004360:	0008      	movs	r0, r1
 8004362:	bd32      	pop	{r1, r4, r5, pc}

08004364 <.text_10>:
 8004364:	00000704 	.word	0x00000704

08004368 <USBPD_PE_UVDM_RequestMessage>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	000a      	movs	r2, r1
 800436c:	4951      	ldr	r1, [pc, #324]	@ (80044b4 <.text_14>)
 800436e:	0083      	lsls	r3, r0, #2
 8004370:	58cb      	ldr	r3, [r1, r3]
 8004372:	2110      	movs	r1, #16
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d101      	bne.n	800437e <USBPD_PE_UVDM_RequestMessage+0x16>
 800437a:	2102      	movs	r1, #2
 800437c:	e01d      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 800437e:	2432      	movs	r4, #50	@ 0x32
 8004380:	5d1c      	ldrb	r4, [r3, r4]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d105      	bne.n	8004392 <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	2501      	movs	r5, #1
 800438c:	0b26      	lsrs	r6, r4, #12
 800438e:	402e      	ands	r6, r5
 8004390:	d101      	bne.n	8004396 <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004392:	2103      	movs	r1, #3
 8004394:	e011      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 8004396:	0be6      	lsrs	r6, r4, #15
 8004398:	4035      	ands	r5, r6
 800439a:	d101      	bne.n	80043a0 <USBPD_PE_UVDM_RequestMessage+0x38>
 800439c:	0015      	movs	r5, r2
 800439e:	d10c      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a0:	0564      	lsls	r4, r4, #21
 80043a2:	0f64      	lsrs	r4, r4, #29
 80043a4:	2c03      	cmp	r4, #3
 80043a6:	d108      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a8:	2133      	movs	r1, #51	@ 0x33
 80043aa:	545a      	strb	r2, [r3, r1]
 80043ac:	2186      	movs	r1, #134	@ 0x86
 80043ae:	2232      	movs	r2, #50	@ 0x32
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80043b6:	4788      	blx	r1
 80043b8:	2100      	movs	r1, #0
 80043ba:	0008      	movs	r0, r1
 80043bc:	bd70      	pop	{r4, r5, r6, pc}

080043be <PE_Receive_SVDM>:
 80043be:	493e      	ldr	r1, [pc, #248]	@ (80044b8 <.text_15>)
 80043c0:	1842      	adds	r2, r0, r1
 80043c2:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	0f49      	lsrs	r1, r1, #29
 80043c8:	1e49      	subs	r1, r1, #1
 80043ca:	7611      	strb	r1, [r2, #24]
 80043cc:	2131      	movs	r1, #49	@ 0x31
 80043ce:	5c41      	ldrb	r1, [r0, r1]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d000      	beq.n	80043d6 <PE_Receive_SVDM+0x18>
 80043d4:	4770      	bx	lr
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	2300      	movs	r3, #0
 80043da:	e010      	b.n	80043fe <PE_Receive_SVDM+0x40>
 80043dc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80043de:	009c      	lsls	r4, r3, #2
 80043e0:	1909      	adds	r1, r1, r4
 80043e2:	798c      	ldrb	r4, [r1, #6]
 80043e4:	79cd      	ldrb	r5, [r1, #7]
 80043e6:	022d      	lsls	r5, r5, #8
 80043e8:	1964      	adds	r4, r4, r5
 80043ea:	7a0d      	ldrb	r5, [r1, #8]
 80043ec:	042d      	lsls	r5, r5, #16
 80043ee:	1964      	adds	r4, r4, r5
 80043f0:	7a49      	ldrb	r1, [r1, #9]
 80043f2:	0609      	lsls	r1, r1, #24
 80043f4:	1861      	adds	r1, r4, r1
 80043f6:	009c      	lsls	r4, r3, #2
 80043f8:	5111      	str	r1, [r2, r4]
 80043fa:	1c5b      	adds	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	7e11      	ldrb	r1, [r2, #24]
 8004400:	428b      	cmp	r3, r1
 8004402:	dbeb      	blt.n	80043dc <PE_Receive_SVDM+0x1e>
 8004404:	0004      	movs	r4, r0
 8004406:	2503      	movs	r5, #3
 8004408:	4b2c      	ldr	r3, [pc, #176]	@ (80044bc <.text_16>)
 800440a:	482d      	ldr	r0, [pc, #180]	@ (80044c0 <.text_17>)
 800440c:	2694      	movs	r6, #148	@ 0x94
 800440e:	00b6      	lsls	r6, r6, #2
 8004410:	5da6      	ldrb	r6, [r4, r6]
 8004412:	06f6      	lsls	r6, r6, #27
 8004414:	0ef6      	lsrs	r6, r6, #27
 8004416:	1e76      	subs	r6, r6, #1
 8004418:	d00d      	beq.n	8004436 <PE_Receive_SVDM+0x78>
 800441a:	1e76      	subs	r6, r6, #1
 800441c:	d022      	beq.n	8004464 <PE_Receive_SVDM+0xa6>
 800441e:	1e76      	subs	r6, r6, #1
 8004420:	d025      	beq.n	800446e <PE_Receive_SVDM+0xb0>
 8004422:	1e76      	subs	r6, r6, #1
 8004424:	d028      	beq.n	8004478 <PE_Receive_SVDM+0xba>
 8004426:	1e76      	subs	r6, r6, #1
 8004428:	d02b      	beq.n	8004482 <PE_Receive_SVDM+0xc4>
 800442a:	1e76      	subs	r6, r6, #1
 800442c:	d02e      	beq.n	800448c <PE_Receive_SVDM+0xce>
 800442e:	3e0a      	subs	r6, #10
 8004430:	2e0f      	cmp	r6, #15
 8004432:	d937      	bls.n	80044a4 <PE_Receive_SVDM+0xe6>
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	2150      	movs	r1, #80	@ 0x50
 8004438:	7721      	strb	r1, [r4, #28]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	680a      	ldr	r2, [r1, #0]
 800443e:	0693      	lsls	r3, r2, #26
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	2694      	movs	r6, #148	@ 0x94
 8004444:	00b6      	lsls	r6, r6, #2
 8004446:	59a6      	ldr	r6, [r4, r6]
 8004448:	0b76      	lsrs	r6, r6, #13
 800444a:	4035      	ands	r5, r6
 800444c:	429d      	cmp	r5, r3
 800444e:	da00      	bge.n	8004452 <PE_Receive_SVDM+0x94>
 8004450:	002b      	movs	r3, r5
 8004452:	2520      	movs	r5, #32
 8004454:	43aa      	bics	r2, r5
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	402b      	ands	r3, r5
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	83e0      	strh	r0, [r4, #30]
 8004460:	2075      	movs	r0, #117	@ 0x75
 8004462:	e023      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004464:	2152      	movs	r1, #82	@ 0x52
 8004466:	7721      	strb	r1, [r4, #28]
 8004468:	83e0      	strh	r0, [r4, #30]
 800446a:	2076      	movs	r0, #118	@ 0x76
 800446c:	e01e      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800446e:	2153      	movs	r1, #83	@ 0x53
 8004470:	7721      	strb	r1, [r4, #28]
 8004472:	83e0      	strh	r0, [r4, #30]
 8004474:	2078      	movs	r0, #120	@ 0x78
 8004476:	e019      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004478:	2054      	movs	r0, #84	@ 0x54
 800447a:	7720      	strb	r0, [r4, #28]
 800447c:	83e3      	strh	r3, [r4, #30]
 800447e:	2079      	movs	r0, #121	@ 0x79
 8004480:	e014      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004482:	2055      	movs	r0, #85	@ 0x55
 8004484:	7720      	strb	r0, [r4, #28]
 8004486:	83e3      	strh	r3, [r4, #30]
 8004488:	207a      	movs	r0, #122	@ 0x7a
 800448a:	e00f      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PE_Receive_SVDM+0xe2>
 8004494:	2900      	cmp	r1, #0
 8004496:	d000      	beq.n	800449a <PE_Receive_SVDM+0xdc>
 8004498:	2101      	movs	r1, #1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	7c20      	ldrb	r0, [r4, #16]
 800449e:	4798      	blx	r3
 80044a0:	7465      	strb	r5, [r4, #17]
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	215a      	movs	r1, #90	@ 0x5a
 80044a6:	7721      	strb	r1, [r4, #28]
 80044a8:	83e0      	strh	r0, [r4, #30]
 80044aa:	207b      	movs	r0, #123	@ 0x7b
 80044ac:	7460      	strb	r0, [r4, #17]
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <.text_13>:
 80044b0:	fffffe3f 	.word	0xfffffe3f

080044b4 <.text_14>:
 80044b4:	20000224 	.word	0x20000224

080044b8 <.text_15>:
 80044b8:	00000494 	.word	0x00000494

080044bc <.text_16>:
 80044bc:	00008019 	.word	0x00008019

080044c0 <.text_17>:
 80044c0:	0000800f 	.word	0x0000800f

080044c4 <PE_StateMachine_VDM>:
 80044c4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80044c6:	b09c      	sub	sp, #112	@ 0x70
 80044c8:	0005      	movs	r5, r0
 80044ca:	2002      	movs	r0, #2
 80044cc:	9004      	str	r0, [sp, #16]
 80044ce:	7c6a      	ldrb	r2, [r5, #17]
 80044d0:	0010      	movs	r0, r2
 80044d2:	3875      	subs	r0, #117	@ 0x75
 80044d4:	2807      	cmp	r0, #7
 80044d6:	d206      	bcs.n	80044e6 <__iar_annotation$$branch+0x4>
 80044d8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80044da:	7800      	ldrb	r0, [r0, #0]
 80044dc:	2814      	cmp	r0, #20
 80044de:	d002      	beq.n	80044e6 <__iar_annotation$$branch+0x4>
 80044e0:	2002      	movs	r0, #2

080044e2 <__iar_annotation$$branch>:
 80044e2:	f000 febc 	bl	800525e <__iar_annotation$$branch+0xce4>
 80044e6:	2094      	movs	r0, #148	@ 0x94
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	182c      	adds	r4, r5, r0
 80044ec:	210b      	movs	r1, #11
 80044ee:	271e      	movs	r7, #30
 80044f0:	201f      	movs	r0, #31
 80044f2:	43c0      	mvns	r0, r0
 80044f4:	26c0      	movs	r6, #192	@ 0xc0
 80044f6:	43f6      	mvns	r6, r6
 80044f8:	2a75      	cmp	r2, #117	@ 0x75
 80044fa:	d041      	beq.n	8004580 <__iar_annotation$$branch+0x6>
 80044fc:	2a76      	cmp	r2, #118	@ 0x76
 80044fe:	d100      	bne.n	8004502 <__iar_annotation$$branch+0x20>
 8004500:	e0bb      	b.n	800467a <__iar_annotation$$branch+0x100>
 8004502:	2a77      	cmp	r2, #119	@ 0x77
 8004504:	d100      	bne.n	8004508 <__iar_annotation$$branch+0x26>
 8004506:	e144      	b.n	8004792 <__iar_annotation$$branch+0x218>
 8004508:	2a78      	cmp	r2, #120	@ 0x78
 800450a:	d100      	bne.n	800450e <__iar_annotation$$branch+0x2c>
 800450c:	e1b4      	b.n	8004878 <__iar_annotation$$branch+0x2fe>
 800450e:	2a79      	cmp	r2, #121	@ 0x79
 8004510:	d100      	bne.n	8004514 <__iar_annotation$$branch+0x32>
 8004512:	e216      	b.n	8004942 <__iar_annotation$$branch+0x3c8>
 8004514:	2a7a      	cmp	r2, #122	@ 0x7a
 8004516:	d100      	bne.n	800451a <__iar_annotation$$branch+0x38>
 8004518:	e24b      	b.n	80049b2 <__iar_annotation$$branch+0x438>
 800451a:	2a7b      	cmp	r2, #123	@ 0x7b
 800451c:	d100      	bne.n	8004520 <__iar_annotation$$branch+0x3e>
 800451e:	e292      	b.n	8004a46 <__iar_annotation$$branch+0x4cc>
 8004520:	2a7d      	cmp	r2, #125	@ 0x7d
 8004522:	d100      	bne.n	8004526 <__iar_annotation$$branch+0x44>
 8004524:	e2e0      	b.n	8004ae8 <__iar_annotation$$branch+0x56e>
 8004526:	2a7f      	cmp	r2, #127	@ 0x7f
 8004528:	d100      	bne.n	800452c <__iar_annotation$$branch+0x4a>
 800452a:	e352      	b.n	8004bd2 <__iar_annotation$$branch+0x658>
 800452c:	2a81      	cmp	r2, #129	@ 0x81
 800452e:	d100      	bne.n	8004532 <__iar_annotation$$branch+0x50>
 8004530:	e3c2      	b.n	8004cb8 <__iar_annotation$$branch+0x73e>
 8004532:	2a82      	cmp	r2, #130	@ 0x82
 8004534:	d101      	bne.n	800453a <__iar_annotation$$branch+0x4>

08004536 <__iar_annotation$$branch>:
 8004536:	f000 fc3b 	bl	8004db0 <__iar_annotation$$branch+0x836>
 800453a:	2a83      	cmp	r2, #131	@ 0x83
 800453c:	d101      	bne.n	8004542 <__iar_annotation$$branch+0x4>

0800453e <__iar_annotation$$branch>:
 800453e:	f000 fcc9 	bl	8004ed4 <__iar_annotation$$branch+0x95a>
 8004542:	2a84      	cmp	r2, #132	@ 0x84
 8004544:	d101      	bne.n	800454a <__iar_annotation$$branch+0x4>

08004546 <__iar_annotation$$branch>:
 8004546:	f000 fe38 	bl	80051ba <__iar_annotation$$branch+0xc40>
 800454a:	2a85      	cmp	r2, #133	@ 0x85
 800454c:	d101      	bne.n	8004552 <__iar_annotation$$branch+0x4>

0800454e <__iar_annotation$$branch>:
 800454e:	f000 fd5d 	bl	800500c <__iar_annotation$$branch+0xa92>
 8004552:	2a87      	cmp	r2, #135	@ 0x87
 8004554:	d100      	bne.n	8004558 <__iar_annotation$$branch+0xa>
 8004556:	e2fc      	b.n	8004b52 <__iar_annotation$$branch+0x5d8>
 8004558:	2a89      	cmp	r2, #137	@ 0x89
 800455a:	d100      	bne.n	800455e <__iar_annotation$$branch+0x10>
 800455c:	e375      	b.n	8004c4a <__iar_annotation$$branch+0x6d0>
 800455e:	2a8b      	cmp	r2, #139	@ 0x8b
 8004560:	d101      	bne.n	8004566 <__iar_annotation$$branch+0x4>

08004562 <__iar_annotation$$branch>:
 8004562:	f000 fbe4 	bl	8004d2e <__iar_annotation$$branch+0x7b4>
 8004566:	2a8c      	cmp	r2, #140	@ 0x8c
 8004568:	d101      	bne.n	800456e <__iar_annotation$$branch+0x4>

0800456a <__iar_annotation$$branch>:
 800456a:	f000 fc63 	bl	8004e34 <__iar_annotation$$branch+0x8ba>
 800456e:	2a8d      	cmp	r2, #141	@ 0x8d
 8004570:	d101      	bne.n	8004576 <__iar_annotation$$branch+0x4>

08004572 <__iar_annotation$$branch>:
 8004572:	f000 fcf7 	bl	8004f64 <__iar_annotation$$branch+0x9ea>
 8004576:	2a8f      	cmp	r2, #143	@ 0x8f
 8004578:	d101      	bne.n	800457e <__iar_annotation$$branch+0x4>

0800457a <__iar_annotation$$branch>:
 800457a:	f000 fda5 	bl	80050c8 <__iar_annotation$$branch+0xb4e>
 800457e:	e2b2      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004580:	2201      	movs	r2, #1
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	03d3      	lsls	r3, r2, #15
 8004586:	8bea      	ldrh	r2, [r5, #30]
 8004588:	429a      	cmp	r2, r3
 800458a:	d100      	bne.n	800458e <__iar_annotation$$branch+0x14>
 800458c:	e262      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800458e:	2701      	movs	r7, #1
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	4010      	ands	r0, r2
 8004594:	4338      	orrs	r0, r7
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6868      	ldr	r0, [r5, #4]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	0942      	lsrs	r2, r0, #5
 80045a2:	403a      	ands	r2, r7
 80045a4:	48c9      	ldr	r0, [pc, #804]	@ (80048cc <__iar_annotation$$branch+0x352>)
 80045a6:	4018      	ands	r0, r3
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	6868      	ldr	r0, [r5, #4]
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	4001      	ands	r1, r0
 80045b4:	2909      	cmp	r1, #9
 80045b6:	d051      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045b8:	68e8      	ldr	r0, [r5, #12]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04e      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04b      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045c4:	0c10      	lsrs	r0, r2, #16
 80045c6:	21ff      	movs	r1, #255	@ 0xff
 80045c8:	0209      	lsls	r1, r1, #8
 80045ca:	4288      	cmp	r0, r1
 80045cc:	d146      	bne.n	800465c <__iar_annotation$$branch+0xe2>
 80045ce:	a90b      	add	r1, sp, #44	@ 0x2c
 80045d0:	7c28      	ldrb	r0, [r5, #16]
 80045d2:	4798      	blx	r3
 80045d4:	2803      	cmp	r0, #3
 80045d6:	d002      	beq.n	80045de <__iar_annotation$$branch+0x64>
 80045d8:	280f      	cmp	r0, #15
 80045da:	d005      	beq.n	80045e8 <__iar_annotation$$branch+0x6e>
 80045dc:	e03e      	b.n	800465c <__iar_annotation$$branch+0xe2>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	21c0      	movs	r1, #192	@ 0xc0
 80045e2:	4301      	orrs	r1, r0
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	e03e      	b.n	8004666 <__iar_annotation$$branch+0xec>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4006      	ands	r6, r0
 80045ec:	2040      	movs	r0, #64	@ 0x40
 80045ee:	4330      	orrs	r0, r6
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80045f4:	9015      	str	r0, [sp, #84]	@ 0x54
 80045f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80045f8:	9016      	str	r0, [sp, #88]	@ 0x58
 80045fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80045fc:	9017      	str	r0, [sp, #92]	@ 0x5c
 80045fe:	2004      	movs	r0, #4
 8004600:	9003      	str	r0, [sp, #12]
 8004602:	a80b      	add	r0, sp, #44	@ 0x2c
 8004604:	2120      	movs	r1, #32
 8004606:	5c40      	ldrb	r0, [r0, r1]
 8004608:	0841      	lsrs	r1, r0, #1
 800460a:	4239      	tst	r1, r7
 800460c:	d003      	beq.n	8004616 <__iar_annotation$$branch+0x9c>
 800460e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004610:	9118      	str	r1, [sp, #96]	@ 0x60
 8004612:	2105      	movs	r1, #5
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	08c2      	lsrs	r2, r0, #3
 8004618:	2101      	movs	r1, #1
 800461a:	4011      	ands	r1, r2
 800461c:	d008      	beq.n	8004630 <__iar_annotation$$branch+0xb6>
 800461e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8004620:	aa14      	add	r2, sp, #80	@ 0x50
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	50d6      	str	r6, [r2, r3]
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	1c52      	adds	r2, r2, #1
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	0900      	lsrs	r0, r0, #4
 8004632:	4238      	tst	r0, r7
 8004634:	d017      	beq.n	8004666 <__iar_annotation$$branch+0xec>
 8004636:	2900      	cmp	r1, #0
 8004638:	d007      	beq.n	800464a <__iar_annotation$$branch+0xd0>
 800463a:	2000      	movs	r0, #0
 800463c:	a914      	add	r1, sp, #80	@ 0x50
 800463e:	9a03      	ldr	r2, [sp, #12]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	5088      	str	r0, [r1, r2]
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	1c40      	adds	r0, r0, #1
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800464c:	a914      	add	r1, sp, #80	@ 0x50
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	5088      	str	r0, [r1, r2]
 8004654:	9803      	ldr	r0, [sp, #12]
 8004656:	1c40      	adds	r0, r0, #1
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e004      	b.n	8004666 <__iar_annotation$$branch+0xec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	4006      	ands	r6, r0
 8004660:	2080      	movs	r0, #128	@ 0x80
 8004662:	4330      	orrs	r0, r6
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	9014      	str	r0, [sp, #80]	@ 0x50
 800466a:	2000      	movs	r0, #0
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	2003      	movs	r0, #3
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	ab14      	add	r3, sp, #80	@ 0x50
 8004678:	e22f      	b.n	8004ada <__iar_annotation$$branch+0x560>
 800467a:	2201      	movs	r2, #1
 800467c:	466b      	mov	r3, sp
 800467e:	731a      	strb	r2, [r3, #12]
 8004680:	03d2      	lsls	r2, r2, #15
 8004682:	8beb      	ldrh	r3, [r5, #30]
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <__iar_annotation$$branch+0x110>
 8004688:	e1e4      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4018      	ands	r0, r3
 800468e:	2302      	movs	r3, #2
 8004690:	4303      	orrs	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	431a      	orrs	r2, r3
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	6868      	ldr	r0, [r5, #4]
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	0698      	lsls	r0, r3, #26
 800469e:	0fc0      	lsrs	r0, r0, #31
 80046a0:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <__iar_annotation$$branch+0x352>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0340      	lsls	r0, r0, #13
 80046a6:	4318      	orrs	r0, r3
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	686a      	ldr	r2, [r5, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4011      	ands	r1, r2
 80046b0:	2909      	cmp	r1, #9
 80046b2:	d05f      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046b4:	68e9      	ldr	r1, [r5, #12]
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046bc:	0c00      	lsrs	r0, r0, #16
 80046be:	21ff      	movs	r1, #255	@ 0xff
 80046c0:	0209      	lsls	r1, r1, #8
 80046c2:	4288      	cmp	r0, r1
 80046c4:	d156      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046c6:	4882      	ldr	r0, [pc, #520]	@ (80048d0 <__iar_annotation$$branch+0x356>)
 80046c8:	182a      	adds	r2, r5, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	7c28      	ldrb	r0, [r5, #16]
 80046ce:	4798      	blx	r3
 80046d0:	2803      	cmp	r0, #3
 80046d2:	d04b      	beq.n	800476c <__iar_annotation$$branch+0x1f2>
 80046d4:	280f      	cmp	r0, #15
 80046d6:	d14d      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4006      	ands	r6, r0
 80046dc:	2040      	movs	r0, #64	@ 0x40
 80046de:	4330      	orrs	r0, r6
 80046e0:	6020      	str	r0, [r4, #0]
 80046e2:	211c      	movs	r1, #28
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f015 f8c6 	bl	8019876 <__aeabi_memclr>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	a806      	add	r0, sp, #24
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	e014      	b.n	800471e <__iar_annotation$$branch+0x1a4>
 80046f4:	005f      	lsls	r7, r3, #1
 80046f6:	5bf6      	ldrh	r6, [r6, r7]
 80046f8:	0436      	lsls	r6, r6, #16
 80046fa:	430e      	orrs	r6, r1
 80046fc:	6006      	str	r6, [r0, #0]
 80046fe:	e00d      	b.n	800471c <__iar_annotation$$branch+0x1a2>
 8004700:	1c52      	adds	r2, r2, #1
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	1d00      	adds	r0, r0, #4
 8004706:	0859      	lsrs	r1, r3, #1
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	1840      	adds	r0, r0, r1
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	6801      	ldr	r1, [r0, #0]
 8004710:	9e05      	ldr	r6, [sp, #20]
 8004712:	d5ef      	bpl.n	80046f4 <__iar_annotation$$branch+0x17a>
 8004714:	005f      	lsls	r7, r3, #1
 8004716:	5bf6      	ldrh	r6, [r6, r7]
 8004718:	4331      	orrs	r1, r6
 800471a:	6001      	str	r1, [r0, #0]
 800471c:	1c5b      	adds	r3, r3, #1
 800471e:	486d      	ldr	r0, [pc, #436]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004720:	1828      	adds	r0, r5, r0
 8004722:	7840      	ldrb	r0, [r0, #1]
 8004724:	4283      	cmp	r3, r0
 8004726:	d201      	bcs.n	800472c <__iar_annotation$$branch+0x1b2>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d3e9      	bcc.n	8004700 <__iar_annotation$$branch+0x186>
 800472c:	1a80      	subs	r0, r0, r2
 800472e:	4969      	ldr	r1, [pc, #420]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004730:	1869      	adds	r1, r5, r1
 8004732:	7048      	strb	r0, [r1, #1]
 8004734:	b2d0      	uxtb	r0, r2
 8004736:	280c      	cmp	r0, #12
 8004738:	d111      	bne.n	800475e <__iar_annotation$$branch+0x1e4>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	9006      	str	r0, [sp, #24]
 800473e:	2000      	movs	r0, #0
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	2077      	movs	r0, #119	@ 0x77
 8004744:	9001      	str	r0, [sp, #4]
 8004746:	2007      	movs	r0, #7
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	@ 0x31
 8004750:	5c29      	ldrb	r1, [r5, r0]
 8004752:	0028      	movs	r0, r5
 8004754:	f7fc ff07 	bl	8001566 <PE_Send_DataMessage>
 8004758:	485f      	ldr	r0, [pc, #380]	@ (80048d8 <__iar_annotation$$branch+0x35e>)
 800475a:	83e8      	strh	r0, [r5, #30]
 800475c:	e1c3      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800475e:	0612      	lsls	r2, r2, #24
 8004760:	0e50      	lsrs	r0, r2, #25
 8004762:	1c80      	adds	r0, r0, #2
 8004764:	4669      	mov	r1, sp
 8004766:	7308      	strb	r0, [r1, #12]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	e008      	b.n	800477e <__iar_annotation$$branch+0x204>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	20c0      	movs	r0, #192	@ 0xc0
 8004770:	4308      	orrs	r0, r1
 8004772:	e003      	b.n	800477c <__iar_annotation$$branch+0x202>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4006      	ands	r6, r0
 8004778:	2080      	movs	r0, #128	@ 0x80
 800477a:	4330      	orrs	r0, r6
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	2000      	movs	r0, #0
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	2003      	movs	r0, #3
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	4668      	mov	r0, sp
 800478a:	7b00      	ldrb	r0, [r0, #12]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	ab06      	add	r3, sp, #24
 8004790:	e1a3      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004792:	2180      	movs	r1, #128	@ 0x80
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	8bea      	ldrh	r2, [r5, #30]
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <__iar_annotation$$branch+0x224>
 800479c:	e15a      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4010      	ands	r0, r2
 80047a2:	2202      	movs	r2, #2
 80047a4:	4302      	orrs	r2, r0
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	20ff      	movs	r0, #255	@ 0xff
 80047ac:	0600      	lsls	r0, r0, #24
 80047ae:	4310      	orrs	r0, r2
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	4301      	orrs	r1, r0
 80047b4:	6021      	str	r1, [r4, #0]
 80047b6:	2701      	movs	r7, #1
 80047b8:	6868      	ldr	r0, [r5, #4]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	0940      	lsrs	r0, r0, #5
 80047be:	4038      	ands	r0, r7
 80047c0:	4a42      	ldr	r2, [pc, #264]	@ (80048cc <__iar_annotation$$branch+0x352>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	0340      	lsls	r0, r0, #13
 80047c6:	4310      	orrs	r0, r2
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	4006      	ands	r6, r0
 80047cc:	2040      	movs	r0, #64	@ 0x40
 80047ce:	4330      	orrs	r0, r6
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	a905      	add	r1, sp, #20
 80047d6:	7c28      	ldrb	r0, [r5, #16]
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
 80047de:	211c      	movs	r1, #28
 80047e0:	a806      	add	r0, sp, #24
 80047e2:	f015 f848 	bl	8019876 <__aeabi_memclr>
 80047e6:	2100      	movs	r1, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	002c      	movs	r4, r5
 80047ee:	e016      	b.n	800481e <__iar_annotation$$branch+0x2a4>
 80047f0:	004d      	lsls	r5, r1, #1
 80047f2:	5b75      	ldrh	r5, [r6, r5]
 80047f4:	042d      	lsls	r5, r5, #16
 80047f6:	4666      	mov	r6, ip
 80047f8:	4335      	orrs	r5, r6
 80047fa:	601d      	str	r5, [r3, #0]
 80047fc:	e00e      	b.n	800481c <__iar_annotation$$branch+0x2a2>
 80047fe:	1c52      	adds	r2, r2, #1
 8004800:	1d03      	adds	r3, r0, #4
 8004802:	084d      	lsrs	r5, r1, #1
 8004804:	00ad      	lsls	r5, r5, #2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	4239      	tst	r1, r7
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	46b4      	mov	ip, r6
 800480e:	9e05      	ldr	r6, [sp, #20]
 8004810:	d0ee      	beq.n	80047f0 <__iar_annotation$$branch+0x276>
 8004812:	004d      	lsls	r5, r1, #1
 8004814:	5b75      	ldrh	r5, [r6, r5]
 8004816:	4666      	mov	r6, ip
 8004818:	432e      	orrs	r6, r5
 800481a:	601e      	str	r6, [r3, #0]
 800481c:	1c49      	adds	r1, r1, #1
 800481e:	4b2d      	ldr	r3, [pc, #180]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004820:	18e3      	adds	r3, r4, r3
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4299      	cmp	r1, r3
 8004826:	d201      	bcs.n	800482c <__iar_annotation$$branch+0x2b2>
 8004828:	290c      	cmp	r1, #12
 800482a:	d3e8      	bcc.n	80047fe <__iar_annotation$$branch+0x284>
 800482c:	1a98      	subs	r0, r3, r2
 800482e:	4929      	ldr	r1, [pc, #164]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004830:	1861      	adds	r1, r4, r1
 8004832:	7048      	strb	r0, [r1, #1]
 8004834:	b2d0      	uxtb	r0, r2
 8004836:	280c      	cmp	r0, #12
 8004838:	d10f      	bne.n	800485a <__iar_annotation$$branch+0x2e0>
 800483a:	2000      	movs	r0, #0
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	2077      	movs	r0, #119	@ 0x77
 8004840:	9001      	str	r0, [sp, #4]
 8004842:	2007      	movs	r0, #7
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	ab06      	add	r3, sp, #24
 8004848:	220f      	movs	r2, #15
 800484a:	2031      	movs	r0, #49	@ 0x31
 800484c:	5c21      	ldrb	r1, [r4, r0]
 800484e:	0020      	movs	r0, r4
 8004850:	f7fc fe89 	bl	8001566 <PE_Send_DataMessage>
 8004854:	4820      	ldr	r0, [pc, #128]	@ (80048d8 <__iar_annotation$$branch+0x35e>)
 8004856:	83e0      	strh	r0, [r4, #30]
 8004858:	e145      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800485a:	2000      	movs	r0, #0
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	2003      	movs	r0, #3
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	0610      	lsls	r0, r2, #24
 8004864:	0e40      	lsrs	r0, r0, #25
 8004866:	1c80      	adds	r0, r0, #2
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	ab06      	add	r3, sp, #24
 800486e:	220f      	movs	r2, #15
 8004870:	2031      	movs	r0, #49	@ 0x31
 8004872:	5c21      	ldrb	r1, [r4, r0]
 8004874:	0020      	movs	r0, r4
 8004876:	e134      	b.n	8004ae2 <__iar_annotation$$branch+0x568>
 8004878:	2201      	movs	r2, #1
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	03d2      	lsls	r2, r2, #15
 800487e:	8beb      	ldrh	r3, [r5, #30]
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <__iar_annotation$$branch+0x30c>
 8004884:	e3c1      	b.n	800500a <__iar_annotation$$branch+0xa90>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4018      	ands	r0, r3
 800488a:	2303      	movs	r3, #3
 800488c:	4303      	orrs	r3, r0
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	6868      	ldr	r0, [r5, #4]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	0698      	lsls	r0, r3, #26
 800489a:	0fc0      	lsrs	r0, r0, #31
 800489c:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <__iar_annotation$$branch+0x352>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0340      	lsls	r0, r0, #13
 80048a2:	4318      	orrs	r0, r3
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	686a      	ldr	r2, [r5, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4011      	ands	r1, r2
 80048ac:	2909      	cmp	r1, #9
 80048ae:	d037      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b0:	68e9      	ldr	r1, [r5, #12]
 80048b2:	688f      	ldr	r7, [r1, #8]
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d033      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	aa05      	add	r2, sp, #20
 80048bc:	0c01      	lsrs	r1, r0, #16
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	47b8      	blx	r7
 80048c2:	2803      	cmp	r0, #3
 80048c4:	d00a      	beq.n	80048dc <__iar_annotation$$branch+0x362>
 80048c6:	280f      	cmp	r0, #15
 80048c8:	d00d      	beq.n	80048e6 <__iar_annotation$$branch+0x36c>
 80048ca:	e029      	b.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048cc:	ffff9fff 	.word	0xffff9fff
 80048d0:	000004ad 	.word	0x000004ad
 80048d4:	000004ac 	.word	0x000004ac
 80048d8:	0000800f 	.word	0x0000800f
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	21c0      	movs	r1, #192	@ 0xc0
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6021      	str	r1, [r4, #0]
 80048e4:	e023      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 80048e6:	4668      	mov	r0, sp
 80048e8:	7b00      	ldrb	r0, [r0, #12]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d018      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048ee:	4668      	mov	r0, sp
 80048f0:	7b02      	ldrb	r2, [r0, #12]
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	d214      	bcs.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	4006      	ands	r6, r0
 80048fa:	2040      	movs	r0, #64	@ 0x40
 80048fc:	4330      	orrs	r0, r6
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	9806      	ldr	r0, [sp, #24]
 8004904:	4293      	cmp	r3, r2
 8004906:	d211      	bcs.n	800492c <__iar_annotation$$branch+0x3b2>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	ae07      	add	r6, sp, #28
 800490e:	1d36      	adds	r6, r6, #4
 8004910:	009f      	lsls	r7, r3, #2
 8004912:	51f1      	str	r1, [r6, r7]
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	1d09      	adds	r1, r1, #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	1c40      	adds	r0, r0, #1
 800491c:	1c5b      	adds	r3, r3, #1
 800491e:	e7f1      	b.n	8004904 <__iar_annotation$$branch+0x38a>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4006      	ands	r6, r0
 8004924:	2080      	movs	r0, #128	@ 0x80
 8004926:	4330      	orrs	r0, r6
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	e000      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	9007      	str	r0, [sp, #28]
 8004932:	2000      	movs	r0, #0
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	2003      	movs	r0, #3
 8004938:	9001      	str	r0, [sp, #4]
 800493a:	9806      	ldr	r0, [sp, #24]
 800493c:	9000      	str	r0, [sp, #0]
 800493e:	ab07      	add	r3, sp, #28
 8004940:	e0cb      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004942:	2180      	movs	r1, #128	@ 0x80
 8004944:	0209      	lsls	r1, r1, #8
 8004946:	8bea      	ldrh	r2, [r5, #30]
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <__iar_annotation$$branch+0x3d4>
 800494c:	e35d      	b.n	800500a <__iar_annotation$$branch+0xa90>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	4010      	ands	r0, r2
 8004952:	2204      	movs	r2, #4
 8004954:	4302      	orrs	r2, r0
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	4311      	orrs	r1, r2
 800495a:	6021      	str	r1, [r4, #0]
 800495c:	2001      	movs	r0, #1
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0952      	lsrs	r2, r2, #5
 8004964:	4002      	ands	r2, r0
 8004966:	4ba6      	ldr	r3, [pc, #664]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 8004968:	400b      	ands	r3, r1
 800496a:	0351      	lsls	r1, r2, #13
 800496c:	4319      	orrs	r1, r3
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	686a      	ldr	r2, [r5, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	08d2      	lsrs	r2, r2, #3
 8004976:	4010      	ands	r0, r2
 8004978:	d152      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 800497a:	68e8      	ldr	r0, [r5, #12]
 800497c:	68c3      	ldr	r3, [r0, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04e      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004982:	2707      	movs	r7, #7
 8004984:	0a0a      	lsrs	r2, r1, #8
 8004986:	403a      	ands	r2, r7
 8004988:	0c09      	lsrs	r1, r1, #16
 800498a:	7c28      	ldrb	r0, [r5, #16]
 800498c:	4798      	blx	r3
 800498e:	2803      	cmp	r0, #3
 8004990:	d041      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 8004992:	280f      	cmp	r0, #15
 8004994:	d144      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4006      	ands	r6, r0
 800499a:	2040      	movs	r0, #64	@ 0x40
 800499c:	4330      	orrs	r0, r6
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	0a00      	lsrs	r0, r0, #8
 80049a2:	4007      	ands	r7, r0
 80049a4:	6968      	ldr	r0, [r5, #20]
 80049a6:	4940      	ldr	r1, [pc, #256]	@ (8004aa8 <__iar_annotation$$branch+0x52e>)
 80049a8:	4001      	ands	r1, r0
 80049aa:	01b8      	lsls	r0, r7, #6
 80049ac:	4308      	orrs	r0, r1
 80049ae:	6168      	str	r0, [r5, #20]
 80049b0:	e03b      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 80049b2:	2180      	movs	r1, #128	@ 0x80
 80049b4:	0209      	lsls	r1, r1, #8
 80049b6:	8bea      	ldrh	r2, [r5, #30]
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d04b      	beq.n	8004a54 <__iar_annotation$$branch+0x4da>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	4010      	ands	r0, r2
 80049c0:	2205      	movs	r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6021      	str	r1, [r4, #0]
 80049ca:	2001      	movs	r0, #1
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	0952      	lsrs	r2, r2, #5
 80049d2:	4002      	ands	r2, r0
 80049d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	0351      	lsls	r1, r2, #13
 80049da:	4319      	orrs	r1, r3
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	686a      	ldr	r2, [r5, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	08d2      	lsrs	r2, r2, #3
 80049e4:	4010      	ands	r0, r2
 80049e6:	d11b      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049e8:	68e8      	ldr	r0, [r5, #12]
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049f0:	0548      	lsls	r0, r1, #21
 80049f2:	0f42      	lsrs	r2, r0, #29
 80049f4:	0c09      	lsrs	r1, r1, #16
 80049f6:	7c28      	ldrb	r0, [r5, #16]
 80049f8:	4798      	blx	r3
 80049fa:	2803      	cmp	r0, #3
 80049fc:	d00b      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 80049fe:	280f      	cmp	r0, #15
 8004a00:	d10e      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4006      	ands	r6, r0
 8004a06:	2040      	movs	r0, #64	@ 0x40
 8004a08:	4330      	orrs	r0, r6
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6968      	ldr	r0, [r5, #20]
 8004a0e:	4926      	ldr	r1, [pc, #152]	@ (8004aa8 <__iar_annotation$$branch+0x52e>)
 8004a10:	4001      	ands	r1, r0
 8004a12:	6169      	str	r1, [r5, #20]
 8004a14:	e009      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	21c0      	movs	r1, #192	@ 0xc0
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	e004      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	4006      	ands	r6, r0
 8004a24:	2080      	movs	r0, #128	@ 0x80
 8004a26:	4330      	orrs	r0, r6
 8004a28:	6020      	str	r0, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	2003      	movs	r0, #3
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2001      	movs	r0, #1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	220f      	movs	r2, #15
 8004a3a:	2031      	movs	r0, #49	@ 0x31
 8004a3c:	5c29      	ldrb	r1, [r5, r0]
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f7fc fd91 	bl	8001566 <PE_Send_DataMessage>
 8004a44:	e04f      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4669      	mov	r1, sp
 8004a4a:	7308      	strb	r0, [r1, #12]
 8004a4c:	8be8      	ldrh	r0, [r5, #30]
 8004a4e:	2180      	movs	r1, #128	@ 0x80
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	4288      	cmp	r0, r1
 8004a54:	d100      	bne.n	8004a58 <__iar_annotation$$branch+0x4de>
 8004a56:	e3ab      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8004a58:	68e8      	ldr	r0, [r5, #12]
 8004a5a:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d02a      	beq.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a60:	4868      	ldr	r0, [pc, #416]	@ (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a62:	182b      	adds	r3, r5, r0
 8004a64:	3018      	adds	r0, #24
 8004a66:	182a      	adds	r2, r5, r0
 8004a68:	7820      	ldrb	r0, [r4, #0]
 8004a6a:	06c1      	lsls	r1, r0, #27
 8004a6c:	0ec9      	lsrs	r1, r1, #27
 8004a6e:	7c28      	ldrb	r0, [r5, #16]
 8004a70:	47b8      	blx	r7
 8004a72:	2803      	cmp	r0, #3
 8004a74:	d01a      	beq.n	8004aac <__iar_annotation$$branch+0x532>
 8004a76:	280f      	cmp	r0, #15
 8004a78:	d11d      	bne.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4006      	ands	r6, r0
 8004a7e:	2040      	movs	r0, #64	@ 0x40
 8004a80:	4330      	orrs	r0, r6
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	4668      	mov	r0, sp
 8004a88:	7b00      	ldrb	r0, [r0, #12]
 8004a8a:	495f      	ldr	r1, [pc, #380]	@ (8004c08 <__iar_annotation$$branch+0x68e>)
 8004a8c:	5c69      	ldrb	r1, [r5, r1]
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	d217      	bcs.n	8004ac2 <__iar_annotation$$branch+0x548>
 8004a92:	0091      	lsls	r1, r2, #2
 8004a94:	4b5b      	ldr	r3, [pc, #364]	@ (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a96:	18eb      	adds	r3, r5, r3
 8004a98:	585b      	ldr	r3, [r3, r1]
 8004a9a:	ae05      	add	r6, sp, #20
 8004a9c:	1d36      	adds	r6, r6, #4
 8004a9e:	5073      	str	r3, [r6, r1]
 8004aa0:	1c40      	adds	r0, r0, #1
 8004aa2:	1c52      	adds	r2, r2, #1
 8004aa4:	e7f1      	b.n	8004a8a <__iar_annotation$$branch+0x510>
 8004aa6:	bf00      	nop
 8004aa8:	fffffe3f 	.word	0xfffffe3f
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	21c0      	movs	r1, #192	@ 0xc0
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	e007      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4006      	ands	r6, r0
 8004aba:	2080      	movs	r0, #128	@ 0x80
 8004abc:	4330      	orrs	r0, r6
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	e001      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ac2:	4669      	mov	r1, sp
 8004ac4:	7308      	strb	r0, [r1, #12]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	2000      	movs	r0, #0
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	2003      	movs	r0, #3
 8004ad0:	9001      	str	r0, [sp, #4]
 8004ad2:	4668      	mov	r0, sp
 8004ad4:	7b00      	ldrb	r0, [r0, #12]
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	ab05      	add	r3, sp, #20
 8004ada:	220f      	movs	r2, #15
 8004adc:	2031      	movs	r0, #49	@ 0x31
 8004ade:	5c29      	ldrb	r1, [r5, r0]
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7fc fd40 	bl	8001566 <PE_Send_DataMessage>
 8004ae6:	e3b9      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4010      	ands	r0, r2
 8004aee:	4308      	orrs	r0, r1
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	03ca      	lsls	r2, r1, #15
 8004af4:	4302      	orrs	r2, r0
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6868      	ldr	r0, [r5, #4]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	0943      	lsrs	r3, r0, #5
 8004afe:	400b      	ands	r3, r1
 8004b00:	483f      	ldr	r0, [pc, #252]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 8004b02:	4010      	ands	r0, r2
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	4302      	orrs	r2, r0
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	48bf      	ldr	r0, [pc, #764]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004b0c:	4010      	ands	r0, r2
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	4006      	ands	r6, r0
 8004b12:	6026      	str	r6, [r4, #0]
 8004b14:	b2b0      	uxth	r0, r6
 8004b16:	22ff      	movs	r2, #255	@ 0xff
 8004b18:	0612      	lsls	r2, r2, #24
 8004b1a:	4302      	orrs	r2, r0
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	6868      	ldr	r0, [r5, #4]
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	0880      	lsrs	r0, r0, #2
 8004b24:	4001      	ands	r1, r0
 8004b26:	d003      	beq.n	8004b30 <__iar_annotation$$branch+0x5b6>
 8004b28:	6968      	ldr	r0, [r5, #20]
 8004b2a:	0741      	lsls	r1, r0, #29
 8004b2c:	0fc8      	lsrs	r0, r1, #31
 8004b2e:	e000      	b.n	8004b32 <__iar_annotation$$branch+0x5b8>
 8004b30:	2002      	movs	r0, #2
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	2087      	movs	r0, #135	@ 0x87
 8004b36:	9001      	str	r0, [sp, #4]
 8004b38:	2001      	movs	r0, #1
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	220f      	movs	r2, #15
 8004b40:	2031      	movs	r0, #49	@ 0x31
 8004b42:	5c29      	ldrb	r1, [r5, r0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f7fc fd0e 	bl	8001566 <PE_Send_DataMessage>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004b4e:	2050      	movs	r0, #80	@ 0x50
 8004b50:	e0e8      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004b52:	2031      	movs	r0, #49	@ 0x31
 8004b54:	5c28      	ldrb	r0, [r5, r0]
 8004b56:	f7fb ff37 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004b5a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	4281      	cmp	r1, r0
 8004b60:	d000      	beq.n	8004b64 <__iar_annotation$$branch+0x5ea>
 8004b62:	e245      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b64:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004b66:	0bc2      	lsrs	r2, r0, #15
 8004b68:	d176      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b6a:	0b02      	lsrs	r2, r0, #12
 8004b6c:	0752      	lsls	r2, r2, #29
 8004b6e:	d012      	beq.n	8004b96 <__iar_annotation$$branch+0x61c>
 8004b70:	06c0      	lsls	r0, r0, #27
 8004b72:	0ec0      	lsrs	r0, r0, #27
 8004b74:	280f      	cmp	r0, #15
 8004b76:	d16f      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b78:	2914      	cmp	r1, #20
 8004b7a:	d005      	beq.n	8004b88 <__iar_annotation$$branch+0x60e>
 8004b7c:	2014      	movs	r0, #20
 8004b7e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004b80:	7008      	strb	r0, [r1, #0]
 8004b82:	0028      	movs	r0, r5
 8004b84:	f7fb fee7 	bl	8000956 <PE_Clear_RxEvent>
 8004b88:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004b8a:	7881      	ldrb	r1, [r0, #2]
 8004b8c:	06ca      	lsls	r2, r1, #27
 8004b8e:	0ed2      	lsrs	r2, r2, #27
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d161      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b94:	098c      	lsrs	r4, r1, #6
 8004b96:	d100      	bne.n	8004b9a <__iar_annotation$$branch+0x620>
 8004b98:	e22a      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b9a:	68e9      	ldr	r1, [r5, #12]
 8004b9c:	6949      	ldr	r1, [r1, #20]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d100      	bne.n	8004ba4 <__iar_annotation$$branch+0x62a>
 8004ba2:	e2e3      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4021      	ands	r1, r4
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d000      	beq.n	8004bae <__iar_annotation$$branch+0x634>
 8004bac:	e2de      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004bae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004bb0:	1d81      	adds	r1, r0, #6
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	f000 fc04 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d108      	bne.n	8004bce <__iar_annotation$$branch+0x654>
 8004bbc:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	7c28      	ldrb	r0, [r5, #16]
 8004bc4:	68ec      	ldr	r4, [r5, #12]
 8004bc6:	6964      	ldr	r4, [r4, #20]
 8004bc8:	47a0      	blx	r4
 8004bca:	2151      	movs	r1, #81	@ 0x51
 8004bcc:	e0ec      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bce:	211b      	movs	r1, #27
 8004bd0:	e0ea      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	400e      	ands	r6, r1
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4030      	ands	r0, r6
 8004bdc:	4308      	orrs	r0, r1
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	22ff      	movs	r2, #255	@ 0xff
 8004be4:	0612      	lsls	r2, r2, #24
 8004be6:	4302      	orrs	r2, r0
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0388      	lsls	r0, r1, #14
 8004bec:	4310      	orrs	r0, r2
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	686b      	ldr	r3, [r5, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	095e      	lsrs	r6, r3, #5
 8004bf8:	4016      	ands	r6, r2
 8004bfa:	4b01      	ldr	r3, [pc, #4]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 8004bfc:	e006      	b.n	8004c0c <__iar_annotation$$branch+0x692>
 8004bfe:	bf00      	nop
 8004c00:	ffff9fff 	.word	0xffff9fff
 8004c04:	00000494 	.word	0x00000494
 8004c08:	000004ac 	.word	0x000004ac
 8004c0c:	4003      	ands	r3, r0
 8004c0e:	0370      	lsls	r0, r6, #13
 8004c10:	4318      	orrs	r0, r3
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	4b7c      	ldr	r3, [pc, #496]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004c16:	4003      	ands	r3, r0
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6868      	ldr	r0, [r5, #4]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	0880      	lsrs	r0, r0, #2
 8004c20:	4002      	ands	r2, r0
 8004c22:	d002      	beq.n	8004c2a <__iar_annotation$$branch+0x6b0>
 8004c24:	6968      	ldr	r0, [r5, #20]
 8004c26:	0740      	lsls	r0, r0, #29
 8004c28:	0fc1      	lsrs	r1, r0, #31
 8004c2a:	9102      	str	r1, [sp, #8]
 8004c2c:	2089      	movs	r0, #137	@ 0x89
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	2001      	movs	r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	0023      	movs	r3, r4
 8004c36:	220f      	movs	r2, #15
 8004c38:	2031      	movs	r0, #49	@ 0x31
 8004c3a:	5c29      	ldrb	r1, [r5, r0]
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7fc fc92 	bl	8001566 <PE_Send_DataMessage>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d172      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004c46:	2052      	movs	r0, #82	@ 0x52
 8004c48:	e06c      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004c4a:	2031      	movs	r0, #49	@ 0x31
 8004c4c:	5c28      	ldrb	r0, [r5, r0]
 8004c4e:	f7fb febb 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004c52:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004c54:	7809      	ldrb	r1, [r1, #0]
 8004c56:	4281      	cmp	r1, r0
 8004c58:	d000      	beq.n	8004c5c <__iar_annotation$$branch+0x6e2>
 8004c5a:	e1c9      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004c5c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004c5e:	0bc2      	lsrs	r2, r0, #15
 8004c60:	d1fa      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c62:	0b02      	lsrs	r2, r0, #12
 8004c64:	0752      	lsls	r2, r2, #29
 8004c66:	d06f      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c68:	06c0      	lsls	r0, r0, #27
 8004c6a:	0ec0      	lsrs	r0, r0, #27
 8004c6c:	280f      	cmp	r0, #15
 8004c6e:	d1f3      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c70:	2914      	cmp	r1, #20
 8004c72:	d005      	beq.n	8004c80 <__iar_annotation$$branch+0x706>
 8004c74:	2014      	movs	r0, #20
 8004c76:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004c78:	7008      	strb	r0, [r1, #0]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fe6b 	bl	8000956 <PE_Clear_RxEvent>
 8004c80:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004c82:	7881      	ldrb	r1, [r0, #2]
 8004c84:	06ca      	lsls	r2, r1, #27
 8004c86:	0ed2      	lsrs	r2, r2, #27
 8004c88:	2a02      	cmp	r2, #2
 8004c8a:	d1e5      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c8c:	060c      	lsls	r4, r1, #24
 8004c8e:	d05b      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c90:	68e9      	ldr	r1, [r5, #12]
 8004c92:	6989      	ldr	r1, [r1, #24]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d100      	bne.n	8004c9a <__iar_annotation$$branch+0x720>
 8004c98:	e268      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004c9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c9c:	1d81      	adds	r1, r0, #6
 8004c9e:	7c28      	ldrb	r0, [r5, #16]
 8004ca0:	f000 fc55 	bl	800554e <PE_SVDM_CheckSVIDs>
 8004ca4:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004ca6:	0fa2      	lsrs	r2, r4, #30
 8004ca8:	2031      	movs	r0, #49	@ 0x31
 8004caa:	5c29      	ldrb	r1, [r5, r0]
 8004cac:	7c28      	ldrb	r0, [r5, #16]
 8004cae:	68ec      	ldr	r4, [r5, #12]
 8004cb0:	69a4      	ldr	r4, [r4, #24]
 8004cb2:	47a0      	blx	r4
 8004cb4:	2153      	movs	r1, #83	@ 0x53
 8004cb6:	e077      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	400e      	ands	r6, r1
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	4030      	ands	r0, r6
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	8920      	ldrh	r0, [r4, #8]
 8004cc8:	b28a      	uxth	r2, r1
 8004cca:	0401      	lsls	r1, r0, #16
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2080      	movs	r0, #128	@ 0x80
 8004cd2:	0200      	lsls	r0, r0, #8
 8004cd4:	4308      	orrs	r0, r1
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	686a      	ldr	r2, [r5, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	0952      	lsrs	r2, r2, #5
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	@ (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	0350      	lsls	r0, r2, #13
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	4a46      	ldr	r2, [pc, #280]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004cee:	4002      	ands	r2, r0
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	6868      	ldr	r0, [r5, #4]
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	0880      	lsrs	r0, r0, #2
 8004cf8:	4001      	ands	r1, r0
 8004cfa:	d003      	beq.n	8004d04 <__iar_annotation$$branch+0x78a>
 8004cfc:	6968      	ldr	r0, [r5, #20]
 8004cfe:	0741      	lsls	r1, r0, #29
 8004d00:	0fc8      	lsrs	r0, r1, #31
 8004d02:	e000      	b.n	8004d06 <__iar_annotation$$branch+0x78c>
 8004d04:	2002      	movs	r0, #2
 8004d06:	9002      	str	r0, [sp, #8]
 8004d08:	208b      	movs	r0, #139	@ 0x8b
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	0023      	movs	r3, r4
 8004d12:	220f      	movs	r2, #15
 8004d14:	2031      	movs	r0, #49	@ 0x31
 8004d16:	5c29      	ldrb	r1, [r5, r0]
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7fc fc24 	bl	8001566 <PE_Send_DataMessage>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d104      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004d22:	2053      	movs	r0, #83	@ 0x53
 8004d24:	7728      	strb	r0, [r5, #28]
 8004d26:	488e      	ldr	r0, [pc, #568]	@ (8004f60 <__iar_annotation$$branch+0x9e6>)
 8004d28:	83e8      	strh	r0, [r5, #30]
 8004d2a:	9704      	str	r7, [sp, #16]
 8004d2c:	e296      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004d2e:	2031      	movs	r0, #49	@ 0x31
 8004d30:	5c28      	ldrb	r0, [r5, r0]
 8004d32:	f7fb fe49 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004d36:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004d38:	7809      	ldrb	r1, [r1, #0]
 8004d3a:	4281      	cmp	r1, r0
 8004d3c:	d18c      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d3e:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004d40:	0bc2      	lsrs	r2, r0, #15
 8004d42:	d189      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d44:	0b02      	lsrs	r2, r0, #12
 8004d46:	0752      	lsls	r2, r2, #29
 8004d48:	d100      	bne.n	8004d4c <__iar_annotation$$branch+0x7d2>
 8004d4a:	e151      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d4c:	06c0      	lsls	r0, r0, #27
 8004d4e:	0ec0      	lsrs	r0, r0, #27
 8004d50:	280f      	cmp	r0, #15
 8004d52:	d000      	beq.n	8004d56 <__iar_annotation$$branch+0x7dc>
 8004d54:	e14c      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d56:	2914      	cmp	r1, #20
 8004d58:	d005      	beq.n	8004d66 <__iar_annotation$$branch+0x7ec>
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004d5e:	7008      	strb	r0, [r1, #0]
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fdf8 	bl	8000956 <PE_Clear_RxEvent>
 8004d66:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004d68:	7881      	ldrb	r1, [r0, #2]
 8004d6a:	06ca      	lsls	r2, r1, #27
 8004d6c:	0ed2      	lsrs	r2, r2, #27
 8004d6e:	2a03      	cmp	r2, #3
 8004d70:	d1ef      	bne.n	8004d52 <__iar_annotation$$branch+0x7d8>
 8004d72:	098e      	lsrs	r6, r1, #6
 8004d74:	d0e8      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004d76:	68e9      	ldr	r1, [r5, #12]
 8004d78:	69c9      	ldr	r1, [r1, #28]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d017      	beq.n	8004dae <__iar_annotation$$branch+0x834>
 8004d7e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004d80:	1d82      	adds	r2, r0, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	0c01      	lsrs	r1, r0, #16
 8004d86:	7c28      	ldrb	r0, [r5, #16]
 8004d88:	f000 fc22 	bl	80055d0 <PE_SVDM_CheckModes>
 8004d8c:	2403      	movs	r4, #3
 8004d8e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004d90:	2203      	movs	r2, #3
 8004d92:	4032      	ands	r2, r6
 8004d94:	2031      	movs	r0, #49	@ 0x31
 8004d96:	5c29      	ldrb	r1, [r5, r0]
 8004d98:	7c28      	ldrb	r0, [r5, #16]
 8004d9a:	68ef      	ldr	r7, [r5, #12]
 8004d9c:	69ff      	ldr	r7, [r7, #28]
 8004d9e:	47b8      	blx	r7
 8004da0:	4034      	ands	r4, r6
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d103      	bne.n	8004dae <__iar_annotation$$branch+0x834>
 8004da6:	2154      	movs	r1, #84	@ 0x54
 8004da8:	7c28      	ldrb	r0, [r5, #16]
 8004daa:	f7fb fb69 	bl	8000480 <USBPD_PE_Notification>
 8004dae:	e1dd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	400e      	ands	r6, r1
 8004db4:	6026      	str	r6, [r4, #0]
 8004db6:	4030      	ands	r0, r6
 8004db8:	2104      	movs	r1, #4
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	8920      	ldrh	r0, [r4, #8]
 8004dc0:	b289      	uxth	r1, r1
 8004dc2:	0400      	lsls	r0, r0, #16
 8004dc4:	4308      	orrs	r0, r1
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	2180      	movs	r1, #128	@ 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	4301      	orrs	r1, r0
 8004dce:	6021      	str	r1, [r4, #0]
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	686a      	ldr	r2, [r5, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	0952      	lsrs	r2, r2, #5
 8004dd8:	4002      	ands	r2, r0
 8004dda:	4b60      	ldr	r3, [pc, #384]	@ (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ddc:	400b      	ands	r3, r1
 8004dde:	0351      	lsls	r1, r2, #13
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	696a      	ldr	r2, [r5, #20]
 8004de6:	05d2      	lsls	r2, r2, #23
 8004de8:	0f52      	lsrs	r2, r2, #29
 8004dea:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	4319      	orrs	r1, r3
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	6869      	ldr	r1, [r5, #4]
 8004df6:	6809      	ldr	r1, [r1, #0]
 8004df8:	0889      	lsrs	r1, r1, #2
 8004dfa:	4008      	ands	r0, r1
 8004dfc:	d006      	beq.n	8004e0c <__iar_annotation$$branch+0x892>
 8004dfe:	6968      	ldr	r0, [r5, #20]
 8004e00:	0741      	lsls	r1, r0, #29
 8004e02:	0fc8      	lsrs	r0, r1, #31
 8004e04:	e003      	b.n	8004e0e <__iar_annotation$$branch+0x894>
 8004e06:	bf00      	nop
 8004e08:	fffff8ff 	.word	0xfffff8ff
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	9002      	str	r0, [sp, #8]
 8004e10:	208c      	movs	r0, #140	@ 0x8c
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2001      	movs	r0, #1
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	0023      	movs	r3, r4
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	2031      	movs	r0, #49	@ 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7fc fba0 	bl	8001566 <PE_Send_DataMessage>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d000      	beq.n	8004e2c <__iar_annotation$$branch+0x8b2>
 8004e2a:	e217      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004e2c:	2054      	movs	r0, #84	@ 0x54
 8004e2e:	7728      	strb	r0, [r5, #28]
 8004e30:	2134      	movs	r1, #52	@ 0x34
 8004e32:	e08c      	b.n	8004f4e <__iar_annotation$$branch+0x9d4>
 8004e34:	2634      	movs	r6, #52	@ 0x34
 8004e36:	2031      	movs	r0, #49	@ 0x31
 8004e38:	5c28      	ldrb	r0, [r5, r0]
 8004e3a:	f7fb fdc5 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004e3e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004e40:	7809      	ldrb	r1, [r1, #0]
 8004e42:	4281      	cmp	r1, r0
 8004e44:	d144      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e46:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004e48:	0bc2      	lsrs	r2, r0, #15
 8004e4a:	d141      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e4c:	2707      	movs	r7, #7
 8004e4e:	0b02      	lsrs	r2, r0, #12
 8004e50:	423a      	tst	r2, r7
 8004e52:	d03d      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e54:	06c0      	lsls	r0, r0, #27
 8004e56:	0ec0      	lsrs	r0, r0, #27
 8004e58:	280f      	cmp	r0, #15
 8004e5a:	d139      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e5c:	2914      	cmp	r1, #20
 8004e5e:	d005      	beq.n	8004e6c <__iar_annotation$$branch+0x8f2>
 8004e60:	2014      	movs	r0, #20
 8004e62:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004e64:	7008      	strb	r0, [r1, #0]
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7fb fd75 	bl	8000956 <PE_Clear_RxEvent>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	7728      	strb	r0, [r5, #28]
 8004e70:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004e72:	7880      	ldrb	r0, [r0, #2]
 8004e74:	06c1      	lsls	r1, r0, #27
 8004e76:	0ec9      	lsrs	r1, r1, #27
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d129      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e7c:	0980      	lsrs	r0, r0, #6
 8004e7e:	d027      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	488f      	ldr	r0, [pc, #572]	@ (80050c0 <__iar_annotation$$branch+0xb46>)
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	2901      	cmp	r1, #1
 8004e88:	d004      	beq.n	8004e94 <__iar_annotation$$branch+0x91a>
 8004e8a:	d30e      	bcc.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	d008      	beq.n	8004ea2 <__iar_annotation$$branch+0x928>
 8004e90:	d302      	bcc.n	8004e98 <__iar_annotation$$branch+0x91e>
 8004e92:	e00a      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e94:	2635      	movs	r6, #53	@ 0x35
 8004e96:	e008      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e98:	6969      	ldr	r1, [r5, #20]
 8004e9a:	4008      	ands	r0, r1
 8004e9c:	6168      	str	r0, [r5, #20]
 8004e9e:	2636      	movs	r6, #54	@ 0x36
 8004ea0:	e003      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004ea2:	6969      	ldr	r1, [r5, #20]
 8004ea4:	4008      	ands	r0, r1
 8004ea6:	6168      	str	r0, [r5, #20]
 8004ea8:	2637      	movs	r6, #55	@ 0x37
 8004eaa:	0031      	movs	r1, r6
 8004eac:	7c28      	ldrb	r0, [r5, #16]
 8004eae:	f7fb fae7 	bl	8000480 <USBPD_PE_Notification>
 8004eb2:	68e8      	ldr	r0, [r5, #12]
 8004eb4:	6a06      	ldr	r6, [r0, #32]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d009      	beq.n	8004ece <__iar_annotation$$branch+0x954>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	0a01      	lsrs	r1, r0, #8
 8004ebe:	400f      	ands	r7, r1
 8004ec0:	9700      	str	r7, [sp, #0]
 8004ec2:	0c03      	lsrs	r3, r0, #16
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	2031      	movs	r0, #49	@ 0x31
 8004ec8:	5c29      	ldrb	r1, [r5, r0]
 8004eca:	7c28      	ldrb	r0, [r5, #16]
 8004ecc:	47b0      	blx	r6
 8004ece:	e14d      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ed0:	5da8      	ldrb	r0, [r5, r6]
 8004ed2:	e08f      	b.n	8004ff4 <__iar_annotation$$branch+0xa7a>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	400e      	ands	r6, r1
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	4030      	ands	r0, r6
 8004edc:	2105      	movs	r1, #5
 8004ede:	4301      	orrs	r1, r0
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	8920      	ldrh	r0, [r4, #8]
 8004ee4:	b289      	uxth	r1, r1
 8004ee6:	0400      	lsls	r0, r0, #16
 8004ee8:	4308      	orrs	r0, r1
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	2180      	movs	r1, #128	@ 0x80
 8004eee:	0209      	lsls	r1, r1, #8
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	686a      	ldr	r2, [r5, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	0952      	lsrs	r2, r2, #5
 8004efc:	4002      	ands	r2, r0
 8004efe:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	0351      	lsls	r1, r2, #13
 8004f04:	4319      	orrs	r1, r3
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	696a      	ldr	r2, [r5, #20]
 8004f0a:	05d2      	lsls	r2, r2, #23
 8004f0c:	0f52      	lsrs	r2, r2, #29
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <__iar_annotation$$branch+0xb4a>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	0211      	lsls	r1, r2, #8
 8004f14:	4319      	orrs	r1, r3
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	0889      	lsrs	r1, r1, #2
 8004f1e:	4008      	ands	r0, r1
 8004f20:	d003      	beq.n	8004f2a <__iar_annotation$$branch+0x9b0>
 8004f22:	6968      	ldr	r0, [r5, #20]
 8004f24:	0741      	lsls	r1, r0, #29
 8004f26:	0fc8      	lsrs	r0, r1, #31
 8004f28:	e000      	b.n	8004f2c <__iar_annotation$$branch+0x9b2>
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	208d      	movs	r0, #141	@ 0x8d
 8004f30:	9001      	str	r0, [sp, #4]
 8004f32:	2001      	movs	r0, #1
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	220f      	movs	r2, #15
 8004f3a:	2031      	movs	r0, #49	@ 0x31
 8004f3c:	5c29      	ldrb	r1, [r5, r0]
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f7fc fb11 	bl	8001566 <PE_Send_DataMessage>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d15e      	bne.n	8005006 <__iar_annotation$$branch+0xa8c>
 8004f48:	2055      	movs	r0, #85	@ 0x55
 8004f4a:	7728      	strb	r0, [r5, #28]
 8004f4c:	2155      	movs	r1, #85	@ 0x55
 8004f4e:	7c28      	ldrb	r0, [r5, #16]
 8004f50:	f7fb fa96 	bl	8000480 <USBPD_PE_Notification>
 8004f54:	48c3      	ldr	r0, [pc, #780]	@ (8005264 <.text_19>)
 8004f56:	83e8      	strh	r0, [r5, #30]
 8004f58:	2032      	movs	r0, #50	@ 0x32
 8004f5a:	e12c      	b.n	80051b6 <__iar_annotation$$branch+0xc3c>
 8004f5c:	ffff9fff 	.word	0xffff9fff
 8004f60:	0000801e 	.word	0x0000801e
 8004f64:	2031      	movs	r0, #49	@ 0x31
 8004f66:	5c28      	ldrb	r0, [r5, r0]
 8004f68:	f7fb fd2e 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004f6c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4281      	cmp	r1, r0
 8004f72:	d13d      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f74:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004f76:	0bc2      	lsrs	r2, r0, #15
 8004f78:	d13a      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f7a:	2607      	movs	r6, #7
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	4232      	tst	r2, r6
 8004f80:	d036      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f82:	06c0      	lsls	r0, r0, #27
 8004f84:	0ec0      	lsrs	r0, r0, #27
 8004f86:	280f      	cmp	r0, #15
 8004f88:	d132      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f8a:	2914      	cmp	r1, #20
 8004f8c:	d005      	beq.n	8004f9a <__iar_annotation$$branch+0xa20>
 8004f8e:	2014      	movs	r0, #20
 8004f90:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004f92:	7008      	strb	r0, [r1, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fb fcde 	bl	8000956 <PE_Clear_RxEvent>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	7728      	strb	r0, [r5, #28]
 8004f9e:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004fa0:	7880      	ldrb	r0, [r0, #2]
 8004fa2:	06c1      	lsls	r1, r0, #27
 8004fa4:	0ec9      	lsrs	r1, r1, #27
 8004fa6:	2905      	cmp	r1, #5
 8004fa8:	d122      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004faa:	0980      	lsrs	r0, r0, #6
 8004fac:	d020      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d004      	beq.n	8004fbe <__iar_annotation$$branch+0xa44>
 8004fb4:	d309      	bcc.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	d005      	beq.n	8004fc6 <__iar_annotation$$branch+0xa4c>
 8004fba:	d302      	bcc.n	8004fc2 <__iar_annotation$$branch+0xa48>
 8004fbc:	e005      	b.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fbe:	2156      	movs	r1, #86	@ 0x56
 8004fc0:	e004      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc2:	2157      	movs	r1, #87	@ 0x57
 8004fc4:	e002      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc6:	2158      	movs	r1, #88	@ 0x58
 8004fc8:	e000      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fca:	2155      	movs	r1, #85	@ 0x55
 8004fcc:	7c28      	ldrb	r0, [r5, #16]
 8004fce:	f7fb fa57 	bl	8000480 <USBPD_PE_Notification>
 8004fd2:	68e8      	ldr	r0, [r5, #12]
 8004fd4:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d009      	beq.n	8004fee <__iar_annotation$$branch+0xa74>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	0a01      	lsrs	r1, r0, #8
 8004fde:	400e      	ands	r6, r1
 8004fe0:	9600      	str	r6, [sp, #0]
 8004fe2:	0c03      	lsrs	r3, r0, #16
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	2031      	movs	r0, #49	@ 0x31
 8004fe8:	5c29      	ldrb	r1, [r5, r0]
 8004fea:	7c28      	ldrb	r0, [r5, #16]
 8004fec:	47b8      	blx	r7
 8004fee:	e0bd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ff0:	2034      	movs	r0, #52	@ 0x34
 8004ff2:	5c28      	ldrb	r0, [r5, r0]
 8004ff4:	06c0      	lsls	r0, r0, #27
 8004ff6:	0ec0      	lsrs	r0, r0, #27
 8004ff8:	2810      	cmp	r0, #16
 8004ffa:	d100      	bne.n	8004ffe <__iar_annotation$$branch+0xa84>
 8004ffc:	e0bf      	b.n	800517e <__iar_annotation$$branch+0xc04>
 8004ffe:	8be8      	ldrh	r0, [r5, #30]
 8005000:	2180      	movs	r1, #128	@ 0x80
 8005002:	0209      	lsls	r1, r1, #8
 8005004:	4288      	cmp	r0, r1
 8005006:	d000      	beq.n	800500a <__iar_annotation$$branch+0xa90>
 8005008:	e128      	b.n	800525c <__iar_annotation$$branch+0xce2>
 800500a:	e0d1      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 800500c:	2100      	movs	r1, #0
 800500e:	466a      	mov	r2, sp
 8005010:	7311      	strb	r1, [r2, #12]
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	400e      	ands	r6, r1
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4030      	ands	r0, r6
 800501c:	06c9      	lsls	r1, r1, #27
 800501e:	0ec9      	lsrs	r1, r1, #27
 8005020:	4301      	orrs	r1, r0
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	8920      	ldrh	r0, [r4, #8]
 8005026:	b28a      	uxth	r2, r1
 8005028:	0401      	lsls	r1, r0, #16
 800502a:	4311      	orrs	r1, r2
 800502c:	6021      	str	r1, [r4, #0]
 800502e:	2080      	movs	r0, #128	@ 0x80
 8005030:	0200      	lsls	r0, r0, #8
 8005032:	4308      	orrs	r0, r1
 8005034:	6020      	str	r0, [r4, #0]
 8005036:	2601      	movs	r6, #1
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	0949      	lsrs	r1, r1, #5
 800503e:	4031      	ands	r1, r6
 8005040:	4aaa      	ldr	r2, [pc, #680]	@ (80052ec <.text_21>)
 8005042:	4002      	ands	r2, r0
 8005044:	0348      	lsls	r0, r1, #13
 8005046:	4310      	orrs	r0, r2
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	491e      	ldr	r1, [pc, #120]	@ (80050c4 <__iar_annotation$$branch+0xb4a>)
 800504c:	4001      	ands	r1, r0
 800504e:	0230      	lsls	r0, r6, #8
 8005050:	4308      	orrs	r0, r1
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	68e8      	ldr	r0, [r5, #12]
 8005058:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	d00b      	beq.n	8005078 <__iar_annotation$$branch+0xafe>
 8005060:	a805      	add	r0, sp, #20
 8005062:	1d00      	adds	r0, r0, #4
 8005064:	9000      	str	r0, [sp, #0]
 8005066:	ab03      	add	r3, sp, #12
 8005068:	7820      	ldrb	r0, [r4, #0]
 800506a:	06c2      	lsls	r2, r0, #27
 800506c:	0ed2      	lsrs	r2, r2, #27
 800506e:	2031      	movs	r0, #49	@ 0x31
 8005070:	5c29      	ldrb	r1, [r5, r0]
 8005072:	7c28      	ldrb	r0, [r5, #16]
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	47a0      	blx	r4
 8005078:	4668      	mov	r0, sp
 800507a:	7b00      	ldrb	r0, [r0, #12]
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	4669      	mov	r1, sp
 8005080:	7308      	strb	r0, [r1, #12]
 8005082:	6868      	ldr	r0, [r5, #4]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	0880      	lsrs	r0, r0, #2
 8005088:	4006      	ands	r6, r0
 800508a:	d003      	beq.n	8005094 <__iar_annotation$$branch+0xb1a>
 800508c:	6968      	ldr	r0, [r5, #20]
 800508e:	0741      	lsls	r1, r0, #29
 8005090:	0fc8      	lsrs	r0, r1, #31
 8005092:	e000      	b.n	8005096 <__iar_annotation$$branch+0xb1c>
 8005094:	2002      	movs	r0, #2
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	208f      	movs	r0, #143	@ 0x8f
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	4668      	mov	r0, sp
 800509e:	7b00      	ldrb	r0, [r0, #12]
 80050a0:	9000      	str	r0, [sp, #0]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	220f      	movs	r2, #15
 80050a6:	2031      	movs	r0, #49	@ 0x31
 80050a8:	5c29      	ldrb	r1, [r5, r0]
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7fc fa5b 	bl	8001566 <PE_Send_DataMessage>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d104      	bne.n	80050be <__iar_annotation$$branch+0xb44>
 80050b4:	205a      	movs	r0, #90	@ 0x5a
 80050b6:	7728      	strb	r0, [r5, #28]
 80050b8:	48bf      	ldr	r0, [pc, #764]	@ (80053b8 <.text_23>)
 80050ba:	83e8      	strh	r0, [r5, #30]
 80050bc:	9704      	str	r7, [sp, #16]
 80050be:	e0ca      	b.n	8005256 <__iar_annotation$$branch+0xcdc>
 80050c0:	fffffe3f 	.word	0xfffffe3f
 80050c4:	fffff8ff 	.word	0xfffff8ff
 80050c8:	2607      	movs	r6, #7
 80050ca:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80050cc:	0b00      	lsrs	r0, r0, #12
 80050ce:	2107      	movs	r1, #7
 80050d0:	4001      	ands	r1, r0
 80050d2:	1e48      	subs	r0, r1, #1
 80050d4:	4669      	mov	r1, sp
 80050d6:	7108      	strb	r0, [r1, #4]
 80050d8:	2031      	movs	r0, #49	@ 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fc74 	bl	80009c8 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d144      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d141      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050ee:	0b02      	lsrs	r2, r0, #12
 80050f0:	4232      	tst	r2, r6
 80050f2:	d03e      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050f4:	06c0      	lsls	r0, r0, #27
 80050f6:	0ec0      	lsrs	r0, r0, #27
 80050f8:	280f      	cmp	r0, #15
 80050fa:	d13a      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050fc:	2914      	cmp	r1, #20
 80050fe:	d005      	beq.n	800510c <__iar_annotation$$branch+0xb92>
 8005100:	2014      	movs	r0, #20
 8005102:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005104:	7008      	strb	r0, [r1, #0]
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb fc25 	bl	8000956 <PE_Clear_RxEvent>
 800510c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800510e:	7880      	ldrb	r0, [r0, #2]
 8005110:	06c1      	lsls	r1, r0, #27
 8005112:	0ec9      	lsrs	r1, r1, #27
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4291      	cmp	r1, r2
 8005118:	d12b      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511a:	0981      	lsrs	r1, r0, #6
 800511c:	d029      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511e:	68e9      	ldr	r1, [r5, #12]
 8005120:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8005122:	2900      	cmp	r1, #0
 8005124:	d022      	beq.n	800516c <__iar_annotation$$branch+0xbf2>
 8005126:	2600      	movs	r6, #0
 8005128:	e011      	b.n	800514e <__iar_annotation$$branch+0xbd4>
 800512a:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800512c:	00b2      	lsls	r2, r6, #2
 800512e:	188b      	adds	r3, r1, r2
 8005130:	799c      	ldrb	r4, [r3, #6]
 8005132:	79df      	ldrb	r7, [r3, #7]
 8005134:	023f      	lsls	r7, r7, #8
 8005136:	19e4      	adds	r4, r4, r7
 8005138:	3108      	adds	r1, #8
 800513a:	5c89      	ldrb	r1, [r1, r2]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	1861      	adds	r1, r4, r1
 8005140:	7a5a      	ldrb	r2, [r3, #9]
 8005142:	0612      	lsls	r2, r2, #24
 8005144:	1889      	adds	r1, r1, r2
 8005146:	aa05      	add	r2, sp, #20
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	50d1      	str	r1, [r2, r3]
 800514c:	1c76      	adds	r6, r6, #1
 800514e:	4669      	mov	r1, sp
 8005150:	7909      	ldrb	r1, [r1, #4]
 8005152:	428e      	cmp	r6, r1
 8005154:	d3e9      	bcc.n	800512a <__iar_annotation$$branch+0xbb0>
 8005156:	a905      	add	r1, sp, #20
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	ab01      	add	r3, sp, #4
 800515c:	06c2      	lsls	r2, r0, #27
 800515e:	0ed2      	lsrs	r2, r2, #27
 8005160:	2031      	movs	r0, #49	@ 0x31
 8005162:	5c29      	ldrb	r1, [r5, r0]
 8005164:	7c28      	ldrb	r0, [r5, #16]
 8005166:	68ec      	ldr	r4, [r5, #12]
 8005168:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 800516a:	47a0      	blx	r4
 800516c:	2000      	movs	r0, #0
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e01e      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8005172:	2034      	movs	r0, #52	@ 0x34
 8005174:	5c28      	ldrb	r0, [r5, r0]
 8005176:	06c0      	lsls	r0, r0, #27
 8005178:	0ec0      	lsrs	r0, r0, #27
 800517a:	2810      	cmp	r0, #16
 800517c:	d113      	bne.n	80051a6 <__iar_annotation$$branch+0xc2c>
 800517e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005180:	7800      	ldrb	r0, [r0, #0]
 8005182:	2814      	cmp	r0, #20
 8005184:	d005      	beq.n	8005192 <__iar_annotation$$branch+0xc18>
 8005186:	2014      	movs	r0, #20
 8005188:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800518a:	7008      	strb	r0, [r1, #0]
 800518c:	0028      	movs	r0, r5
 800518e:	f7fb fbe2 	bl	8000956 <PE_Clear_RxEvent>
 8005192:	2000      	movs	r0, #0
 8005194:	83e8      	strh	r0, [r5, #30]
 8005196:	2103      	movs	r1, #3
 8005198:	7469      	strb	r1, [r5, #17]
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	2159      	movs	r1, #89	@ 0x59
 800519e:	7c28      	ldrb	r0, [r5, #16]
 80051a0:	f7fb f96e 	bl	8000480 <USBPD_PE_Notification>
 80051a4:	e05a      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051a6:	8be8      	ldrh	r0, [r5, #30]
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	0209      	lsls	r1, r1, #8
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d155      	bne.n	800525c <__iar_annotation$$branch+0xce2>
 80051b0:	2003      	movs	r0, #3
 80051b2:	7468      	strb	r0, [r5, #17]
 80051b4:	2000      	movs	r0, #0
 80051b6:	9004      	str	r0, [sp, #16]
 80051b8:	e050      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051ba:	2100      	movs	r1, #0
 80051bc:	466a      	mov	r2, sp
 80051be:	7311      	strb	r1, [r2, #12]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	400e      	ands	r6, r1
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	4030      	ands	r0, r6
 80051ca:	06c9      	lsls	r1, r1, #27
 80051cc:	0ec9      	lsrs	r1, r1, #27
 80051ce:	4301      	orrs	r1, r0
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	8920      	ldrh	r0, [r4, #8]
 80051d4:	b28a      	uxth	r2, r1
 80051d6:	0401      	lsls	r1, r0, #16
 80051d8:	4311      	orrs	r1, r2
 80051da:	6021      	str	r1, [r4, #0]
 80051dc:	2080      	movs	r0, #128	@ 0x80
 80051de:	0200      	lsls	r0, r0, #8
 80051e0:	4308      	orrs	r0, r1
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	2601      	movs	r6, #1
 80051e6:	6869      	ldr	r1, [r5, #4]
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	0949      	lsrs	r1, r1, #5
 80051ec:	4031      	ands	r1, r6
 80051ee:	4a3f      	ldr	r2, [pc, #252]	@ (80052ec <.text_21>)
 80051f0:	4002      	ands	r2, r0
 80051f2:	0348      	lsls	r0, r1, #13
 80051f4:	4310      	orrs	r0, r2
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4970      	ldr	r1, [pc, #448]	@ (80053bc <.text_24>)
 80051fa:	4001      	ands	r1, r0
 80051fc:	0230      	lsls	r0, r6, #8
 80051fe:	4308      	orrs	r0, r1
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	9005      	str	r0, [sp, #20]
 8005204:	68e8      	ldr	r0, [r5, #12]
 8005206:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <__iar_annotation$$branch+0xc9c>
 800520c:	a805      	add	r0, sp, #20
 800520e:	1d02      	adds	r2, r0, #4
 8005210:	a903      	add	r1, sp, #12
 8005212:	7c28      	ldrb	r0, [r5, #16]
 8005214:	4798      	blx	r3
 8005216:	4668      	mov	r0, sp
 8005218:	7b00      	ldrb	r0, [r0, #12]
 800521a:	1c40      	adds	r0, r0, #1
 800521c:	4669      	mov	r1, sp
 800521e:	7308      	strb	r0, [r1, #12]
 8005220:	6868      	ldr	r0, [r5, #4]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	0880      	lsrs	r0, r0, #2
 8005226:	4006      	ands	r6, r0
 8005228:	d003      	beq.n	8005232 <__iar_annotation$$branch+0xcb8>
 800522a:	6968      	ldr	r0, [r5, #20]
 800522c:	0741      	lsls	r1, r0, #29
 800522e:	0fc8      	lsrs	r0, r1, #31
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xcba>
 8005232:	2002      	movs	r0, #2
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2003      	movs	r0, #3
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	4668      	mov	r0, sp
 800523c:	7b00      	ldrb	r0, [r0, #12]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	ab05      	add	r3, sp, #20
 8005242:	220f      	movs	r2, #15
 8005244:	2031      	movs	r0, #49	@ 0x31
 8005246:	5c29      	ldrb	r1, [r5, r0]
 8005248:	0028      	movs	r0, r5
 800524a:	f7fc f98c 	bl	8001566 <PE_Send_DataMessage>
 800524e:	2800      	cmp	r0, #0
 8005250:	d101      	bne.n	8005256 <__iar_annotation$$branch+0xcdc>
 8005252:	205a      	movs	r0, #90	@ 0x5a
 8005254:	7728      	strb	r0, [r5, #28]
 8005256:	2000      	movs	r0, #0
 8005258:	2132      	movs	r1, #50	@ 0x32
 800525a:	5468      	strb	r0, [r5, r1]
 800525c:	9804      	ldr	r0, [sp, #16]
 800525e:	b01d      	add	sp, #116	@ 0x74
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005264 <.text_19>:
 8005264:	00008032 	.word	0x00008032

08005268 <PE_StateMachine_UVDM>:
 8005268:	2914      	cmp	r1, #20
 800526a:	d000      	beq.n	800526e <PE_StateMachine_UVDM+0x6>
 800526c:	4770      	bx	lr
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	b08c      	sub	sp, #48	@ 0x30
 8005272:	0004      	movs	r4, r0
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	2800      	cmp	r0, #0
 8005278:	d035      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 800527a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800527c:	2800      	cmp	r0, #0
 800527e:	d032      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 8005280:	2500      	movs	r5, #0
 8005282:	4669      	mov	r1, sp
 8005284:	730d      	strb	r5, [r1, #12]
 8005286:	a805      	add	r0, sp, #20
 8005288:	1d03      	adds	r3, r0, #4
 800528a:	aa03      	add	r2, sp, #12
 800528c:	a904      	add	r1, sp, #16
 800528e:	7c20      	ldrb	r0, [r4, #16]
 8005290:	68e6      	ldr	r6, [r4, #12]
 8005292:	6bf6      	ldr	r6, [r6, #60]	@ 0x3c
 8005294:	47b0      	blx	r6
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	49cc      	ldr	r1, [pc, #816]	@ (80055cc <.text_27>)
 800529a:	4001      	ands	r1, r0
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4668      	mov	r0, sp
 80052a0:	7b00      	ldrb	r0, [r0, #12]
 80052a2:	1c40      	adds	r0, r0, #1
 80052a4:	4669      	mov	r1, sp
 80052a6:	7308      	strb	r0, [r1, #12]
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	9005      	str	r0, [sp, #20]
 80052ac:	6860      	ldr	r0, [r4, #4]
 80052ae:	6800      	ldr	r0, [r0, #0]
 80052b0:	0741      	lsls	r1, r0, #29
 80052b2:	0fc9      	lsrs	r1, r1, #31
 80052b4:	d003      	beq.n	80052be <PE_StateMachine_UVDM+0x56>
 80052b6:	6960      	ldr	r0, [r4, #20]
 80052b8:	0741      	lsls	r1, r0, #29
 80052ba:	0fc8      	lsrs	r0, r1, #31
 80052bc:	e000      	b.n	80052c0 <PE_StateMachine_UVDM+0x58>
 80052be:	2002      	movs	r0, #2
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2003      	movs	r0, #3
 80052c4:	9001      	str	r0, [sp, #4]
 80052c6:	4668      	mov	r0, sp
 80052c8:	7b00      	ldrb	r0, [r0, #12]
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	220f      	movs	r2, #15
 80052d0:	2031      	movs	r0, #49	@ 0x31
 80052d2:	5c21      	ldrb	r1, [r4, r0]
 80052d4:	0020      	movs	r0, r4
 80052d6:	f7fc f946 	bl	8001566 <PE_Send_DataMessage>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d101      	bne.n	80052e2 <PE_StateMachine_UVDM+0x7a>
 80052de:	2059      	movs	r0, #89	@ 0x59
 80052e0:	7720      	strb	r0, [r4, #28]
 80052e2:	2032      	movs	r0, #50	@ 0x32
 80052e4:	5425      	strb	r5, [r4, r0]
 80052e6:	b00c      	add	sp, #48	@ 0x30
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <.text_21>:
 80052ec:	ffff9fff 	.word	0xffff9fff

080052f0 <PE_Check_DataMessageVDM>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	2403      	movs	r4, #3
 80052f4:	2501      	movs	r5, #1
 80052f6:	6801      	ldr	r1, [r0, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	0949      	lsrs	r1, r1, #5
 80052fc:	4029      	ands	r1, r5
 80052fe:	d01f      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005300:	68c1      	ldr	r1, [r0, #12]
 8005302:	2900      	cmp	r1, #0
 8005304:	d01c      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005306:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005308:	788a      	ldrb	r2, [r1, #2]
 800530a:	78cb      	ldrb	r3, [r1, #3]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	790b      	ldrb	r3, [r1, #4]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	7949      	ldrb	r1, [r1, #5]
 8005318:	0609      	lsls	r1, r1, #24
 800531a:	1851      	adds	r1, r2, r1
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	0bca      	lsrs	r2, r1, #15
 8005320:	402a      	ands	r2, r5
 8005322:	d014      	beq.n	800534e <PE_Check_DataMessageVDM+0x5e>
 8005324:	2394      	movs	r3, #148	@ 0x94
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	50c1      	str	r1, [r0, r3]
 800532a:	0989      	lsrs	r1, r1, #6
 800532c:	4021      	ands	r1, r4
 800532e:	d107      	bne.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0a09      	lsrs	r1, r1, #8
 8005336:	4029      	ands	r1, r5
 8005338:	d002      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 800533a:	f7ff f840 	bl	80043be <PE_Receive_SVDM>
 800533e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	400c      	ands	r4, r1
 8005346:	2c02      	cmp	r4, #2
 8005348:	d134      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 800534a:	7445      	strb	r5, [r0, #17]
 800534c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800534e:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 8005350:	0449      	lsls	r1, r1, #17
 8005352:	0f49      	lsrs	r1, r1, #29
 8005354:	1e49      	subs	r1, r1, #1
 8005356:	4ab1      	ldr	r2, [pc, #708]	@ (800561c <.text_29>)
 8005358:	5481      	strb	r1, [r0, r2]
 800535a:	0006      	movs	r6, r0
 800535c:	2000      	movs	r0, #0
 800535e:	e00f      	b.n	8005380 <PE_Check_DataMessageVDM+0x90>
 8005360:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8005362:	0082      	lsls	r2, r0, #2
 8005364:	1889      	adds	r1, r1, r2
 8005366:	798a      	ldrb	r2, [r1, #6]
 8005368:	79cf      	ldrb	r7, [r1, #7]
 800536a:	023f      	lsls	r7, r7, #8
 800536c:	19d2      	adds	r2, r2, r7
 800536e:	7a0f      	ldrb	r7, [r1, #8]
 8005370:	043f      	lsls	r7, r7, #16
 8005372:	19d2      	adds	r2, r2, r7
 8005374:	7a49      	ldrb	r1, [r1, #9]
 8005376:	0609      	lsls	r1, r1, #24
 8005378:	1851      	adds	r1, r2, r1
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	5099      	str	r1, [r3, r2]
 800537e:	1c40      	adds	r0, r0, #1
 8005380:	49a7      	ldr	r1, [pc, #668]	@ (8005620 <.text_30>)
 8005382:	1873      	adds	r3, r6, r1
 8005384:	3118      	adds	r1, #24
 8005386:	1872      	adds	r2, r6, r1
 8005388:	7811      	ldrb	r1, [r2, #0]
 800538a:	4288      	cmp	r0, r1
 800538c:	d3e8      	bcc.n	8005360 <PE_Check_DataMessageVDM+0x70>
 800538e:	9900      	ldr	r1, [sp, #0]
 8005390:	68f0      	ldr	r0, [r6, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	d008      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 8005396:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8005398:	2f00      	cmp	r7, #0
 800539a:	d005      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 800539c:	7c30      	ldrb	r0, [r6, #16]
 800539e:	47b8      	blx	r7
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d101      	bne.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 80053a4:	7474      	strb	r4, [r6, #17]
 80053a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80053a8:	6870      	ldr	r0, [r6, #4]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	4004      	ands	r4, r0
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d100      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 80053b2:	7475      	strb	r5, [r6, #17]
 80053b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080053b8 <.text_23>:
 80053b8:	0000801e 	.word	0x0000801e

080053bc <.text_24>:
 80053bc:	fffff8ff 	.word	0xfffff8ff

080053c0 <PE_SVDM_CheckIdentity>:
 80053c0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80053c2:	0003      	movs	r3, r0
 80053c4:	2000      	movs	r0, #0
 80053c6:	4c97      	ldr	r4, [pc, #604]	@ (8005624 <.text_31>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	58e3      	ldr	r3, [r4, r3]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80053d0:	045b      	lsls	r3, r3, #17
 80053d2:	0f5b      	lsrs	r3, r3, #29
 80053d4:	1e5c      	subs	r4, r3, #1
 80053d6:	b2e3      	uxtb	r3, r4
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d200      	bcs.n	80053de <PE_SVDM_CheckIdentity+0x1e>
 80053dc:	e0b5      	b.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 80053de:	000b      	movs	r3, r1
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	785d      	ldrb	r5, [r3, #1]
 80053e4:	022d      	lsls	r5, r5, #8
 80053e6:	1949      	adds	r1, r1, r5
 80053e8:	789d      	ldrb	r5, [r3, #2]
 80053ea:	042d      	lsls	r5, r5, #16
 80053ec:	1949      	adds	r1, r1, r5
 80053ee:	78dd      	ldrb	r5, [r3, #3]
 80053f0:	062d      	lsls	r5, r5, #24
 80053f2:	194d      	adds	r5, r1, r5
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	7919      	ldrb	r1, [r3, #4]
 80053f8:	795e      	ldrb	r6, [r3, #5]
 80053fa:	0236      	lsls	r6, r6, #8
 80053fc:	1989      	adds	r1, r1, r6
 80053fe:	799e      	ldrb	r6, [r3, #6]
 8005400:	0436      	lsls	r6, r6, #16
 8005402:	1989      	adds	r1, r1, r6
 8005404:	79de      	ldrb	r6, [r3, #7]
 8005406:	0636      	lsls	r6, r6, #24
 8005408:	1989      	adds	r1, r1, r6
 800540a:	6051      	str	r1, [r2, #4]
 800540c:	2108      	movs	r1, #8
 800540e:	7a1e      	ldrb	r6, [r3, #8]
 8005410:	7a5f      	ldrb	r7, [r3, #9]
 8005412:	023f      	lsls	r7, r7, #8
 8005414:	19f6      	adds	r6, r6, r7
 8005416:	7a9f      	ldrb	r7, [r3, #10]
 8005418:	043f      	lsls	r7, r7, #16
 800541a:	19f6      	adds	r6, r6, r7
 800541c:	7adf      	ldrb	r7, [r3, #11]
 800541e:	063f      	lsls	r7, r7, #24
 8005420:	19f6      	adds	r6, r6, r7
 8005422:	6096      	str	r6, [r2, #8]
 8005424:	1ee4      	subs	r4, r4, #3
 8005426:	2620      	movs	r6, #32
 8005428:	5d97      	ldrb	r7, [r2, r6]
 800542a:	26e0      	movs	r6, #224	@ 0xe0
 800542c:	403e      	ands	r6, r7
 800542e:	466f      	mov	r7, sp
 8005430:	703e      	strb	r6, [r7, #0]
 8005432:	466e      	mov	r6, sp
 8005434:	7836      	ldrb	r6, [r6, #0]
 8005436:	2720      	movs	r7, #32
 8005438:	55d6      	strb	r6, [r2, r7]
 800543a:	0626      	lsls	r6, r4, #24
 800543c:	d022      	beq.n	8005484 <PE_SVDM_CheckIdentity+0xc4>
 800543e:	1e66      	subs	r6, r4, #1
 8005440:	466f      	mov	r7, sp
 8005442:	707e      	strb	r6, [r7, #1]
 8005444:	00ae      	lsls	r6, r5, #2
 8005446:	0f76      	lsrs	r6, r6, #29
 8005448:	2e05      	cmp	r6, #5
 800544a:	d827      	bhi.n	800549c <PE_SVDM_CheckIdentity+0xdc>
 800544c:	a701      	add	r7, pc, #4	@ (adr r7, 8005454 <PE_SVDM_CheckIdentity+0x94>)
 800544e:	5dbf      	ldrb	r7, [r7, r6]
 8005450:	44bf      	add	pc, r7
 8005452:	bf00      	nop
 8005454:	5a060632 	.word	0x5a060632
 8005458:	a680      	.short	0xa680
 800545a:	210c      	movs	r1, #12
 800545c:	466c      	mov	r4, sp
 800545e:	7824      	ldrb	r4, [r4, #0]
 8005460:	2608      	movs	r6, #8
 8005462:	4326      	orrs	r6, r4
 8005464:	2420      	movs	r4, #32
 8005466:	5516      	strb	r6, [r2, r4]
 8005468:	7b1c      	ldrb	r4, [r3, #12]
 800546a:	7b5e      	ldrb	r6, [r3, #13]
 800546c:	0236      	lsls	r6, r6, #8
 800546e:	19a4      	adds	r4, r4, r6
 8005470:	7b9e      	ldrb	r6, [r3, #14]
 8005472:	0436      	lsls	r6, r6, #16
 8005474:	19a4      	adds	r4, r4, r6
 8005476:	7bde      	ldrb	r6, [r3, #15]
 8005478:	0636      	lsls	r6, r6, #24
 800547a:	19a4      	adds	r4, r4, r6
 800547c:	6194      	str	r4, [r2, #24]
 800547e:	466c      	mov	r4, sp
 8005480:	7864      	ldrb	r4, [r4, #1]
 8005482:	0026      	movs	r6, r4
 8005484:	d062      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	8eb6      	ldrh	r6, [r6, #52]	@ 0x34
 800548a:	0636      	lsls	r6, r6, #24
 800548c:	0fb6      	lsrs	r6, r6, #30
 800548e:	2e02      	cmp	r6, #2
 8005490:	d35c      	bcc.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005492:	01ad      	lsls	r5, r5, #6
 8005494:	0f6d      	lsrs	r5, r5, #29
 8005496:	d059      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005498:	1e6d      	subs	r5, r5, #1
 800549a:	2d02      	cmp	r5, #2
 800549c:	d855      	bhi.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 800549e:	2520      	movs	r5, #32
 80054a0:	5d55      	ldrb	r5, [r2, r5]
 80054a2:	08ef      	lsrs	r7, r5, #3
 80054a4:	07ff      	lsls	r7, r7, #31
 80054a6:	d53b      	bpl.n	8005520 <PE_SVDM_CheckIdentity+0x160>
 80054a8:	3108      	adds	r1, #8
 80054aa:	1e64      	subs	r4, r4, #1
 80054ac:	e039      	b.n	8005522 <PE_SVDM_CheckIdentity+0x162>
 80054ae:	210c      	movs	r1, #12
 80054b0:	466c      	mov	r4, sp
 80054b2:	7824      	ldrb	r4, [r4, #0]
 80054b4:	2601      	movs	r6, #1
 80054b6:	4326      	orrs	r6, r4
 80054b8:	2420      	movs	r4, #32
 80054ba:	5516      	strb	r6, [r2, r4]
 80054bc:	7b1c      	ldrb	r4, [r3, #12]
 80054be:	7b5e      	ldrb	r6, [r3, #13]
 80054c0:	0236      	lsls	r6, r6, #8
 80054c2:	19a4      	adds	r4, r4, r6
 80054c4:	7b9e      	ldrb	r6, [r3, #14]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	19a4      	adds	r4, r4, r6
 80054ca:	7bde      	ldrb	r6, [r3, #15]
 80054cc:	0636      	lsls	r6, r6, #24
 80054ce:	19a4      	adds	r4, r4, r6
 80054d0:	60d4      	str	r4, [r2, #12]
 80054d2:	e7d4      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054d4:	210c      	movs	r1, #12
 80054d6:	466c      	mov	r4, sp
 80054d8:	7824      	ldrb	r4, [r4, #0]
 80054da:	2604      	movs	r6, #4
 80054dc:	4326      	orrs	r6, r4
 80054de:	2420      	movs	r4, #32
 80054e0:	5516      	strb	r6, [r2, r4]
 80054e2:	7b1c      	ldrb	r4, [r3, #12]
 80054e4:	7b5e      	ldrb	r6, [r3, #13]
 80054e6:	0236      	lsls	r6, r6, #8
 80054e8:	19a4      	adds	r4, r4, r6
 80054ea:	7b9e      	ldrb	r6, [r3, #14]
 80054ec:	0436      	lsls	r6, r6, #16
 80054ee:	19a4      	adds	r4, r4, r6
 80054f0:	7bde      	ldrb	r6, [r3, #15]
 80054f2:	0636      	lsls	r6, r6, #24
 80054f4:	19a4      	adds	r4, r4, r6
 80054f6:	6154      	str	r4, [r2, #20]
 80054f8:	e7c1      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054fa:	210c      	movs	r1, #12
 80054fc:	466c      	mov	r4, sp
 80054fe:	7824      	ldrb	r4, [r4, #0]
 8005500:	2602      	movs	r6, #2
 8005502:	4326      	orrs	r6, r4
 8005504:	2420      	movs	r4, #32
 8005506:	5516      	strb	r6, [r2, r4]
 8005508:	7b1c      	ldrb	r4, [r3, #12]
 800550a:	7b5e      	ldrb	r6, [r3, #13]
 800550c:	0236      	lsls	r6, r6, #8
 800550e:	19a4      	adds	r4, r4, r6
 8005510:	7b9e      	ldrb	r6, [r3, #14]
 8005512:	0436      	lsls	r6, r6, #16
 8005514:	19a4      	adds	r4, r4, r6
 8005516:	7bde      	ldrb	r6, [r3, #15]
 8005518:	0636      	lsls	r6, r6, #24
 800551a:	19a4      	adds	r4, r4, r6
 800551c:	6114      	str	r4, [r2, #16]
 800551e:	e7ae      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 8005520:	1d09      	adds	r1, r1, #4
 8005522:	b2e4      	uxtb	r4, r4
 8005524:	2c01      	cmp	r4, #1
 8005526:	d110      	bne.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 8005528:	2410      	movs	r4, #16
 800552a:	432c      	orrs	r4, r5
 800552c:	2520      	movs	r5, #32
 800552e:	5554      	strb	r4, [r2, r5]
 8005530:	1859      	adds	r1, r3, r1
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	784c      	ldrb	r4, [r1, #1]
 8005536:	0224      	lsls	r4, r4, #8
 8005538:	191b      	adds	r3, r3, r4
 800553a:	788c      	ldrb	r4, [r1, #2]
 800553c:	0424      	lsls	r4, r4, #16
 800553e:	191b      	adds	r3, r3, r4
 8005540:	78c9      	ldrb	r1, [r1, #3]
 8005542:	0609      	lsls	r1, r1, #24
 8005544:	1859      	adds	r1, r3, r1
 8005546:	61d1      	str	r1, [r2, #28]
 8005548:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 800554a:	2002      	movs	r0, #2
 800554c:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800554e <PE_SVDM_CheckSVIDs>:
 800554e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005550:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <.text_31>)
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	5818      	ldr	r0, [r3, r0]
 8005556:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8005558:	0440      	lsls	r0, r0, #17
 800555a:	0f40      	lsrs	r0, r0, #29
 800555c:	1e46      	subs	r6, r0, #1
 800555e:	b2f6      	uxtb	r6, r6
 8005560:	2000      	movs	r0, #0
 8005562:	2500      	movs	r5, #0
 8005564:	7610      	strb	r0, [r2, #24]
 8005566:	7650      	strb	r0, [r2, #25]
 8005568:	000b      	movs	r3, r1
 800556a:	0014      	movs	r4, r2
 800556c:	0031      	movs	r1, r6
 800556e:	5c1a      	ldrb	r2, [r3, r0]
 8005570:	1c5e      	adds	r6, r3, #1
 8005572:	5c36      	ldrb	r6, [r6, r0]
 8005574:	0236      	lsls	r6, r6, #8
 8005576:	1992      	adds	r2, r2, r6
 8005578:	7e26      	ldrb	r6, [r4, #24]
 800557a:	0076      	lsls	r6, r6, #1
 800557c:	53a2      	strh	r2, [r4, r6]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	2201      	movs	r2, #1
 8005582:	0077      	lsls	r7, r6, #1
 8005584:	5be7      	ldrh	r7, [r4, r7]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d002      	beq.n	8005590 <PE_SVDM_CheckSVIDs+0x42>
 800558a:	1c76      	adds	r6, r6, #1
 800558c:	7626      	strb	r6, [r4, #24]
 800558e:	e001      	b.n	8005594 <PE_SVDM_CheckSVIDs+0x46>
 8005590:	2501      	movs	r5, #1
 8005592:	7662      	strb	r2, [r4, #25]
 8005594:	1c80      	adds	r0, r0, #2
 8005596:	b2c0      	uxtb	r0, r0
 8005598:	5c1e      	ldrb	r6, [r3, r0]
 800559a:	1c5f      	adds	r7, r3, #1
 800559c:	5c3f      	ldrb	r7, [r7, r0]
 800559e:	023f      	lsls	r7, r7, #8
 80055a0:	19f6      	adds	r6, r6, r7
 80055a2:	7e27      	ldrb	r7, [r4, #24]
 80055a4:	007f      	lsls	r7, r7, #1
 80055a6:	53e6      	strh	r6, [r4, r7]
 80055a8:	7e26      	ldrb	r6, [r4, #24]
 80055aa:	0077      	lsls	r7, r6, #1
 80055ac:	5be7      	ldrh	r7, [r4, r7]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d002      	beq.n	80055b8 <PE_SVDM_CheckSVIDs+0x6a>
 80055b2:	1c76      	adds	r6, r6, #1
 80055b4:	7626      	strb	r6, [r4, #24]
 80055b6:	e001      	b.n	80055bc <PE_SVDM_CheckSVIDs+0x6e>
 80055b8:	2501      	movs	r5, #1
 80055ba:	7662      	strb	r2, [r4, #25]
 80055bc:	1c80      	adds	r0, r0, #2
 80055be:	b2c0      	uxtb	r0, r0
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d201      	bcs.n	80055ca <PE_SVDM_CheckSVIDs+0x7c>
 80055c6:	002a      	movs	r2, r5
 80055c8:	d0d1      	beq.n	800556e <PE_SVDM_CheckSVIDs+0x20>
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055cc <.text_27>:
 80055cc:	ffff7fff 	.word	0xffff7fff

080055d0 <PE_SVDM_CheckModes>:
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	4c14      	ldr	r4, [pc, #80]	@ (8005624 <.text_31>)
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5820      	ldr	r0, [r4, r0]
 80055d8:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 80055da:	0440      	lsls	r0, r0, #17
 80055dc:	0f40      	lsrs	r0, r0, #29
 80055de:	1e40      	subs	r0, r0, #1
 80055e0:	b2c0      	uxtb	r0, r0
 80055e2:	2400      	movs	r4, #0
 80055e4:	8399      	strh	r1, [r3, #28]
 80055e6:	601c      	str	r4, [r3, #0]
 80055e8:	5d11      	ldrb	r1, [r2, r4]
 80055ea:	1915      	adds	r5, r2, r4
 80055ec:	786d      	ldrb	r5, [r5, #1]
 80055ee:	022d      	lsls	r5, r5, #8
 80055f0:	1949      	adds	r1, r1, r5
 80055f2:	1915      	adds	r5, r2, r4
 80055f4:	78ad      	ldrb	r5, [r5, #2]
 80055f6:	042d      	lsls	r5, r5, #16
 80055f8:	1949      	adds	r1, r1, r5
 80055fa:	1915      	adds	r5, r2, r4
 80055fc:	78ed      	ldrb	r5, [r5, #3]
 80055fe:	062d      	lsls	r5, r5, #24
 8005600:	1949      	adds	r1, r1, r5
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	00ad      	lsls	r5, r5, #2
 8005606:	195d      	adds	r5, r3, r5
 8005608:	6069      	str	r1, [r5, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	1c49      	adds	r1, r1, #1
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	1d24      	adds	r4, r4, #4
 8005612:	b2e4      	uxtb	r4, r4
 8005614:	0081      	lsls	r1, r0, #2
 8005616:	428c      	cmp	r4, r1
 8005618:	d3e6      	bcc.n	80055e8 <PE_SVDM_CheckModes+0x18>
 800561a:	bd30      	pop	{r4, r5, pc}

0800561c <.text_29>:
 800561c:	000004ac 	.word	0x000004ac

08005620 <.text_30>:
 8005620:	00000494 	.word	0x00000494

08005624 <.text_31>:
 8005624:	20000224 	.word	0x20000224

08005628 <USBPD_PRL_TimerCounter>:
 8005628:	4954      	ldr	r1, [pc, #336]	@ (800577c <.text_15>)
 800562a:	0080      	lsls	r0, r0, #2
 800562c:	1808      	adds	r0, r1, r0
 800562e:	6801      	ldr	r1, [r0, #0]
 8005630:	790a      	ldrb	r2, [r1, #4]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d002      	beq.n	800563c <USBPD_PRL_TimerCounter+0x14>
 8005636:	790a      	ldrb	r2, [r1, #4]
 8005638:	1e52      	subs	r2, r2, #1
 800563a:	710a      	strb	r2, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	7841      	ldrb	r1, [r0, #1]
 8005640:	2900      	cmp	r1, #0
 8005642:	d001      	beq.n	8005648 <USBPD_PRL_TimerCounter+0x20>
 8005644:	1e49      	subs	r1, r1, #1
 8005646:	7041      	strb	r1, [r0, #1]
 8005648:	4770      	bx	lr
	...

0800564c <USBPD_PRL_Init>:
 800564c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800564e:	b081      	sub	sp, #4
 8005650:	0014      	movs	r4, r2
 8005652:	001d      	movs	r5, r3
 8005654:	2616      	movs	r6, #22
 8005656:	209c      	movs	r0, #156	@ 0x9c
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	f013 ffff 	bl	801965c <malloc>
 800565e:	0007      	movs	r7, r0
 8005660:	d01e      	beq.n	80056a0 <USBPD_PRL_Init+0x54>
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	219c      	movs	r1, #156	@ 0x9c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	f014 f905 	bl	8019876 <__aeabi_memclr>
 800566c:	220f      	movs	r2, #15
 800566e:	2103      	movs	r1, #3
 8005670:	1db8      	adds	r0, r7, #6
 8005672:	f014 f8f9 	bl	8019868 <__aeabi_memset>
 8005676:	4841      	ldr	r0, [pc, #260]	@ (800577c <.text_15>)
 8005678:	4669      	mov	r1, sp
 800567a:	7909      	ldrb	r1, [r1, #4]
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	5047      	str	r7, [r0, r1]
 8005680:	62bc      	str	r4, [r7, #40]	@ 0x28
 8005682:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8005684:	2001      	movs	r0, #1
 8005686:	9000      	str	r0, [sp, #0]
 8005688:	6870      	ldr	r0, [r6, #4]
 800568a:	0743      	lsls	r3, r0, #29
 800568c:	0fdb      	lsrs	r3, r3, #31
 800568e:	003a      	movs	r2, r7
 8005690:	3230      	adds	r2, #48	@ 0x30
 8005692:	bf00      	nop
 8005694:	a103      	add	r1, pc, #12	@ (adr r1, 80056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005696:	4668      	mov	r0, sp
 8005698:	7900      	ldrb	r0, [r0, #4]
 800569a:	f00b fca1 	bl	8010fe0 <USBPD_PHY_Init>
 800569e:	0006      	movs	r6, r0
 80056a0:	0030      	movs	r0, r6
 80056a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80056a4:	5cdd 0800 6035 0800 608f 0800 60a9 0800     .\..5`...`...`..
 80056b4:	60b1 0800 579d 0800                         .`...W..

080056bc <USBPD_PRL_GetMemoryConsumption>:
 80056bc:	20ea      	movs	r0, #234	@ 0xea
 80056be:	0080      	lsls	r0, r0, #2
 80056c0:	4770      	bx	lr

080056c2 <USBPD_PRL_SetHeader>:
 80056c2:	b530      	push	{r4, r5, lr}
 80056c4:	4c2d      	ldr	r4, [pc, #180]	@ (800577c <.text_15>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5820      	ldr	r0, [r4, r0]
 80056ca:	8a44      	ldrh	r4, [r0, #18]
 80056cc:	4d2c      	ldr	r5, [pc, #176]	@ (8005780 <.text_16>)
 80056ce:	4025      	ands	r5, r4
 80056d0:	0209      	lsls	r1, r1, #8
 80056d2:	2480      	movs	r4, #128	@ 0x80
 80056d4:	0064      	lsls	r4, r4, #1
 80056d6:	4021      	ands	r1, r4
 80056d8:	4329      	orrs	r1, r5
 80056da:	8241      	strh	r1, [r0, #18]
 80056dc:	4c29      	ldr	r4, [pc, #164]	@ (8005784 <.text_17>)
 80056de:	400c      	ands	r4, r1
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	2220      	movs	r2, #32
 80056e4:	4011      	ands	r1, r2
 80056e6:	4321      	orrs	r1, r4
 80056e8:	8241      	strh	r1, [r0, #18]
 80056ea:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <.text_18>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	0199      	lsls	r1, r3, #6
 80056f0:	23c0      	movs	r3, #192	@ 0xc0
 80056f2:	400b      	ands	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	8243      	strh	r3, [r0, #18]
 80056f8:	bd30      	pop	{r4, r5, pc}

080056fa <USBPD_PRL_SetHeaderPowerRole>:
 80056fa:	4a20      	ldr	r2, [pc, #128]	@ (800577c <.text_15>)
 80056fc:	0080      	lsls	r0, r0, #2
 80056fe:	5810      	ldr	r0, [r2, r0]
 8005700:	8a42      	ldrh	r2, [r0, #18]
 8005702:	4b1f      	ldr	r3, [pc, #124]	@ (8005780 <.text_16>)
 8005704:	4013      	ands	r3, r2
 8005706:	0209      	lsls	r1, r1, #8
 8005708:	2280      	movs	r2, #128	@ 0x80
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	e007      	b.n	800571e <.text_10>

0800570e <USBPD_PRL_SetHeaderDataRole>:
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <.text_15>)
 8005710:	0080      	lsls	r0, r0, #2
 8005712:	5810      	ldr	r0, [r2, r0]
 8005714:	8a42      	ldrh	r2, [r0, #18]
 8005716:	4b1b      	ldr	r3, [pc, #108]	@ (8005784 <.text_17>)
 8005718:	4013      	ands	r3, r2
 800571a:	0149      	lsls	r1, r1, #5
 800571c:	2220      	movs	r2, #32

0800571e <.text_10>:
 800571e:	4011      	ands	r1, r2
 8005720:	4319      	orrs	r1, r3
 8005722:	8241      	strh	r1, [r0, #18]
 8005724:	4770      	bx	lr

08005726 <USBPD_PRL_SetHeaderSpecification>:
 8005726:	4a15      	ldr	r2, [pc, #84]	@ (800577c <.text_15>)
 8005728:	0080      	lsls	r0, r0, #2
 800572a:	5810      	ldr	r0, [r2, r0]
 800572c:	8a42      	ldrh	r2, [r0, #18]
 800572e:	4b16      	ldr	r3, [pc, #88]	@ (8005788 <.text_18>)
 8005730:	4013      	ands	r3, r2
 8005732:	0189      	lsls	r1, r1, #6
 8005734:	22c0      	movs	r2, #192	@ 0xc0
 8005736:	400a      	ands	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	8242      	strh	r2, [r0, #18]
 800573c:	4770      	bx	lr

0800573e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800573e:	4a0f      	ldr	r2, [pc, #60]	@ (800577c <.text_15>)
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	5810      	ldr	r0, [r2, r0]
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	21c0      	movs	r1, #192	@ 0xc0
 8005748:	4011      	ands	r1, r2
 800574a:	4a0f      	ldr	r2, [pc, #60]	@ (8005788 <.text_18>)
 800574c:	8a83      	ldrh	r3, [r0, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	430b      	orrs	r3, r1
 8005752:	8283      	strh	r3, [r0, #20]
 8005754:	8ac3      	ldrh	r3, [r0, #22]
 8005756:	401a      	ands	r2, r3
 8005758:	4311      	orrs	r1, r2
 800575a:	82c1      	strh	r1, [r0, #22]
 800575c:	4770      	bx	lr

0800575e <USBPD_PRL_SRCSetSinkNG>:
 800575e:	b580      	push	{r7, lr}
 8005760:	f00b fd33 	bl	80111ca <USBPD_PHY_SetResistor_SinkTxNG>
 8005764:	bd01      	pop	{r0, pc}

08005766 <USBPD_PRL_SRCReleaseSinkNG>:
 8005766:	b510      	push	{r4, lr}
 8005768:	0004      	movs	r4, r0
 800576a:	f00b fd3d 	bl	80111e8 <USBPD_PHY_SetResistor_SinkTxOK>
 800576e:	2000      	movs	r0, #0
 8005770:	4902      	ldr	r1, [pc, #8]	@ (800577c <.text_15>)
 8005772:	00a2      	lsls	r2, r4, #2
 8005774:	5889      	ldr	r1, [r1, r2]
 8005776:	7148      	strb	r0, [r1, #5]
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <.text_15>:
 800577c:	20000230 	.word	0x20000230

08005780 <.text_16>:
 8005780:	0000feff 	.word	0x0000feff

08005784 <.text_17>:
 8005784:	0000ffdf 	.word	0x0000ffdf

08005788 <.text_18>:
 8005788:	0000ff3f 	.word	0x0000ff3f

0800578c <USBPD_PRL_IsResistor_SinkTxOK>:
 800578c:	b580      	push	{r7, lr}
 800578e:	f00b fd51 	bl	8011234 <USBPD_PHY_IsResistor_SinkTxOk>
 8005792:	bd02      	pop	{r1, pc}

08005794 <USBPD_PRL_FastRoleSwapSignalling>:
 8005794:	b580      	push	{r7, lr}
 8005796:	f00b fd5d 	bl	8011254 <USBPD_PHY_FastRoleSwapSignalling>
 800579a:	bd01      	pop	{r0, pc}

0800579c <PRL_FastRoleSwapReception>:
 800579c:	b580      	push	{r7, lr}
 800579e:	f7fb fa4d 	bl	8000c3c <PE_PRL_FastRoleSwapReception>
 80057a2:	bd01      	pop	{r0, pc}

080057a4 <USBPD_PRL_SOPCapability>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	f00b fd2f 	bl	8011208 <USBPD_PHY_SOPSupported>
 80057aa:	bd01      	pop	{r0, pc}

080057ac <USBPD_PRL_SendMessage>:
 80057ac:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	2503      	movs	r5, #3
 80057b2:	4668      	mov	r0, sp
 80057b4:	7f00      	ldrb	r0, [r0, #28]
 80057b6:	9005      	str	r0, [sp, #20]
 80057b8:	48ca      	ldr	r0, [pc, #808]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	1880      	adds	r0, r0, r2
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	7962      	ldrb	r2, [r4, #5]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d004      	beq.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057cc:	7a62      	ldrb	r2, [r4, #9]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d101      	bne.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057d2:	220f      	movs	r2, #15
 80057d4:	7142      	strb	r2, [r0, #5]
 80057d6:	466a      	mov	r2, sp
 80057d8:	7111      	strb	r1, [r2, #4]
 80057da:	4669      	mov	r1, sp
 80057dc:	7909      	ldrb	r1, [r1, #4]
 80057de:	9104      	str	r1, [sp, #16]
 80057e0:	1861      	adds	r1, r4, r1
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	1c52      	adds	r2, r2, #1
 80057e8:	466e      	mov	r6, sp
 80057ea:	7172      	strb	r2, [r6, #5]
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2600      	movs	r6, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d900      	bls.n	8005800 <USBPD_PRL_SendMessage+0x54>
 80057fe:	e1f6      	b.n	8005bee <USBPD_PRL_SendMessage+0x442>
 8005800:	a701      	add	r7, pc, #4	@ (adr r7, 8005808 <USBPD_PRL_SendMessage+0x5c>)
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	5aff      	ldrh	r7, [r7, r3]
 8005806:	44bf      	add	pc, r7
 8005808:	00480020 	.word	0x00480020
 800580c:	03e4005e 	.word	0x03e4005e
 8005810:	00a8006a 	.word	0x00a8006a
 8005814:	015a0086 	.word	0x015a0086
 8005818:	03e403e4 	.word	0x03e403e4
 800581c:	030802de 	.word	0x030802de
 8005820:	03560334 	.word	0x03560334
 8005824:	03de03e4 	.word	0x03de03e4
 8005828:	03a6      	.short	0x03a6
 800582a:	f3ef 8710 	mrs	r7, PRIMASK
 800582e:	b672      	cpsid	i
 8005830:	4668      	mov	r0, sp
 8005832:	7f00      	ldrb	r0, [r0, #28]
 8005834:	f7fb f8b4 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8005838:	2800      	cmp	r0, #0
 800583a:	d105      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 800583c:	7aa0      	ldrb	r0, [r4, #10]
 800583e:	2800      	cmp	r0, #0
 8005840:	d102      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 8005842:	20ff      	movs	r0, #255	@ 0xff
 8005844:	7260      	strb	r0, [r4, #9]
 8005846:	e000      	b.n	800584a <USBPD_PRL_SendMessage+0x9e>
 8005848:	7266      	strb	r6, [r4, #9]
 800584a:	f387 8810 	msr	PRIMASK, r7
 800584e:	2006      	movs	r0, #6
 8005850:	e1a0      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005852:	4668      	mov	r0, sp
 8005854:	7f00      	ldrb	r0, [r0, #28]
 8005856:	f00b fcb8 	bl	80111ca <USBPD_PHY_SetResistor_SinkTxNG>
 800585a:	2002      	movs	r0, #2
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	7148      	strb	r0, [r1, #5]
 8005862:	2013      	movs	r0, #19
 8005864:	7060      	strb	r0, [r4, #1]
 8005866:	e1c4      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005868:	2a01      	cmp	r2, #1
 800586a:	d10f      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 800586c:	7861      	ldrb	r1, [r4, #1]
 800586e:	2900      	cmp	r1, #0
 8005870:	d10a      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005872:	e01c      	b.n	80058ae <USBPD_PRL_SendMessage+0x102>
 8005874:	2a02      	cmp	r2, #2
 8005876:	d109      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 8005878:	4668      	mov	r0, sp
 800587a:	7f00      	ldrb	r0, [r0, #28]
 800587c:	f00b fcda 	bl	8011234 <USBPD_PHY_IsResistor_SinkTxOk>
 8005880:	2801      	cmp	r0, #1
 8005882:	d101      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005884:	2005      	movs	r0, #5
 8005886:	e185      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005888:	2509      	movs	r5, #9
 800588a:	e1b2      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 800588c:	2106      	movs	r1, #6
 800588e:	e154      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1861      	adds	r1, r4, r1
 8005894:	8a49      	ldrh	r1, [r1, #18]
 8005896:	0609      	lsls	r1, r1, #24
 8005898:	0f89      	lsrs	r1, r1, #30
 800589a:	2902      	cmp	r1, #2
 800589c:	d107      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d101      	bne.n	80058a6 <USBPD_PRL_SendMessage+0xfa>
 80058a2:	7142      	strb	r2, [r0, #5]
 80058a4:	e1a5      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 80058a6:	2a02      	cmp	r2, #2
 80058a8:	d101      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e145      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058ae:	2105      	movs	r1, #5
 80058b0:	e143      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	1820      	adds	r0, r4, r0
 80058b6:	8a43      	ldrh	r3, [r0, #18]
 80058b8:	4acf      	ldr	r2, [pc, #828]	@ (8005bf8 <.text_24>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	ab08      	add	r3, sp, #32
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	06db      	lsls	r3, r3, #27
 80058c2:	0edb      	lsrs	r3, r3, #27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	8243      	strh	r3, [r0, #18]
 80058c8:	045a      	lsls	r2, r3, #17
 80058ca:	0c52      	lsrs	r2, r2, #17
 80058cc:	ab08      	add	r3, sp, #32
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	03db      	lsls	r3, r3, #15
 80058d4:	4313      	orrs	r3, r2
 80058d6:	8243      	strh	r3, [r0, #18]
 80058d8:	70a6      	strb	r6, [r4, #2]
 80058da:	8a43      	ldrh	r3, [r0, #18]
 80058dc:	0bda      	lsrs	r2, r3, #15
 80058de:	d023      	beq.n	8005928 <USBPD_PRL_SendMessage+0x17c>
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	83a2      	strh	r2, [r4, #28]
 80058ee:	8ba2      	ldrh	r2, [r4, #28]
 80058f0:	0a93      	lsrs	r3, r2, #10
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d40f      	bmi.n	8005916 <USBPD_PRL_SendMessage+0x16a>
 80058f6:	0ad2      	lsrs	r2, r2, #11
 80058f8:	0712      	lsls	r2, r2, #28
 80058fa:	d122      	bne.n	8005942 <USBPD_PRL_SendMessage+0x196>
 80058fc:	466a      	mov	r2, sp
 80058fe:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8005900:	1f12      	subs	r2, r2, #4
 8005902:	8462      	strh	r2, [r4, #34]	@ 0x22
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	8ba3      	ldrh	r3, [r4, #28]
 800590a:	27fe      	movs	r7, #254	@ 0xfe
 800590c:	023f      	lsls	r7, r7, #8
 800590e:	401f      	ands	r7, r3
 8005910:	433a      	orrs	r2, r7
 8005912:	83a2      	strh	r2, [r4, #28]
 8005914:	e015      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005916:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005918:	8a42      	ldrh	r2, [r0, #18]
 800591a:	4bb8      	ldr	r3, [pc, #736]	@ (8005bfc <.text_25>)
 800591c:	4013      	ands	r3, r2
 800591e:	2280      	movs	r2, #128	@ 0x80
 8005920:	0152      	lsls	r2, r2, #5
 8005922:	431a      	orrs	r2, r3
 8005924:	8242      	strh	r2, [r0, #18]
 8005926:	e00c      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005928:	4ab4      	ldr	r2, [pc, #720]	@ (8005bfc <.text_25>)
 800592a:	401a      	ands	r2, r3
 800592c:	466b      	mov	r3, sp
 800592e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005930:	1e9b      	subs	r3, r3, #2
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	27e0      	movs	r7, #224	@ 0xe0
 8005938:	01ff      	lsls	r7, r7, #7
 800593a:	401f      	ands	r7, r3
 800593c:	4317      	orrs	r7, r2
 800593e:	8247      	strh	r7, [r0, #18]
 8005940:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005942:	aa08      	add	r2, sp, #32
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	2a0d      	cmp	r2, #13
 8005948:	d10a      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 800594a:	8a40      	ldrh	r0, [r0, #18]
 800594c:	22f0      	movs	r2, #240	@ 0xf0
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4002      	ands	r2, r0
 8005952:	d105      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 8005954:	72ce      	strb	r6, [r1, #11]
 8005956:	220f      	movs	r2, #15
 8005958:	2103      	movs	r1, #3
 800595a:	1da0      	adds	r0, r4, #6
 800595c:	f013 ff84 	bl	8019868 <__aeabi_memset>
 8005960:	2007      	movs	r0, #7
 8005962:	e117      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005964:	4669      	mov	r1, sp
 8005966:	8f0c      	ldrh	r4, [r1, #56]	@ 0x38
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	1841      	adds	r1, r0, r1
 800596c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800596e:	466b      	mov	r3, sp
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d2      	ldr	r2, [r2, r3]
 8005976:	466b      	mov	r3, sp
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	8a52      	ldrh	r2, [r2, #18]
 8005980:	0bd3      	lsrs	r3, r2, #15
 8005982:	d074      	beq.n	8005a6e <USBPD_PRL_SendMessage+0x2c2>
 8005984:	8b83      	ldrh	r3, [r0, #28]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d465      	bmi.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 800598c:	4b55      	ldr	r3, [pc, #340]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800598e:	466f      	mov	r7, sp
 8005990:	7f3f      	ldrb	r7, [r7, #28]
 8005992:	00bf      	lsls	r7, r7, #2
 8005994:	59db      	ldr	r3, [r3, r7]
 8005996:	8b9b      	ldrh	r3, [r3, #28]
 8005998:	8c47      	ldrh	r7, [r0, #34]	@ 0x22
 800599a:	2f1b      	cmp	r7, #27
 800599c:	d30a      	bcc.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 800599e:	0bdf      	lsrs	r7, r3, #15
 80059a0:	d008      	beq.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 80059a2:	23e0      	movs	r3, #224	@ 0xe0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4313      	orrs	r3, r2
 80059a8:	824b      	strh	r3, [r1, #18]
 80059aa:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 80059ac:	391a      	subs	r1, #26
 80059ae:	8441      	strh	r1, [r0, #34]	@ 0x22
 80059b0:	241e      	movs	r4, #30
 80059b2:	e051      	b.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 80059b4:	0ada      	lsrs	r2, r3, #11
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d107      	bne.n	80059ca <USBPD_PRL_SendMessage+0x21e>
 80059ba:	22fe      	movs	r2, #254	@ 0xfe
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	401a      	ands	r2, r3
 80059c0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	0ddb      	lsrs	r3, r3, #23
 80059c6:	4313      	orrs	r3, r2
 80059c8:	8383      	strh	r3, [r0, #28]
 80059ca:	8a4b      	ldrh	r3, [r1, #18]
 80059cc:	4a8b      	ldr	r2, [pc, #556]	@ (8005bfc <.text_25>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	824a      	strh	r2, [r1, #18]
 80059d2:	8b83      	ldrh	r3, [r0, #28]
 80059d4:	0bdb      	lsrs	r3, r3, #15
 80059d6:	d03c      	beq.n	8005a52 <USBPD_PRL_SendMessage+0x2a6>
 80059d8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80059da:	1c9b      	adds	r3, r3, #2
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	24e0      	movs	r4, #224	@ 0xe0
 80059e2:	01e4      	lsls	r4, r4, #7
 80059e4:	401c      	ands	r4, r3
 80059e6:	4314      	orrs	r4, r2
 80059e8:	824c      	strh	r4, [r1, #18]
 80059ea:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80059ec:	1c80      	adds	r0, r0, #2
 80059ee:	0781      	lsls	r1, r0, #30
 80059f0:	0f89      	lsrs	r1, r1, #30
 80059f2:	d025      	beq.n	8005a40 <USBPD_PRL_SendMessage+0x294>
 80059f4:	2200      	movs	r2, #0
 80059f6:	483b      	ldr	r0, [pc, #236]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	9000      	str	r0, [sp, #0]
 8005a00:	9802      	ldr	r0, [sp, #8]
 8005a02:	9102      	str	r1, [sp, #8]
 8005a04:	e004      	b.n	8005a10 <USBPD_PRL_SendMessage+0x264>
 8005a06:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005a08:	1859      	adds	r1, r3, r1
 8005a0a:	1841      	adds	r1, r0, r1
 8005a0c:	710e      	strb	r6, [r1, #4]
 8005a0e:	1c52      	adds	r2, r2, #1
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	b2d1      	uxtb	r1, r2
 8005a16:	2404      	movs	r4, #4
 8005a18:	9f02      	ldr	r7, [sp, #8]
 8005a1a:	1be4      	subs	r4, r4, r7
 8005a1c:	42a1      	cmp	r1, r4
 8005a1e:	d3f2      	bcc.n	8005a06 <USBPD_PRL_SendMessage+0x25a>
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	0018      	movs	r0, r3
 8005a24:	3012      	adds	r0, #18
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1840      	adds	r0, r0, r1
 8005a2a:	8801      	ldrh	r1, [r0, #0]
 8005a2c:	4a73      	ldr	r2, [pc, #460]	@ (8005bfc <.text_25>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	0b09      	lsrs	r1, r1, #12
 8005a32:	1c49      	adds	r1, r1, #1
 8005a34:	0309      	lsls	r1, r1, #12
 8005a36:	23e0      	movs	r3, #224	@ 0xe0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	8003      	strh	r3, [r0, #0]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	3012      	adds	r0, #18
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	5a40      	ldrh	r0, [r0, r1]
 8005a4a:	0440      	lsls	r0, r0, #17
 8005a4c:	0f40      	lsrs	r0, r0, #29
 8005a4e:	0084      	lsls	r4, r0, #2
 8005a50:	1ca4      	adds	r4, r4, #2
 8005a52:	9800      	ldr	r0, [sp, #0]
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	8446      	strh	r6, [r0, #34]	@ 0x22
 8005a58:	9800      	ldr	r0, [sp, #0]
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	8b80      	ldrh	r0, [r0, #28]
 8005a5e:	9902      	ldr	r1, [sp, #8]
 8005a60:	7088      	strb	r0, [r1, #2]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	6800      	ldr	r0, [r0, #0]
 8005a66:	8b80      	ldrh	r0, [r0, #28]
 8005a68:	0a00      	lsrs	r0, r0, #8
 8005a6a:	9902      	ldr	r1, [sp, #8]
 8005a6c:	70c8      	strb	r0, [r1, #3]
 8005a6e:	9800      	ldr	r0, [sp, #0]
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	0010      	movs	r0, r2
 8005a74:	3012      	adds	r0, #18
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	1840      	adds	r0, r0, r1
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	498c      	ldr	r1, [pc, #560]	@ (8005cb0 <.text_30>)
 8005a7e:	4019      	ands	r1, r3
 8005a80:	320b      	adds	r2, #11
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	5cd2      	ldrb	r2, [r2, r3]
 8005a86:	0253      	lsls	r3, r2, #9
 8005a88:	22e0      	movs	r2, #224	@ 0xe0
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	8002      	strh	r2, [r0, #0]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	7002      	strb	r2, [r0, #0]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	3012      	adds	r0, #18
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	5a40      	ldrh	r0, [r0, r1]
 8005aa0:	0a00      	lsrs	r0, r0, #8
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	7048      	strb	r0, [r1, #1]
 8005aa6:	9800      	ldr	r0, [sp, #0]
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	81c4      	strh	r4, [r0, #14]
 8005aac:	210a      	movs	r1, #10
 8005aae:	7141      	strb	r1, [r0, #5]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	7401      	strb	r1, [r0, #16]
 8005ab4:	b2a0      	uxth	r0, r4
 8005ab6:	9000      	str	r0, [sp, #0]
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	4668      	mov	r0, sp
 8005abc:	7902      	ldrb	r2, [r0, #4]
 8005abe:	7f01      	ldrb	r1, [r0, #28]
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	4e7c      	ldr	r6, [pc, #496]	@ (8005cb4 <.text_31>)
 8005ac4:	6836      	ldr	r6, [r6, #0]
 8005ac6:	47b0      	blx	r6
 8005ac8:	497b      	ldr	r1, [pc, #492]	@ (8005cb8 <.text_32>)
 8005aca:	4668      	mov	r0, sp
 8005acc:	7940      	ldrb	r0, [r0, #5]
 8005ace:	f00c ff29 	bl	8012924 <USBPD_TIM_Start>
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	7901      	ldrb	r1, [r0, #4]
 8005ada:	7f00      	ldrb	r0, [r0, #28]
 8005adc:	f00b fb2f 	bl	801113e <USBPD_PHY_SendMessage>
 8005ae0:	e087      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005ae2:	bf00      	nop
 8005ae4:	20000230 	.word	0x20000230
 8005ae8:	f3ef 8410 	mrs	r4, PRIMASK
 8005aec:	b672      	cpsid	i
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	7940      	ldrb	r0, [r0, #5]
 8005af4:	280a      	cmp	r0, #10
 8005af6:	d109      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005af8:	4668      	mov	r0, sp
 8005afa:	7940      	ldrb	r0, [r0, #5]
 8005afc:	f00c ff80 	bl	8012a00 <USBPD_TIM_IsExpired>
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d103      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005b04:	200d      	movs	r0, #13
 8005b06:	9900      	ldr	r1, [sp, #0]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	7148      	strb	r0, [r1, #5]
 8005b0c:	f384 8810 	msr	PRIMASK, r4
 8005b10:	e06f      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b12:	7aca      	ldrb	r2, [r1, #11]
 8005b14:	8b67      	ldrh	r7, [r4, #26]
 8005b16:	053f      	lsls	r7, r7, #20
 8005b18:	0f7f      	lsrs	r7, r7, #29
 8005b1a:	42ba      	cmp	r2, r7
 8005b1c:	d10c      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b1e:	7ea3      	ldrb	r3, [r4, #26]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	0edb      	lsrs	r3, r3, #27
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b28:	1c52      	adds	r2, r2, #1
 8005b2a:	0750      	lsls	r0, r2, #29
 8005b2c:	0f40      	lsrs	r0, r0, #29
 8005b2e:	72c8      	strb	r0, [r1, #11]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	7146      	strb	r6, [r0, #5]
 8005b36:	e011      	b.n	8005b5c <USBPD_PRL_SendMessage+0x3b0>
 8005b38:	210d      	movs	r1, #13
 8005b3a:	7141      	strb	r1, [r0, #5]
 8005b3c:	e059      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b3e:	7ac8      	ldrb	r0, [r1, #11]
 8005b40:	1c40      	adds	r0, r0, #1
 8005b42:	0740      	lsls	r0, r0, #29
 8005b44:	0f40      	lsrs	r0, r0, #29
 8005b46:	72c8      	strb	r0, [r1, #11]
 8005b48:	9800      	ldr	r0, [sp, #0]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	7146      	strb	r6, [r0, #5]
 8005b4e:	8ba1      	ldrh	r1, [r4, #28]
 8005b50:	485a      	ldr	r0, [pc, #360]	@ (8005cbc <.text_33>)
 8005b52:	4008      	ands	r0, r1
 8005b54:	83a0      	strh	r0, [r4, #28]
 8005b56:	495a      	ldr	r1, [pc, #360]	@ (8005cc0 <.text_34>)
 8005b58:	4001      	ands	r1, r0
 8005b5a:	83a1      	strh	r1, [r4, #28]
 8005b5c:	2505      	movs	r5, #5
 8005b5e:	e048      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b60:	78a0      	ldrb	r0, [r4, #2]
 8005b62:	1c40      	adds	r0, r0, #1
 8005b64:	70a0      	strb	r0, [r4, #2]
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	18a2      	adds	r2, r4, r2
 8005b6a:	8a52      	ldrh	r2, [r2, #18]
 8005b6c:	0613      	lsls	r3, r2, #24
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <USBPD_PRL_SendMessage+0x3cc>
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <USBPD_PRL_SendMessage+0x3ce>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	0bd2      	lsrs	r2, r2, #15
 8005b7c:	d006      	beq.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b7e:	8ba2      	ldrh	r2, [r4, #28]
 8005b80:	0bd4      	lsrs	r4, r2, #15
 8005b82:	d103      	bne.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	0dd2      	lsrs	r2, r2, #23
 8005b88:	2a1b      	cmp	r2, #27
 8005b8a:	d207      	bcs.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b8c:	b2c0      	uxtb	r0, r0
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d304      	bcc.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b92:	2010      	movs	r0, #16
 8005b94:	9900      	ldr	r1, [sp, #0]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	7148      	strb	r0, [r1, #5]
 8005b9a:	e02a      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b9c:	9800      	ldr	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	7146      	strb	r6, [r0, #5]
 8005ba2:	2507      	movs	r5, #7
 8005ba4:	7ac8      	ldrb	r0, [r1, #11]
 8005ba6:	1c40      	adds	r0, r0, #1
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4002      	ands	r2, r0
 8005bac:	72ca      	strb	r2, [r1, #11]
 8005bae:	e020      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	7141      	strb	r1, [r0, #5]
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	7420      	strb	r0, [r4, #16]
 8005bb8:	493f      	ldr	r1, [pc, #252]	@ (8005cb8 <.text_32>)
 8005bba:	4668      	mov	r0, sp
 8005bbc:	7940      	ldrb	r0, [r0, #5]
 8005bbe:	f00c feb1 	bl	8012924 <USBPD_TIM_Start>
 8005bc2:	89e3      	ldrh	r3, [r4, #14]
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	7901      	ldrb	r1, [r0, #4]
 8005bca:	7f00      	ldrb	r0, [r0, #28]
 8005bcc:	f00b fab7 	bl	801113e <USBPD_PHY_SendMessage>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 8005bd4:	9000      	str	r0, [sp, #0]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	4668      	mov	r0, sp
 8005bda:	7902      	ldrb	r2, [r0, #4]
 8005bdc:	7f01      	ldrb	r1, [r0, #28]
 8005bde:	2002      	movs	r0, #2
 8005be0:	4c34      	ldr	r4, [pc, #208]	@ (8005cb4 <.text_31>)
 8005be2:	6824      	ldr	r4, [r4, #0]
 8005be4:	47a0      	blx	r4
 8005be6:	e004      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005be8:	7146      	strb	r6, [r0, #5]
 8005bea:	2506      	movs	r5, #6
 8005bec:	e001      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bee:	7146      	strb	r6, [r0, #5]
 8005bf0:	2510      	movs	r5, #16
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	b009      	add	sp, #36	@ 0x24
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf8 <.text_24>:
 8005bf8:	0000ffe0 	.word	0x0000ffe0

08005bfc <.text_25>:
 8005bfc:	00008fff 	.word	0x00008fff

08005c00 <USBPD_PRL_ResetRequestProcess>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	0005      	movs	r5, r0
 8005c04:	000e      	movs	r6, r1
 8005c06:	482f      	ldr	r0, [pc, #188]	@ (8005cc4 <.text_35>)
 8005c08:	00a9      	lsls	r1, r5, #2
 8005c0a:	1840      	adds	r0, r0, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	2700      	movs	r7, #0
 8005c12:	70e7      	strb	r7, [r4, #3]
 8005c14:	72e7      	strb	r7, [r4, #11]
 8005c16:	7327      	strb	r7, [r4, #12]
 8005c18:	7367      	strb	r7, [r4, #13]
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	1da0      	adds	r0, r4, #6
 8005c20:	f013 fe22 	bl	8019868 <__aeabi_memset>
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	7147      	strb	r7, [r0, #5]
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	0032      	movs	r2, r6
 8005c30:	0029      	movs	r1, r5
 8005c32:	2002      	movs	r0, #2
 8005c34:	4f1f      	ldr	r7, [pc, #124]	@ (8005cb4 <.text_31>)
 8005c36:	683f      	ldr	r7, [r7, #0]
 8005c38:	47b8      	blx	r7
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f849 	bl	8005cd2 <PRL_DisableRX>
 8005c40:	0031      	movs	r1, r6
 8005c42:	0028      	movs	r0, r5
 8005c44:	f00b fa65 	bl	8011112 <USBPD_PHY_ResetRequest>
 8005c48:	2005      	movs	r0, #5
 8005c4a:	7120      	strb	r0, [r4, #4]
 8005c4c:	78e0      	ldrb	r0, [r4, #3]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	d002      	beq.n	8005c58 <USBPD_PRL_ResetRequestProcess+0x58>
 8005c52:	7920      	ldrb	r0, [r4, #4]
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f9      	bne.n	8005c4c <USBPD_PRL_ResetRequestProcess+0x4c>
 8005c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005c5a <USBDPD_PRL_BistCarrierEyeMode>:
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	2905      	cmp	r1, #5
 8005c5e:	d102      	bne.n	8005c66 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005c60:	f00b fa8c 	bl	801117c <USBPD_PHY_Send_BIST_Pattern>
 8005c64:	bd02      	pop	{r1, pc}
 8005c66:	2010      	movs	r0, #16
 8005c68:	bd02      	pop	{r1, pc}

08005c6a <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	2905      	cmp	r1, #5
 8005c6e:	d103      	bne.n	8005c78 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005c70:	2107      	movs	r1, #7
 8005c72:	f00b fa93 	bl	801119c <USBPD_PHY_ExitTransmit>
 8005c76:	bd02      	pop	{r1, pc}
 8005c78:	2010      	movs	r0, #16
 8005c7a:	bd02      	pop	{r1, pc}

08005c7c <USBPD_PRL_Reset>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	0004      	movs	r4, r0
 8005c80:	4810      	ldr	r0, [pc, #64]	@ (8005cc4 <.text_35>)
 8005c82:	00a1      	lsls	r1, r4, #2
 8005c84:	5845      	ldr	r5, [r0, r1]
 8005c86:	2600      	movs	r6, #0
 8005c88:	716e      	strb	r6, [r5, #5]
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	712e      	strb	r6, [r5, #4]
 8005c8e:	72ee      	strb	r6, [r5, #11]
 8005c90:	732e      	strb	r6, [r5, #12]
 8005c92:	736e      	strb	r6, [r5, #13]
 8005c94:	220f      	movs	r2, #15
 8005c96:	2103      	movs	r1, #3
 8005c98:	1da8      	adds	r0, r5, #6
 8005c9a:	f013 fde5 	bl	8019868 <__aeabi_memset>
 8005c9e:	2025      	movs	r0, #37	@ 0x25
 8005ca0:	542e      	strb	r6, [r5, r0]
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f00b fa2b 	bl	80110fe <USBPD_PHY_Reset>
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f00b fae2 	bl	8011272 <USBPD_PHY_EnableRX>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <.text_30>:
 8005cb0:	0000f1ff 	.word	0x0000f1ff

08005cb4 <.text_31>:
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <.text_32>:
 8005cb8:	00002710 	.word	0x00002710

08005cbc <.text_33>:
 8005cbc:	000087ff 	.word	0x000087ff

08005cc0 <.text_34>:
 8005cc0:	0000fbff 	.word	0x0000fbff

08005cc4 <.text_35>:
 8005cc4:	20000230 	.word	0x20000230

08005cc8 <USBPD_PRL_Stop>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	f00b fae1 	bl	8011290 <USBPD_PHY_DisableRX>
 8005cce:	bd01      	pop	{r0, pc}

08005cd0 <USBPD_PRL_DeInit>:
 8005cd0:	4770      	bx	lr

08005cd2 <PRL_DisableRX>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	f00b fadc 	bl	8011290 <USBPD_PHY_DisableRX>
 8005cd8:	bd01      	pop	{r0, pc}
	...

08005cdc <PRL_Received>:
 8005cdc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005cde:	b089      	sub	sp, #36	@ 0x24
 8005ce0:	a809      	add	r0, sp, #36	@ 0x24
 8005ce2:	7805      	ldrb	r5, [r0, #0]
 8005ce4:	48d0      	ldr	r0, [pc, #832]	@ (8006028 <PRL_Received+0x34c>)
 8005ce6:	00a9      	lsls	r1, r5, #2
 8005ce8:	1846      	adds	r6, r0, r1
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f00b f9fb 	bl	80110e8 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005cf2:	a909      	add	r1, sp, #36	@ 0x24
 8005cf4:	7809      	ldrb	r1, [r1, #0]
 8005cf6:	0049      	lsls	r1, r1, #1
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	7011      	strb	r1, [r2, #0]
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7800      	ldrb	r0, [r0, #0]
 8005d02:	f00c fe0f 	bl	8012924 <USBPD_TIM_Start>
 8005d06:	2030      	movs	r0, #48	@ 0x30
 8005d08:	5c20      	ldrb	r0, [r4, r0]
 8005d0a:	2131      	movs	r1, #49	@ 0x31
 8005d0c:	5c61      	ldrb	r1, [r4, r1]
 8005d0e:	0209      	lsls	r1, r1, #8
 8005d10:	1840      	adds	r0, r0, r1
 8005d12:	4669      	mov	r1, sp
 8005d14:	8088      	strh	r0, [r1, #4]
 8005d16:	4668      	mov	r0, sp
 8005d18:	8880      	ldrh	r0, [r0, #4]
 8005d1a:	0440      	lsls	r0, r0, #17
 8005d1c:	0f40      	lsrs	r0, r0, #29
 8005d1e:	0080      	lsls	r0, r0, #2
 8005d20:	9005      	str	r0, [sp, #20]
 8005d22:	1c80      	adds	r0, r0, #2
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	48c1      	ldr	r0, [pc, #772]	@ (800602c <.text_40>)
 8005d28:	8889      	ldrh	r1, [r1, #4]
 8005d2a:	4001      	ands	r1, r0
 8005d2c:	2901      	cmp	r1, #1
 8005d2e:	d116      	bne.n	8005d5e <PRL_Received+0x82>
 8005d30:	0068      	lsls	r0, r5, #1
 8005d32:	1c40      	adds	r0, r0, #1
 8005d34:	b2c0      	uxtb	r0, r0
 8005d36:	f00c fe63 	bl	8012a00 <USBPD_TIM_IsExpired>
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d04c      	beq.n	8005dd8 <PRL_Received+0xfc>
 8005d3e:	200b      	movs	r0, #11
 8005d40:	6831      	ldr	r1, [r6, #0]
 8005d42:	7148      	strb	r0, [r1, #5]
 8005d44:	4668      	mov	r0, sp
 8005d46:	8880      	ldrh	r0, [r0, #4]
 8005d48:	8360      	strh	r0, [r4, #26]
 8005d4a:	9807      	ldr	r0, [sp, #28]
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3330      	adds	r3, #48	@ 0x30
 8005d52:	a80a      	add	r0, sp, #40	@ 0x28
 8005d54:	7802      	ldrb	r2, [r0, #0]
 8005d56:	a809      	add	r0, sp, #36	@ 0x24
 8005d58:	7801      	ldrb	r1, [r0, #0]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e15f      	b.n	800601e <PRL_Received+0x342>
 8005d5e:	49b4      	ldr	r1, [pc, #720]	@ (8006030 <.text_41>)
 8005d60:	880f      	ldrh	r7, [r1, #0]
 8005d62:	2601      	movs	r6, #1
 8005d64:	72a6      	strb	r6, [r4, #10]
 8005d66:	a90a      	add	r1, sp, #40	@ 0x28
 8005d68:	7809      	ldrb	r1, [r1, #0]
 8005d6a:	1861      	adds	r1, r4, r1
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4669      	mov	r1, sp
 8005d72:	8889      	ldrh	r1, [r1, #4]
 8005d74:	4008      	ands	r0, r1
 8005d76:	280d      	cmp	r0, #13
 8005d78:	d106      	bne.n	8005d88 <PRL_Received+0xac>
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	72cd      	strb	r5, [r1, #11]
 8005d7e:	220f      	movs	r2, #15
 8005d80:	2103      	movs	r1, #3
 8005d82:	1da0      	adds	r0, r4, #6
 8005d84:	f013 fd70 	bl	8019868 <__aeabi_memset>
 8005d88:	a80a      	add	r0, sp, #40	@ 0x28
 8005d8a:	7800      	ldrb	r0, [r0, #0]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d10d      	bne.n	8005dac <PRL_Received+0xd0>
 8005d90:	8a61      	ldrh	r1, [r4, #18]
 8005d92:	094a      	lsrs	r2, r1, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	4010      	ands	r0, r2
 8005d98:	0a0a      	lsrs	r2, r1, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	4abf      	ldr	r2, [pc, #764]	@ (800609c <.text_44>)
 8005da0:	403a      	ands	r2, r7
 8005da2:	0143      	lsls	r3, r0, #5
 8005da4:	4313      	orrs	r3, r2
 8005da6:	0208      	lsls	r0, r1, #8
 8005da8:	4318      	orrs	r0, r3
 8005daa:	e001      	b.n	8005db0 <PRL_Received+0xd4>
 8005dac:	48bc      	ldr	r0, [pc, #752]	@ (80060a0 <.text_45>)
 8005dae:	4038      	ands	r0, r7
 8005db0:	49bc      	ldr	r1, [pc, #752]	@ (80060a4 <.text_46>)
 8005db2:	4001      	ands	r1, r0
 8005db4:	4668      	mov	r0, sp
 8005db6:	8880      	ldrh	r0, [r0, #4]
 8005db8:	22e0      	movs	r2, #224	@ 0xe0
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	4002      	ands	r2, r0
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	2040      	movs	r0, #64	@ 0x40
 8005dc2:	4310      	orrs	r0, r2
 8005dc4:	7620      	strb	r0, [r4, #24]
 8005dc6:	0a00      	lsrs	r0, r0, #8
 8005dc8:	7660      	strb	r0, [r4, #25]
 8005dca:	a80a      	add	r0, sp, #40	@ 0x28
 8005dcc:	7801      	ldrb	r1, [r0, #0]
 8005dce:	a809      	add	r0, sp, #36	@ 0x24
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fa ff49 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d100      	bne.n	8005ddc <PRL_Received+0x100>
 8005dda:	e123      	b.n	8006024 <PRL_Received+0x348>
 8005ddc:	7426      	strb	r6, [r4, #16]
 8005dde:	4668      	mov	r0, sp
 8005de0:	7800      	ldrb	r0, [r0, #0]
 8005de2:	f00c fe0d 	bl	8012a00 <USBPD_TIM_IsExpired>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f9      	beq.n	8005dde <PRL_Received+0x102>
 8005dea:	2302      	movs	r3, #2
 8005dec:	0022      	movs	r2, r4
 8005dee:	3218      	adds	r2, #24
 8005df0:	a80a      	add	r0, sp, #40	@ 0x28
 8005df2:	7801      	ldrb	r1, [r0, #0]
 8005df4:	a809      	add	r0, sp, #36	@ 0x24
 8005df6:	7800      	ldrb	r0, [r0, #0]
 8005df8:	f00b f9a1 	bl	801113e <USBPD_PHY_SendMessage>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	a80a      	add	r0, sp, #40	@ 0x28
 8005e00:	7800      	ldrb	r0, [r0, #0]
 8005e02:	7260      	strb	r0, [r4, #9]
 8005e04:	0021      	movs	r1, r4
 8005e06:	3130      	adds	r1, #48	@ 0x30
 8005e08:	a809      	add	r0, sp, #36	@ 0x24
 8005e0a:	7800      	ldrb	r0, [r0, #0]
 8005e0c:	f7fa ff60 	bl	8000cd0 <PE_PRL_PostReceiveEventCopy>
 8005e10:	2033      	movs	r0, #51	@ 0x33
 8005e12:	5c20      	ldrb	r0, [r4, r0]
 8005e14:	2132      	movs	r1, #50	@ 0x32
 8005e16:	5c61      	ldrb	r1, [r4, r1]
 8005e18:	0203      	lsls	r3, r0, #8
 8005e1a:	18ca      	adds	r2, r1, r3
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	80da      	strh	r2, [r3, #6]
 8005e20:	466a      	mov	r2, sp
 8005e22:	8892      	ldrh	r2, [r2, #4]
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	0f52      	lsrs	r2, r2, #29
 8005e28:	81da      	strh	r2, [r3, #14]
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	811a      	strh	r2, [r3, #8]
 8005e34:	466a      	mov	r2, sp
 8005e36:	88d2      	ldrh	r2, [r2, #6]
 8005e38:	0bd2      	lsrs	r2, r2, #15
 8005e3a:	819a      	strh	r2, [r3, #12]
 8005e3c:	466a      	mov	r2, sp
 8005e3e:	8892      	ldrh	r2, [r2, #4]
 8005e40:	0bd2      	lsrs	r2, r2, #15
 8005e42:	815a      	strh	r2, [r3, #10]
 8005e44:	d007      	beq.n	8005e56 <PRL_Received+0x17a>
 8005e46:	466a      	mov	r2, sp
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d103      	bne.n	8005e56 <PRL_Received+0x17a>
 8005e4e:	4668      	mov	r0, sp
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	1d00      	adds	r0, r0, #4
 8005e54:	e01b      	b.n	8005e8e <PRL_Received+0x1b2>
 8005e56:	7822      	ldrb	r2, [r4, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d117      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	89d2      	ldrh	r2, [r2, #14]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d013      	beq.n	8005e8c <PRL_Received+0x1b0>
 8005e64:	466a      	mov	r2, sp
 8005e66:	8892      	ldrh	r2, [r2, #4]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	0ed2      	lsrs	r2, r2, #27
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d10d      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e70:	0200      	lsls	r0, r0, #8
 8005e72:	1808      	adds	r0, r1, r0
 8005e74:	2134      	movs	r1, #52	@ 0x34
 8005e76:	5c61      	ldrb	r1, [r4, r1]
 8005e78:	0409      	lsls	r1, r1, #16
 8005e7a:	1840      	adds	r0, r0, r1
 8005e7c:	2135      	movs	r1, #53	@ 0x35
 8005e7e:	5c61      	ldrb	r1, [r4, r1]
 8005e80:	0609      	lsls	r1, r1, #24
 8005e82:	1840      	adds	r0, r0, r1
 8005e84:	0f00      	lsrs	r0, r0, #28
 8005e86:	2808      	cmp	r0, #8
 8005e88:	d100      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e8a:	7026      	strb	r6, [r4, #0]
 8005e8c:	9807      	ldr	r0, [sp, #28]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	0023      	movs	r3, r4
 8005e92:	3330      	adds	r3, #48	@ 0x30
 8005e94:	a80a      	add	r0, sp, #40	@ 0x28
 8005e96:	7802      	ldrb	r2, [r0, #0]
 8005e98:	a809      	add	r0, sp, #36	@ 0x24
 8005e9a:	7801      	ldrb	r1, [r0, #0]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4fc1      	ldr	r7, [pc, #772]	@ (80061a4 <.text_51>)
 8005ea0:	683f      	ldr	r7, [r7, #0]
 8005ea2:	47b8      	blx	r7
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d10b      	bne.n	8005ec2 <PRL_Received+0x1e6>
 8005eaa:	2002      	movs	r0, #2
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	a80a      	add	r0, sp, #40	@ 0x28
 8005eb4:	7802      	ldrb	r2, [r0, #0]
 8005eb6:	a809      	add	r0, sp, #36	@ 0x24
 8005eb8:	7801      	ldrb	r1, [r0, #0]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4fb9      	ldr	r7, [pc, #740]	@ (80061a4 <.text_51>)
 8005ebe:	683f      	ldr	r7, [r7, #0]
 8005ec0:	47b8      	blx	r7
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	8880      	ldrh	r0, [r0, #4]
 8005ec6:	0a40      	lsrs	r0, r0, #9
 8005ec8:	2107      	movs	r1, #7
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
 8005ece:	2307      	movs	r3, #7
 8005ed0:	4003      	ands	r3, r0
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <PRL_Received+0x202>
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d100      	bne.n	8005ede <PRL_Received+0x202>
 8005edc:	e08f      	b.n	8005ffe <PRL_Received+0x322>
 8005ede:	4001      	ands	r1, r0
 8005ee0:	9804      	ldr	r0, [sp, #16]
 8005ee2:	7181      	strb	r1, [r0, #6]
 8005ee4:	4668      	mov	r0, sp
 8005ee6:	8880      	ldrh	r0, [r0, #4]
 8005ee8:	8420      	strh	r0, [r4, #32]
 8005eea:	4668      	mov	r0, sp
 8005eec:	8940      	ldrh	r0, [r0, #10]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d043      	beq.n	8005f7a <PRL_Received+0x29e>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	8980      	ldrh	r0, [r0, #12]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <PRL_Received+0x29e>
 8005efa:	4668      	mov	r0, sp
 8005efc:	88c0      	ldrh	r0, [r0, #6]
 8005efe:	83e0      	strh	r0, [r4, #30]
 8005f00:	4668      	mov	r0, sp
 8005f02:	88c0      	ldrh	r0, [r0, #6]
 8005f04:	0440      	lsls	r0, r0, #17
 8005f06:	0f01      	lsrs	r1, r0, #28
 8005f08:	201a      	movs	r0, #26
 8005f0a:	4348      	muls	r0, r1
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	1e89      	subs	r1, r1, #2
 8005f10:	466a      	mov	r2, sp
 8005f12:	88d2      	ldrh	r2, [r2, #6]
 8005f14:	23f8      	movs	r3, #248	@ 0xf8
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <PRL_Received+0x2a0>
 8005f1c:	466a      	mov	r2, sp
 8005f1e:	88d2      	ldrh	r2, [r2, #6]
 8005f20:	05d2      	lsls	r2, r2, #23
 8005f22:	0dd2      	lsrs	r2, r2, #23
 8005f24:	466b      	mov	r3, sp
 8005f26:	89db      	ldrh	r3, [r3, #14]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d30a      	bcc.n	8005f42 <PRL_Received+0x266>
 8005f2c:	2a1a      	cmp	r2, #26
 8005f2e:	d811      	bhi.n	8005f54 <PRL_Received+0x278>
 8005f30:	e007      	b.n	8005f42 <PRL_Received+0x266>
 8005f32:	0023      	movs	r3, r4
 8005f34:	3334      	adds	r3, #52	@ 0x34
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f3a:	182f      	adds	r7, r5, r0
 8005f3c:	55f3      	strb	r3, [r6, r7]
 8005f3e:	1c6d      	adds	r5, r5, #1
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	428d      	cmp	r5, r1
 8005f44:	d3f5      	bcc.n	8005f32 <PRL_Received+0x256>
 8005f46:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005f48:	4291      	cmp	r1, r2
 8005f4a:	d301      	bcc.n	8005f50 <PRL_Received+0x274>
 8005f4c:	4669      	mov	r1, sp
 8005f4e:	8909      	ldrh	r1, [r1, #8]
 8005f50:	8001      	strh	r1, [r0, #0]
 8005f52:	e00c      	b.n	8005f6e <PRL_Received+0x292>
 8005f54:	2025      	movs	r0, #37	@ 0x25
 8005f56:	5426      	strb	r6, [r4, r0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	3034      	adds	r0, #52	@ 0x34
 8005f5c:	5d40      	ldrb	r0, [r0, r5]
 8005f5e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005f60:	5548      	strb	r0, [r1, r5]
 8005f62:	1c6d      	adds	r5, r5, #1
 8005f64:	2d1a      	cmp	r5, #26
 8005f66:	d3f7      	bcc.n	8005f58 <PRL_Received+0x27c>
 8005f68:	201a      	movs	r0, #26
 8005f6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005f6c:	8008      	strh	r0, [r1, #0]
 8005f6e:	a80a      	add	r0, sp, #40	@ 0x28
 8005f70:	7801      	ldrb	r1, [r0, #0]
 8005f72:	a809      	add	r0, sp, #36	@ 0x24
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	f7fa fe77 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005f7a:	e053      	b.n	8006024 <PRL_Received+0x348>
 8005f7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	1e9b      	subs	r3, r3, #2
 8005f86:	27ff      	movs	r7, #255	@ 0xff
 8005f88:	1dbf      	adds	r7, r7, #6
 8005f8a:	321a      	adds	r2, #26
 8005f8c:	42ba      	cmp	r2, r7
 8005f8e:	d21b      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f90:	466a      	mov	r2, sp
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d217      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f98:	2225      	movs	r2, #37	@ 0x25
 8005f9a:	54a6      	strb	r6, [r4, r2]
 8005f9c:	e007      	b.n	8005fae <PRL_Received+0x2d2>
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	3234      	adds	r2, #52	@ 0x34
 8005fa2:	5d52      	ldrb	r2, [r2, r5]
 8005fa4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fa6:	182e      	adds	r6, r5, r0
 8005fa8:	559a      	strb	r2, [r3, r6]
 8005faa:	1c6d      	adds	r5, r5, #1
 8005fac:	b2ad      	uxth	r5, r5
 8005fae:	428d      	cmp	r5, r1
 8005fb0:	d3f5      	bcc.n	8005f9e <PRL_Received+0x2c2>
 8005fb2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005fb4:	8801      	ldrh	r1, [r0, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	8892      	ldrh	r2, [r2, #4]
 8005fba:	0a92      	lsrs	r2, r2, #10
 8005fbc:	231c      	movs	r3, #28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e9a      	subs	r2, r3, #2
 8005fc2:	1889      	adds	r1, r1, r2
 8005fc4:	8001      	strh	r1, [r0, #0]
 8005fc6:	e02d      	b.n	8006024 <PRL_Received+0x348>
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	d215      	bcs.n	8005ff8 <PRL_Received+0x31c>
 8005fcc:	466a      	mov	r2, sp
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d311      	bcc.n	8005ff8 <PRL_Received+0x31c>
 8005fd4:	2225      	movs	r2, #37	@ 0x25
 8005fd6:	54a6      	strb	r6, [r4, r2]
 8005fd8:	e007      	b.n	8005fea <PRL_Received+0x30e>
 8005fda:	0022      	movs	r2, r4
 8005fdc:	3234      	adds	r2, #52	@ 0x34
 8005fde:	5d52      	ldrb	r2, [r2, r5]
 8005fe0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fe2:	182e      	adds	r6, r5, r0
 8005fe4:	559a      	strb	r2, [r3, r6]
 8005fe6:	1c6d      	adds	r5, r5, #1
 8005fe8:	b2ad      	uxth	r5, r5
 8005fea:	428d      	cmp	r5, r1
 8005fec:	d3f5      	bcc.n	8005fda <PRL_Received+0x2fe>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	8900      	ldrh	r0, [r0, #8]
 8005ff2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ff4:	8008      	strh	r0, [r1, #0]
 8005ff6:	e015      	b.n	8006024 <PRL_Received+0x348>
 8005ff8:	2025      	movs	r0, #37	@ 0x25
 8005ffa:	5425      	strb	r5, [r4, r0]
 8005ffc:	e012      	b.n	8006024 <PRL_Received+0x348>
 8005ffe:	20ff      	movs	r0, #255	@ 0xff
 8006000:	7260      	strb	r0, [r4, #9]
 8006002:	7425      	strb	r5, [r4, #16]
 8006004:	a809      	add	r0, sp, #36	@ 0x24
 8006006:	7800      	ldrb	r0, [r0, #0]
 8006008:	f7fa fe4a 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 800600c:	72a5      	strb	r5, [r4, #10]
 800600e:	2017      	movs	r0, #23
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	bf00      	nop
 8006014:	a367      	add	r3, pc, #412	@ (adr r3, 80061b4 <.text_55>)
 8006016:	2200      	movs	r2, #0
 8006018:	a809      	add	r0, sp, #36	@ 0x24
 800601a:	7801      	ldrb	r1, [r0, #0]
 800601c:	2006      	movs	r0, #6
 800601e:	4c61      	ldr	r4, [pc, #388]	@ (80061a4 <.text_51>)
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	47a0      	blx	r4
 8006024:	b00b      	add	sp, #44	@ 0x2c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	20000230 	.word	0x20000230

0800602c <.text_40>:
 800602c:	0000f01f 	.word	0x0000f01f

08006030 <.text_41>:
 8006030:	080199cc 	.word	0x080199cc

08006034 <PRL_ResetIndicate>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0004      	movs	r4, r0
 8006038:	000d      	movs	r5, r1
 800603a:	2d05      	cmp	r5, #5
 800603c:	d119      	bne.n	8006072 <PRL_ResetIndicate+0x3e>
 800603e:	485a      	ldr	r0, [pc, #360]	@ (80061a8 <.text_52>)
 8006040:	00a1      	lsls	r1, r4, #2
 8006042:	1840      	adds	r0, r0, r1
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	6807      	ldr	r7, [r0, #0]
 8006048:	2600      	movs	r6, #0
 800604a:	2000      	movs	r0, #0
 800604c:	b2c2      	uxtb	r2, r0
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	72d6      	strb	r6, [r2, #11]
 8006052:	1c40      	adds	r0, r0, #1
 8006054:	b2c1      	uxtb	r1, r0
 8006056:	2903      	cmp	r1, #3
 8006058:	d3f8      	bcc.n	800604c <PRL_ResetIndicate+0x18>
 800605a:	220f      	movs	r2, #15
 800605c:	2103      	movs	r1, #3
 800605e:	1db8      	adds	r0, r7, #6
 8006060:	f013 fc02 	bl	8019868 <__aeabi_memset>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	714e      	strb	r6, [r1, #5]
 800606a:	703e      	strb	r6, [r7, #0]
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fe30 	bl	8005cd2 <PRL_DisableRX>
 8006072:	2000      	movs	r0, #0
 8006074:	9000      	str	r0, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	002a      	movs	r2, r5
 800607a:	0021      	movs	r1, r4
 800607c:	2001      	movs	r0, #1
 800607e:	4e49      	ldr	r6, [pc, #292]	@ (80061a4 <.text_51>)
 8006080:	6836      	ldr	r6, [r6, #0]
 8006082:	47b0      	blx	r6
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f7fa fce6 	bl	8000a58 <PE_PRL_ResetReceived>
 800608c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800608e <PRL_ResetCompleted>:
 800608e:	2101      	movs	r1, #1
 8006090:	4a45      	ldr	r2, [pc, #276]	@ (80061a8 <.text_52>)
 8006092:	0080      	lsls	r0, r0, #2
 8006094:	5810      	ldr	r0, [r2, r0]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	4770      	bx	lr
	...

0800609c <.text_44>:
 800609c:	0000fedf 	.word	0x0000fedf

080060a0 <.text_45>:
 80060a0:	0000feff 	.word	0x0000feff

080060a4 <.text_46>:
 80060a4:	0000f13f 	.word	0x0000f13f

080060a8 <PRL_BistCompleted>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	f7fa fd01 	bl	8000ab0 <PE_PRL_BistCompleted>
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <PRL_TxCompleted>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	4a3c      	ldr	r2, [pc, #240]	@ (80061a8 <.text_52>)
 80060b6:	00a3      	lsls	r3, r4, #2
 80060b8:	58d6      	ldr	r6, [r2, r3]
 80060ba:	2500      	movs	r5, #0
 80060bc:	7c32      	ldrb	r2, [r6, #16]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d002      	beq.n	80060c8 <PRL_TxCompleted+0x18>
 80060c2:	2a02      	cmp	r2, #2
 80060c4:	d009      	beq.n	80060da <PRL_TxCompleted+0x2a>
 80060c6:	e010      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <PRL_TxCompleted+0x22>
 80060cc:	f7fa fe1a 	bl	8000d04 <PE_PRL_PostReceiveEventComplete>
 80060d0:	e001      	b.n	80060d6 <PRL_TxCompleted+0x26>
 80060d2:	f7fa fde5 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 80060d6:	72b5      	strb	r5, [r6, #10]
 80060d8:	e007      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060da:	f00a fff7 	bl	80110cc <USBPD_PHY_GetRetryTimerValue>
 80060de:	0001      	movs	r1, r0
 80060e0:	0060      	lsls	r0, r4, #1
 80060e2:	1c40      	adds	r0, r0, #1
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	f00c fc1d 	bl	8012924 <USBPD_TIM_Start>
 80060ea:	7435      	strb	r5, [r6, #16]
 80060ec:	bd70      	pop	{r4, r5, r6, pc}

080060ee <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4c2d      	ldr	r4, [pc, #180]	@ (80061a8 <.text_52>)
 80060f2:	0080      	lsls	r0, r0, #2
 80060f4:	5820      	ldr	r0, [r4, r0]
 80060f6:	2480      	movs	r4, #128	@ 0x80
 80060f8:	0224      	lsls	r4, r4, #8
 80060fa:	8b85      	ldrh	r5, [r0, #28]
 80060fc:	4e2b      	ldr	r6, [pc, #172]	@ (80061ac <.text_53>)
 80060fe:	402e      	ands	r6, r5
 8006100:	02c9      	lsls	r1, r1, #11
 8006102:	4331      	orrs	r1, r6
 8006104:	25fe      	movs	r5, #254	@ 0xfe
 8006106:	022d      	lsls	r5, r5, #8
 8006108:	400d      	ands	r5, r1
 800610a:	05d1      	lsls	r1, r2, #23
 800610c:	0dc9      	lsrs	r1, r1, #23
 800610e:	4329      	orrs	r1, r5
 8006110:	4321      	orrs	r1, r4
 8006112:	8381      	strh	r1, [r0, #28]
 8006114:	8a41      	ldrh	r1, [r0, #18]
 8006116:	430c      	orrs	r4, r1
 8006118:	8244      	strh	r4, [r0, #18]
 800611a:	4a25      	ldr	r2, [pc, #148]	@ (80061b0 <.text_54>)
 800611c:	4022      	ands	r2, r4
 800611e:	2120      	movs	r1, #32
 8006120:	5c41      	ldrb	r1, [r0, r1]
 8006122:	06c9      	lsls	r1, r1, #27
 8006124:	0ec9      	lsrs	r1, r1, #27
 8006126:	4311      	orrs	r1, r2
 8006128:	8241      	strh	r1, [r0, #18]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	8a41      	ldrh	r1, [r0, #18]
 800612e:	0a09      	lsrs	r1, r1, #8
 8006130:	7059      	strb	r1, [r3, #1]
 8006132:	8b81      	ldrh	r1, [r0, #28]
 8006134:	7099      	strb	r1, [r3, #2]
 8006136:	8b80      	ldrh	r0, [r0, #28]
 8006138:	0a00      	lsrs	r0, r0, #8
 800613a:	70d8      	strb	r0, [r3, #3]
 800613c:	bd70      	pop	{r4, r5, r6, pc}

0800613e <USBPD_PRL_PrepareChunkRequest>:
 800613e:	b510      	push	{r4, lr}
 8006140:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <.text_52>)
 8006142:	0080      	lsls	r0, r0, #2
 8006144:	5810      	ldr	r0, [r2, r0]
 8006146:	8b83      	ldrh	r3, [r0, #28]
 8006148:	2284      	movs	r2, #132	@ 0x84
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	8382      	strh	r2, [r0, #28]
 8006150:	2386      	movs	r3, #134	@ 0x86
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	4013      	ands	r3, r2
 8006156:	8bc2      	ldrh	r2, [r0, #30]
 8006158:	0ad2      	lsrs	r2, r2, #11
 800615a:	1c52      	adds	r2, r2, #1
 800615c:	02d2      	lsls	r2, r2, #11
 800615e:	24f0      	movs	r4, #240	@ 0xf0
 8006160:	01e4      	lsls	r4, r4, #7
 8006162:	4014      	ands	r4, r2
 8006164:	431c      	orrs	r4, r3
 8006166:	8384      	strh	r4, [r0, #28]
 8006168:	8a43      	ldrh	r3, [r0, #18]
 800616a:	2280      	movs	r2, #128	@ 0x80
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	431a      	orrs	r2, r3
 8006170:	0003      	movs	r3, r0
 8006172:	3312      	adds	r3, #18
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	4c0e      	ldr	r4, [pc, #56]	@ (80061b0 <.text_54>)
 8006178:	4014      	ands	r4, r2
 800617a:	2220      	movs	r2, #32
 800617c:	5c82      	ldrb	r2, [r0, r2]
 800617e:	06d2      	lsls	r2, r2, #27
 8006180:	0ed2      	lsrs	r2, r2, #27
 8006182:	4322      	orrs	r2, r4
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	7142      	strb	r2, [r0, #5]
 800618a:	8a43      	ldrh	r3, [r0, #18]
 800618c:	700b      	strb	r3, [r1, #0]
 800618e:	8a43      	ldrh	r3, [r0, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	704b      	strb	r3, [r1, #1]
 8006194:	8b83      	ldrh	r3, [r0, #28]
 8006196:	708b      	strb	r3, [r1, #2]
 8006198:	8b80      	ldrh	r0, [r0, #28]
 800619a:	0a00      	lsrs	r0, r0, #8
 800619c:	70c8      	strb	r0, [r1, #3]
 800619e:	710a      	strb	r2, [r1, #4]
 80061a0:	714a      	strb	r2, [r1, #5]
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <.text_51>:
 80061a4:	20000000 	.word	0x20000000

080061a8 <.text_52>:
 80061a8:	20000230 	.word	0x20000230

080061ac <.text_53>:
 80061ac:	000083ff 	.word	0x000083ff

080061b0 <.text_54>:
 80061b0:	0000ffe0 	.word	0x0000ffe0

080061b4 <.text_55>:
 80061b4:	5f4c5250 	.word	0x5f4c5250
 80061b8:	4e455645 	.word	0x4e455645
 80061bc:	58525f54 	.word	0x58525f54
 80061c0:	5349445f 	.word	0x5349445f
 80061c4:	44524143 	.word	0x44524143
 80061c8:	00004445 	.word	0x00004445

080061cc <__udivsi3>:
 80061cc:	2200      	movs	r2, #0
 80061ce:	0843      	lsrs	r3, r0, #1
 80061d0:	428b      	cmp	r3, r1
 80061d2:	d374      	bcc.n	80062be <__udivsi3+0xf2>
 80061d4:	0903      	lsrs	r3, r0, #4
 80061d6:	428b      	cmp	r3, r1
 80061d8:	d35f      	bcc.n	800629a <__udivsi3+0xce>
 80061da:	0a03      	lsrs	r3, r0, #8
 80061dc:	428b      	cmp	r3, r1
 80061de:	d344      	bcc.n	800626a <__udivsi3+0x9e>
 80061e0:	0b03      	lsrs	r3, r0, #12
 80061e2:	428b      	cmp	r3, r1
 80061e4:	d328      	bcc.n	8006238 <__udivsi3+0x6c>
 80061e6:	0c03      	lsrs	r3, r0, #16
 80061e8:	428b      	cmp	r3, r1
 80061ea:	d30d      	bcc.n	8006208 <__udivsi3+0x3c>
 80061ec:	22ff      	movs	r2, #255	@ 0xff
 80061ee:	0209      	lsls	r1, r1, #8
 80061f0:	ba12      	rev	r2, r2
 80061f2:	0c03      	lsrs	r3, r0, #16
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d302      	bcc.n	80061fe <__udivsi3+0x32>
 80061f8:	1212      	asrs	r2, r2, #8
 80061fa:	0209      	lsls	r1, r1, #8
 80061fc:	d065      	beq.n	80062ca <__udivsi3+0xfe>
 80061fe:	0b03      	lsrs	r3, r0, #12
 8006200:	428b      	cmp	r3, r1
 8006202:	d319      	bcc.n	8006238 <__udivsi3+0x6c>
 8006204:	e000      	b.n	8006208 <__udivsi3+0x3c>
 8006206:	0a09      	lsrs	r1, r1, #8
 8006208:	0bc3      	lsrs	r3, r0, #15
 800620a:	428b      	cmp	r3, r1
 800620c:	d301      	bcc.n	8006212 <__udivsi3+0x46>
 800620e:	03cb      	lsls	r3, r1, #15
 8006210:	1ac0      	subs	r0, r0, r3
 8006212:	4152      	adcs	r2, r2
 8006214:	0b83      	lsrs	r3, r0, #14
 8006216:	428b      	cmp	r3, r1
 8006218:	d301      	bcc.n	800621e <__udivsi3+0x52>
 800621a:	038b      	lsls	r3, r1, #14
 800621c:	1ac0      	subs	r0, r0, r3
 800621e:	4152      	adcs	r2, r2
 8006220:	0b43      	lsrs	r3, r0, #13
 8006222:	428b      	cmp	r3, r1
 8006224:	d301      	bcc.n	800622a <__udivsi3+0x5e>
 8006226:	034b      	lsls	r3, r1, #13
 8006228:	1ac0      	subs	r0, r0, r3
 800622a:	4152      	adcs	r2, r2
 800622c:	0b03      	lsrs	r3, r0, #12
 800622e:	428b      	cmp	r3, r1
 8006230:	d301      	bcc.n	8006236 <__udivsi3+0x6a>
 8006232:	030b      	lsls	r3, r1, #12
 8006234:	1ac0      	subs	r0, r0, r3
 8006236:	4152      	adcs	r2, r2
 8006238:	0ac3      	lsrs	r3, r0, #11
 800623a:	428b      	cmp	r3, r1
 800623c:	d301      	bcc.n	8006242 <__udivsi3+0x76>
 800623e:	02cb      	lsls	r3, r1, #11
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	4152      	adcs	r2, r2
 8006244:	0a83      	lsrs	r3, r0, #10
 8006246:	428b      	cmp	r3, r1
 8006248:	d301      	bcc.n	800624e <__udivsi3+0x82>
 800624a:	028b      	lsls	r3, r1, #10
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	4152      	adcs	r2, r2
 8006250:	0a43      	lsrs	r3, r0, #9
 8006252:	428b      	cmp	r3, r1
 8006254:	d301      	bcc.n	800625a <__udivsi3+0x8e>
 8006256:	024b      	lsls	r3, r1, #9
 8006258:	1ac0      	subs	r0, r0, r3
 800625a:	4152      	adcs	r2, r2
 800625c:	0a03      	lsrs	r3, r0, #8
 800625e:	428b      	cmp	r3, r1
 8006260:	d301      	bcc.n	8006266 <__udivsi3+0x9a>
 8006262:	020b      	lsls	r3, r1, #8
 8006264:	1ac0      	subs	r0, r0, r3
 8006266:	4152      	adcs	r2, r2
 8006268:	d2cd      	bcs.n	8006206 <__udivsi3+0x3a>
 800626a:	09c3      	lsrs	r3, r0, #7
 800626c:	428b      	cmp	r3, r1
 800626e:	d301      	bcc.n	8006274 <__udivsi3+0xa8>
 8006270:	01cb      	lsls	r3, r1, #7
 8006272:	1ac0      	subs	r0, r0, r3
 8006274:	4152      	adcs	r2, r2
 8006276:	0983      	lsrs	r3, r0, #6
 8006278:	428b      	cmp	r3, r1
 800627a:	d301      	bcc.n	8006280 <__udivsi3+0xb4>
 800627c:	018b      	lsls	r3, r1, #6
 800627e:	1ac0      	subs	r0, r0, r3
 8006280:	4152      	adcs	r2, r2
 8006282:	0943      	lsrs	r3, r0, #5
 8006284:	428b      	cmp	r3, r1
 8006286:	d301      	bcc.n	800628c <__udivsi3+0xc0>
 8006288:	014b      	lsls	r3, r1, #5
 800628a:	1ac0      	subs	r0, r0, r3
 800628c:	4152      	adcs	r2, r2
 800628e:	0903      	lsrs	r3, r0, #4
 8006290:	428b      	cmp	r3, r1
 8006292:	d301      	bcc.n	8006298 <__udivsi3+0xcc>
 8006294:	010b      	lsls	r3, r1, #4
 8006296:	1ac0      	subs	r0, r0, r3
 8006298:	4152      	adcs	r2, r2
 800629a:	08c3      	lsrs	r3, r0, #3
 800629c:	428b      	cmp	r3, r1
 800629e:	d301      	bcc.n	80062a4 <__udivsi3+0xd8>
 80062a0:	00cb      	lsls	r3, r1, #3
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	4152      	adcs	r2, r2
 80062a6:	0883      	lsrs	r3, r0, #2
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d301      	bcc.n	80062b0 <__udivsi3+0xe4>
 80062ac:	008b      	lsls	r3, r1, #2
 80062ae:	1ac0      	subs	r0, r0, r3
 80062b0:	4152      	adcs	r2, r2
 80062b2:	0843      	lsrs	r3, r0, #1
 80062b4:	428b      	cmp	r3, r1
 80062b6:	d301      	bcc.n	80062bc <__udivsi3+0xf0>
 80062b8:	004b      	lsls	r3, r1, #1
 80062ba:	1ac0      	subs	r0, r0, r3
 80062bc:	4152      	adcs	r2, r2
 80062be:	1a41      	subs	r1, r0, r1
 80062c0:	d200      	bcs.n	80062c4 <__udivsi3+0xf8>
 80062c2:	4601      	mov	r1, r0
 80062c4:	4152      	adcs	r2, r2
 80062c6:	4610      	mov	r0, r2
 80062c8:	4770      	bx	lr
 80062ca:	e7ff      	b.n	80062cc <__udivsi3+0x100>
 80062cc:	b501      	push	{r0, lr}
 80062ce:	2000      	movs	r0, #0
 80062d0:	f000 f8f0 	bl	80064b4 <__aeabi_idiv0>
 80062d4:	bd02      	pop	{r1, pc}
 80062d6:	46c0      	nop			@ (mov r8, r8)

080062d8 <__aeabi_uidivmod>:
 80062d8:	2900      	cmp	r1, #0
 80062da:	d0f7      	beq.n	80062cc <__udivsi3+0x100>
 80062dc:	e776      	b.n	80061cc <__udivsi3>
 80062de:	4770      	bx	lr

080062e0 <__divsi3>:
 80062e0:	4603      	mov	r3, r0
 80062e2:	430b      	orrs	r3, r1
 80062e4:	d47f      	bmi.n	80063e6 <__divsi3+0x106>
 80062e6:	2200      	movs	r2, #0
 80062e8:	0843      	lsrs	r3, r0, #1
 80062ea:	428b      	cmp	r3, r1
 80062ec:	d374      	bcc.n	80063d8 <__divsi3+0xf8>
 80062ee:	0903      	lsrs	r3, r0, #4
 80062f0:	428b      	cmp	r3, r1
 80062f2:	d35f      	bcc.n	80063b4 <__divsi3+0xd4>
 80062f4:	0a03      	lsrs	r3, r0, #8
 80062f6:	428b      	cmp	r3, r1
 80062f8:	d344      	bcc.n	8006384 <__divsi3+0xa4>
 80062fa:	0b03      	lsrs	r3, r0, #12
 80062fc:	428b      	cmp	r3, r1
 80062fe:	d328      	bcc.n	8006352 <__divsi3+0x72>
 8006300:	0c03      	lsrs	r3, r0, #16
 8006302:	428b      	cmp	r3, r1
 8006304:	d30d      	bcc.n	8006322 <__divsi3+0x42>
 8006306:	22ff      	movs	r2, #255	@ 0xff
 8006308:	0209      	lsls	r1, r1, #8
 800630a:	ba12      	rev	r2, r2
 800630c:	0c03      	lsrs	r3, r0, #16
 800630e:	428b      	cmp	r3, r1
 8006310:	d302      	bcc.n	8006318 <__divsi3+0x38>
 8006312:	1212      	asrs	r2, r2, #8
 8006314:	0209      	lsls	r1, r1, #8
 8006316:	d065      	beq.n	80063e4 <__divsi3+0x104>
 8006318:	0b03      	lsrs	r3, r0, #12
 800631a:	428b      	cmp	r3, r1
 800631c:	d319      	bcc.n	8006352 <__divsi3+0x72>
 800631e:	e000      	b.n	8006322 <__divsi3+0x42>
 8006320:	0a09      	lsrs	r1, r1, #8
 8006322:	0bc3      	lsrs	r3, r0, #15
 8006324:	428b      	cmp	r3, r1
 8006326:	d301      	bcc.n	800632c <__divsi3+0x4c>
 8006328:	03cb      	lsls	r3, r1, #15
 800632a:	1ac0      	subs	r0, r0, r3
 800632c:	4152      	adcs	r2, r2
 800632e:	0b83      	lsrs	r3, r0, #14
 8006330:	428b      	cmp	r3, r1
 8006332:	d301      	bcc.n	8006338 <__divsi3+0x58>
 8006334:	038b      	lsls	r3, r1, #14
 8006336:	1ac0      	subs	r0, r0, r3
 8006338:	4152      	adcs	r2, r2
 800633a:	0b43      	lsrs	r3, r0, #13
 800633c:	428b      	cmp	r3, r1
 800633e:	d301      	bcc.n	8006344 <__divsi3+0x64>
 8006340:	034b      	lsls	r3, r1, #13
 8006342:	1ac0      	subs	r0, r0, r3
 8006344:	4152      	adcs	r2, r2
 8006346:	0b03      	lsrs	r3, r0, #12
 8006348:	428b      	cmp	r3, r1
 800634a:	d301      	bcc.n	8006350 <__divsi3+0x70>
 800634c:	030b      	lsls	r3, r1, #12
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	4152      	adcs	r2, r2
 8006352:	0ac3      	lsrs	r3, r0, #11
 8006354:	428b      	cmp	r3, r1
 8006356:	d301      	bcc.n	800635c <__divsi3+0x7c>
 8006358:	02cb      	lsls	r3, r1, #11
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	4152      	adcs	r2, r2
 800635e:	0a83      	lsrs	r3, r0, #10
 8006360:	428b      	cmp	r3, r1
 8006362:	d301      	bcc.n	8006368 <__divsi3+0x88>
 8006364:	028b      	lsls	r3, r1, #10
 8006366:	1ac0      	subs	r0, r0, r3
 8006368:	4152      	adcs	r2, r2
 800636a:	0a43      	lsrs	r3, r0, #9
 800636c:	428b      	cmp	r3, r1
 800636e:	d301      	bcc.n	8006374 <__divsi3+0x94>
 8006370:	024b      	lsls	r3, r1, #9
 8006372:	1ac0      	subs	r0, r0, r3
 8006374:	4152      	adcs	r2, r2
 8006376:	0a03      	lsrs	r3, r0, #8
 8006378:	428b      	cmp	r3, r1
 800637a:	d301      	bcc.n	8006380 <__divsi3+0xa0>
 800637c:	020b      	lsls	r3, r1, #8
 800637e:	1ac0      	subs	r0, r0, r3
 8006380:	4152      	adcs	r2, r2
 8006382:	d2cd      	bcs.n	8006320 <__divsi3+0x40>
 8006384:	09c3      	lsrs	r3, r0, #7
 8006386:	428b      	cmp	r3, r1
 8006388:	d301      	bcc.n	800638e <__divsi3+0xae>
 800638a:	01cb      	lsls	r3, r1, #7
 800638c:	1ac0      	subs	r0, r0, r3
 800638e:	4152      	adcs	r2, r2
 8006390:	0983      	lsrs	r3, r0, #6
 8006392:	428b      	cmp	r3, r1
 8006394:	d301      	bcc.n	800639a <__divsi3+0xba>
 8006396:	018b      	lsls	r3, r1, #6
 8006398:	1ac0      	subs	r0, r0, r3
 800639a:	4152      	adcs	r2, r2
 800639c:	0943      	lsrs	r3, r0, #5
 800639e:	428b      	cmp	r3, r1
 80063a0:	d301      	bcc.n	80063a6 <__divsi3+0xc6>
 80063a2:	014b      	lsls	r3, r1, #5
 80063a4:	1ac0      	subs	r0, r0, r3
 80063a6:	4152      	adcs	r2, r2
 80063a8:	0903      	lsrs	r3, r0, #4
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d301      	bcc.n	80063b2 <__divsi3+0xd2>
 80063ae:	010b      	lsls	r3, r1, #4
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	4152      	adcs	r2, r2
 80063b4:	08c3      	lsrs	r3, r0, #3
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d301      	bcc.n	80063be <__divsi3+0xde>
 80063ba:	00cb      	lsls	r3, r1, #3
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	4152      	adcs	r2, r2
 80063c0:	0883      	lsrs	r3, r0, #2
 80063c2:	428b      	cmp	r3, r1
 80063c4:	d301      	bcc.n	80063ca <__divsi3+0xea>
 80063c6:	008b      	lsls	r3, r1, #2
 80063c8:	1ac0      	subs	r0, r0, r3
 80063ca:	4152      	adcs	r2, r2
 80063cc:	0843      	lsrs	r3, r0, #1
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d301      	bcc.n	80063d6 <__divsi3+0xf6>
 80063d2:	004b      	lsls	r3, r1, #1
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	4152      	adcs	r2, r2
 80063d8:	1a41      	subs	r1, r0, r1
 80063da:	d200      	bcs.n	80063de <__divsi3+0xfe>
 80063dc:	4601      	mov	r1, r0
 80063de:	4152      	adcs	r2, r2
 80063e0:	4610      	mov	r0, r2
 80063e2:	4770      	bx	lr
 80063e4:	e05d      	b.n	80064a2 <__divsi3+0x1c2>
 80063e6:	0fca      	lsrs	r2, r1, #31
 80063e8:	d000      	beq.n	80063ec <__divsi3+0x10c>
 80063ea:	4249      	negs	r1, r1
 80063ec:	1003      	asrs	r3, r0, #32
 80063ee:	d300      	bcc.n	80063f2 <__divsi3+0x112>
 80063f0:	4240      	negs	r0, r0
 80063f2:	4053      	eors	r3, r2
 80063f4:	2200      	movs	r2, #0
 80063f6:	469c      	mov	ip, r3
 80063f8:	0903      	lsrs	r3, r0, #4
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d32d      	bcc.n	800645a <__divsi3+0x17a>
 80063fe:	0a03      	lsrs	r3, r0, #8
 8006400:	428b      	cmp	r3, r1
 8006402:	d312      	bcc.n	800642a <__divsi3+0x14a>
 8006404:	22fc      	movs	r2, #252	@ 0xfc
 8006406:	0189      	lsls	r1, r1, #6
 8006408:	ba12      	rev	r2, r2
 800640a:	0a03      	lsrs	r3, r0, #8
 800640c:	428b      	cmp	r3, r1
 800640e:	d30c      	bcc.n	800642a <__divsi3+0x14a>
 8006410:	0189      	lsls	r1, r1, #6
 8006412:	1192      	asrs	r2, r2, #6
 8006414:	428b      	cmp	r3, r1
 8006416:	d308      	bcc.n	800642a <__divsi3+0x14a>
 8006418:	0189      	lsls	r1, r1, #6
 800641a:	1192      	asrs	r2, r2, #6
 800641c:	428b      	cmp	r3, r1
 800641e:	d304      	bcc.n	800642a <__divsi3+0x14a>
 8006420:	0189      	lsls	r1, r1, #6
 8006422:	d03a      	beq.n	800649a <__divsi3+0x1ba>
 8006424:	1192      	asrs	r2, r2, #6
 8006426:	e000      	b.n	800642a <__divsi3+0x14a>
 8006428:	0989      	lsrs	r1, r1, #6
 800642a:	09c3      	lsrs	r3, r0, #7
 800642c:	428b      	cmp	r3, r1
 800642e:	d301      	bcc.n	8006434 <__divsi3+0x154>
 8006430:	01cb      	lsls	r3, r1, #7
 8006432:	1ac0      	subs	r0, r0, r3
 8006434:	4152      	adcs	r2, r2
 8006436:	0983      	lsrs	r3, r0, #6
 8006438:	428b      	cmp	r3, r1
 800643a:	d301      	bcc.n	8006440 <__divsi3+0x160>
 800643c:	018b      	lsls	r3, r1, #6
 800643e:	1ac0      	subs	r0, r0, r3
 8006440:	4152      	adcs	r2, r2
 8006442:	0943      	lsrs	r3, r0, #5
 8006444:	428b      	cmp	r3, r1
 8006446:	d301      	bcc.n	800644c <__divsi3+0x16c>
 8006448:	014b      	lsls	r3, r1, #5
 800644a:	1ac0      	subs	r0, r0, r3
 800644c:	4152      	adcs	r2, r2
 800644e:	0903      	lsrs	r3, r0, #4
 8006450:	428b      	cmp	r3, r1
 8006452:	d301      	bcc.n	8006458 <__divsi3+0x178>
 8006454:	010b      	lsls	r3, r1, #4
 8006456:	1ac0      	subs	r0, r0, r3
 8006458:	4152      	adcs	r2, r2
 800645a:	08c3      	lsrs	r3, r0, #3
 800645c:	428b      	cmp	r3, r1
 800645e:	d301      	bcc.n	8006464 <__divsi3+0x184>
 8006460:	00cb      	lsls	r3, r1, #3
 8006462:	1ac0      	subs	r0, r0, r3
 8006464:	4152      	adcs	r2, r2
 8006466:	0883      	lsrs	r3, r0, #2
 8006468:	428b      	cmp	r3, r1
 800646a:	d301      	bcc.n	8006470 <__divsi3+0x190>
 800646c:	008b      	lsls	r3, r1, #2
 800646e:	1ac0      	subs	r0, r0, r3
 8006470:	4152      	adcs	r2, r2
 8006472:	d2d9      	bcs.n	8006428 <__divsi3+0x148>
 8006474:	0843      	lsrs	r3, r0, #1
 8006476:	428b      	cmp	r3, r1
 8006478:	d301      	bcc.n	800647e <__divsi3+0x19e>
 800647a:	004b      	lsls	r3, r1, #1
 800647c:	1ac0      	subs	r0, r0, r3
 800647e:	4152      	adcs	r2, r2
 8006480:	1a41      	subs	r1, r0, r1
 8006482:	d200      	bcs.n	8006486 <__divsi3+0x1a6>
 8006484:	4601      	mov	r1, r0
 8006486:	4663      	mov	r3, ip
 8006488:	4152      	adcs	r2, r2
 800648a:	105b      	asrs	r3, r3, #1
 800648c:	4610      	mov	r0, r2
 800648e:	d301      	bcc.n	8006494 <__divsi3+0x1b4>
 8006490:	4240      	negs	r0, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d500      	bpl.n	8006498 <__divsi3+0x1b8>
 8006496:	4249      	negs	r1, r1
 8006498:	4770      	bx	lr
 800649a:	4663      	mov	r3, ip
 800649c:	105b      	asrs	r3, r3, #1
 800649e:	d300      	bcc.n	80064a2 <__divsi3+0x1c2>
 80064a0:	4240      	negs	r0, r0
 80064a2:	b501      	push	{r0, lr}
 80064a4:	2000      	movs	r0, #0
 80064a6:	f000 f805 	bl	80064b4 <__aeabi_idiv0>
 80064aa:	bd02      	pop	{r1, pc}

080064ac <__aeabi_idivmod>:
 80064ac:	2900      	cmp	r1, #0
 80064ae:	d0f8      	beq.n	80064a2 <__divsi3+0x1c2>
 80064b0:	e716      	b.n	80062e0 <__divsi3>
 80064b2:	4770      	bx	lr

080064b4 <__aeabi_idiv0>:
 80064b4:	4770      	bx	lr
 80064b6:	46c0      	nop			@ (mov r8, r8)

080064b8 <__aeabi_d2uiz>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	2200      	movs	r2, #0
 80064bc:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <__aeabi_d2uiz+0x38>)
 80064be:	0004      	movs	r4, r0
 80064c0:	000d      	movs	r5, r1
 80064c2:	f001 fab3 	bl	8007a2c <__aeabi_dcmpge>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d104      	bne.n	80064d4 <__aeabi_d2uiz+0x1c>
 80064ca:	0020      	movs	r0, r4
 80064cc:	0029      	movs	r1, r5
 80064ce:	f001 fa19 	bl	8007904 <__aeabi_d2iz>
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <__aeabi_d2uiz+0x38>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	0020      	movs	r0, r4
 80064da:	0029      	movs	r1, r5
 80064dc:	f000 fe08 	bl	80070f0 <__aeabi_dsub>
 80064e0:	f001 fa10 	bl	8007904 <__aeabi_d2iz>
 80064e4:	2380      	movs	r3, #128	@ 0x80
 80064e6:	061b      	lsls	r3, r3, #24
 80064e8:	469c      	mov	ip, r3
 80064ea:	4460      	add	r0, ip
 80064ec:	e7f1      	b.n	80064d2 <__aeabi_d2uiz+0x1a>
 80064ee:	46c0      	nop			@ (mov r8, r8)
 80064f0:	41e00000 	.word	0x41e00000

080064f4 <__aeabi_ddiv>:
 80064f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f6:	46de      	mov	lr, fp
 80064f8:	4645      	mov	r5, r8
 80064fa:	4657      	mov	r7, sl
 80064fc:	464e      	mov	r6, r9
 80064fe:	b5e0      	push	{r5, r6, r7, lr}
 8006500:	b087      	sub	sp, #28
 8006502:	9200      	str	r2, [sp, #0]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	030b      	lsls	r3, r1, #12
 8006508:	0b1b      	lsrs	r3, r3, #12
 800650a:	469b      	mov	fp, r3
 800650c:	0fca      	lsrs	r2, r1, #31
 800650e:	004b      	lsls	r3, r1, #1
 8006510:	0004      	movs	r4, r0
 8006512:	4680      	mov	r8, r0
 8006514:	0d5b      	lsrs	r3, r3, #21
 8006516:	9202      	str	r2, [sp, #8]
 8006518:	d100      	bne.n	800651c <__aeabi_ddiv+0x28>
 800651a:	e098      	b.n	800664e <__aeabi_ddiv+0x15a>
 800651c:	4a7c      	ldr	r2, [pc, #496]	@ (8006710 <__aeabi_ddiv+0x21c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d037      	beq.n	8006592 <__aeabi_ddiv+0x9e>
 8006522:	4659      	mov	r1, fp
 8006524:	0f42      	lsrs	r2, r0, #29
 8006526:	00c9      	lsls	r1, r1, #3
 8006528:	430a      	orrs	r2, r1
 800652a:	2180      	movs	r1, #128	@ 0x80
 800652c:	0409      	lsls	r1, r1, #16
 800652e:	4311      	orrs	r1, r2
 8006530:	00c2      	lsls	r2, r0, #3
 8006532:	4690      	mov	r8, r2
 8006534:	4a77      	ldr	r2, [pc, #476]	@ (8006714 <__aeabi_ddiv+0x220>)
 8006536:	4689      	mov	r9, r1
 8006538:	4692      	mov	sl, r2
 800653a:	449a      	add	sl, r3
 800653c:	2300      	movs	r3, #0
 800653e:	2400      	movs	r4, #0
 8006540:	9303      	str	r3, [sp, #12]
 8006542:	9e00      	ldr	r6, [sp, #0]
 8006544:	9f01      	ldr	r7, [sp, #4]
 8006546:	033b      	lsls	r3, r7, #12
 8006548:	0b1b      	lsrs	r3, r3, #12
 800654a:	469b      	mov	fp, r3
 800654c:	007b      	lsls	r3, r7, #1
 800654e:	0030      	movs	r0, r6
 8006550:	0d5b      	lsrs	r3, r3, #21
 8006552:	0ffd      	lsrs	r5, r7, #31
 8006554:	2b00      	cmp	r3, #0
 8006556:	d059      	beq.n	800660c <__aeabi_ddiv+0x118>
 8006558:	4a6d      	ldr	r2, [pc, #436]	@ (8006710 <__aeabi_ddiv+0x21c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d048      	beq.n	80065f0 <__aeabi_ddiv+0xfc>
 800655e:	4659      	mov	r1, fp
 8006560:	0f72      	lsrs	r2, r6, #29
 8006562:	00c9      	lsls	r1, r1, #3
 8006564:	430a      	orrs	r2, r1
 8006566:	2180      	movs	r1, #128	@ 0x80
 8006568:	0409      	lsls	r1, r1, #16
 800656a:	4311      	orrs	r1, r2
 800656c:	468b      	mov	fp, r1
 800656e:	4969      	ldr	r1, [pc, #420]	@ (8006714 <__aeabi_ddiv+0x220>)
 8006570:	00f2      	lsls	r2, r6, #3
 8006572:	468c      	mov	ip, r1
 8006574:	4651      	mov	r1, sl
 8006576:	4463      	add	r3, ip
 8006578:	1acb      	subs	r3, r1, r3
 800657a:	469a      	mov	sl, r3
 800657c:	2100      	movs	r1, #0
 800657e:	9e02      	ldr	r6, [sp, #8]
 8006580:	406e      	eors	r6, r5
 8006582:	b2f6      	uxtb	r6, r6
 8006584:	2c0f      	cmp	r4, #15
 8006586:	d900      	bls.n	800658a <__aeabi_ddiv+0x96>
 8006588:	e0ce      	b.n	8006728 <__aeabi_ddiv+0x234>
 800658a:	4b63      	ldr	r3, [pc, #396]	@ (8006718 <__aeabi_ddiv+0x224>)
 800658c:	00a4      	lsls	r4, r4, #2
 800658e:	591b      	ldr	r3, [r3, r4]
 8006590:	469f      	mov	pc, r3
 8006592:	465a      	mov	r2, fp
 8006594:	4302      	orrs	r2, r0
 8006596:	4691      	mov	r9, r2
 8006598:	d000      	beq.n	800659c <__aeabi_ddiv+0xa8>
 800659a:	e090      	b.n	80066be <__aeabi_ddiv+0x1ca>
 800659c:	469a      	mov	sl, r3
 800659e:	2302      	movs	r3, #2
 80065a0:	4690      	mov	r8, r2
 80065a2:	2408      	movs	r4, #8
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	e7cc      	b.n	8006542 <__aeabi_ddiv+0x4e>
 80065a8:	46cb      	mov	fp, r9
 80065aa:	4642      	mov	r2, r8
 80065ac:	9d02      	ldr	r5, [sp, #8]
 80065ae:	9903      	ldr	r1, [sp, #12]
 80065b0:	2902      	cmp	r1, #2
 80065b2:	d100      	bne.n	80065b6 <__aeabi_ddiv+0xc2>
 80065b4:	e1de      	b.n	8006974 <__aeabi_ddiv+0x480>
 80065b6:	2903      	cmp	r1, #3
 80065b8:	d100      	bne.n	80065bc <__aeabi_ddiv+0xc8>
 80065ba:	e08d      	b.n	80066d8 <__aeabi_ddiv+0x1e4>
 80065bc:	2901      	cmp	r1, #1
 80065be:	d000      	beq.n	80065c2 <__aeabi_ddiv+0xce>
 80065c0:	e179      	b.n	80068b6 <__aeabi_ddiv+0x3c2>
 80065c2:	002e      	movs	r6, r5
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	2400      	movs	r4, #0
 80065ca:	4690      	mov	r8, r2
 80065cc:	051b      	lsls	r3, r3, #20
 80065ce:	4323      	orrs	r3, r4
 80065d0:	07f6      	lsls	r6, r6, #31
 80065d2:	4333      	orrs	r3, r6
 80065d4:	4640      	mov	r0, r8
 80065d6:	0019      	movs	r1, r3
 80065d8:	b007      	add	sp, #28
 80065da:	bcf0      	pop	{r4, r5, r6, r7}
 80065dc:	46bb      	mov	fp, r7
 80065de:	46b2      	mov	sl, r6
 80065e0:	46a9      	mov	r9, r5
 80065e2:	46a0      	mov	r8, r4
 80065e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e6:	2200      	movs	r2, #0
 80065e8:	2400      	movs	r4, #0
 80065ea:	4690      	mov	r8, r2
 80065ec:	4b48      	ldr	r3, [pc, #288]	@ (8006710 <__aeabi_ddiv+0x21c>)
 80065ee:	e7ed      	b.n	80065cc <__aeabi_ddiv+0xd8>
 80065f0:	465a      	mov	r2, fp
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	4b49      	ldr	r3, [pc, #292]	@ (800671c <__aeabi_ddiv+0x228>)
 80065f8:	469c      	mov	ip, r3
 80065fa:	44e2      	add	sl, ip
 80065fc:	2a00      	cmp	r2, #0
 80065fe:	d159      	bne.n	80066b4 <__aeabi_ddiv+0x1c0>
 8006600:	2302      	movs	r3, #2
 8006602:	431c      	orrs	r4, r3
 8006604:	2300      	movs	r3, #0
 8006606:	2102      	movs	r1, #2
 8006608:	469b      	mov	fp, r3
 800660a:	e7b8      	b.n	800657e <__aeabi_ddiv+0x8a>
 800660c:	465a      	mov	r2, fp
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	431a      	orrs	r2, r3
 8006612:	d049      	beq.n	80066a8 <__aeabi_ddiv+0x1b4>
 8006614:	465b      	mov	r3, fp
 8006616:	2b00      	cmp	r3, #0
 8006618:	d100      	bne.n	800661c <__aeabi_ddiv+0x128>
 800661a:	e19c      	b.n	8006956 <__aeabi_ddiv+0x462>
 800661c:	4658      	mov	r0, fp
 800661e:	f001 fa0f 	bl	8007a40 <__clzsi2>
 8006622:	0002      	movs	r2, r0
 8006624:	0003      	movs	r3, r0
 8006626:	3a0b      	subs	r2, #11
 8006628:	271d      	movs	r7, #29
 800662a:	9e00      	ldr	r6, [sp, #0]
 800662c:	1aba      	subs	r2, r7, r2
 800662e:	0019      	movs	r1, r3
 8006630:	4658      	mov	r0, fp
 8006632:	40d6      	lsrs	r6, r2
 8006634:	3908      	subs	r1, #8
 8006636:	4088      	lsls	r0, r1
 8006638:	0032      	movs	r2, r6
 800663a:	4302      	orrs	r2, r0
 800663c:	4693      	mov	fp, r2
 800663e:	9a00      	ldr	r2, [sp, #0]
 8006640:	408a      	lsls	r2, r1
 8006642:	4937      	ldr	r1, [pc, #220]	@ (8006720 <__aeabi_ddiv+0x22c>)
 8006644:	4453      	add	r3, sl
 8006646:	468a      	mov	sl, r1
 8006648:	2100      	movs	r1, #0
 800664a:	449a      	add	sl, r3
 800664c:	e797      	b.n	800657e <__aeabi_ddiv+0x8a>
 800664e:	465b      	mov	r3, fp
 8006650:	4303      	orrs	r3, r0
 8006652:	4699      	mov	r9, r3
 8006654:	d021      	beq.n	800669a <__aeabi_ddiv+0x1a6>
 8006656:	465b      	mov	r3, fp
 8006658:	2b00      	cmp	r3, #0
 800665a:	d100      	bne.n	800665e <__aeabi_ddiv+0x16a>
 800665c:	e169      	b.n	8006932 <__aeabi_ddiv+0x43e>
 800665e:	4658      	mov	r0, fp
 8006660:	f001 f9ee 	bl	8007a40 <__clzsi2>
 8006664:	230b      	movs	r3, #11
 8006666:	425b      	negs	r3, r3
 8006668:	469c      	mov	ip, r3
 800666a:	0002      	movs	r2, r0
 800666c:	4484      	add	ip, r0
 800666e:	4666      	mov	r6, ip
 8006670:	231d      	movs	r3, #29
 8006672:	1b9b      	subs	r3, r3, r6
 8006674:	0026      	movs	r6, r4
 8006676:	0011      	movs	r1, r2
 8006678:	4658      	mov	r0, fp
 800667a:	40de      	lsrs	r6, r3
 800667c:	3908      	subs	r1, #8
 800667e:	4088      	lsls	r0, r1
 8006680:	0033      	movs	r3, r6
 8006682:	4303      	orrs	r3, r0
 8006684:	4699      	mov	r9, r3
 8006686:	0023      	movs	r3, r4
 8006688:	408b      	lsls	r3, r1
 800668a:	4698      	mov	r8, r3
 800668c:	4b25      	ldr	r3, [pc, #148]	@ (8006724 <__aeabi_ddiv+0x230>)
 800668e:	2400      	movs	r4, #0
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	469a      	mov	sl, r3
 8006694:	2300      	movs	r3, #0
 8006696:	9303      	str	r3, [sp, #12]
 8006698:	e753      	b.n	8006542 <__aeabi_ddiv+0x4e>
 800669a:	2300      	movs	r3, #0
 800669c:	4698      	mov	r8, r3
 800669e:	469a      	mov	sl, r3
 80066a0:	3301      	adds	r3, #1
 80066a2:	2404      	movs	r4, #4
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	e74c      	b.n	8006542 <__aeabi_ddiv+0x4e>
 80066a8:	2301      	movs	r3, #1
 80066aa:	431c      	orrs	r4, r3
 80066ac:	2300      	movs	r3, #0
 80066ae:	2101      	movs	r1, #1
 80066b0:	469b      	mov	fp, r3
 80066b2:	e764      	b.n	800657e <__aeabi_ddiv+0x8a>
 80066b4:	2303      	movs	r3, #3
 80066b6:	0032      	movs	r2, r6
 80066b8:	2103      	movs	r1, #3
 80066ba:	431c      	orrs	r4, r3
 80066bc:	e75f      	b.n	800657e <__aeabi_ddiv+0x8a>
 80066be:	469a      	mov	sl, r3
 80066c0:	2303      	movs	r3, #3
 80066c2:	46d9      	mov	r9, fp
 80066c4:	240c      	movs	r4, #12
 80066c6:	9303      	str	r3, [sp, #12]
 80066c8:	e73b      	b.n	8006542 <__aeabi_ddiv+0x4e>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2480      	movs	r4, #128	@ 0x80
 80066ce:	4698      	mov	r8, r3
 80066d0:	2600      	movs	r6, #0
 80066d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006710 <__aeabi_ddiv+0x21c>)
 80066d4:	0324      	lsls	r4, r4, #12
 80066d6:	e779      	b.n	80065cc <__aeabi_ddiv+0xd8>
 80066d8:	2480      	movs	r4, #128	@ 0x80
 80066da:	465b      	mov	r3, fp
 80066dc:	0324      	lsls	r4, r4, #12
 80066de:	431c      	orrs	r4, r3
 80066e0:	0324      	lsls	r4, r4, #12
 80066e2:	002e      	movs	r6, r5
 80066e4:	4690      	mov	r8, r2
 80066e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <__aeabi_ddiv+0x21c>)
 80066e8:	0b24      	lsrs	r4, r4, #12
 80066ea:	e76f      	b.n	80065cc <__aeabi_ddiv+0xd8>
 80066ec:	2480      	movs	r4, #128	@ 0x80
 80066ee:	464b      	mov	r3, r9
 80066f0:	0324      	lsls	r4, r4, #12
 80066f2:	4223      	tst	r3, r4
 80066f4:	d002      	beq.n	80066fc <__aeabi_ddiv+0x208>
 80066f6:	465b      	mov	r3, fp
 80066f8:	4223      	tst	r3, r4
 80066fa:	d0f0      	beq.n	80066de <__aeabi_ddiv+0x1ea>
 80066fc:	2480      	movs	r4, #128	@ 0x80
 80066fe:	464b      	mov	r3, r9
 8006700:	0324      	lsls	r4, r4, #12
 8006702:	431c      	orrs	r4, r3
 8006704:	0324      	lsls	r4, r4, #12
 8006706:	9e02      	ldr	r6, [sp, #8]
 8006708:	4b01      	ldr	r3, [pc, #4]	@ (8006710 <__aeabi_ddiv+0x21c>)
 800670a:	0b24      	lsrs	r4, r4, #12
 800670c:	e75e      	b.n	80065cc <__aeabi_ddiv+0xd8>
 800670e:	46c0      	nop			@ (mov r8, r8)
 8006710:	000007ff 	.word	0x000007ff
 8006714:	fffffc01 	.word	0xfffffc01
 8006718:	080199d0 	.word	0x080199d0
 800671c:	fffff801 	.word	0xfffff801
 8006720:	000003f3 	.word	0x000003f3
 8006724:	fffffc0d 	.word	0xfffffc0d
 8006728:	45cb      	cmp	fp, r9
 800672a:	d200      	bcs.n	800672e <__aeabi_ddiv+0x23a>
 800672c:	e0f8      	b.n	8006920 <__aeabi_ddiv+0x42c>
 800672e:	d100      	bne.n	8006732 <__aeabi_ddiv+0x23e>
 8006730:	e0f3      	b.n	800691a <__aeabi_ddiv+0x426>
 8006732:	2301      	movs	r3, #1
 8006734:	425b      	negs	r3, r3
 8006736:	469c      	mov	ip, r3
 8006738:	4644      	mov	r4, r8
 800673a:	4648      	mov	r0, r9
 800673c:	2500      	movs	r5, #0
 800673e:	44e2      	add	sl, ip
 8006740:	465b      	mov	r3, fp
 8006742:	0e17      	lsrs	r7, r2, #24
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	431f      	orrs	r7, r3
 8006748:	0c19      	lsrs	r1, r3, #16
 800674a:	043b      	lsls	r3, r7, #16
 800674c:	0212      	lsls	r2, r2, #8
 800674e:	9700      	str	r7, [sp, #0]
 8006750:	0c1f      	lsrs	r7, r3, #16
 8006752:	4691      	mov	r9, r2
 8006754:	9102      	str	r1, [sp, #8]
 8006756:	9703      	str	r7, [sp, #12]
 8006758:	f7ff fdbe 	bl	80062d8 <__aeabi_uidivmod>
 800675c:	0002      	movs	r2, r0
 800675e:	437a      	muls	r2, r7
 8006760:	040b      	lsls	r3, r1, #16
 8006762:	0c21      	lsrs	r1, r4, #16
 8006764:	4680      	mov	r8, r0
 8006766:	4319      	orrs	r1, r3
 8006768:	428a      	cmp	r2, r1
 800676a:	d909      	bls.n	8006780 <__aeabi_ddiv+0x28c>
 800676c:	9f00      	ldr	r7, [sp, #0]
 800676e:	2301      	movs	r3, #1
 8006770:	46bc      	mov	ip, r7
 8006772:	425b      	negs	r3, r3
 8006774:	4461      	add	r1, ip
 8006776:	469c      	mov	ip, r3
 8006778:	44e0      	add	r8, ip
 800677a:	428f      	cmp	r7, r1
 800677c:	d800      	bhi.n	8006780 <__aeabi_ddiv+0x28c>
 800677e:	e15c      	b.n	8006a3a <__aeabi_ddiv+0x546>
 8006780:	1a88      	subs	r0, r1, r2
 8006782:	9902      	ldr	r1, [sp, #8]
 8006784:	f7ff fda8 	bl	80062d8 <__aeabi_uidivmod>
 8006788:	9a03      	ldr	r2, [sp, #12]
 800678a:	0424      	lsls	r4, r4, #16
 800678c:	4342      	muls	r2, r0
 800678e:	0409      	lsls	r1, r1, #16
 8006790:	0c24      	lsrs	r4, r4, #16
 8006792:	0003      	movs	r3, r0
 8006794:	430c      	orrs	r4, r1
 8006796:	42a2      	cmp	r2, r4
 8006798:	d906      	bls.n	80067a8 <__aeabi_ddiv+0x2b4>
 800679a:	9900      	ldr	r1, [sp, #0]
 800679c:	3b01      	subs	r3, #1
 800679e:	468c      	mov	ip, r1
 80067a0:	4464      	add	r4, ip
 80067a2:	42a1      	cmp	r1, r4
 80067a4:	d800      	bhi.n	80067a8 <__aeabi_ddiv+0x2b4>
 80067a6:	e142      	b.n	8006a2e <__aeabi_ddiv+0x53a>
 80067a8:	1aa0      	subs	r0, r4, r2
 80067aa:	4642      	mov	r2, r8
 80067ac:	0412      	lsls	r2, r2, #16
 80067ae:	431a      	orrs	r2, r3
 80067b0:	4693      	mov	fp, r2
 80067b2:	464b      	mov	r3, r9
 80067b4:	4659      	mov	r1, fp
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	001f      	movs	r7, r3
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	040b      	lsls	r3, r1, #16
 80067be:	4649      	mov	r1, r9
 80067c0:	0409      	lsls	r1, r1, #16
 80067c2:	0c09      	lsrs	r1, r1, #16
 80067c4:	000c      	movs	r4, r1
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	435c      	muls	r4, r3
 80067ca:	0c12      	lsrs	r2, r2, #16
 80067cc:	437b      	muls	r3, r7
 80067ce:	4688      	mov	r8, r1
 80067d0:	4351      	muls	r1, r2
 80067d2:	437a      	muls	r2, r7
 80067d4:	0c27      	lsrs	r7, r4, #16
 80067d6:	46bc      	mov	ip, r7
 80067d8:	185b      	adds	r3, r3, r1
 80067da:	4463      	add	r3, ip
 80067dc:	4299      	cmp	r1, r3
 80067de:	d903      	bls.n	80067e8 <__aeabi_ddiv+0x2f4>
 80067e0:	2180      	movs	r1, #128	@ 0x80
 80067e2:	0249      	lsls	r1, r1, #9
 80067e4:	468c      	mov	ip, r1
 80067e6:	4462      	add	r2, ip
 80067e8:	0c19      	lsrs	r1, r3, #16
 80067ea:	0424      	lsls	r4, r4, #16
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	0c24      	lsrs	r4, r4, #16
 80067f0:	188a      	adds	r2, r1, r2
 80067f2:	191c      	adds	r4, r3, r4
 80067f4:	4290      	cmp	r0, r2
 80067f6:	d302      	bcc.n	80067fe <__aeabi_ddiv+0x30a>
 80067f8:	d116      	bne.n	8006828 <__aeabi_ddiv+0x334>
 80067fa:	42a5      	cmp	r5, r4
 80067fc:	d214      	bcs.n	8006828 <__aeabi_ddiv+0x334>
 80067fe:	465b      	mov	r3, fp
 8006800:	9f00      	ldr	r7, [sp, #0]
 8006802:	3b01      	subs	r3, #1
 8006804:	444d      	add	r5, r9
 8006806:	9305      	str	r3, [sp, #20]
 8006808:	454d      	cmp	r5, r9
 800680a:	419b      	sbcs	r3, r3
 800680c:	46bc      	mov	ip, r7
 800680e:	425b      	negs	r3, r3
 8006810:	4463      	add	r3, ip
 8006812:	18c0      	adds	r0, r0, r3
 8006814:	4287      	cmp	r7, r0
 8006816:	d300      	bcc.n	800681a <__aeabi_ddiv+0x326>
 8006818:	e102      	b.n	8006a20 <__aeabi_ddiv+0x52c>
 800681a:	4282      	cmp	r2, r0
 800681c:	d900      	bls.n	8006820 <__aeabi_ddiv+0x32c>
 800681e:	e129      	b.n	8006a74 <__aeabi_ddiv+0x580>
 8006820:	d100      	bne.n	8006824 <__aeabi_ddiv+0x330>
 8006822:	e124      	b.n	8006a6e <__aeabi_ddiv+0x57a>
 8006824:	9b05      	ldr	r3, [sp, #20]
 8006826:	469b      	mov	fp, r3
 8006828:	1b2c      	subs	r4, r5, r4
 800682a:	42a5      	cmp	r5, r4
 800682c:	41ad      	sbcs	r5, r5
 800682e:	9b00      	ldr	r3, [sp, #0]
 8006830:	1a80      	subs	r0, r0, r2
 8006832:	426d      	negs	r5, r5
 8006834:	1b40      	subs	r0, r0, r5
 8006836:	4283      	cmp	r3, r0
 8006838:	d100      	bne.n	800683c <__aeabi_ddiv+0x348>
 800683a:	e10f      	b.n	8006a5c <__aeabi_ddiv+0x568>
 800683c:	9902      	ldr	r1, [sp, #8]
 800683e:	f7ff fd4b 	bl	80062d8 <__aeabi_uidivmod>
 8006842:	9a03      	ldr	r2, [sp, #12]
 8006844:	040b      	lsls	r3, r1, #16
 8006846:	4342      	muls	r2, r0
 8006848:	0c21      	lsrs	r1, r4, #16
 800684a:	0005      	movs	r5, r0
 800684c:	4319      	orrs	r1, r3
 800684e:	428a      	cmp	r2, r1
 8006850:	d900      	bls.n	8006854 <__aeabi_ddiv+0x360>
 8006852:	e0cb      	b.n	80069ec <__aeabi_ddiv+0x4f8>
 8006854:	1a88      	subs	r0, r1, r2
 8006856:	9902      	ldr	r1, [sp, #8]
 8006858:	f7ff fd3e 	bl	80062d8 <__aeabi_uidivmod>
 800685c:	9a03      	ldr	r2, [sp, #12]
 800685e:	0424      	lsls	r4, r4, #16
 8006860:	4342      	muls	r2, r0
 8006862:	0409      	lsls	r1, r1, #16
 8006864:	0c24      	lsrs	r4, r4, #16
 8006866:	0003      	movs	r3, r0
 8006868:	430c      	orrs	r4, r1
 800686a:	42a2      	cmp	r2, r4
 800686c:	d900      	bls.n	8006870 <__aeabi_ddiv+0x37c>
 800686e:	e0ca      	b.n	8006a06 <__aeabi_ddiv+0x512>
 8006870:	4641      	mov	r1, r8
 8006872:	1aa4      	subs	r4, r4, r2
 8006874:	042a      	lsls	r2, r5, #16
 8006876:	431a      	orrs	r2, r3
 8006878:	9f04      	ldr	r7, [sp, #16]
 800687a:	0413      	lsls	r3, r2, #16
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	4359      	muls	r1, r3
 8006880:	4640      	mov	r0, r8
 8006882:	437b      	muls	r3, r7
 8006884:	469c      	mov	ip, r3
 8006886:	0c15      	lsrs	r5, r2, #16
 8006888:	4368      	muls	r0, r5
 800688a:	0c0b      	lsrs	r3, r1, #16
 800688c:	4484      	add	ip, r0
 800688e:	4463      	add	r3, ip
 8006890:	437d      	muls	r5, r7
 8006892:	4298      	cmp	r0, r3
 8006894:	d903      	bls.n	800689e <__aeabi_ddiv+0x3aa>
 8006896:	2080      	movs	r0, #128	@ 0x80
 8006898:	0240      	lsls	r0, r0, #9
 800689a:	4684      	mov	ip, r0
 800689c:	4465      	add	r5, ip
 800689e:	0c18      	lsrs	r0, r3, #16
 80068a0:	0409      	lsls	r1, r1, #16
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	0c09      	lsrs	r1, r1, #16
 80068a6:	1940      	adds	r0, r0, r5
 80068a8:	185b      	adds	r3, r3, r1
 80068aa:	4284      	cmp	r4, r0
 80068ac:	d327      	bcc.n	80068fe <__aeabi_ddiv+0x40a>
 80068ae:	d023      	beq.n	80068f8 <__aeabi_ddiv+0x404>
 80068b0:	2301      	movs	r3, #1
 80068b2:	0035      	movs	r5, r6
 80068b4:	431a      	orrs	r2, r3
 80068b6:	4b94      	ldr	r3, [pc, #592]	@ (8006b08 <__aeabi_ddiv+0x614>)
 80068b8:	4453      	add	r3, sl
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd60      	ble.n	8006980 <__aeabi_ddiv+0x48c>
 80068be:	0751      	lsls	r1, r2, #29
 80068c0:	d000      	beq.n	80068c4 <__aeabi_ddiv+0x3d0>
 80068c2:	e086      	b.n	80069d2 <__aeabi_ddiv+0x4de>
 80068c4:	002e      	movs	r6, r5
 80068c6:	08d1      	lsrs	r1, r2, #3
 80068c8:	465a      	mov	r2, fp
 80068ca:	01d2      	lsls	r2, r2, #7
 80068cc:	d506      	bpl.n	80068dc <__aeabi_ddiv+0x3e8>
 80068ce:	465a      	mov	r2, fp
 80068d0:	4b8e      	ldr	r3, [pc, #568]	@ (8006b0c <__aeabi_ddiv+0x618>)
 80068d2:	401a      	ands	r2, r3
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	4693      	mov	fp, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4453      	add	r3, sl
 80068dc:	4a8c      	ldr	r2, [pc, #560]	@ (8006b10 <__aeabi_ddiv+0x61c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	dd00      	ble.n	80068e4 <__aeabi_ddiv+0x3f0>
 80068e2:	e680      	b.n	80065e6 <__aeabi_ddiv+0xf2>
 80068e4:	465a      	mov	r2, fp
 80068e6:	0752      	lsls	r2, r2, #29
 80068e8:	430a      	orrs	r2, r1
 80068ea:	4690      	mov	r8, r2
 80068ec:	465a      	mov	r2, fp
 80068ee:	055b      	lsls	r3, r3, #21
 80068f0:	0254      	lsls	r4, r2, #9
 80068f2:	0b24      	lsrs	r4, r4, #12
 80068f4:	0d5b      	lsrs	r3, r3, #21
 80068f6:	e669      	b.n	80065cc <__aeabi_ddiv+0xd8>
 80068f8:	0035      	movs	r5, r6
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0db      	beq.n	80068b6 <__aeabi_ddiv+0x3c2>
 80068fe:	9d00      	ldr	r5, [sp, #0]
 8006900:	1e51      	subs	r1, r2, #1
 8006902:	46ac      	mov	ip, r5
 8006904:	4464      	add	r4, ip
 8006906:	42ac      	cmp	r4, r5
 8006908:	d200      	bcs.n	800690c <__aeabi_ddiv+0x418>
 800690a:	e09e      	b.n	8006a4a <__aeabi_ddiv+0x556>
 800690c:	4284      	cmp	r4, r0
 800690e:	d200      	bcs.n	8006912 <__aeabi_ddiv+0x41e>
 8006910:	e0e1      	b.n	8006ad6 <__aeabi_ddiv+0x5e2>
 8006912:	d100      	bne.n	8006916 <__aeabi_ddiv+0x422>
 8006914:	e0ee      	b.n	8006af4 <__aeabi_ddiv+0x600>
 8006916:	000a      	movs	r2, r1
 8006918:	e7ca      	b.n	80068b0 <__aeabi_ddiv+0x3bc>
 800691a:	4542      	cmp	r2, r8
 800691c:	d900      	bls.n	8006920 <__aeabi_ddiv+0x42c>
 800691e:	e708      	b.n	8006732 <__aeabi_ddiv+0x23e>
 8006920:	464b      	mov	r3, r9
 8006922:	07dc      	lsls	r4, r3, #31
 8006924:	0858      	lsrs	r0, r3, #1
 8006926:	4643      	mov	r3, r8
 8006928:	085b      	lsrs	r3, r3, #1
 800692a:	431c      	orrs	r4, r3
 800692c:	4643      	mov	r3, r8
 800692e:	07dd      	lsls	r5, r3, #31
 8006930:	e706      	b.n	8006740 <__aeabi_ddiv+0x24c>
 8006932:	f001 f885 	bl	8007a40 <__clzsi2>
 8006936:	2315      	movs	r3, #21
 8006938:	469c      	mov	ip, r3
 800693a:	4484      	add	ip, r0
 800693c:	0002      	movs	r2, r0
 800693e:	4663      	mov	r3, ip
 8006940:	3220      	adds	r2, #32
 8006942:	2b1c      	cmp	r3, #28
 8006944:	dc00      	bgt.n	8006948 <__aeabi_ddiv+0x454>
 8006946:	e692      	b.n	800666e <__aeabi_ddiv+0x17a>
 8006948:	0023      	movs	r3, r4
 800694a:	3808      	subs	r0, #8
 800694c:	4083      	lsls	r3, r0
 800694e:	4699      	mov	r9, r3
 8006950:	2300      	movs	r3, #0
 8006952:	4698      	mov	r8, r3
 8006954:	e69a      	b.n	800668c <__aeabi_ddiv+0x198>
 8006956:	f001 f873 	bl	8007a40 <__clzsi2>
 800695a:	0002      	movs	r2, r0
 800695c:	0003      	movs	r3, r0
 800695e:	3215      	adds	r2, #21
 8006960:	3320      	adds	r3, #32
 8006962:	2a1c      	cmp	r2, #28
 8006964:	dc00      	bgt.n	8006968 <__aeabi_ddiv+0x474>
 8006966:	e65f      	b.n	8006628 <__aeabi_ddiv+0x134>
 8006968:	9900      	ldr	r1, [sp, #0]
 800696a:	3808      	subs	r0, #8
 800696c:	4081      	lsls	r1, r0
 800696e:	2200      	movs	r2, #0
 8006970:	468b      	mov	fp, r1
 8006972:	e666      	b.n	8006642 <__aeabi_ddiv+0x14e>
 8006974:	2200      	movs	r2, #0
 8006976:	002e      	movs	r6, r5
 8006978:	2400      	movs	r4, #0
 800697a:	4690      	mov	r8, r2
 800697c:	4b65      	ldr	r3, [pc, #404]	@ (8006b14 <__aeabi_ddiv+0x620>)
 800697e:	e625      	b.n	80065cc <__aeabi_ddiv+0xd8>
 8006980:	002e      	movs	r6, r5
 8006982:	2101      	movs	r1, #1
 8006984:	1ac9      	subs	r1, r1, r3
 8006986:	2938      	cmp	r1, #56	@ 0x38
 8006988:	dd00      	ble.n	800698c <__aeabi_ddiv+0x498>
 800698a:	e61b      	b.n	80065c4 <__aeabi_ddiv+0xd0>
 800698c:	291f      	cmp	r1, #31
 800698e:	dc7e      	bgt.n	8006a8e <__aeabi_ddiv+0x59a>
 8006990:	4861      	ldr	r0, [pc, #388]	@ (8006b18 <__aeabi_ddiv+0x624>)
 8006992:	0014      	movs	r4, r2
 8006994:	4450      	add	r0, sl
 8006996:	465b      	mov	r3, fp
 8006998:	4082      	lsls	r2, r0
 800699a:	4083      	lsls	r3, r0
 800699c:	40cc      	lsrs	r4, r1
 800699e:	1e50      	subs	r0, r2, #1
 80069a0:	4182      	sbcs	r2, r0
 80069a2:	4323      	orrs	r3, r4
 80069a4:	431a      	orrs	r2, r3
 80069a6:	465b      	mov	r3, fp
 80069a8:	40cb      	lsrs	r3, r1
 80069aa:	0751      	lsls	r1, r2, #29
 80069ac:	d009      	beq.n	80069c2 <__aeabi_ddiv+0x4ce>
 80069ae:	210f      	movs	r1, #15
 80069b0:	4011      	ands	r1, r2
 80069b2:	2904      	cmp	r1, #4
 80069b4:	d005      	beq.n	80069c2 <__aeabi_ddiv+0x4ce>
 80069b6:	1d11      	adds	r1, r2, #4
 80069b8:	4291      	cmp	r1, r2
 80069ba:	4192      	sbcs	r2, r2
 80069bc:	4252      	negs	r2, r2
 80069be:	189b      	adds	r3, r3, r2
 80069c0:	000a      	movs	r2, r1
 80069c2:	0219      	lsls	r1, r3, #8
 80069c4:	d400      	bmi.n	80069c8 <__aeabi_ddiv+0x4d4>
 80069c6:	e09b      	b.n	8006b00 <__aeabi_ddiv+0x60c>
 80069c8:	2200      	movs	r2, #0
 80069ca:	2301      	movs	r3, #1
 80069cc:	2400      	movs	r4, #0
 80069ce:	4690      	mov	r8, r2
 80069d0:	e5fc      	b.n	80065cc <__aeabi_ddiv+0xd8>
 80069d2:	210f      	movs	r1, #15
 80069d4:	4011      	ands	r1, r2
 80069d6:	2904      	cmp	r1, #4
 80069d8:	d100      	bne.n	80069dc <__aeabi_ddiv+0x4e8>
 80069da:	e773      	b.n	80068c4 <__aeabi_ddiv+0x3d0>
 80069dc:	1d11      	adds	r1, r2, #4
 80069de:	4291      	cmp	r1, r2
 80069e0:	4192      	sbcs	r2, r2
 80069e2:	4252      	negs	r2, r2
 80069e4:	002e      	movs	r6, r5
 80069e6:	08c9      	lsrs	r1, r1, #3
 80069e8:	4493      	add	fp, r2
 80069ea:	e76d      	b.n	80068c8 <__aeabi_ddiv+0x3d4>
 80069ec:	9b00      	ldr	r3, [sp, #0]
 80069ee:	3d01      	subs	r5, #1
 80069f0:	469c      	mov	ip, r3
 80069f2:	4461      	add	r1, ip
 80069f4:	428b      	cmp	r3, r1
 80069f6:	d900      	bls.n	80069fa <__aeabi_ddiv+0x506>
 80069f8:	e72c      	b.n	8006854 <__aeabi_ddiv+0x360>
 80069fa:	428a      	cmp	r2, r1
 80069fc:	d800      	bhi.n	8006a00 <__aeabi_ddiv+0x50c>
 80069fe:	e729      	b.n	8006854 <__aeabi_ddiv+0x360>
 8006a00:	1e85      	subs	r5, r0, #2
 8006a02:	4461      	add	r1, ip
 8006a04:	e726      	b.n	8006854 <__aeabi_ddiv+0x360>
 8006a06:	9900      	ldr	r1, [sp, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	468c      	mov	ip, r1
 8006a0c:	4464      	add	r4, ip
 8006a0e:	42a1      	cmp	r1, r4
 8006a10:	d900      	bls.n	8006a14 <__aeabi_ddiv+0x520>
 8006a12:	e72d      	b.n	8006870 <__aeabi_ddiv+0x37c>
 8006a14:	42a2      	cmp	r2, r4
 8006a16:	d800      	bhi.n	8006a1a <__aeabi_ddiv+0x526>
 8006a18:	e72a      	b.n	8006870 <__aeabi_ddiv+0x37c>
 8006a1a:	1e83      	subs	r3, r0, #2
 8006a1c:	4464      	add	r4, ip
 8006a1e:	e727      	b.n	8006870 <__aeabi_ddiv+0x37c>
 8006a20:	4287      	cmp	r7, r0
 8006a22:	d000      	beq.n	8006a26 <__aeabi_ddiv+0x532>
 8006a24:	e6fe      	b.n	8006824 <__aeabi_ddiv+0x330>
 8006a26:	45a9      	cmp	r9, r5
 8006a28:	d900      	bls.n	8006a2c <__aeabi_ddiv+0x538>
 8006a2a:	e6fb      	b.n	8006824 <__aeabi_ddiv+0x330>
 8006a2c:	e6f5      	b.n	800681a <__aeabi_ddiv+0x326>
 8006a2e:	42a2      	cmp	r2, r4
 8006a30:	d800      	bhi.n	8006a34 <__aeabi_ddiv+0x540>
 8006a32:	e6b9      	b.n	80067a8 <__aeabi_ddiv+0x2b4>
 8006a34:	1e83      	subs	r3, r0, #2
 8006a36:	4464      	add	r4, ip
 8006a38:	e6b6      	b.n	80067a8 <__aeabi_ddiv+0x2b4>
 8006a3a:	428a      	cmp	r2, r1
 8006a3c:	d800      	bhi.n	8006a40 <__aeabi_ddiv+0x54c>
 8006a3e:	e69f      	b.n	8006780 <__aeabi_ddiv+0x28c>
 8006a40:	46bc      	mov	ip, r7
 8006a42:	1e83      	subs	r3, r0, #2
 8006a44:	4698      	mov	r8, r3
 8006a46:	4461      	add	r1, ip
 8006a48:	e69a      	b.n	8006780 <__aeabi_ddiv+0x28c>
 8006a4a:	000a      	movs	r2, r1
 8006a4c:	4284      	cmp	r4, r0
 8006a4e:	d000      	beq.n	8006a52 <__aeabi_ddiv+0x55e>
 8006a50:	e72e      	b.n	80068b0 <__aeabi_ddiv+0x3bc>
 8006a52:	454b      	cmp	r3, r9
 8006a54:	d000      	beq.n	8006a58 <__aeabi_ddiv+0x564>
 8006a56:	e72b      	b.n	80068b0 <__aeabi_ddiv+0x3bc>
 8006a58:	0035      	movs	r5, r6
 8006a5a:	e72c      	b.n	80068b6 <__aeabi_ddiv+0x3c2>
 8006a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8006b08 <__aeabi_ddiv+0x614>)
 8006a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8006b1c <__aeabi_ddiv+0x628>)
 8006a60:	4453      	add	r3, sl
 8006a62:	4592      	cmp	sl, r2
 8006a64:	db43      	blt.n	8006aee <__aeabi_ddiv+0x5fa>
 8006a66:	2201      	movs	r2, #1
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4493      	add	fp, r2
 8006a6c:	e72c      	b.n	80068c8 <__aeabi_ddiv+0x3d4>
 8006a6e:	42ac      	cmp	r4, r5
 8006a70:	d800      	bhi.n	8006a74 <__aeabi_ddiv+0x580>
 8006a72:	e6d7      	b.n	8006824 <__aeabi_ddiv+0x330>
 8006a74:	2302      	movs	r3, #2
 8006a76:	425b      	negs	r3, r3
 8006a78:	469c      	mov	ip, r3
 8006a7a:	9900      	ldr	r1, [sp, #0]
 8006a7c:	444d      	add	r5, r9
 8006a7e:	454d      	cmp	r5, r9
 8006a80:	419b      	sbcs	r3, r3
 8006a82:	44e3      	add	fp, ip
 8006a84:	468c      	mov	ip, r1
 8006a86:	425b      	negs	r3, r3
 8006a88:	4463      	add	r3, ip
 8006a8a:	18c0      	adds	r0, r0, r3
 8006a8c:	e6cc      	b.n	8006828 <__aeabi_ddiv+0x334>
 8006a8e:	201f      	movs	r0, #31
 8006a90:	4240      	negs	r0, r0
 8006a92:	1ac3      	subs	r3, r0, r3
 8006a94:	4658      	mov	r0, fp
 8006a96:	40d8      	lsrs	r0, r3
 8006a98:	2920      	cmp	r1, #32
 8006a9a:	d004      	beq.n	8006aa6 <__aeabi_ddiv+0x5b2>
 8006a9c:	4659      	mov	r1, fp
 8006a9e:	4b20      	ldr	r3, [pc, #128]	@ (8006b20 <__aeabi_ddiv+0x62c>)
 8006aa0:	4453      	add	r3, sl
 8006aa2:	4099      	lsls	r1, r3
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	1e53      	subs	r3, r2, #1
 8006aa8:	419a      	sbcs	r2, r3
 8006aaa:	2307      	movs	r3, #7
 8006aac:	0019      	movs	r1, r3
 8006aae:	4302      	orrs	r2, r0
 8006ab0:	2400      	movs	r4, #0
 8006ab2:	4011      	ands	r1, r2
 8006ab4:	4213      	tst	r3, r2
 8006ab6:	d009      	beq.n	8006acc <__aeabi_ddiv+0x5d8>
 8006ab8:	3308      	adds	r3, #8
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d01d      	beq.n	8006afc <__aeabi_ddiv+0x608>
 8006ac0:	1d13      	adds	r3, r2, #4
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	4189      	sbcs	r1, r1
 8006ac6:	001a      	movs	r2, r3
 8006ac8:	4249      	negs	r1, r1
 8006aca:	0749      	lsls	r1, r1, #29
 8006acc:	08d2      	lsrs	r2, r2, #3
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	4690      	mov	r8, r2
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e57a      	b.n	80065cc <__aeabi_ddiv+0xd8>
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	9f00      	ldr	r7, [sp, #0]
 8006ada:	004d      	lsls	r5, r1, #1
 8006adc:	454d      	cmp	r5, r9
 8006ade:	4189      	sbcs	r1, r1
 8006ae0:	46bc      	mov	ip, r7
 8006ae2:	4249      	negs	r1, r1
 8006ae4:	4461      	add	r1, ip
 8006ae6:	46a9      	mov	r9, r5
 8006ae8:	3a02      	subs	r2, #2
 8006aea:	1864      	adds	r4, r4, r1
 8006aec:	e7ae      	b.n	8006a4c <__aeabi_ddiv+0x558>
 8006aee:	2201      	movs	r2, #1
 8006af0:	4252      	negs	r2, r2
 8006af2:	e746      	b.n	8006982 <__aeabi_ddiv+0x48e>
 8006af4:	4599      	cmp	r9, r3
 8006af6:	d3ee      	bcc.n	8006ad6 <__aeabi_ddiv+0x5e2>
 8006af8:	000a      	movs	r2, r1
 8006afa:	e7aa      	b.n	8006a52 <__aeabi_ddiv+0x55e>
 8006afc:	2100      	movs	r1, #0
 8006afe:	e7e5      	b.n	8006acc <__aeabi_ddiv+0x5d8>
 8006b00:	0759      	lsls	r1, r3, #29
 8006b02:	025b      	lsls	r3, r3, #9
 8006b04:	0b1c      	lsrs	r4, r3, #12
 8006b06:	e7e1      	b.n	8006acc <__aeabi_ddiv+0x5d8>
 8006b08:	000003ff 	.word	0x000003ff
 8006b0c:	feffffff 	.word	0xfeffffff
 8006b10:	000007fe 	.word	0x000007fe
 8006b14:	000007ff 	.word	0x000007ff
 8006b18:	0000041e 	.word	0x0000041e
 8006b1c:	fffffc02 	.word	0xfffffc02
 8006b20:	0000043e 	.word	0x0000043e

08006b24 <__aeabi_dmul>:
 8006b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b26:	4657      	mov	r7, sl
 8006b28:	464e      	mov	r6, r9
 8006b2a:	46de      	mov	lr, fp
 8006b2c:	4645      	mov	r5, r8
 8006b2e:	b5e0      	push	{r5, r6, r7, lr}
 8006b30:	001f      	movs	r7, r3
 8006b32:	030b      	lsls	r3, r1, #12
 8006b34:	0b1b      	lsrs	r3, r3, #12
 8006b36:	0016      	movs	r6, r2
 8006b38:	469a      	mov	sl, r3
 8006b3a:	0fca      	lsrs	r2, r1, #31
 8006b3c:	004b      	lsls	r3, r1, #1
 8006b3e:	0004      	movs	r4, r0
 8006b40:	4691      	mov	r9, r2
 8006b42:	b085      	sub	sp, #20
 8006b44:	0d5b      	lsrs	r3, r3, #21
 8006b46:	d100      	bne.n	8006b4a <__aeabi_dmul+0x26>
 8006b48:	e1cf      	b.n	8006eea <__aeabi_dmul+0x3c6>
 8006b4a:	4acd      	ldr	r2, [pc, #820]	@ (8006e80 <__aeabi_dmul+0x35c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d055      	beq.n	8006bfc <__aeabi_dmul+0xd8>
 8006b50:	4651      	mov	r1, sl
 8006b52:	0f42      	lsrs	r2, r0, #29
 8006b54:	00c9      	lsls	r1, r1, #3
 8006b56:	430a      	orrs	r2, r1
 8006b58:	2180      	movs	r1, #128	@ 0x80
 8006b5a:	0409      	lsls	r1, r1, #16
 8006b5c:	4311      	orrs	r1, r2
 8006b5e:	00c2      	lsls	r2, r0, #3
 8006b60:	4690      	mov	r8, r2
 8006b62:	4ac8      	ldr	r2, [pc, #800]	@ (8006e84 <__aeabi_dmul+0x360>)
 8006b64:	468a      	mov	sl, r1
 8006b66:	4693      	mov	fp, r2
 8006b68:	449b      	add	fp, r3
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	9302      	str	r3, [sp, #8]
 8006b70:	033c      	lsls	r4, r7, #12
 8006b72:	007b      	lsls	r3, r7, #1
 8006b74:	0ffa      	lsrs	r2, r7, #31
 8006b76:	9601      	str	r6, [sp, #4]
 8006b78:	0b24      	lsrs	r4, r4, #12
 8006b7a:	0d5b      	lsrs	r3, r3, #21
 8006b7c:	9200      	str	r2, [sp, #0]
 8006b7e:	d100      	bne.n	8006b82 <__aeabi_dmul+0x5e>
 8006b80:	e188      	b.n	8006e94 <__aeabi_dmul+0x370>
 8006b82:	4abf      	ldr	r2, [pc, #764]	@ (8006e80 <__aeabi_dmul+0x35c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d100      	bne.n	8006b8a <__aeabi_dmul+0x66>
 8006b88:	e092      	b.n	8006cb0 <__aeabi_dmul+0x18c>
 8006b8a:	4abe      	ldr	r2, [pc, #760]	@ (8006e84 <__aeabi_dmul+0x360>)
 8006b8c:	4694      	mov	ip, r2
 8006b8e:	4463      	add	r3, ip
 8006b90:	449b      	add	fp, r3
 8006b92:	2d0a      	cmp	r5, #10
 8006b94:	dc42      	bgt.n	8006c1c <__aeabi_dmul+0xf8>
 8006b96:	00e4      	lsls	r4, r4, #3
 8006b98:	0f73      	lsrs	r3, r6, #29
 8006b9a:	4323      	orrs	r3, r4
 8006b9c:	2480      	movs	r4, #128	@ 0x80
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	0424      	lsls	r4, r4, #16
 8006ba2:	431c      	orrs	r4, r3
 8006ba4:	00f3      	lsls	r3, r6, #3
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	9b00      	ldr	r3, [sp, #0]
 8006baa:	2000      	movs	r0, #0
 8006bac:	4059      	eors	r1, r3
 8006bae:	b2cb      	uxtb	r3, r1
 8006bb0:	9303      	str	r3, [sp, #12]
 8006bb2:	2d02      	cmp	r5, #2
 8006bb4:	dc00      	bgt.n	8006bb8 <__aeabi_dmul+0x94>
 8006bb6:	e094      	b.n	8006ce2 <__aeabi_dmul+0x1be>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	40ab      	lsls	r3, r5
 8006bbc:	001d      	movs	r5, r3
 8006bbe:	23a6      	movs	r3, #166	@ 0xa6
 8006bc0:	002a      	movs	r2, r5
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	401a      	ands	r2, r3
 8006bc6:	421d      	tst	r5, r3
 8006bc8:	d000      	beq.n	8006bcc <__aeabi_dmul+0xa8>
 8006bca:	e229      	b.n	8007020 <__aeabi_dmul+0x4fc>
 8006bcc:	2390      	movs	r3, #144	@ 0x90
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	421d      	tst	r5, r3
 8006bd2:	d100      	bne.n	8006bd6 <__aeabi_dmul+0xb2>
 8006bd4:	e24d      	b.n	8007072 <__aeabi_dmul+0x54e>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2480      	movs	r4, #128	@ 0x80
 8006bda:	4699      	mov	r9, r3
 8006bdc:	0324      	lsls	r4, r4, #12
 8006bde:	4ba8      	ldr	r3, [pc, #672]	@ (8006e80 <__aeabi_dmul+0x35c>)
 8006be0:	0010      	movs	r0, r2
 8006be2:	464a      	mov	r2, r9
 8006be4:	051b      	lsls	r3, r3, #20
 8006be6:	4323      	orrs	r3, r4
 8006be8:	07d2      	lsls	r2, r2, #31
 8006bea:	4313      	orrs	r3, r2
 8006bec:	0019      	movs	r1, r3
 8006bee:	b005      	add	sp, #20
 8006bf0:	bcf0      	pop	{r4, r5, r6, r7}
 8006bf2:	46bb      	mov	fp, r7
 8006bf4:	46b2      	mov	sl, r6
 8006bf6:	46a9      	mov	r9, r5
 8006bf8:	46a0      	mov	r8, r4
 8006bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4302      	orrs	r2, r0
 8006c00:	4690      	mov	r8, r2
 8006c02:	d000      	beq.n	8006c06 <__aeabi_dmul+0xe2>
 8006c04:	e1ac      	b.n	8006f60 <__aeabi_dmul+0x43c>
 8006c06:	469b      	mov	fp, r3
 8006c08:	2302      	movs	r3, #2
 8006c0a:	4692      	mov	sl, r2
 8006c0c:	2508      	movs	r5, #8
 8006c0e:	9302      	str	r3, [sp, #8]
 8006c10:	e7ae      	b.n	8006b70 <__aeabi_dmul+0x4c>
 8006c12:	9b00      	ldr	r3, [sp, #0]
 8006c14:	46a2      	mov	sl, r4
 8006c16:	4699      	mov	r9, r3
 8006c18:	9b01      	ldr	r3, [sp, #4]
 8006c1a:	4698      	mov	r8, r3
 8006c1c:	9b02      	ldr	r3, [sp, #8]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d100      	bne.n	8006c24 <__aeabi_dmul+0x100>
 8006c22:	e1ca      	b.n	8006fba <__aeabi_dmul+0x496>
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d100      	bne.n	8006c2a <__aeabi_dmul+0x106>
 8006c28:	e192      	b.n	8006f50 <__aeabi_dmul+0x42c>
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d110      	bne.n	8006c50 <__aeabi_dmul+0x12c>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2400      	movs	r4, #0
 8006c32:	2200      	movs	r2, #0
 8006c34:	e7d4      	b.n	8006be0 <__aeabi_dmul+0xbc>
 8006c36:	2201      	movs	r2, #1
 8006c38:	087b      	lsrs	r3, r7, #1
 8006c3a:	403a      	ands	r2, r7
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	4652      	mov	r2, sl
 8006c40:	07d2      	lsls	r2, r2, #31
 8006c42:	4313      	orrs	r3, r2
 8006c44:	4698      	mov	r8, r3
 8006c46:	4653      	mov	r3, sl
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	469a      	mov	sl, r3
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	4699      	mov	r9, r3
 8006c50:	465b      	mov	r3, fp
 8006c52:	1c58      	adds	r0, r3, #1
 8006c54:	2380      	movs	r3, #128	@ 0x80
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	445b      	add	r3, fp
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dc00      	bgt.n	8006c60 <__aeabi_dmul+0x13c>
 8006c5e:	e1b1      	b.n	8006fc4 <__aeabi_dmul+0x4a0>
 8006c60:	4642      	mov	r2, r8
 8006c62:	0752      	lsls	r2, r2, #29
 8006c64:	d00b      	beq.n	8006c7e <__aeabi_dmul+0x15a>
 8006c66:	220f      	movs	r2, #15
 8006c68:	4641      	mov	r1, r8
 8006c6a:	400a      	ands	r2, r1
 8006c6c:	2a04      	cmp	r2, #4
 8006c6e:	d006      	beq.n	8006c7e <__aeabi_dmul+0x15a>
 8006c70:	4642      	mov	r2, r8
 8006c72:	1d11      	adds	r1, r2, #4
 8006c74:	4541      	cmp	r1, r8
 8006c76:	4192      	sbcs	r2, r2
 8006c78:	4688      	mov	r8, r1
 8006c7a:	4252      	negs	r2, r2
 8006c7c:	4492      	add	sl, r2
 8006c7e:	4652      	mov	r2, sl
 8006c80:	01d2      	lsls	r2, r2, #7
 8006c82:	d506      	bpl.n	8006c92 <__aeabi_dmul+0x16e>
 8006c84:	4652      	mov	r2, sl
 8006c86:	4b80      	ldr	r3, [pc, #512]	@ (8006e88 <__aeabi_dmul+0x364>)
 8006c88:	401a      	ands	r2, r3
 8006c8a:	2380      	movs	r3, #128	@ 0x80
 8006c8c:	4692      	mov	sl, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	18c3      	adds	r3, r0, r3
 8006c92:	4a7e      	ldr	r2, [pc, #504]	@ (8006e8c <__aeabi_dmul+0x368>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	dd00      	ble.n	8006c9a <__aeabi_dmul+0x176>
 8006c98:	e18f      	b.n	8006fba <__aeabi_dmul+0x496>
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	08d1      	lsrs	r1, r2, #3
 8006c9e:	4652      	mov	r2, sl
 8006ca0:	0752      	lsls	r2, r2, #29
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	4651      	mov	r1, sl
 8006ca6:	055b      	lsls	r3, r3, #21
 8006ca8:	024c      	lsls	r4, r1, #9
 8006caa:	0b24      	lsrs	r4, r4, #12
 8006cac:	0d5b      	lsrs	r3, r3, #21
 8006cae:	e797      	b.n	8006be0 <__aeabi_dmul+0xbc>
 8006cb0:	4b73      	ldr	r3, [pc, #460]	@ (8006e80 <__aeabi_dmul+0x35c>)
 8006cb2:	4326      	orrs	r6, r4
 8006cb4:	469c      	mov	ip, r3
 8006cb6:	44e3      	add	fp, ip
 8006cb8:	2e00      	cmp	r6, #0
 8006cba:	d100      	bne.n	8006cbe <__aeabi_dmul+0x19a>
 8006cbc:	e16f      	b.n	8006f9e <__aeabi_dmul+0x47a>
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	431d      	orrs	r5, r3
 8006cc4:	9b00      	ldr	r3, [sp, #0]
 8006cc6:	4059      	eors	r1, r3
 8006cc8:	b2cb      	uxtb	r3, r1
 8006cca:	9303      	str	r3, [sp, #12]
 8006ccc:	2d0a      	cmp	r5, #10
 8006cce:	dd00      	ble.n	8006cd2 <__aeabi_dmul+0x1ae>
 8006cd0:	e133      	b.n	8006f3a <__aeabi_dmul+0x416>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	40ab      	lsls	r3, r5
 8006cd6:	001d      	movs	r5, r3
 8006cd8:	2303      	movs	r3, #3
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	2288      	movs	r2, #136	@ 0x88
 8006cde:	422a      	tst	r2, r5
 8006ce0:	d197      	bne.n	8006c12 <__aeabi_dmul+0xee>
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	4643      	mov	r3, r8
 8006ce6:	0412      	lsls	r2, r2, #16
 8006ce8:	0c12      	lsrs	r2, r2, #16
 8006cea:	0016      	movs	r6, r2
 8006cec:	9801      	ldr	r0, [sp, #4]
 8006cee:	0c1d      	lsrs	r5, r3, #16
 8006cf0:	0c03      	lsrs	r3, r0, #16
 8006cf2:	0400      	lsls	r0, r0, #16
 8006cf4:	0c00      	lsrs	r0, r0, #16
 8006cf6:	4346      	muls	r6, r0
 8006cf8:	46b4      	mov	ip, r6
 8006cfa:	001e      	movs	r6, r3
 8006cfc:	436e      	muls	r6, r5
 8006cfe:	9600      	str	r6, [sp, #0]
 8006d00:	0016      	movs	r6, r2
 8006d02:	0007      	movs	r7, r0
 8006d04:	435e      	muls	r6, r3
 8006d06:	4661      	mov	r1, ip
 8006d08:	46b0      	mov	r8, r6
 8006d0a:	436f      	muls	r7, r5
 8006d0c:	0c0e      	lsrs	r6, r1, #16
 8006d0e:	44b8      	add	r8, r7
 8006d10:	4446      	add	r6, r8
 8006d12:	42b7      	cmp	r7, r6
 8006d14:	d905      	bls.n	8006d22 <__aeabi_dmul+0x1fe>
 8006d16:	2180      	movs	r1, #128	@ 0x80
 8006d18:	0249      	lsls	r1, r1, #9
 8006d1a:	4688      	mov	r8, r1
 8006d1c:	9f00      	ldr	r7, [sp, #0]
 8006d1e:	4447      	add	r7, r8
 8006d20:	9700      	str	r7, [sp, #0]
 8006d22:	4661      	mov	r1, ip
 8006d24:	0409      	lsls	r1, r1, #16
 8006d26:	0c09      	lsrs	r1, r1, #16
 8006d28:	0c37      	lsrs	r7, r6, #16
 8006d2a:	0436      	lsls	r6, r6, #16
 8006d2c:	468c      	mov	ip, r1
 8006d2e:	0031      	movs	r1, r6
 8006d30:	4461      	add	r1, ip
 8006d32:	9101      	str	r1, [sp, #4]
 8006d34:	0011      	movs	r1, r2
 8006d36:	0c26      	lsrs	r6, r4, #16
 8006d38:	0424      	lsls	r4, r4, #16
 8006d3a:	0c24      	lsrs	r4, r4, #16
 8006d3c:	4361      	muls	r1, r4
 8006d3e:	468c      	mov	ip, r1
 8006d40:	0021      	movs	r1, r4
 8006d42:	4369      	muls	r1, r5
 8006d44:	4689      	mov	r9, r1
 8006d46:	4661      	mov	r1, ip
 8006d48:	0c09      	lsrs	r1, r1, #16
 8006d4a:	4688      	mov	r8, r1
 8006d4c:	4372      	muls	r2, r6
 8006d4e:	444a      	add	r2, r9
 8006d50:	4442      	add	r2, r8
 8006d52:	4375      	muls	r5, r6
 8006d54:	4591      	cmp	r9, r2
 8006d56:	d903      	bls.n	8006d60 <__aeabi_dmul+0x23c>
 8006d58:	2180      	movs	r1, #128	@ 0x80
 8006d5a:	0249      	lsls	r1, r1, #9
 8006d5c:	4688      	mov	r8, r1
 8006d5e:	4445      	add	r5, r8
 8006d60:	0c11      	lsrs	r1, r2, #16
 8006d62:	4688      	mov	r8, r1
 8006d64:	4661      	mov	r1, ip
 8006d66:	0409      	lsls	r1, r1, #16
 8006d68:	0c09      	lsrs	r1, r1, #16
 8006d6a:	468c      	mov	ip, r1
 8006d6c:	0412      	lsls	r2, r2, #16
 8006d6e:	4462      	add	r2, ip
 8006d70:	18b9      	adds	r1, r7, r2
 8006d72:	9102      	str	r1, [sp, #8]
 8006d74:	4651      	mov	r1, sl
 8006d76:	0c09      	lsrs	r1, r1, #16
 8006d78:	468c      	mov	ip, r1
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	040f      	lsls	r7, r1, #16
 8006d7e:	0c3f      	lsrs	r7, r7, #16
 8006d80:	0039      	movs	r1, r7
 8006d82:	4341      	muls	r1, r0
 8006d84:	4445      	add	r5, r8
 8006d86:	4688      	mov	r8, r1
 8006d88:	4661      	mov	r1, ip
 8006d8a:	4341      	muls	r1, r0
 8006d8c:	468a      	mov	sl, r1
 8006d8e:	4641      	mov	r1, r8
 8006d90:	4660      	mov	r0, ip
 8006d92:	0c09      	lsrs	r1, r1, #16
 8006d94:	4689      	mov	r9, r1
 8006d96:	4358      	muls	r0, r3
 8006d98:	437b      	muls	r3, r7
 8006d9a:	4453      	add	r3, sl
 8006d9c:	444b      	add	r3, r9
 8006d9e:	459a      	cmp	sl, r3
 8006da0:	d903      	bls.n	8006daa <__aeabi_dmul+0x286>
 8006da2:	2180      	movs	r1, #128	@ 0x80
 8006da4:	0249      	lsls	r1, r1, #9
 8006da6:	4689      	mov	r9, r1
 8006da8:	4448      	add	r0, r9
 8006daa:	0c19      	lsrs	r1, r3, #16
 8006dac:	4689      	mov	r9, r1
 8006dae:	4641      	mov	r1, r8
 8006db0:	0409      	lsls	r1, r1, #16
 8006db2:	0c09      	lsrs	r1, r1, #16
 8006db4:	4688      	mov	r8, r1
 8006db6:	0039      	movs	r1, r7
 8006db8:	4361      	muls	r1, r4
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	4443      	add	r3, r8
 8006dbe:	4688      	mov	r8, r1
 8006dc0:	4661      	mov	r1, ip
 8006dc2:	434c      	muls	r4, r1
 8006dc4:	4371      	muls	r1, r6
 8006dc6:	468c      	mov	ip, r1
 8006dc8:	4641      	mov	r1, r8
 8006dca:	4377      	muls	r7, r6
 8006dcc:	0c0e      	lsrs	r6, r1, #16
 8006dce:	193f      	adds	r7, r7, r4
 8006dd0:	19f6      	adds	r6, r6, r7
 8006dd2:	4448      	add	r0, r9
 8006dd4:	42b4      	cmp	r4, r6
 8006dd6:	d903      	bls.n	8006de0 <__aeabi_dmul+0x2bc>
 8006dd8:	2180      	movs	r1, #128	@ 0x80
 8006dda:	0249      	lsls	r1, r1, #9
 8006ddc:	4689      	mov	r9, r1
 8006dde:	44cc      	add	ip, r9
 8006de0:	9902      	ldr	r1, [sp, #8]
 8006de2:	9f00      	ldr	r7, [sp, #0]
 8006de4:	4689      	mov	r9, r1
 8006de6:	0431      	lsls	r1, r6, #16
 8006de8:	444f      	add	r7, r9
 8006dea:	4689      	mov	r9, r1
 8006dec:	4641      	mov	r1, r8
 8006dee:	4297      	cmp	r7, r2
 8006df0:	4192      	sbcs	r2, r2
 8006df2:	040c      	lsls	r4, r1, #16
 8006df4:	0c24      	lsrs	r4, r4, #16
 8006df6:	444c      	add	r4, r9
 8006df8:	18ff      	adds	r7, r7, r3
 8006dfa:	4252      	negs	r2, r2
 8006dfc:	1964      	adds	r4, r4, r5
 8006dfe:	18a1      	adds	r1, r4, r2
 8006e00:	429f      	cmp	r7, r3
 8006e02:	419b      	sbcs	r3, r3
 8006e04:	4688      	mov	r8, r1
 8006e06:	4682      	mov	sl, r0
 8006e08:	425b      	negs	r3, r3
 8006e0a:	4699      	mov	r9, r3
 8006e0c:	4590      	cmp	r8, r2
 8006e0e:	4192      	sbcs	r2, r2
 8006e10:	42ac      	cmp	r4, r5
 8006e12:	41a4      	sbcs	r4, r4
 8006e14:	44c2      	add	sl, r8
 8006e16:	44d1      	add	r9, sl
 8006e18:	4252      	negs	r2, r2
 8006e1a:	4264      	negs	r4, r4
 8006e1c:	4314      	orrs	r4, r2
 8006e1e:	4599      	cmp	r9, r3
 8006e20:	419b      	sbcs	r3, r3
 8006e22:	4582      	cmp	sl, r0
 8006e24:	4192      	sbcs	r2, r2
 8006e26:	425b      	negs	r3, r3
 8006e28:	4252      	negs	r2, r2
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	464a      	mov	r2, r9
 8006e2e:	0c36      	lsrs	r6, r6, #16
 8006e30:	19a4      	adds	r4, r4, r6
 8006e32:	18e3      	adds	r3, r4, r3
 8006e34:	4463      	add	r3, ip
 8006e36:	025b      	lsls	r3, r3, #9
 8006e38:	0dd2      	lsrs	r2, r2, #23
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	9901      	ldr	r1, [sp, #4]
 8006e3e:	4692      	mov	sl, r2
 8006e40:	027a      	lsls	r2, r7, #9
 8006e42:	430a      	orrs	r2, r1
 8006e44:	1e50      	subs	r0, r2, #1
 8006e46:	4182      	sbcs	r2, r0
 8006e48:	0dff      	lsrs	r7, r7, #23
 8006e4a:	4317      	orrs	r7, r2
 8006e4c:	464a      	mov	r2, r9
 8006e4e:	0252      	lsls	r2, r2, #9
 8006e50:	4317      	orrs	r7, r2
 8006e52:	46b8      	mov	r8, r7
 8006e54:	01db      	lsls	r3, r3, #7
 8006e56:	d500      	bpl.n	8006e5a <__aeabi_dmul+0x336>
 8006e58:	e6ed      	b.n	8006c36 <__aeabi_dmul+0x112>
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e90 <__aeabi_dmul+0x36c>)
 8006e5c:	9a03      	ldr	r2, [sp, #12]
 8006e5e:	445b      	add	r3, fp
 8006e60:	4691      	mov	r9, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dc00      	bgt.n	8006e68 <__aeabi_dmul+0x344>
 8006e66:	e0ac      	b.n	8006fc2 <__aeabi_dmul+0x49e>
 8006e68:	003a      	movs	r2, r7
 8006e6a:	0752      	lsls	r2, r2, #29
 8006e6c:	d100      	bne.n	8006e70 <__aeabi_dmul+0x34c>
 8006e6e:	e710      	b.n	8006c92 <__aeabi_dmul+0x16e>
 8006e70:	220f      	movs	r2, #15
 8006e72:	4658      	mov	r0, fp
 8006e74:	403a      	ands	r2, r7
 8006e76:	2a04      	cmp	r2, #4
 8006e78:	d000      	beq.n	8006e7c <__aeabi_dmul+0x358>
 8006e7a:	e6f9      	b.n	8006c70 <__aeabi_dmul+0x14c>
 8006e7c:	e709      	b.n	8006c92 <__aeabi_dmul+0x16e>
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	000007ff 	.word	0x000007ff
 8006e84:	fffffc01 	.word	0xfffffc01
 8006e88:	feffffff 	.word	0xfeffffff
 8006e8c:	000007fe 	.word	0x000007fe
 8006e90:	000003ff 	.word	0x000003ff
 8006e94:	0022      	movs	r2, r4
 8006e96:	4332      	orrs	r2, r6
 8006e98:	d06f      	beq.n	8006f7a <__aeabi_dmul+0x456>
 8006e9a:	2c00      	cmp	r4, #0
 8006e9c:	d100      	bne.n	8006ea0 <__aeabi_dmul+0x37c>
 8006e9e:	e0c2      	b.n	8007026 <__aeabi_dmul+0x502>
 8006ea0:	0020      	movs	r0, r4
 8006ea2:	f000 fdcd 	bl	8007a40 <__clzsi2>
 8006ea6:	0002      	movs	r2, r0
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	3a0b      	subs	r2, #11
 8006eac:	201d      	movs	r0, #29
 8006eae:	1a82      	subs	r2, r0, r2
 8006eb0:	0030      	movs	r0, r6
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	40d0      	lsrs	r0, r2
 8006eb6:	3908      	subs	r1, #8
 8006eb8:	408c      	lsls	r4, r1
 8006eba:	0002      	movs	r2, r0
 8006ebc:	4322      	orrs	r2, r4
 8006ebe:	0034      	movs	r4, r6
 8006ec0:	408c      	lsls	r4, r1
 8006ec2:	4659      	mov	r1, fp
 8006ec4:	1acb      	subs	r3, r1, r3
 8006ec6:	4986      	ldr	r1, [pc, #536]	@ (80070e0 <__aeabi_dmul+0x5bc>)
 8006ec8:	468b      	mov	fp, r1
 8006eca:	449b      	add	fp, r3
 8006ecc:	2d0a      	cmp	r5, #10
 8006ece:	dd00      	ble.n	8006ed2 <__aeabi_dmul+0x3ae>
 8006ed0:	e6a4      	b.n	8006c1c <__aeabi_dmul+0xf8>
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	9b00      	ldr	r3, [sp, #0]
 8006ed6:	9401      	str	r4, [sp, #4]
 8006ed8:	4059      	eors	r1, r3
 8006eda:	b2cb      	uxtb	r3, r1
 8006edc:	0014      	movs	r4, r2
 8006ede:	2000      	movs	r0, #0
 8006ee0:	9303      	str	r3, [sp, #12]
 8006ee2:	2d02      	cmp	r5, #2
 8006ee4:	dd00      	ble.n	8006ee8 <__aeabi_dmul+0x3c4>
 8006ee6:	e667      	b.n	8006bb8 <__aeabi_dmul+0x94>
 8006ee8:	e6fb      	b.n	8006ce2 <__aeabi_dmul+0x1be>
 8006eea:	4653      	mov	r3, sl
 8006eec:	4303      	orrs	r3, r0
 8006eee:	4698      	mov	r8, r3
 8006ef0:	d03c      	beq.n	8006f6c <__aeabi_dmul+0x448>
 8006ef2:	4653      	mov	r3, sl
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d100      	bne.n	8006efa <__aeabi_dmul+0x3d6>
 8006ef8:	e0a3      	b.n	8007042 <__aeabi_dmul+0x51e>
 8006efa:	4650      	mov	r0, sl
 8006efc:	f000 fda0 	bl	8007a40 <__clzsi2>
 8006f00:	230b      	movs	r3, #11
 8006f02:	425b      	negs	r3, r3
 8006f04:	469c      	mov	ip, r3
 8006f06:	0002      	movs	r2, r0
 8006f08:	4484      	add	ip, r0
 8006f0a:	0011      	movs	r1, r2
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	3908      	subs	r1, #8
 8006f10:	4088      	lsls	r0, r1
 8006f12:	231d      	movs	r3, #29
 8006f14:	4680      	mov	r8, r0
 8006f16:	4660      	mov	r0, ip
 8006f18:	1a1b      	subs	r3, r3, r0
 8006f1a:	0020      	movs	r0, r4
 8006f1c:	40d8      	lsrs	r0, r3
 8006f1e:	0003      	movs	r3, r0
 8006f20:	4640      	mov	r0, r8
 8006f22:	4303      	orrs	r3, r0
 8006f24:	469a      	mov	sl, r3
 8006f26:	0023      	movs	r3, r4
 8006f28:	408b      	lsls	r3, r1
 8006f2a:	4698      	mov	r8, r3
 8006f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80070e0 <__aeabi_dmul+0x5bc>)
 8006f2e:	2500      	movs	r5, #0
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	469b      	mov	fp, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	9302      	str	r3, [sp, #8]
 8006f38:	e61a      	b.n	8006b70 <__aeabi_dmul+0x4c>
 8006f3a:	2d0f      	cmp	r5, #15
 8006f3c:	d000      	beq.n	8006f40 <__aeabi_dmul+0x41c>
 8006f3e:	e0c9      	b.n	80070d4 <__aeabi_dmul+0x5b0>
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	4652      	mov	r2, sl
 8006f44:	031b      	lsls	r3, r3, #12
 8006f46:	421a      	tst	r2, r3
 8006f48:	d002      	beq.n	8006f50 <__aeabi_dmul+0x42c>
 8006f4a:	421c      	tst	r4, r3
 8006f4c:	d100      	bne.n	8006f50 <__aeabi_dmul+0x42c>
 8006f4e:	e092      	b.n	8007076 <__aeabi_dmul+0x552>
 8006f50:	2480      	movs	r4, #128	@ 0x80
 8006f52:	4653      	mov	r3, sl
 8006f54:	0324      	lsls	r4, r4, #12
 8006f56:	431c      	orrs	r4, r3
 8006f58:	0324      	lsls	r4, r4, #12
 8006f5a:	4642      	mov	r2, r8
 8006f5c:	0b24      	lsrs	r4, r4, #12
 8006f5e:	e63e      	b.n	8006bde <__aeabi_dmul+0xba>
 8006f60:	469b      	mov	fp, r3
 8006f62:	2303      	movs	r3, #3
 8006f64:	4680      	mov	r8, r0
 8006f66:	250c      	movs	r5, #12
 8006f68:	9302      	str	r3, [sp, #8]
 8006f6a:	e601      	b.n	8006b70 <__aeabi_dmul+0x4c>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	469a      	mov	sl, r3
 8006f70:	469b      	mov	fp, r3
 8006f72:	3301      	adds	r3, #1
 8006f74:	2504      	movs	r5, #4
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	e5fa      	b.n	8006b70 <__aeabi_dmul+0x4c>
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	430d      	orrs	r5, r1
 8006f7e:	2d0a      	cmp	r5, #10
 8006f80:	dd00      	ble.n	8006f84 <__aeabi_dmul+0x460>
 8006f82:	e64b      	b.n	8006c1c <__aeabi_dmul+0xf8>
 8006f84:	4649      	mov	r1, r9
 8006f86:	9800      	ldr	r0, [sp, #0]
 8006f88:	4041      	eors	r1, r0
 8006f8a:	b2c9      	uxtb	r1, r1
 8006f8c:	9103      	str	r1, [sp, #12]
 8006f8e:	2d02      	cmp	r5, #2
 8006f90:	dc00      	bgt.n	8006f94 <__aeabi_dmul+0x470>
 8006f92:	e096      	b.n	80070c2 <__aeabi_dmul+0x59e>
 8006f94:	2300      	movs	r3, #0
 8006f96:	2400      	movs	r4, #0
 8006f98:	2001      	movs	r0, #1
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	e60c      	b.n	8006bb8 <__aeabi_dmul+0x94>
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	9a00      	ldr	r2, [sp, #0]
 8006fa4:	432b      	orrs	r3, r5
 8006fa6:	4051      	eors	r1, r2
 8006fa8:	b2ca      	uxtb	r2, r1
 8006faa:	9203      	str	r2, [sp, #12]
 8006fac:	2b0a      	cmp	r3, #10
 8006fae:	dd00      	ble.n	8006fb2 <__aeabi_dmul+0x48e>
 8006fb0:	e634      	b.n	8006c1c <__aeabi_dmul+0xf8>
 8006fb2:	2d00      	cmp	r5, #0
 8006fb4:	d157      	bne.n	8007066 <__aeabi_dmul+0x542>
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	4699      	mov	r9, r3
 8006fba:	2400      	movs	r4, #0
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4b49      	ldr	r3, [pc, #292]	@ (80070e4 <__aeabi_dmul+0x5c0>)
 8006fc0:	e60e      	b.n	8006be0 <__aeabi_dmul+0xbc>
 8006fc2:	4658      	mov	r0, fp
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	1ac9      	subs	r1, r1, r3
 8006fc8:	2938      	cmp	r1, #56	@ 0x38
 8006fca:	dd00      	ble.n	8006fce <__aeabi_dmul+0x4aa>
 8006fcc:	e62f      	b.n	8006c2e <__aeabi_dmul+0x10a>
 8006fce:	291f      	cmp	r1, #31
 8006fd0:	dd56      	ble.n	8007080 <__aeabi_dmul+0x55c>
 8006fd2:	221f      	movs	r2, #31
 8006fd4:	4654      	mov	r4, sl
 8006fd6:	4252      	negs	r2, r2
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	40dc      	lsrs	r4, r3
 8006fdc:	2920      	cmp	r1, #32
 8006fde:	d007      	beq.n	8006ff0 <__aeabi_dmul+0x4cc>
 8006fe0:	4b41      	ldr	r3, [pc, #260]	@ (80070e8 <__aeabi_dmul+0x5c4>)
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	469c      	mov	ip, r3
 8006fe6:	4653      	mov	r3, sl
 8006fe8:	4460      	add	r0, ip
 8006fea:	4083      	lsls	r3, r0
 8006fec:	431a      	orrs	r2, r3
 8006fee:	4690      	mov	r8, r2
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	2107      	movs	r1, #7
 8006ff4:	1e53      	subs	r3, r2, #1
 8006ff6:	419a      	sbcs	r2, r3
 8006ff8:	000b      	movs	r3, r1
 8006ffa:	4322      	orrs	r2, r4
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2400      	movs	r4, #0
 8007000:	4211      	tst	r1, r2
 8007002:	d009      	beq.n	8007018 <__aeabi_dmul+0x4f4>
 8007004:	230f      	movs	r3, #15
 8007006:	4013      	ands	r3, r2
 8007008:	2b04      	cmp	r3, #4
 800700a:	d05d      	beq.n	80070c8 <__aeabi_dmul+0x5a4>
 800700c:	1d11      	adds	r1, r2, #4
 800700e:	4291      	cmp	r1, r2
 8007010:	419b      	sbcs	r3, r3
 8007012:	000a      	movs	r2, r1
 8007014:	425b      	negs	r3, r3
 8007016:	075b      	lsls	r3, r3, #29
 8007018:	08d2      	lsrs	r2, r2, #3
 800701a:	431a      	orrs	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	e5df      	b.n	8006be0 <__aeabi_dmul+0xbc>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	4699      	mov	r9, r3
 8007024:	e5fa      	b.n	8006c1c <__aeabi_dmul+0xf8>
 8007026:	9801      	ldr	r0, [sp, #4]
 8007028:	f000 fd0a 	bl	8007a40 <__clzsi2>
 800702c:	0002      	movs	r2, r0
 800702e:	0003      	movs	r3, r0
 8007030:	3215      	adds	r2, #21
 8007032:	3320      	adds	r3, #32
 8007034:	2a1c      	cmp	r2, #28
 8007036:	dc00      	bgt.n	800703a <__aeabi_dmul+0x516>
 8007038:	e738      	b.n	8006eac <__aeabi_dmul+0x388>
 800703a:	9a01      	ldr	r2, [sp, #4]
 800703c:	3808      	subs	r0, #8
 800703e:	4082      	lsls	r2, r0
 8007040:	e73f      	b.n	8006ec2 <__aeabi_dmul+0x39e>
 8007042:	f000 fcfd 	bl	8007a40 <__clzsi2>
 8007046:	2315      	movs	r3, #21
 8007048:	469c      	mov	ip, r3
 800704a:	4484      	add	ip, r0
 800704c:	0002      	movs	r2, r0
 800704e:	4663      	mov	r3, ip
 8007050:	3220      	adds	r2, #32
 8007052:	2b1c      	cmp	r3, #28
 8007054:	dc00      	bgt.n	8007058 <__aeabi_dmul+0x534>
 8007056:	e758      	b.n	8006f0a <__aeabi_dmul+0x3e6>
 8007058:	2300      	movs	r3, #0
 800705a:	4698      	mov	r8, r3
 800705c:	0023      	movs	r3, r4
 800705e:	3808      	subs	r0, #8
 8007060:	4083      	lsls	r3, r0
 8007062:	469a      	mov	sl, r3
 8007064:	e762      	b.n	8006f2c <__aeabi_dmul+0x408>
 8007066:	001d      	movs	r5, r3
 8007068:	2300      	movs	r3, #0
 800706a:	2400      	movs	r4, #0
 800706c:	2002      	movs	r0, #2
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	e5a2      	b.n	8006bb8 <__aeabi_dmul+0x94>
 8007072:	9002      	str	r0, [sp, #8]
 8007074:	e632      	b.n	8006cdc <__aeabi_dmul+0x1b8>
 8007076:	431c      	orrs	r4, r3
 8007078:	9b00      	ldr	r3, [sp, #0]
 800707a:	9a01      	ldr	r2, [sp, #4]
 800707c:	4699      	mov	r9, r3
 800707e:	e5ae      	b.n	8006bde <__aeabi_dmul+0xba>
 8007080:	4b1a      	ldr	r3, [pc, #104]	@ (80070ec <__aeabi_dmul+0x5c8>)
 8007082:	4652      	mov	r2, sl
 8007084:	18c3      	adds	r3, r0, r3
 8007086:	4640      	mov	r0, r8
 8007088:	409a      	lsls	r2, r3
 800708a:	40c8      	lsrs	r0, r1
 800708c:	4302      	orrs	r2, r0
 800708e:	4640      	mov	r0, r8
 8007090:	4098      	lsls	r0, r3
 8007092:	0003      	movs	r3, r0
 8007094:	1e58      	subs	r0, r3, #1
 8007096:	4183      	sbcs	r3, r0
 8007098:	4654      	mov	r4, sl
 800709a:	431a      	orrs	r2, r3
 800709c:	40cc      	lsrs	r4, r1
 800709e:	0753      	lsls	r3, r2, #29
 80070a0:	d009      	beq.n	80070b6 <__aeabi_dmul+0x592>
 80070a2:	230f      	movs	r3, #15
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d005      	beq.n	80070b6 <__aeabi_dmul+0x592>
 80070aa:	1d13      	adds	r3, r2, #4
 80070ac:	4293      	cmp	r3, r2
 80070ae:	4192      	sbcs	r2, r2
 80070b0:	4252      	negs	r2, r2
 80070b2:	18a4      	adds	r4, r4, r2
 80070b4:	001a      	movs	r2, r3
 80070b6:	0223      	lsls	r3, r4, #8
 80070b8:	d508      	bpl.n	80070cc <__aeabi_dmul+0x5a8>
 80070ba:	2301      	movs	r3, #1
 80070bc:	2400      	movs	r4, #0
 80070be:	2200      	movs	r2, #0
 80070c0:	e58e      	b.n	8006be0 <__aeabi_dmul+0xbc>
 80070c2:	4689      	mov	r9, r1
 80070c4:	2400      	movs	r4, #0
 80070c6:	e58b      	b.n	8006be0 <__aeabi_dmul+0xbc>
 80070c8:	2300      	movs	r3, #0
 80070ca:	e7a5      	b.n	8007018 <__aeabi_dmul+0x4f4>
 80070cc:	0763      	lsls	r3, r4, #29
 80070ce:	0264      	lsls	r4, r4, #9
 80070d0:	0b24      	lsrs	r4, r4, #12
 80070d2:	e7a1      	b.n	8007018 <__aeabi_dmul+0x4f4>
 80070d4:	9b00      	ldr	r3, [sp, #0]
 80070d6:	46a2      	mov	sl, r4
 80070d8:	4699      	mov	r9, r3
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	4698      	mov	r8, r3
 80070de:	e737      	b.n	8006f50 <__aeabi_dmul+0x42c>
 80070e0:	fffffc0d 	.word	0xfffffc0d
 80070e4:	000007ff 	.word	0x000007ff
 80070e8:	0000043e 	.word	0x0000043e
 80070ec:	0000041e 	.word	0x0000041e

080070f0 <__aeabi_dsub>:
 80070f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070f2:	4657      	mov	r7, sl
 80070f4:	464e      	mov	r6, r9
 80070f6:	4645      	mov	r5, r8
 80070f8:	46de      	mov	lr, fp
 80070fa:	b5e0      	push	{r5, r6, r7, lr}
 80070fc:	b083      	sub	sp, #12
 80070fe:	9000      	str	r0, [sp, #0]
 8007100:	9101      	str	r1, [sp, #4]
 8007102:	030c      	lsls	r4, r1, #12
 8007104:	004d      	lsls	r5, r1, #1
 8007106:	0fce      	lsrs	r6, r1, #31
 8007108:	0a61      	lsrs	r1, r4, #9
 800710a:	9c00      	ldr	r4, [sp, #0]
 800710c:	005f      	lsls	r7, r3, #1
 800710e:	0f64      	lsrs	r4, r4, #29
 8007110:	430c      	orrs	r4, r1
 8007112:	9900      	ldr	r1, [sp, #0]
 8007114:	9200      	str	r2, [sp, #0]
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	00c8      	lsls	r0, r1, #3
 800711a:	0319      	lsls	r1, r3, #12
 800711c:	0d7b      	lsrs	r3, r7, #21
 800711e:	4699      	mov	r9, r3
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	4fcc      	ldr	r7, [pc, #816]	@ (8007454 <__aeabi_dsub+0x364>)
 8007124:	0fdb      	lsrs	r3, r3, #31
 8007126:	469c      	mov	ip, r3
 8007128:	0a4b      	lsrs	r3, r1, #9
 800712a:	9900      	ldr	r1, [sp, #0]
 800712c:	4680      	mov	r8, r0
 800712e:	0f49      	lsrs	r1, r1, #29
 8007130:	4319      	orrs	r1, r3
 8007132:	9b00      	ldr	r3, [sp, #0]
 8007134:	468b      	mov	fp, r1
 8007136:	00da      	lsls	r2, r3, #3
 8007138:	4692      	mov	sl, r2
 800713a:	0d6d      	lsrs	r5, r5, #21
 800713c:	45b9      	cmp	r9, r7
 800713e:	d100      	bne.n	8007142 <__aeabi_dsub+0x52>
 8007140:	e0bf      	b.n	80072c2 <__aeabi_dsub+0x1d2>
 8007142:	2301      	movs	r3, #1
 8007144:	4661      	mov	r1, ip
 8007146:	4059      	eors	r1, r3
 8007148:	464b      	mov	r3, r9
 800714a:	468c      	mov	ip, r1
 800714c:	1aeb      	subs	r3, r5, r3
 800714e:	428e      	cmp	r6, r1
 8007150:	d075      	beq.n	800723e <__aeabi_dsub+0x14e>
 8007152:	2b00      	cmp	r3, #0
 8007154:	dc00      	bgt.n	8007158 <__aeabi_dsub+0x68>
 8007156:	e2a3      	b.n	80076a0 <__aeabi_dsub+0x5b0>
 8007158:	4649      	mov	r1, r9
 800715a:	2900      	cmp	r1, #0
 800715c:	d100      	bne.n	8007160 <__aeabi_dsub+0x70>
 800715e:	e0ce      	b.n	80072fe <__aeabi_dsub+0x20e>
 8007160:	42bd      	cmp	r5, r7
 8007162:	d100      	bne.n	8007166 <__aeabi_dsub+0x76>
 8007164:	e200      	b.n	8007568 <__aeabi_dsub+0x478>
 8007166:	2701      	movs	r7, #1
 8007168:	2b38      	cmp	r3, #56	@ 0x38
 800716a:	dc19      	bgt.n	80071a0 <__aeabi_dsub+0xb0>
 800716c:	2780      	movs	r7, #128	@ 0x80
 800716e:	4659      	mov	r1, fp
 8007170:	043f      	lsls	r7, r7, #16
 8007172:	4339      	orrs	r1, r7
 8007174:	468b      	mov	fp, r1
 8007176:	2b1f      	cmp	r3, #31
 8007178:	dd00      	ble.n	800717c <__aeabi_dsub+0x8c>
 800717a:	e1fa      	b.n	8007572 <__aeabi_dsub+0x482>
 800717c:	2720      	movs	r7, #32
 800717e:	1af9      	subs	r1, r7, r3
 8007180:	468c      	mov	ip, r1
 8007182:	4659      	mov	r1, fp
 8007184:	4667      	mov	r7, ip
 8007186:	40b9      	lsls	r1, r7
 8007188:	000f      	movs	r7, r1
 800718a:	0011      	movs	r1, r2
 800718c:	40d9      	lsrs	r1, r3
 800718e:	430f      	orrs	r7, r1
 8007190:	4661      	mov	r1, ip
 8007192:	408a      	lsls	r2, r1
 8007194:	1e51      	subs	r1, r2, #1
 8007196:	418a      	sbcs	r2, r1
 8007198:	4659      	mov	r1, fp
 800719a:	40d9      	lsrs	r1, r3
 800719c:	4317      	orrs	r7, r2
 800719e:	1a64      	subs	r4, r4, r1
 80071a0:	1bc7      	subs	r7, r0, r7
 80071a2:	42b8      	cmp	r0, r7
 80071a4:	4180      	sbcs	r0, r0
 80071a6:	4240      	negs	r0, r0
 80071a8:	1a24      	subs	r4, r4, r0
 80071aa:	0223      	lsls	r3, r4, #8
 80071ac:	d400      	bmi.n	80071b0 <__aeabi_dsub+0xc0>
 80071ae:	e140      	b.n	8007432 <__aeabi_dsub+0x342>
 80071b0:	0264      	lsls	r4, r4, #9
 80071b2:	0a64      	lsrs	r4, r4, #9
 80071b4:	2c00      	cmp	r4, #0
 80071b6:	d100      	bne.n	80071ba <__aeabi_dsub+0xca>
 80071b8:	e154      	b.n	8007464 <__aeabi_dsub+0x374>
 80071ba:	0020      	movs	r0, r4
 80071bc:	f000 fc40 	bl	8007a40 <__clzsi2>
 80071c0:	0003      	movs	r3, r0
 80071c2:	3b08      	subs	r3, #8
 80071c4:	2120      	movs	r1, #32
 80071c6:	0038      	movs	r0, r7
 80071c8:	1aca      	subs	r2, r1, r3
 80071ca:	40d0      	lsrs	r0, r2
 80071cc:	409c      	lsls	r4, r3
 80071ce:	0002      	movs	r2, r0
 80071d0:	409f      	lsls	r7, r3
 80071d2:	4322      	orrs	r2, r4
 80071d4:	429d      	cmp	r5, r3
 80071d6:	dd00      	ble.n	80071da <__aeabi_dsub+0xea>
 80071d8:	e1a6      	b.n	8007528 <__aeabi_dsub+0x438>
 80071da:	1b58      	subs	r0, r3, r5
 80071dc:	3001      	adds	r0, #1
 80071de:	1a09      	subs	r1, r1, r0
 80071e0:	003c      	movs	r4, r7
 80071e2:	408f      	lsls	r7, r1
 80071e4:	40c4      	lsrs	r4, r0
 80071e6:	1e7b      	subs	r3, r7, #1
 80071e8:	419f      	sbcs	r7, r3
 80071ea:	0013      	movs	r3, r2
 80071ec:	408b      	lsls	r3, r1
 80071ee:	4327      	orrs	r7, r4
 80071f0:	431f      	orrs	r7, r3
 80071f2:	40c2      	lsrs	r2, r0
 80071f4:	003b      	movs	r3, r7
 80071f6:	0014      	movs	r4, r2
 80071f8:	2500      	movs	r5, #0
 80071fa:	4313      	orrs	r3, r2
 80071fc:	d100      	bne.n	8007200 <__aeabi_dsub+0x110>
 80071fe:	e1f7      	b.n	80075f0 <__aeabi_dsub+0x500>
 8007200:	077b      	lsls	r3, r7, #29
 8007202:	d100      	bne.n	8007206 <__aeabi_dsub+0x116>
 8007204:	e377      	b.n	80078f6 <__aeabi_dsub+0x806>
 8007206:	230f      	movs	r3, #15
 8007208:	0038      	movs	r0, r7
 800720a:	403b      	ands	r3, r7
 800720c:	2b04      	cmp	r3, #4
 800720e:	d004      	beq.n	800721a <__aeabi_dsub+0x12a>
 8007210:	1d38      	adds	r0, r7, #4
 8007212:	42b8      	cmp	r0, r7
 8007214:	41bf      	sbcs	r7, r7
 8007216:	427f      	negs	r7, r7
 8007218:	19e4      	adds	r4, r4, r7
 800721a:	0223      	lsls	r3, r4, #8
 800721c:	d400      	bmi.n	8007220 <__aeabi_dsub+0x130>
 800721e:	e368      	b.n	80078f2 <__aeabi_dsub+0x802>
 8007220:	4b8c      	ldr	r3, [pc, #560]	@ (8007454 <__aeabi_dsub+0x364>)
 8007222:	3501      	adds	r5, #1
 8007224:	429d      	cmp	r5, r3
 8007226:	d100      	bne.n	800722a <__aeabi_dsub+0x13a>
 8007228:	e0f4      	b.n	8007414 <__aeabi_dsub+0x324>
 800722a:	4b8b      	ldr	r3, [pc, #556]	@ (8007458 <__aeabi_dsub+0x368>)
 800722c:	056d      	lsls	r5, r5, #21
 800722e:	401c      	ands	r4, r3
 8007230:	0d6d      	lsrs	r5, r5, #21
 8007232:	0767      	lsls	r7, r4, #29
 8007234:	08c0      	lsrs	r0, r0, #3
 8007236:	0264      	lsls	r4, r4, #9
 8007238:	4307      	orrs	r7, r0
 800723a:	0b24      	lsrs	r4, r4, #12
 800723c:	e0ec      	b.n	8007418 <__aeabi_dsub+0x328>
 800723e:	2b00      	cmp	r3, #0
 8007240:	dc00      	bgt.n	8007244 <__aeabi_dsub+0x154>
 8007242:	e329      	b.n	8007898 <__aeabi_dsub+0x7a8>
 8007244:	4649      	mov	r1, r9
 8007246:	2900      	cmp	r1, #0
 8007248:	d000      	beq.n	800724c <__aeabi_dsub+0x15c>
 800724a:	e0d6      	b.n	80073fa <__aeabi_dsub+0x30a>
 800724c:	4659      	mov	r1, fp
 800724e:	4311      	orrs	r1, r2
 8007250:	d100      	bne.n	8007254 <__aeabi_dsub+0x164>
 8007252:	e12e      	b.n	80074b2 <__aeabi_dsub+0x3c2>
 8007254:	1e59      	subs	r1, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d100      	bne.n	800725c <__aeabi_dsub+0x16c>
 800725a:	e1e6      	b.n	800762a <__aeabi_dsub+0x53a>
 800725c:	42bb      	cmp	r3, r7
 800725e:	d100      	bne.n	8007262 <__aeabi_dsub+0x172>
 8007260:	e182      	b.n	8007568 <__aeabi_dsub+0x478>
 8007262:	2701      	movs	r7, #1
 8007264:	000b      	movs	r3, r1
 8007266:	2938      	cmp	r1, #56	@ 0x38
 8007268:	dc14      	bgt.n	8007294 <__aeabi_dsub+0x1a4>
 800726a:	2b1f      	cmp	r3, #31
 800726c:	dd00      	ble.n	8007270 <__aeabi_dsub+0x180>
 800726e:	e23c      	b.n	80076ea <__aeabi_dsub+0x5fa>
 8007270:	2720      	movs	r7, #32
 8007272:	1af9      	subs	r1, r7, r3
 8007274:	468c      	mov	ip, r1
 8007276:	4659      	mov	r1, fp
 8007278:	4667      	mov	r7, ip
 800727a:	40b9      	lsls	r1, r7
 800727c:	000f      	movs	r7, r1
 800727e:	0011      	movs	r1, r2
 8007280:	40d9      	lsrs	r1, r3
 8007282:	430f      	orrs	r7, r1
 8007284:	4661      	mov	r1, ip
 8007286:	408a      	lsls	r2, r1
 8007288:	1e51      	subs	r1, r2, #1
 800728a:	418a      	sbcs	r2, r1
 800728c:	4659      	mov	r1, fp
 800728e:	40d9      	lsrs	r1, r3
 8007290:	4317      	orrs	r7, r2
 8007292:	1864      	adds	r4, r4, r1
 8007294:	183f      	adds	r7, r7, r0
 8007296:	4287      	cmp	r7, r0
 8007298:	4180      	sbcs	r0, r0
 800729a:	4240      	negs	r0, r0
 800729c:	1824      	adds	r4, r4, r0
 800729e:	0223      	lsls	r3, r4, #8
 80072a0:	d400      	bmi.n	80072a4 <__aeabi_dsub+0x1b4>
 80072a2:	e0c6      	b.n	8007432 <__aeabi_dsub+0x342>
 80072a4:	4b6b      	ldr	r3, [pc, #428]	@ (8007454 <__aeabi_dsub+0x364>)
 80072a6:	3501      	adds	r5, #1
 80072a8:	429d      	cmp	r5, r3
 80072aa:	d100      	bne.n	80072ae <__aeabi_dsub+0x1be>
 80072ac:	e0b2      	b.n	8007414 <__aeabi_dsub+0x324>
 80072ae:	2101      	movs	r1, #1
 80072b0:	4b69      	ldr	r3, [pc, #420]	@ (8007458 <__aeabi_dsub+0x368>)
 80072b2:	087a      	lsrs	r2, r7, #1
 80072b4:	401c      	ands	r4, r3
 80072b6:	4039      	ands	r1, r7
 80072b8:	430a      	orrs	r2, r1
 80072ba:	07e7      	lsls	r7, r4, #31
 80072bc:	4317      	orrs	r7, r2
 80072be:	0864      	lsrs	r4, r4, #1
 80072c0:	e79e      	b.n	8007200 <__aeabi_dsub+0x110>
 80072c2:	4b66      	ldr	r3, [pc, #408]	@ (800745c <__aeabi_dsub+0x36c>)
 80072c4:	4311      	orrs	r1, r2
 80072c6:	468a      	mov	sl, r1
 80072c8:	18eb      	adds	r3, r5, r3
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d028      	beq.n	8007320 <__aeabi_dsub+0x230>
 80072ce:	4566      	cmp	r6, ip
 80072d0:	d02c      	beq.n	800732c <__aeabi_dsub+0x23c>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d05b      	beq.n	800738e <__aeabi_dsub+0x29e>
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	d100      	bne.n	80072dc <__aeabi_dsub+0x1ec>
 80072da:	e12c      	b.n	8007536 <__aeabi_dsub+0x446>
 80072dc:	465b      	mov	r3, fp
 80072de:	4666      	mov	r6, ip
 80072e0:	075f      	lsls	r7, r3, #29
 80072e2:	08d2      	lsrs	r2, r2, #3
 80072e4:	4317      	orrs	r7, r2
 80072e6:	08dd      	lsrs	r5, r3, #3
 80072e8:	003b      	movs	r3, r7
 80072ea:	432b      	orrs	r3, r5
 80072ec:	d100      	bne.n	80072f0 <__aeabi_dsub+0x200>
 80072ee:	e0e2      	b.n	80074b6 <__aeabi_dsub+0x3c6>
 80072f0:	2480      	movs	r4, #128	@ 0x80
 80072f2:	0324      	lsls	r4, r4, #12
 80072f4:	432c      	orrs	r4, r5
 80072f6:	0324      	lsls	r4, r4, #12
 80072f8:	4d56      	ldr	r5, [pc, #344]	@ (8007454 <__aeabi_dsub+0x364>)
 80072fa:	0b24      	lsrs	r4, r4, #12
 80072fc:	e08c      	b.n	8007418 <__aeabi_dsub+0x328>
 80072fe:	4659      	mov	r1, fp
 8007300:	4311      	orrs	r1, r2
 8007302:	d100      	bne.n	8007306 <__aeabi_dsub+0x216>
 8007304:	e0d5      	b.n	80074b2 <__aeabi_dsub+0x3c2>
 8007306:	1e59      	subs	r1, r3, #1
 8007308:	2b01      	cmp	r3, #1
 800730a:	d100      	bne.n	800730e <__aeabi_dsub+0x21e>
 800730c:	e1b9      	b.n	8007682 <__aeabi_dsub+0x592>
 800730e:	42bb      	cmp	r3, r7
 8007310:	d100      	bne.n	8007314 <__aeabi_dsub+0x224>
 8007312:	e1b1      	b.n	8007678 <__aeabi_dsub+0x588>
 8007314:	2701      	movs	r7, #1
 8007316:	000b      	movs	r3, r1
 8007318:	2938      	cmp	r1, #56	@ 0x38
 800731a:	dd00      	ble.n	800731e <__aeabi_dsub+0x22e>
 800731c:	e740      	b.n	80071a0 <__aeabi_dsub+0xb0>
 800731e:	e72a      	b.n	8007176 <__aeabi_dsub+0x86>
 8007320:	4661      	mov	r1, ip
 8007322:	2701      	movs	r7, #1
 8007324:	4079      	eors	r1, r7
 8007326:	468c      	mov	ip, r1
 8007328:	4566      	cmp	r6, ip
 800732a:	d1d2      	bne.n	80072d2 <__aeabi_dsub+0x1e2>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d100      	bne.n	8007332 <__aeabi_dsub+0x242>
 8007330:	e0c5      	b.n	80074be <__aeabi_dsub+0x3ce>
 8007332:	2d00      	cmp	r5, #0
 8007334:	d000      	beq.n	8007338 <__aeabi_dsub+0x248>
 8007336:	e155      	b.n	80075e4 <__aeabi_dsub+0x4f4>
 8007338:	464b      	mov	r3, r9
 800733a:	0025      	movs	r5, r4
 800733c:	4305      	orrs	r5, r0
 800733e:	d100      	bne.n	8007342 <__aeabi_dsub+0x252>
 8007340:	e212      	b.n	8007768 <__aeabi_dsub+0x678>
 8007342:	1e59      	subs	r1, r3, #1
 8007344:	468c      	mov	ip, r1
 8007346:	2b01      	cmp	r3, #1
 8007348:	d100      	bne.n	800734c <__aeabi_dsub+0x25c>
 800734a:	e249      	b.n	80077e0 <__aeabi_dsub+0x6f0>
 800734c:	4d41      	ldr	r5, [pc, #260]	@ (8007454 <__aeabi_dsub+0x364>)
 800734e:	42ab      	cmp	r3, r5
 8007350:	d100      	bne.n	8007354 <__aeabi_dsub+0x264>
 8007352:	e28f      	b.n	8007874 <__aeabi_dsub+0x784>
 8007354:	2701      	movs	r7, #1
 8007356:	2938      	cmp	r1, #56	@ 0x38
 8007358:	dc11      	bgt.n	800737e <__aeabi_dsub+0x28e>
 800735a:	4663      	mov	r3, ip
 800735c:	2b1f      	cmp	r3, #31
 800735e:	dd00      	ble.n	8007362 <__aeabi_dsub+0x272>
 8007360:	e25b      	b.n	800781a <__aeabi_dsub+0x72a>
 8007362:	4661      	mov	r1, ip
 8007364:	2320      	movs	r3, #32
 8007366:	0027      	movs	r7, r4
 8007368:	1a5b      	subs	r3, r3, r1
 800736a:	0005      	movs	r5, r0
 800736c:	4098      	lsls	r0, r3
 800736e:	409f      	lsls	r7, r3
 8007370:	40cd      	lsrs	r5, r1
 8007372:	1e43      	subs	r3, r0, #1
 8007374:	4198      	sbcs	r0, r3
 8007376:	40cc      	lsrs	r4, r1
 8007378:	432f      	orrs	r7, r5
 800737a:	4307      	orrs	r7, r0
 800737c:	44a3      	add	fp, r4
 800737e:	18bf      	adds	r7, r7, r2
 8007380:	4297      	cmp	r7, r2
 8007382:	4192      	sbcs	r2, r2
 8007384:	4252      	negs	r2, r2
 8007386:	445a      	add	r2, fp
 8007388:	0014      	movs	r4, r2
 800738a:	464d      	mov	r5, r9
 800738c:	e787      	b.n	800729e <__aeabi_dsub+0x1ae>
 800738e:	4f34      	ldr	r7, [pc, #208]	@ (8007460 <__aeabi_dsub+0x370>)
 8007390:	1c6b      	adds	r3, r5, #1
 8007392:	423b      	tst	r3, r7
 8007394:	d000      	beq.n	8007398 <__aeabi_dsub+0x2a8>
 8007396:	e0b6      	b.n	8007506 <__aeabi_dsub+0x416>
 8007398:	4659      	mov	r1, fp
 800739a:	0023      	movs	r3, r4
 800739c:	4311      	orrs	r1, r2
 800739e:	000f      	movs	r7, r1
 80073a0:	4303      	orrs	r3, r0
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	d000      	beq.n	80073a8 <__aeabi_dsub+0x2b8>
 80073a6:	e126      	b.n	80075f6 <__aeabi_dsub+0x506>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d100      	bne.n	80073ae <__aeabi_dsub+0x2be>
 80073ac:	e1c0      	b.n	8007730 <__aeabi_dsub+0x640>
 80073ae:	2900      	cmp	r1, #0
 80073b0:	d100      	bne.n	80073b4 <__aeabi_dsub+0x2c4>
 80073b2:	e0a1      	b.n	80074f8 <__aeabi_dsub+0x408>
 80073b4:	1a83      	subs	r3, r0, r2
 80073b6:	4698      	mov	r8, r3
 80073b8:	465b      	mov	r3, fp
 80073ba:	4540      	cmp	r0, r8
 80073bc:	41ad      	sbcs	r5, r5
 80073be:	1ae3      	subs	r3, r4, r3
 80073c0:	426d      	negs	r5, r5
 80073c2:	1b5b      	subs	r3, r3, r5
 80073c4:	2580      	movs	r5, #128	@ 0x80
 80073c6:	042d      	lsls	r5, r5, #16
 80073c8:	422b      	tst	r3, r5
 80073ca:	d100      	bne.n	80073ce <__aeabi_dsub+0x2de>
 80073cc:	e14b      	b.n	8007666 <__aeabi_dsub+0x576>
 80073ce:	465b      	mov	r3, fp
 80073d0:	1a10      	subs	r0, r2, r0
 80073d2:	4282      	cmp	r2, r0
 80073d4:	4192      	sbcs	r2, r2
 80073d6:	1b1c      	subs	r4, r3, r4
 80073d8:	0007      	movs	r7, r0
 80073da:	2601      	movs	r6, #1
 80073dc:	4663      	mov	r3, ip
 80073de:	4252      	negs	r2, r2
 80073e0:	1aa4      	subs	r4, r4, r2
 80073e2:	4327      	orrs	r7, r4
 80073e4:	401e      	ands	r6, r3
 80073e6:	2f00      	cmp	r7, #0
 80073e8:	d100      	bne.n	80073ec <__aeabi_dsub+0x2fc>
 80073ea:	e142      	b.n	8007672 <__aeabi_dsub+0x582>
 80073ec:	422c      	tst	r4, r5
 80073ee:	d100      	bne.n	80073f2 <__aeabi_dsub+0x302>
 80073f0:	e26d      	b.n	80078ce <__aeabi_dsub+0x7de>
 80073f2:	4b19      	ldr	r3, [pc, #100]	@ (8007458 <__aeabi_dsub+0x368>)
 80073f4:	2501      	movs	r5, #1
 80073f6:	401c      	ands	r4, r3
 80073f8:	e71b      	b.n	8007232 <__aeabi_dsub+0x142>
 80073fa:	42bd      	cmp	r5, r7
 80073fc:	d100      	bne.n	8007400 <__aeabi_dsub+0x310>
 80073fe:	e13b      	b.n	8007678 <__aeabi_dsub+0x588>
 8007400:	2701      	movs	r7, #1
 8007402:	2b38      	cmp	r3, #56	@ 0x38
 8007404:	dd00      	ble.n	8007408 <__aeabi_dsub+0x318>
 8007406:	e745      	b.n	8007294 <__aeabi_dsub+0x1a4>
 8007408:	2780      	movs	r7, #128	@ 0x80
 800740a:	4659      	mov	r1, fp
 800740c:	043f      	lsls	r7, r7, #16
 800740e:	4339      	orrs	r1, r7
 8007410:	468b      	mov	fp, r1
 8007412:	e72a      	b.n	800726a <__aeabi_dsub+0x17a>
 8007414:	2400      	movs	r4, #0
 8007416:	2700      	movs	r7, #0
 8007418:	052d      	lsls	r5, r5, #20
 800741a:	4325      	orrs	r5, r4
 800741c:	07f6      	lsls	r6, r6, #31
 800741e:	4335      	orrs	r5, r6
 8007420:	0038      	movs	r0, r7
 8007422:	0029      	movs	r1, r5
 8007424:	b003      	add	sp, #12
 8007426:	bcf0      	pop	{r4, r5, r6, r7}
 8007428:	46bb      	mov	fp, r7
 800742a:	46b2      	mov	sl, r6
 800742c:	46a9      	mov	r9, r5
 800742e:	46a0      	mov	r8, r4
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007432:	077b      	lsls	r3, r7, #29
 8007434:	d004      	beq.n	8007440 <__aeabi_dsub+0x350>
 8007436:	230f      	movs	r3, #15
 8007438:	403b      	ands	r3, r7
 800743a:	2b04      	cmp	r3, #4
 800743c:	d000      	beq.n	8007440 <__aeabi_dsub+0x350>
 800743e:	e6e7      	b.n	8007210 <__aeabi_dsub+0x120>
 8007440:	002b      	movs	r3, r5
 8007442:	08f8      	lsrs	r0, r7, #3
 8007444:	4a03      	ldr	r2, [pc, #12]	@ (8007454 <__aeabi_dsub+0x364>)
 8007446:	0767      	lsls	r7, r4, #29
 8007448:	4307      	orrs	r7, r0
 800744a:	08e5      	lsrs	r5, r4, #3
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <__aeabi_dsub+0x362>
 8007450:	e74a      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 8007452:	e0a5      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 8007454:	000007ff 	.word	0x000007ff
 8007458:	ff7fffff 	.word	0xff7fffff
 800745c:	fffff801 	.word	0xfffff801
 8007460:	000007fe 	.word	0x000007fe
 8007464:	0038      	movs	r0, r7
 8007466:	f000 faeb 	bl	8007a40 <__clzsi2>
 800746a:	0003      	movs	r3, r0
 800746c:	3318      	adds	r3, #24
 800746e:	2b1f      	cmp	r3, #31
 8007470:	dc00      	bgt.n	8007474 <__aeabi_dsub+0x384>
 8007472:	e6a7      	b.n	80071c4 <__aeabi_dsub+0xd4>
 8007474:	003a      	movs	r2, r7
 8007476:	3808      	subs	r0, #8
 8007478:	4082      	lsls	r2, r0
 800747a:	429d      	cmp	r5, r3
 800747c:	dd00      	ble.n	8007480 <__aeabi_dsub+0x390>
 800747e:	e08a      	b.n	8007596 <__aeabi_dsub+0x4a6>
 8007480:	1b5b      	subs	r3, r3, r5
 8007482:	1c58      	adds	r0, r3, #1
 8007484:	281f      	cmp	r0, #31
 8007486:	dc00      	bgt.n	800748a <__aeabi_dsub+0x39a>
 8007488:	e1d8      	b.n	800783c <__aeabi_dsub+0x74c>
 800748a:	0017      	movs	r7, r2
 800748c:	3b1f      	subs	r3, #31
 800748e:	40df      	lsrs	r7, r3
 8007490:	2820      	cmp	r0, #32
 8007492:	d005      	beq.n	80074a0 <__aeabi_dsub+0x3b0>
 8007494:	2340      	movs	r3, #64	@ 0x40
 8007496:	1a1b      	subs	r3, r3, r0
 8007498:	409a      	lsls	r2, r3
 800749a:	1e53      	subs	r3, r2, #1
 800749c:	419a      	sbcs	r2, r3
 800749e:	4317      	orrs	r7, r2
 80074a0:	2500      	movs	r5, #0
 80074a2:	2f00      	cmp	r7, #0
 80074a4:	d100      	bne.n	80074a8 <__aeabi_dsub+0x3b8>
 80074a6:	e0e5      	b.n	8007674 <__aeabi_dsub+0x584>
 80074a8:	077b      	lsls	r3, r7, #29
 80074aa:	d000      	beq.n	80074ae <__aeabi_dsub+0x3be>
 80074ac:	e6ab      	b.n	8007206 <__aeabi_dsub+0x116>
 80074ae:	002c      	movs	r4, r5
 80074b0:	e7c6      	b.n	8007440 <__aeabi_dsub+0x350>
 80074b2:	08c0      	lsrs	r0, r0, #3
 80074b4:	e7c6      	b.n	8007444 <__aeabi_dsub+0x354>
 80074b6:	2700      	movs	r7, #0
 80074b8:	2400      	movs	r4, #0
 80074ba:	4dd1      	ldr	r5, [pc, #836]	@ (8007800 <__aeabi_dsub+0x710>)
 80074bc:	e7ac      	b.n	8007418 <__aeabi_dsub+0x328>
 80074be:	4fd1      	ldr	r7, [pc, #836]	@ (8007804 <__aeabi_dsub+0x714>)
 80074c0:	1c6b      	adds	r3, r5, #1
 80074c2:	423b      	tst	r3, r7
 80074c4:	d171      	bne.n	80075aa <__aeabi_dsub+0x4ba>
 80074c6:	0023      	movs	r3, r4
 80074c8:	4303      	orrs	r3, r0
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	d000      	beq.n	80074d0 <__aeabi_dsub+0x3e0>
 80074ce:	e14e      	b.n	800776e <__aeabi_dsub+0x67e>
 80074d0:	4657      	mov	r7, sl
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d100      	bne.n	80074d8 <__aeabi_dsub+0x3e8>
 80074d6:	e1b5      	b.n	8007844 <__aeabi_dsub+0x754>
 80074d8:	2f00      	cmp	r7, #0
 80074da:	d00d      	beq.n	80074f8 <__aeabi_dsub+0x408>
 80074dc:	1883      	adds	r3, r0, r2
 80074de:	4283      	cmp	r3, r0
 80074e0:	4180      	sbcs	r0, r0
 80074e2:	445c      	add	r4, fp
 80074e4:	4240      	negs	r0, r0
 80074e6:	1824      	adds	r4, r4, r0
 80074e8:	0222      	lsls	r2, r4, #8
 80074ea:	d500      	bpl.n	80074ee <__aeabi_dsub+0x3fe>
 80074ec:	e1c8      	b.n	8007880 <__aeabi_dsub+0x790>
 80074ee:	001f      	movs	r7, r3
 80074f0:	4698      	mov	r8, r3
 80074f2:	4327      	orrs	r7, r4
 80074f4:	d100      	bne.n	80074f8 <__aeabi_dsub+0x408>
 80074f6:	e0bc      	b.n	8007672 <__aeabi_dsub+0x582>
 80074f8:	4643      	mov	r3, r8
 80074fa:	0767      	lsls	r7, r4, #29
 80074fc:	08db      	lsrs	r3, r3, #3
 80074fe:	431f      	orrs	r7, r3
 8007500:	08e5      	lsrs	r5, r4, #3
 8007502:	2300      	movs	r3, #0
 8007504:	e04c      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 8007506:	1a83      	subs	r3, r0, r2
 8007508:	4698      	mov	r8, r3
 800750a:	465b      	mov	r3, fp
 800750c:	4540      	cmp	r0, r8
 800750e:	41bf      	sbcs	r7, r7
 8007510:	1ae3      	subs	r3, r4, r3
 8007512:	427f      	negs	r7, r7
 8007514:	1bdb      	subs	r3, r3, r7
 8007516:	021f      	lsls	r7, r3, #8
 8007518:	d47c      	bmi.n	8007614 <__aeabi_dsub+0x524>
 800751a:	4647      	mov	r7, r8
 800751c:	431f      	orrs	r7, r3
 800751e:	d100      	bne.n	8007522 <__aeabi_dsub+0x432>
 8007520:	e0a6      	b.n	8007670 <__aeabi_dsub+0x580>
 8007522:	001c      	movs	r4, r3
 8007524:	4647      	mov	r7, r8
 8007526:	e645      	b.n	80071b4 <__aeabi_dsub+0xc4>
 8007528:	4cb7      	ldr	r4, [pc, #732]	@ (8007808 <__aeabi_dsub+0x718>)
 800752a:	1aed      	subs	r5, r5, r3
 800752c:	4014      	ands	r4, r2
 800752e:	077b      	lsls	r3, r7, #29
 8007530:	d000      	beq.n	8007534 <__aeabi_dsub+0x444>
 8007532:	e780      	b.n	8007436 <__aeabi_dsub+0x346>
 8007534:	e784      	b.n	8007440 <__aeabi_dsub+0x350>
 8007536:	464b      	mov	r3, r9
 8007538:	0025      	movs	r5, r4
 800753a:	4305      	orrs	r5, r0
 800753c:	d066      	beq.n	800760c <__aeabi_dsub+0x51c>
 800753e:	1e5f      	subs	r7, r3, #1
 8007540:	2b01      	cmp	r3, #1
 8007542:	d100      	bne.n	8007546 <__aeabi_dsub+0x456>
 8007544:	e0fc      	b.n	8007740 <__aeabi_dsub+0x650>
 8007546:	4dae      	ldr	r5, [pc, #696]	@ (8007800 <__aeabi_dsub+0x710>)
 8007548:	42ab      	cmp	r3, r5
 800754a:	d100      	bne.n	800754e <__aeabi_dsub+0x45e>
 800754c:	e15e      	b.n	800780c <__aeabi_dsub+0x71c>
 800754e:	4666      	mov	r6, ip
 8007550:	2f38      	cmp	r7, #56	@ 0x38
 8007552:	dc00      	bgt.n	8007556 <__aeabi_dsub+0x466>
 8007554:	e0b4      	b.n	80076c0 <__aeabi_dsub+0x5d0>
 8007556:	2001      	movs	r0, #1
 8007558:	1a17      	subs	r7, r2, r0
 800755a:	42ba      	cmp	r2, r7
 800755c:	4192      	sbcs	r2, r2
 800755e:	465b      	mov	r3, fp
 8007560:	4252      	negs	r2, r2
 8007562:	464d      	mov	r5, r9
 8007564:	1a9c      	subs	r4, r3, r2
 8007566:	e620      	b.n	80071aa <__aeabi_dsub+0xba>
 8007568:	0767      	lsls	r7, r4, #29
 800756a:	08c0      	lsrs	r0, r0, #3
 800756c:	4307      	orrs	r7, r0
 800756e:	08e5      	lsrs	r5, r4, #3
 8007570:	e6ba      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 8007572:	001f      	movs	r7, r3
 8007574:	4659      	mov	r1, fp
 8007576:	3f20      	subs	r7, #32
 8007578:	40f9      	lsrs	r1, r7
 800757a:	000f      	movs	r7, r1
 800757c:	2b20      	cmp	r3, #32
 800757e:	d005      	beq.n	800758c <__aeabi_dsub+0x49c>
 8007580:	2140      	movs	r1, #64	@ 0x40
 8007582:	1acb      	subs	r3, r1, r3
 8007584:	4659      	mov	r1, fp
 8007586:	4099      	lsls	r1, r3
 8007588:	430a      	orrs	r2, r1
 800758a:	4692      	mov	sl, r2
 800758c:	4653      	mov	r3, sl
 800758e:	1e5a      	subs	r2, r3, #1
 8007590:	4193      	sbcs	r3, r2
 8007592:	431f      	orrs	r7, r3
 8007594:	e604      	b.n	80071a0 <__aeabi_dsub+0xb0>
 8007596:	1aeb      	subs	r3, r5, r3
 8007598:	4d9b      	ldr	r5, [pc, #620]	@ (8007808 <__aeabi_dsub+0x718>)
 800759a:	4015      	ands	r5, r2
 800759c:	076f      	lsls	r7, r5, #29
 800759e:	08ed      	lsrs	r5, r5, #3
 80075a0:	032c      	lsls	r4, r5, #12
 80075a2:	055d      	lsls	r5, r3, #21
 80075a4:	0b24      	lsrs	r4, r4, #12
 80075a6:	0d6d      	lsrs	r5, r5, #21
 80075a8:	e736      	b.n	8007418 <__aeabi_dsub+0x328>
 80075aa:	4d95      	ldr	r5, [pc, #596]	@ (8007800 <__aeabi_dsub+0x710>)
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	d100      	bne.n	80075b2 <__aeabi_dsub+0x4c2>
 80075b0:	e0d6      	b.n	8007760 <__aeabi_dsub+0x670>
 80075b2:	1882      	adds	r2, r0, r2
 80075b4:	0021      	movs	r1, r4
 80075b6:	4282      	cmp	r2, r0
 80075b8:	4180      	sbcs	r0, r0
 80075ba:	4459      	add	r1, fp
 80075bc:	4240      	negs	r0, r0
 80075be:	1808      	adds	r0, r1, r0
 80075c0:	07c7      	lsls	r7, r0, #31
 80075c2:	0852      	lsrs	r2, r2, #1
 80075c4:	4317      	orrs	r7, r2
 80075c6:	0844      	lsrs	r4, r0, #1
 80075c8:	0752      	lsls	r2, r2, #29
 80075ca:	d400      	bmi.n	80075ce <__aeabi_dsub+0x4de>
 80075cc:	e185      	b.n	80078da <__aeabi_dsub+0x7ea>
 80075ce:	220f      	movs	r2, #15
 80075d0:	001d      	movs	r5, r3
 80075d2:	403a      	ands	r2, r7
 80075d4:	2a04      	cmp	r2, #4
 80075d6:	d000      	beq.n	80075da <__aeabi_dsub+0x4ea>
 80075d8:	e61a      	b.n	8007210 <__aeabi_dsub+0x120>
 80075da:	08ff      	lsrs	r7, r7, #3
 80075dc:	0764      	lsls	r4, r4, #29
 80075de:	4327      	orrs	r7, r4
 80075e0:	0905      	lsrs	r5, r0, #4
 80075e2:	e7dd      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 80075e4:	465b      	mov	r3, fp
 80075e6:	08d2      	lsrs	r2, r2, #3
 80075e8:	075f      	lsls	r7, r3, #29
 80075ea:	4317      	orrs	r7, r2
 80075ec:	08dd      	lsrs	r5, r3, #3
 80075ee:	e67b      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 80075f0:	2700      	movs	r7, #0
 80075f2:	2400      	movs	r4, #0
 80075f4:	e710      	b.n	8007418 <__aeabi_dsub+0x328>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d000      	beq.n	80075fc <__aeabi_dsub+0x50c>
 80075fa:	e0d6      	b.n	80077aa <__aeabi_dsub+0x6ba>
 80075fc:	2900      	cmp	r1, #0
 80075fe:	d000      	beq.n	8007602 <__aeabi_dsub+0x512>
 8007600:	e12f      	b.n	8007862 <__aeabi_dsub+0x772>
 8007602:	2480      	movs	r4, #128	@ 0x80
 8007604:	2600      	movs	r6, #0
 8007606:	4d7e      	ldr	r5, [pc, #504]	@ (8007800 <__aeabi_dsub+0x710>)
 8007608:	0324      	lsls	r4, r4, #12
 800760a:	e705      	b.n	8007418 <__aeabi_dsub+0x328>
 800760c:	4666      	mov	r6, ip
 800760e:	465c      	mov	r4, fp
 8007610:	08d0      	lsrs	r0, r2, #3
 8007612:	e717      	b.n	8007444 <__aeabi_dsub+0x354>
 8007614:	465b      	mov	r3, fp
 8007616:	1a17      	subs	r7, r2, r0
 8007618:	42ba      	cmp	r2, r7
 800761a:	4192      	sbcs	r2, r2
 800761c:	1b1c      	subs	r4, r3, r4
 800761e:	2601      	movs	r6, #1
 8007620:	4663      	mov	r3, ip
 8007622:	4252      	negs	r2, r2
 8007624:	1aa4      	subs	r4, r4, r2
 8007626:	401e      	ands	r6, r3
 8007628:	e5c4      	b.n	80071b4 <__aeabi_dsub+0xc4>
 800762a:	1883      	adds	r3, r0, r2
 800762c:	4283      	cmp	r3, r0
 800762e:	4180      	sbcs	r0, r0
 8007630:	445c      	add	r4, fp
 8007632:	4240      	negs	r0, r0
 8007634:	1825      	adds	r5, r4, r0
 8007636:	022a      	lsls	r2, r5, #8
 8007638:	d400      	bmi.n	800763c <__aeabi_dsub+0x54c>
 800763a:	e0da      	b.n	80077f2 <__aeabi_dsub+0x702>
 800763c:	4a72      	ldr	r2, [pc, #456]	@ (8007808 <__aeabi_dsub+0x718>)
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	4015      	ands	r5, r2
 8007642:	07ea      	lsls	r2, r5, #31
 8007644:	431a      	orrs	r2, r3
 8007646:	0869      	lsrs	r1, r5, #1
 8007648:	075b      	lsls	r3, r3, #29
 800764a:	d400      	bmi.n	800764e <__aeabi_dsub+0x55e>
 800764c:	e14a      	b.n	80078e4 <__aeabi_dsub+0x7f4>
 800764e:	230f      	movs	r3, #15
 8007650:	4013      	ands	r3, r2
 8007652:	2b04      	cmp	r3, #4
 8007654:	d100      	bne.n	8007658 <__aeabi_dsub+0x568>
 8007656:	e0fc      	b.n	8007852 <__aeabi_dsub+0x762>
 8007658:	1d17      	adds	r7, r2, #4
 800765a:	4297      	cmp	r7, r2
 800765c:	41a4      	sbcs	r4, r4
 800765e:	4264      	negs	r4, r4
 8007660:	2502      	movs	r5, #2
 8007662:	1864      	adds	r4, r4, r1
 8007664:	e6ec      	b.n	8007440 <__aeabi_dsub+0x350>
 8007666:	4647      	mov	r7, r8
 8007668:	001c      	movs	r4, r3
 800766a:	431f      	orrs	r7, r3
 800766c:	d000      	beq.n	8007670 <__aeabi_dsub+0x580>
 800766e:	e743      	b.n	80074f8 <__aeabi_dsub+0x408>
 8007670:	2600      	movs	r6, #0
 8007672:	2500      	movs	r5, #0
 8007674:	2400      	movs	r4, #0
 8007676:	e6cf      	b.n	8007418 <__aeabi_dsub+0x328>
 8007678:	08c0      	lsrs	r0, r0, #3
 800767a:	0767      	lsls	r7, r4, #29
 800767c:	4307      	orrs	r7, r0
 800767e:	08e5      	lsrs	r5, r4, #3
 8007680:	e632      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 8007682:	1a87      	subs	r7, r0, r2
 8007684:	465b      	mov	r3, fp
 8007686:	42b8      	cmp	r0, r7
 8007688:	4180      	sbcs	r0, r0
 800768a:	1ae4      	subs	r4, r4, r3
 800768c:	4240      	negs	r0, r0
 800768e:	1a24      	subs	r4, r4, r0
 8007690:	0223      	lsls	r3, r4, #8
 8007692:	d428      	bmi.n	80076e6 <__aeabi_dsub+0x5f6>
 8007694:	0763      	lsls	r3, r4, #29
 8007696:	08ff      	lsrs	r7, r7, #3
 8007698:	431f      	orrs	r7, r3
 800769a:	08e5      	lsrs	r5, r4, #3
 800769c:	2301      	movs	r3, #1
 800769e:	e77f      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d100      	bne.n	80076a6 <__aeabi_dsub+0x5b6>
 80076a4:	e673      	b.n	800738e <__aeabi_dsub+0x29e>
 80076a6:	464b      	mov	r3, r9
 80076a8:	1b5f      	subs	r7, r3, r5
 80076aa:	003b      	movs	r3, r7
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	d100      	bne.n	80076b2 <__aeabi_dsub+0x5c2>
 80076b0:	e742      	b.n	8007538 <__aeabi_dsub+0x448>
 80076b2:	2f38      	cmp	r7, #56	@ 0x38
 80076b4:	dd00      	ble.n	80076b8 <__aeabi_dsub+0x5c8>
 80076b6:	e0ec      	b.n	8007892 <__aeabi_dsub+0x7a2>
 80076b8:	2380      	movs	r3, #128	@ 0x80
 80076ba:	000e      	movs	r6, r1
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	431c      	orrs	r4, r3
 80076c0:	2f1f      	cmp	r7, #31
 80076c2:	dc25      	bgt.n	8007710 <__aeabi_dsub+0x620>
 80076c4:	2520      	movs	r5, #32
 80076c6:	0023      	movs	r3, r4
 80076c8:	1bed      	subs	r5, r5, r7
 80076ca:	0001      	movs	r1, r0
 80076cc:	40a8      	lsls	r0, r5
 80076ce:	40ab      	lsls	r3, r5
 80076d0:	40f9      	lsrs	r1, r7
 80076d2:	1e45      	subs	r5, r0, #1
 80076d4:	41a8      	sbcs	r0, r5
 80076d6:	430b      	orrs	r3, r1
 80076d8:	40fc      	lsrs	r4, r7
 80076da:	4318      	orrs	r0, r3
 80076dc:	465b      	mov	r3, fp
 80076de:	1b1b      	subs	r3, r3, r4
 80076e0:	469b      	mov	fp, r3
 80076e2:	e739      	b.n	8007558 <__aeabi_dsub+0x468>
 80076e4:	4666      	mov	r6, ip
 80076e6:	2501      	movs	r5, #1
 80076e8:	e562      	b.n	80071b0 <__aeabi_dsub+0xc0>
 80076ea:	001f      	movs	r7, r3
 80076ec:	4659      	mov	r1, fp
 80076ee:	3f20      	subs	r7, #32
 80076f0:	40f9      	lsrs	r1, r7
 80076f2:	468c      	mov	ip, r1
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d005      	beq.n	8007704 <__aeabi_dsub+0x614>
 80076f8:	2740      	movs	r7, #64	@ 0x40
 80076fa:	4659      	mov	r1, fp
 80076fc:	1afb      	subs	r3, r7, r3
 80076fe:	4099      	lsls	r1, r3
 8007700:	430a      	orrs	r2, r1
 8007702:	4692      	mov	sl, r2
 8007704:	4657      	mov	r7, sl
 8007706:	1e7b      	subs	r3, r7, #1
 8007708:	419f      	sbcs	r7, r3
 800770a:	4663      	mov	r3, ip
 800770c:	431f      	orrs	r7, r3
 800770e:	e5c1      	b.n	8007294 <__aeabi_dsub+0x1a4>
 8007710:	003b      	movs	r3, r7
 8007712:	0025      	movs	r5, r4
 8007714:	3b20      	subs	r3, #32
 8007716:	40dd      	lsrs	r5, r3
 8007718:	2f20      	cmp	r7, #32
 800771a:	d004      	beq.n	8007726 <__aeabi_dsub+0x636>
 800771c:	2340      	movs	r3, #64	@ 0x40
 800771e:	1bdb      	subs	r3, r3, r7
 8007720:	409c      	lsls	r4, r3
 8007722:	4320      	orrs	r0, r4
 8007724:	4680      	mov	r8, r0
 8007726:	4640      	mov	r0, r8
 8007728:	1e43      	subs	r3, r0, #1
 800772a:	4198      	sbcs	r0, r3
 800772c:	4328      	orrs	r0, r5
 800772e:	e713      	b.n	8007558 <__aeabi_dsub+0x468>
 8007730:	2900      	cmp	r1, #0
 8007732:	d09d      	beq.n	8007670 <__aeabi_dsub+0x580>
 8007734:	2601      	movs	r6, #1
 8007736:	4663      	mov	r3, ip
 8007738:	465c      	mov	r4, fp
 800773a:	4690      	mov	r8, r2
 800773c:	401e      	ands	r6, r3
 800773e:	e6db      	b.n	80074f8 <__aeabi_dsub+0x408>
 8007740:	1a17      	subs	r7, r2, r0
 8007742:	465b      	mov	r3, fp
 8007744:	42ba      	cmp	r2, r7
 8007746:	4192      	sbcs	r2, r2
 8007748:	1b1c      	subs	r4, r3, r4
 800774a:	4252      	negs	r2, r2
 800774c:	1aa4      	subs	r4, r4, r2
 800774e:	0223      	lsls	r3, r4, #8
 8007750:	d4c8      	bmi.n	80076e4 <__aeabi_dsub+0x5f4>
 8007752:	0763      	lsls	r3, r4, #29
 8007754:	08ff      	lsrs	r7, r7, #3
 8007756:	431f      	orrs	r7, r3
 8007758:	4666      	mov	r6, ip
 800775a:	2301      	movs	r3, #1
 800775c:	08e5      	lsrs	r5, r4, #3
 800775e:	e71f      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 8007760:	001d      	movs	r5, r3
 8007762:	2400      	movs	r4, #0
 8007764:	2700      	movs	r7, #0
 8007766:	e657      	b.n	8007418 <__aeabi_dsub+0x328>
 8007768:	465c      	mov	r4, fp
 800776a:	08d0      	lsrs	r0, r2, #3
 800776c:	e66a      	b.n	8007444 <__aeabi_dsub+0x354>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d100      	bne.n	8007774 <__aeabi_dsub+0x684>
 8007772:	e737      	b.n	80075e4 <__aeabi_dsub+0x4f4>
 8007774:	4653      	mov	r3, sl
 8007776:	08c0      	lsrs	r0, r0, #3
 8007778:	0767      	lsls	r7, r4, #29
 800777a:	4307      	orrs	r7, r0
 800777c:	08e5      	lsrs	r5, r4, #3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d100      	bne.n	8007784 <__aeabi_dsub+0x694>
 8007782:	e5b1      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 8007784:	2380      	movs	r3, #128	@ 0x80
 8007786:	031b      	lsls	r3, r3, #12
 8007788:	421d      	tst	r5, r3
 800778a:	d008      	beq.n	800779e <__aeabi_dsub+0x6ae>
 800778c:	4659      	mov	r1, fp
 800778e:	08c8      	lsrs	r0, r1, #3
 8007790:	4218      	tst	r0, r3
 8007792:	d104      	bne.n	800779e <__aeabi_dsub+0x6ae>
 8007794:	08d2      	lsrs	r2, r2, #3
 8007796:	0749      	lsls	r1, r1, #29
 8007798:	430a      	orrs	r2, r1
 800779a:	0017      	movs	r7, r2
 800779c:	0005      	movs	r5, r0
 800779e:	0f7b      	lsrs	r3, r7, #29
 80077a0:	00ff      	lsls	r7, r7, #3
 80077a2:	08ff      	lsrs	r7, r7, #3
 80077a4:	075b      	lsls	r3, r3, #29
 80077a6:	431f      	orrs	r7, r3
 80077a8:	e59e      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 80077aa:	08c0      	lsrs	r0, r0, #3
 80077ac:	0763      	lsls	r3, r4, #29
 80077ae:	4318      	orrs	r0, r3
 80077b0:	08e5      	lsrs	r5, r4, #3
 80077b2:	2900      	cmp	r1, #0
 80077b4:	d053      	beq.n	800785e <__aeabi_dsub+0x76e>
 80077b6:	2380      	movs	r3, #128	@ 0x80
 80077b8:	031b      	lsls	r3, r3, #12
 80077ba:	421d      	tst	r5, r3
 80077bc:	d00a      	beq.n	80077d4 <__aeabi_dsub+0x6e4>
 80077be:	4659      	mov	r1, fp
 80077c0:	08cc      	lsrs	r4, r1, #3
 80077c2:	421c      	tst	r4, r3
 80077c4:	d106      	bne.n	80077d4 <__aeabi_dsub+0x6e4>
 80077c6:	2601      	movs	r6, #1
 80077c8:	4663      	mov	r3, ip
 80077ca:	0025      	movs	r5, r4
 80077cc:	08d0      	lsrs	r0, r2, #3
 80077ce:	0749      	lsls	r1, r1, #29
 80077d0:	4308      	orrs	r0, r1
 80077d2:	401e      	ands	r6, r3
 80077d4:	0f47      	lsrs	r7, r0, #29
 80077d6:	00c0      	lsls	r0, r0, #3
 80077d8:	08c0      	lsrs	r0, r0, #3
 80077da:	077f      	lsls	r7, r7, #29
 80077dc:	4307      	orrs	r7, r0
 80077de:	e583      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 80077e0:	1883      	adds	r3, r0, r2
 80077e2:	4293      	cmp	r3, r2
 80077e4:	4192      	sbcs	r2, r2
 80077e6:	445c      	add	r4, fp
 80077e8:	4252      	negs	r2, r2
 80077ea:	18a5      	adds	r5, r4, r2
 80077ec:	022a      	lsls	r2, r5, #8
 80077ee:	d500      	bpl.n	80077f2 <__aeabi_dsub+0x702>
 80077f0:	e724      	b.n	800763c <__aeabi_dsub+0x54c>
 80077f2:	076f      	lsls	r7, r5, #29
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	431f      	orrs	r7, r3
 80077f8:	08ed      	lsrs	r5, r5, #3
 80077fa:	2301      	movs	r3, #1
 80077fc:	e6d0      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 80077fe:	46c0      	nop			@ (mov r8, r8)
 8007800:	000007ff 	.word	0x000007ff
 8007804:	000007fe 	.word	0x000007fe
 8007808:	ff7fffff 	.word	0xff7fffff
 800780c:	465b      	mov	r3, fp
 800780e:	08d2      	lsrs	r2, r2, #3
 8007810:	075f      	lsls	r7, r3, #29
 8007812:	4666      	mov	r6, ip
 8007814:	4317      	orrs	r7, r2
 8007816:	08dd      	lsrs	r5, r3, #3
 8007818:	e566      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 800781a:	0025      	movs	r5, r4
 800781c:	3b20      	subs	r3, #32
 800781e:	40dd      	lsrs	r5, r3
 8007820:	4663      	mov	r3, ip
 8007822:	2b20      	cmp	r3, #32
 8007824:	d005      	beq.n	8007832 <__aeabi_dsub+0x742>
 8007826:	2340      	movs	r3, #64	@ 0x40
 8007828:	4661      	mov	r1, ip
 800782a:	1a5b      	subs	r3, r3, r1
 800782c:	409c      	lsls	r4, r3
 800782e:	4320      	orrs	r0, r4
 8007830:	4680      	mov	r8, r0
 8007832:	4647      	mov	r7, r8
 8007834:	1e7b      	subs	r3, r7, #1
 8007836:	419f      	sbcs	r7, r3
 8007838:	432f      	orrs	r7, r5
 800783a:	e5a0      	b.n	800737e <__aeabi_dsub+0x28e>
 800783c:	2120      	movs	r1, #32
 800783e:	2700      	movs	r7, #0
 8007840:	1a09      	subs	r1, r1, r0
 8007842:	e4d2      	b.n	80071ea <__aeabi_dsub+0xfa>
 8007844:	2f00      	cmp	r7, #0
 8007846:	d100      	bne.n	800784a <__aeabi_dsub+0x75a>
 8007848:	e713      	b.n	8007672 <__aeabi_dsub+0x582>
 800784a:	465c      	mov	r4, fp
 800784c:	0017      	movs	r7, r2
 800784e:	2500      	movs	r5, #0
 8007850:	e5f6      	b.n	8007440 <__aeabi_dsub+0x350>
 8007852:	08d7      	lsrs	r7, r2, #3
 8007854:	0749      	lsls	r1, r1, #29
 8007856:	2302      	movs	r3, #2
 8007858:	430f      	orrs	r7, r1
 800785a:	092d      	lsrs	r5, r5, #4
 800785c:	e6a0      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 800785e:	0007      	movs	r7, r0
 8007860:	e542      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 8007862:	465b      	mov	r3, fp
 8007864:	2601      	movs	r6, #1
 8007866:	075f      	lsls	r7, r3, #29
 8007868:	08dd      	lsrs	r5, r3, #3
 800786a:	4663      	mov	r3, ip
 800786c:	08d2      	lsrs	r2, r2, #3
 800786e:	4317      	orrs	r7, r2
 8007870:	401e      	ands	r6, r3
 8007872:	e539      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 8007874:	465b      	mov	r3, fp
 8007876:	08d2      	lsrs	r2, r2, #3
 8007878:	075f      	lsls	r7, r3, #29
 800787a:	4317      	orrs	r7, r2
 800787c:	08dd      	lsrs	r5, r3, #3
 800787e:	e533      	b.n	80072e8 <__aeabi_dsub+0x1f8>
 8007880:	4a1e      	ldr	r2, [pc, #120]	@ (80078fc <__aeabi_dsub+0x80c>)
 8007882:	08db      	lsrs	r3, r3, #3
 8007884:	4022      	ands	r2, r4
 8007886:	0757      	lsls	r7, r2, #29
 8007888:	0252      	lsls	r2, r2, #9
 800788a:	2501      	movs	r5, #1
 800788c:	431f      	orrs	r7, r3
 800788e:	0b14      	lsrs	r4, r2, #12
 8007890:	e5c2      	b.n	8007418 <__aeabi_dsub+0x328>
 8007892:	000e      	movs	r6, r1
 8007894:	2001      	movs	r0, #1
 8007896:	e65f      	b.n	8007558 <__aeabi_dsub+0x468>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <__aeabi_dsub+0x7c8>
 800789c:	464b      	mov	r3, r9
 800789e:	1b5b      	subs	r3, r3, r5
 80078a0:	469c      	mov	ip, r3
 80078a2:	2d00      	cmp	r5, #0
 80078a4:	d100      	bne.n	80078a8 <__aeabi_dsub+0x7b8>
 80078a6:	e548      	b.n	800733a <__aeabi_dsub+0x24a>
 80078a8:	2701      	movs	r7, #1
 80078aa:	2b38      	cmp	r3, #56	@ 0x38
 80078ac:	dd00      	ble.n	80078b0 <__aeabi_dsub+0x7c0>
 80078ae:	e566      	b.n	800737e <__aeabi_dsub+0x28e>
 80078b0:	2380      	movs	r3, #128	@ 0x80
 80078b2:	041b      	lsls	r3, r3, #16
 80078b4:	431c      	orrs	r4, r3
 80078b6:	e550      	b.n	800735a <__aeabi_dsub+0x26a>
 80078b8:	1c6b      	adds	r3, r5, #1
 80078ba:	4d11      	ldr	r5, [pc, #68]	@ (8007900 <__aeabi_dsub+0x810>)
 80078bc:	422b      	tst	r3, r5
 80078be:	d000      	beq.n	80078c2 <__aeabi_dsub+0x7d2>
 80078c0:	e673      	b.n	80075aa <__aeabi_dsub+0x4ba>
 80078c2:	4659      	mov	r1, fp
 80078c4:	0023      	movs	r3, r4
 80078c6:	4311      	orrs	r1, r2
 80078c8:	468a      	mov	sl, r1
 80078ca:	4303      	orrs	r3, r0
 80078cc:	e600      	b.n	80074d0 <__aeabi_dsub+0x3e0>
 80078ce:	0767      	lsls	r7, r4, #29
 80078d0:	08c0      	lsrs	r0, r0, #3
 80078d2:	2300      	movs	r3, #0
 80078d4:	4307      	orrs	r7, r0
 80078d6:	08e5      	lsrs	r5, r4, #3
 80078d8:	e662      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 80078da:	0764      	lsls	r4, r4, #29
 80078dc:	08ff      	lsrs	r7, r7, #3
 80078de:	4327      	orrs	r7, r4
 80078e0:	0905      	lsrs	r5, r0, #4
 80078e2:	e65d      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 80078e4:	08d2      	lsrs	r2, r2, #3
 80078e6:	0749      	lsls	r1, r1, #29
 80078e8:	4311      	orrs	r1, r2
 80078ea:	000f      	movs	r7, r1
 80078ec:	2302      	movs	r3, #2
 80078ee:	092d      	lsrs	r5, r5, #4
 80078f0:	e656      	b.n	80075a0 <__aeabi_dsub+0x4b0>
 80078f2:	0007      	movs	r7, r0
 80078f4:	e5a4      	b.n	8007440 <__aeabi_dsub+0x350>
 80078f6:	0038      	movs	r0, r7
 80078f8:	e48f      	b.n	800721a <__aeabi_dsub+0x12a>
 80078fa:	46c0      	nop			@ (mov r8, r8)
 80078fc:	ff7fffff 	.word	0xff7fffff
 8007900:	000007fe 	.word	0x000007fe

08007904 <__aeabi_d2iz>:
 8007904:	000b      	movs	r3, r1
 8007906:	0002      	movs	r2, r0
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4d16      	ldr	r5, [pc, #88]	@ (8007964 <__aeabi_d2iz+0x60>)
 800790c:	030c      	lsls	r4, r1, #12
 800790e:	b082      	sub	sp, #8
 8007910:	0049      	lsls	r1, r1, #1
 8007912:	2000      	movs	r0, #0
 8007914:	9200      	str	r2, [sp, #0]
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	0b24      	lsrs	r4, r4, #12
 800791a:	0d49      	lsrs	r1, r1, #21
 800791c:	0fde      	lsrs	r6, r3, #31
 800791e:	42a9      	cmp	r1, r5
 8007920:	dd04      	ble.n	800792c <__aeabi_d2iz+0x28>
 8007922:	4811      	ldr	r0, [pc, #68]	@ (8007968 <__aeabi_d2iz+0x64>)
 8007924:	4281      	cmp	r1, r0
 8007926:	dd03      	ble.n	8007930 <__aeabi_d2iz+0x2c>
 8007928:	4b10      	ldr	r3, [pc, #64]	@ (800796c <__aeabi_d2iz+0x68>)
 800792a:	18f0      	adds	r0, r6, r3
 800792c:	b002      	add	sp, #8
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	2080      	movs	r0, #128	@ 0x80
 8007932:	0340      	lsls	r0, r0, #13
 8007934:	4320      	orrs	r0, r4
 8007936:	4c0e      	ldr	r4, [pc, #56]	@ (8007970 <__aeabi_d2iz+0x6c>)
 8007938:	1a64      	subs	r4, r4, r1
 800793a:	2c1f      	cmp	r4, #31
 800793c:	dd08      	ble.n	8007950 <__aeabi_d2iz+0x4c>
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <__aeabi_d2iz+0x70>)
 8007940:	1a5b      	subs	r3, r3, r1
 8007942:	40d8      	lsrs	r0, r3
 8007944:	0003      	movs	r3, r0
 8007946:	4258      	negs	r0, r3
 8007948:	2e00      	cmp	r6, #0
 800794a:	d1ef      	bne.n	800792c <__aeabi_d2iz+0x28>
 800794c:	0018      	movs	r0, r3
 800794e:	e7ed      	b.n	800792c <__aeabi_d2iz+0x28>
 8007950:	4b09      	ldr	r3, [pc, #36]	@ (8007978 <__aeabi_d2iz+0x74>)
 8007952:	9a00      	ldr	r2, [sp, #0]
 8007954:	469c      	mov	ip, r3
 8007956:	0003      	movs	r3, r0
 8007958:	4461      	add	r1, ip
 800795a:	408b      	lsls	r3, r1
 800795c:	40e2      	lsrs	r2, r4
 800795e:	4313      	orrs	r3, r2
 8007960:	e7f1      	b.n	8007946 <__aeabi_d2iz+0x42>
 8007962:	46c0      	nop			@ (mov r8, r8)
 8007964:	000003fe 	.word	0x000003fe
 8007968:	0000041d 	.word	0x0000041d
 800796c:	7fffffff 	.word	0x7fffffff
 8007970:	00000433 	.word	0x00000433
 8007974:	00000413 	.word	0x00000413
 8007978:	fffffbed 	.word	0xfffffbed

0800797c <__aeabi_ui2d>:
 800797c:	b510      	push	{r4, lr}
 800797e:	1e04      	subs	r4, r0, #0
 8007980:	d010      	beq.n	80079a4 <__aeabi_ui2d+0x28>
 8007982:	f000 f85d 	bl	8007a40 <__clzsi2>
 8007986:	4b0e      	ldr	r3, [pc, #56]	@ (80079c0 <__aeabi_ui2d+0x44>)
 8007988:	1a1b      	subs	r3, r3, r0
 800798a:	055b      	lsls	r3, r3, #21
 800798c:	0d5b      	lsrs	r3, r3, #21
 800798e:	280a      	cmp	r0, #10
 8007990:	dc0f      	bgt.n	80079b2 <__aeabi_ui2d+0x36>
 8007992:	220b      	movs	r2, #11
 8007994:	0021      	movs	r1, r4
 8007996:	1a12      	subs	r2, r2, r0
 8007998:	40d1      	lsrs	r1, r2
 800799a:	3015      	adds	r0, #21
 800799c:	030a      	lsls	r2, r1, #12
 800799e:	4084      	lsls	r4, r0
 80079a0:	0b12      	lsrs	r2, r2, #12
 80079a2:	e001      	b.n	80079a8 <__aeabi_ui2d+0x2c>
 80079a4:	2300      	movs	r3, #0
 80079a6:	2200      	movs	r2, #0
 80079a8:	051b      	lsls	r3, r3, #20
 80079aa:	4313      	orrs	r3, r2
 80079ac:	0020      	movs	r0, r4
 80079ae:	0019      	movs	r1, r3
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	0022      	movs	r2, r4
 80079b4:	380b      	subs	r0, #11
 80079b6:	4082      	lsls	r2, r0
 80079b8:	0312      	lsls	r2, r2, #12
 80079ba:	2400      	movs	r4, #0
 80079bc:	0b12      	lsrs	r2, r2, #12
 80079be:	e7f3      	b.n	80079a8 <__aeabi_ui2d+0x2c>
 80079c0:	0000041e 	.word	0x0000041e

080079c4 <__aeabi_cdrcmple>:
 80079c4:	4684      	mov	ip, r0
 80079c6:	0010      	movs	r0, r2
 80079c8:	4662      	mov	r2, ip
 80079ca:	468c      	mov	ip, r1
 80079cc:	0019      	movs	r1, r3
 80079ce:	4663      	mov	r3, ip
 80079d0:	e000      	b.n	80079d4 <__aeabi_cdcmpeq>
 80079d2:	46c0      	nop			@ (mov r8, r8)

080079d4 <__aeabi_cdcmpeq>:
 80079d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079d6:	f000 f905 	bl	8007be4 <__ledf2>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d401      	bmi.n	80079e2 <__aeabi_cdcmpeq+0xe>
 80079de:	2100      	movs	r1, #0
 80079e0:	42c8      	cmn	r0, r1
 80079e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080079e4 <__aeabi_dcmpeq>:
 80079e4:	b510      	push	{r4, lr}
 80079e6:	f000 f849 	bl	8007a7c <__eqdf2>
 80079ea:	4240      	negs	r0, r0
 80079ec:	3001      	adds	r0, #1
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <__aeabi_dcmplt>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	f000 f8f7 	bl	8007be4 <__ledf2>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	db01      	blt.n	80079fe <__aeabi_dcmplt+0xe>
 80079fa:	2000      	movs	r0, #0
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	2001      	movs	r0, #1
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	46c0      	nop			@ (mov r8, r8)

08007a04 <__aeabi_dcmple>:
 8007a04:	b510      	push	{r4, lr}
 8007a06:	f000 f8ed 	bl	8007be4 <__ledf2>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	dd01      	ble.n	8007a12 <__aeabi_dcmple+0xe>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	2001      	movs	r0, #1
 8007a14:	bd10      	pop	{r4, pc}
 8007a16:	46c0      	nop			@ (mov r8, r8)

08007a18 <__aeabi_dcmpgt>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	f000 f873 	bl	8007b04 <__gedf2>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	dc01      	bgt.n	8007a26 <__aeabi_dcmpgt+0xe>
 8007a22:	2000      	movs	r0, #0
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	2001      	movs	r0, #1
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	46c0      	nop			@ (mov r8, r8)

08007a2c <__aeabi_dcmpge>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	f000 f869 	bl	8007b04 <__gedf2>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	da01      	bge.n	8007a3a <__aeabi_dcmpge+0xe>
 8007a36:	2000      	movs	r0, #0
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	46c0      	nop			@ (mov r8, r8)

08007a40 <__clzsi2>:
 8007a40:	211c      	movs	r1, #28
 8007a42:	2301      	movs	r3, #1
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	4298      	cmp	r0, r3
 8007a48:	d301      	bcc.n	8007a4e <__clzsi2+0xe>
 8007a4a:	0c00      	lsrs	r0, r0, #16
 8007a4c:	3910      	subs	r1, #16
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	4298      	cmp	r0, r3
 8007a52:	d301      	bcc.n	8007a58 <__clzsi2+0x18>
 8007a54:	0a00      	lsrs	r0, r0, #8
 8007a56:	3908      	subs	r1, #8
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	4298      	cmp	r0, r3
 8007a5c:	d301      	bcc.n	8007a62 <__clzsi2+0x22>
 8007a5e:	0900      	lsrs	r0, r0, #4
 8007a60:	3904      	subs	r1, #4
 8007a62:	a202      	add	r2, pc, #8	@ (adr r2, 8007a6c <__clzsi2+0x2c>)
 8007a64:	5c10      	ldrb	r0, [r2, r0]
 8007a66:	1840      	adds	r0, r0, r1
 8007a68:	4770      	bx	lr
 8007a6a:	46c0      	nop			@ (mov r8, r8)
 8007a6c:	02020304 	.word	0x02020304
 8007a70:	01010101 	.word	0x01010101
	...

08007a7c <__eqdf2>:
 8007a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7e:	4657      	mov	r7, sl
 8007a80:	46de      	mov	lr, fp
 8007a82:	464e      	mov	r6, r9
 8007a84:	4645      	mov	r5, r8
 8007a86:	b5e0      	push	{r5, r6, r7, lr}
 8007a88:	000d      	movs	r5, r1
 8007a8a:	0004      	movs	r4, r0
 8007a8c:	0fe8      	lsrs	r0, r5, #31
 8007a8e:	4683      	mov	fp, r0
 8007a90:	0309      	lsls	r1, r1, #12
 8007a92:	0fd8      	lsrs	r0, r3, #31
 8007a94:	0b09      	lsrs	r1, r1, #12
 8007a96:	4682      	mov	sl, r0
 8007a98:	4819      	ldr	r0, [pc, #100]	@ (8007b00 <__eqdf2+0x84>)
 8007a9a:	468c      	mov	ip, r1
 8007a9c:	031f      	lsls	r7, r3, #12
 8007a9e:	0069      	lsls	r1, r5, #1
 8007aa0:	005e      	lsls	r6, r3, #1
 8007aa2:	0d49      	lsrs	r1, r1, #21
 8007aa4:	0b3f      	lsrs	r7, r7, #12
 8007aa6:	0d76      	lsrs	r6, r6, #21
 8007aa8:	4281      	cmp	r1, r0
 8007aaa:	d018      	beq.n	8007ade <__eqdf2+0x62>
 8007aac:	4286      	cmp	r6, r0
 8007aae:	d00f      	beq.n	8007ad0 <__eqdf2+0x54>
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	42b1      	cmp	r1, r6
 8007ab4:	d10d      	bne.n	8007ad2 <__eqdf2+0x56>
 8007ab6:	45bc      	cmp	ip, r7
 8007ab8:	d10b      	bne.n	8007ad2 <__eqdf2+0x56>
 8007aba:	4294      	cmp	r4, r2
 8007abc:	d109      	bne.n	8007ad2 <__eqdf2+0x56>
 8007abe:	45d3      	cmp	fp, sl
 8007ac0:	d01c      	beq.n	8007afc <__eqdf2+0x80>
 8007ac2:	2900      	cmp	r1, #0
 8007ac4:	d105      	bne.n	8007ad2 <__eqdf2+0x56>
 8007ac6:	4660      	mov	r0, ip
 8007ac8:	4320      	orrs	r0, r4
 8007aca:	1e43      	subs	r3, r0, #1
 8007acc:	4198      	sbcs	r0, r3
 8007ace:	e000      	b.n	8007ad2 <__eqdf2+0x56>
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	bcf0      	pop	{r4, r5, r6, r7}
 8007ad4:	46bb      	mov	fp, r7
 8007ad6:	46b2      	mov	sl, r6
 8007ad8:	46a9      	mov	r9, r5
 8007ada:	46a0      	mov	r8, r4
 8007adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ade:	2001      	movs	r0, #1
 8007ae0:	428e      	cmp	r6, r1
 8007ae2:	d1f6      	bne.n	8007ad2 <__eqdf2+0x56>
 8007ae4:	4661      	mov	r1, ip
 8007ae6:	4339      	orrs	r1, r7
 8007ae8:	000f      	movs	r7, r1
 8007aea:	4317      	orrs	r7, r2
 8007aec:	4327      	orrs	r7, r4
 8007aee:	d1f0      	bne.n	8007ad2 <__eqdf2+0x56>
 8007af0:	465b      	mov	r3, fp
 8007af2:	4652      	mov	r2, sl
 8007af4:	1a98      	subs	r0, r3, r2
 8007af6:	1e43      	subs	r3, r0, #1
 8007af8:	4198      	sbcs	r0, r3
 8007afa:	e7ea      	b.n	8007ad2 <__eqdf2+0x56>
 8007afc:	2000      	movs	r0, #0
 8007afe:	e7e8      	b.n	8007ad2 <__eqdf2+0x56>
 8007b00:	000007ff 	.word	0x000007ff

08007b04 <__gedf2>:
 8007b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b06:	4657      	mov	r7, sl
 8007b08:	464e      	mov	r6, r9
 8007b0a:	4645      	mov	r5, r8
 8007b0c:	46de      	mov	lr, fp
 8007b0e:	b5e0      	push	{r5, r6, r7, lr}
 8007b10:	000d      	movs	r5, r1
 8007b12:	030e      	lsls	r6, r1, #12
 8007b14:	0049      	lsls	r1, r1, #1
 8007b16:	0d49      	lsrs	r1, r1, #21
 8007b18:	468a      	mov	sl, r1
 8007b1a:	0fdf      	lsrs	r7, r3, #31
 8007b1c:	0fe9      	lsrs	r1, r5, #31
 8007b1e:	46bc      	mov	ip, r7
 8007b20:	b083      	sub	sp, #12
 8007b22:	4f2f      	ldr	r7, [pc, #188]	@ (8007be0 <__gedf2+0xdc>)
 8007b24:	0004      	movs	r4, r0
 8007b26:	4680      	mov	r8, r0
 8007b28:	9101      	str	r1, [sp, #4]
 8007b2a:	0058      	lsls	r0, r3, #1
 8007b2c:	0319      	lsls	r1, r3, #12
 8007b2e:	4691      	mov	r9, r2
 8007b30:	0b36      	lsrs	r6, r6, #12
 8007b32:	0b09      	lsrs	r1, r1, #12
 8007b34:	0d40      	lsrs	r0, r0, #21
 8007b36:	45ba      	cmp	sl, r7
 8007b38:	d01d      	beq.n	8007b76 <__gedf2+0x72>
 8007b3a:	42b8      	cmp	r0, r7
 8007b3c:	d00d      	beq.n	8007b5a <__gedf2+0x56>
 8007b3e:	4657      	mov	r7, sl
 8007b40:	2f00      	cmp	r7, #0
 8007b42:	d12a      	bne.n	8007b9a <__gedf2+0x96>
 8007b44:	4334      	orrs	r4, r6
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d124      	bne.n	8007b94 <__gedf2+0x90>
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	d036      	beq.n	8007bbc <__gedf2+0xb8>
 8007b4e:	2c00      	cmp	r4, #0
 8007b50:	d141      	bne.n	8007bd6 <__gedf2+0xd2>
 8007b52:	4663      	mov	r3, ip
 8007b54:	0058      	lsls	r0, r3, #1
 8007b56:	3801      	subs	r0, #1
 8007b58:	e015      	b.n	8007b86 <__gedf2+0x82>
 8007b5a:	4311      	orrs	r1, r2
 8007b5c:	d138      	bne.n	8007bd0 <__gedf2+0xcc>
 8007b5e:	4653      	mov	r3, sl
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <__gedf2+0x64>
 8007b64:	4326      	orrs	r6, r4
 8007b66:	d0f4      	beq.n	8007b52 <__gedf2+0x4e>
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	4563      	cmp	r3, ip
 8007b6c:	d107      	bne.n	8007b7e <__gedf2+0x7a>
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	0058      	lsls	r0, r3, #1
 8007b72:	3801      	subs	r0, #1
 8007b74:	e007      	b.n	8007b86 <__gedf2+0x82>
 8007b76:	4326      	orrs	r6, r4
 8007b78:	d12a      	bne.n	8007bd0 <__gedf2+0xcc>
 8007b7a:	4550      	cmp	r0, sl
 8007b7c:	d021      	beq.n	8007bc2 <__gedf2+0xbe>
 8007b7e:	2001      	movs	r0, #1
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	425f      	negs	r7, r3
 8007b84:	4338      	orrs	r0, r7
 8007b86:	b003      	add	sp, #12
 8007b88:	bcf0      	pop	{r4, r5, r6, r7}
 8007b8a:	46bb      	mov	fp, r7
 8007b8c:	46b2      	mov	sl, r6
 8007b8e:	46a9      	mov	r9, r5
 8007b90:	46a0      	mov	r8, r4
 8007b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b94:	2c00      	cmp	r4, #0
 8007b96:	d0dc      	beq.n	8007b52 <__gedf2+0x4e>
 8007b98:	e7e6      	b.n	8007b68 <__gedf2+0x64>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d0ef      	beq.n	8007b7e <__gedf2+0x7a>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	4563      	cmp	r3, ip
 8007ba2:	d1ec      	bne.n	8007b7e <__gedf2+0x7a>
 8007ba4:	4582      	cmp	sl, r0
 8007ba6:	dcea      	bgt.n	8007b7e <__gedf2+0x7a>
 8007ba8:	dbe1      	blt.n	8007b6e <__gedf2+0x6a>
 8007baa:	428e      	cmp	r6, r1
 8007bac:	d8e7      	bhi.n	8007b7e <__gedf2+0x7a>
 8007bae:	d1de      	bne.n	8007b6e <__gedf2+0x6a>
 8007bb0:	45c8      	cmp	r8, r9
 8007bb2:	d8e4      	bhi.n	8007b7e <__gedf2+0x7a>
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	45c8      	cmp	r8, r9
 8007bb8:	d2e5      	bcs.n	8007b86 <__gedf2+0x82>
 8007bba:	e7d8      	b.n	8007b6e <__gedf2+0x6a>
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	d0e2      	beq.n	8007b86 <__gedf2+0x82>
 8007bc0:	e7dd      	b.n	8007b7e <__gedf2+0x7a>
 8007bc2:	4311      	orrs	r1, r2
 8007bc4:	d104      	bne.n	8007bd0 <__gedf2+0xcc>
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	4563      	cmp	r3, ip
 8007bca:	d1d8      	bne.n	8007b7e <__gedf2+0x7a>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e7da      	b.n	8007b86 <__gedf2+0x82>
 8007bd0:	2002      	movs	r0, #2
 8007bd2:	4240      	negs	r0, r0
 8007bd4:	e7d7      	b.n	8007b86 <__gedf2+0x82>
 8007bd6:	9b01      	ldr	r3, [sp, #4]
 8007bd8:	4563      	cmp	r3, ip
 8007bda:	d0e6      	beq.n	8007baa <__gedf2+0xa6>
 8007bdc:	e7cf      	b.n	8007b7e <__gedf2+0x7a>
 8007bde:	46c0      	nop			@ (mov r8, r8)
 8007be0:	000007ff 	.word	0x000007ff

08007be4 <__ledf2>:
 8007be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be6:	4657      	mov	r7, sl
 8007be8:	464e      	mov	r6, r9
 8007bea:	4645      	mov	r5, r8
 8007bec:	46de      	mov	lr, fp
 8007bee:	b5e0      	push	{r5, r6, r7, lr}
 8007bf0:	000d      	movs	r5, r1
 8007bf2:	030e      	lsls	r6, r1, #12
 8007bf4:	0049      	lsls	r1, r1, #1
 8007bf6:	0d49      	lsrs	r1, r1, #21
 8007bf8:	468a      	mov	sl, r1
 8007bfa:	0fdf      	lsrs	r7, r3, #31
 8007bfc:	0fe9      	lsrs	r1, r5, #31
 8007bfe:	46bc      	mov	ip, r7
 8007c00:	b083      	sub	sp, #12
 8007c02:	4f2e      	ldr	r7, [pc, #184]	@ (8007cbc <__ledf2+0xd8>)
 8007c04:	0004      	movs	r4, r0
 8007c06:	4680      	mov	r8, r0
 8007c08:	9101      	str	r1, [sp, #4]
 8007c0a:	0058      	lsls	r0, r3, #1
 8007c0c:	0319      	lsls	r1, r3, #12
 8007c0e:	4691      	mov	r9, r2
 8007c10:	0b36      	lsrs	r6, r6, #12
 8007c12:	0b09      	lsrs	r1, r1, #12
 8007c14:	0d40      	lsrs	r0, r0, #21
 8007c16:	45ba      	cmp	sl, r7
 8007c18:	d01e      	beq.n	8007c58 <__ledf2+0x74>
 8007c1a:	42b8      	cmp	r0, r7
 8007c1c:	d00d      	beq.n	8007c3a <__ledf2+0x56>
 8007c1e:	4657      	mov	r7, sl
 8007c20:	2f00      	cmp	r7, #0
 8007c22:	d127      	bne.n	8007c74 <__ledf2+0x90>
 8007c24:	4334      	orrs	r4, r6
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d133      	bne.n	8007c92 <__ledf2+0xae>
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	d034      	beq.n	8007c98 <__ledf2+0xb4>
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d140      	bne.n	8007cb4 <__ledf2+0xd0>
 8007c32:	4663      	mov	r3, ip
 8007c34:	0058      	lsls	r0, r3, #1
 8007c36:	3801      	subs	r0, #1
 8007c38:	e015      	b.n	8007c66 <__ledf2+0x82>
 8007c3a:	4311      	orrs	r1, r2
 8007c3c:	d112      	bne.n	8007c64 <__ledf2+0x80>
 8007c3e:	4653      	mov	r3, sl
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <__ledf2+0x64>
 8007c44:	4326      	orrs	r6, r4
 8007c46:	d0f4      	beq.n	8007c32 <__ledf2+0x4e>
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	4563      	cmp	r3, ip
 8007c4c:	d01d      	beq.n	8007c8a <__ledf2+0xa6>
 8007c4e:	2001      	movs	r0, #1
 8007c50:	9b01      	ldr	r3, [sp, #4]
 8007c52:	425f      	negs	r7, r3
 8007c54:	4338      	orrs	r0, r7
 8007c56:	e006      	b.n	8007c66 <__ledf2+0x82>
 8007c58:	4326      	orrs	r6, r4
 8007c5a:	d103      	bne.n	8007c64 <__ledf2+0x80>
 8007c5c:	4550      	cmp	r0, sl
 8007c5e:	d1f6      	bne.n	8007c4e <__ledf2+0x6a>
 8007c60:	4311      	orrs	r1, r2
 8007c62:	d01c      	beq.n	8007c9e <__ledf2+0xba>
 8007c64:	2002      	movs	r0, #2
 8007c66:	b003      	add	sp, #12
 8007c68:	bcf0      	pop	{r4, r5, r6, r7}
 8007c6a:	46bb      	mov	fp, r7
 8007c6c:	46b2      	mov	sl, r6
 8007c6e:	46a9      	mov	r9, r5
 8007c70:	46a0      	mov	r8, r4
 8007c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d0ea      	beq.n	8007c4e <__ledf2+0x6a>
 8007c78:	9b01      	ldr	r3, [sp, #4]
 8007c7a:	4563      	cmp	r3, ip
 8007c7c:	d1e7      	bne.n	8007c4e <__ledf2+0x6a>
 8007c7e:	4582      	cmp	sl, r0
 8007c80:	dce5      	bgt.n	8007c4e <__ledf2+0x6a>
 8007c82:	db02      	blt.n	8007c8a <__ledf2+0xa6>
 8007c84:	428e      	cmp	r6, r1
 8007c86:	d8e2      	bhi.n	8007c4e <__ledf2+0x6a>
 8007c88:	d00e      	beq.n	8007ca8 <__ledf2+0xc4>
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	0058      	lsls	r0, r3, #1
 8007c8e:	3801      	subs	r0, #1
 8007c90:	e7e9      	b.n	8007c66 <__ledf2+0x82>
 8007c92:	2c00      	cmp	r4, #0
 8007c94:	d0cd      	beq.n	8007c32 <__ledf2+0x4e>
 8007c96:	e7d7      	b.n	8007c48 <__ledf2+0x64>
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	d0e4      	beq.n	8007c66 <__ledf2+0x82>
 8007c9c:	e7d7      	b.n	8007c4e <__ledf2+0x6a>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	4563      	cmp	r3, ip
 8007ca4:	d0df      	beq.n	8007c66 <__ledf2+0x82>
 8007ca6:	e7d2      	b.n	8007c4e <__ledf2+0x6a>
 8007ca8:	45c8      	cmp	r8, r9
 8007caa:	d8d0      	bhi.n	8007c4e <__ledf2+0x6a>
 8007cac:	2000      	movs	r0, #0
 8007cae:	45c8      	cmp	r8, r9
 8007cb0:	d2d9      	bcs.n	8007c66 <__ledf2+0x82>
 8007cb2:	e7ea      	b.n	8007c8a <__ledf2+0xa6>
 8007cb4:	9b01      	ldr	r3, [sp, #4]
 8007cb6:	4563      	cmp	r3, ip
 8007cb8:	d0e4      	beq.n	8007c84 <__ledf2+0xa0>
 8007cba:	e7c8      	b.n	8007c4e <__ledf2+0x6a>
 8007cbc:	000007ff 	.word	0x000007ff

08007cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	0002      	movs	r2, r0
 8007cc8:	1dfb      	adds	r3, r7, #7
 8007cca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007ccc:	1dfb      	adds	r3, r7, #7
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007cd2:	d809      	bhi.n	8007ce8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cd4:	1dfb      	adds	r3, r7, #7
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	001a      	movs	r2, r3
 8007cda:	231f      	movs	r3, #31
 8007cdc:	401a      	ands	r2, r3
 8007cde:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <__NVIC_EnableIRQ+0x30>)
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4091      	lsls	r1, r2
 8007ce4:	000a      	movs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8007ce8:	46c0      	nop			@ (mov r8, r8)
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	e000e100 	.word	0xe000e100

08007cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	0002      	movs	r2, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	1dfb      	adds	r3, r7, #7
 8007d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007d02:	1dfb      	adds	r3, r7, #7
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d08:	d828      	bhi.n	8007d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8007dc8 <__NVIC_SetPriority+0xd4>)
 8007d0c:	1dfb      	adds	r3, r7, #7
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	b25b      	sxtb	r3, r3
 8007d12:	089b      	lsrs	r3, r3, #2
 8007d14:	33c0      	adds	r3, #192	@ 0xc0
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	589b      	ldr	r3, [r3, r2]
 8007d1a:	1dfa      	adds	r2, r7, #7
 8007d1c:	7812      	ldrb	r2, [r2, #0]
 8007d1e:	0011      	movs	r1, r2
 8007d20:	2203      	movs	r2, #3
 8007d22:	400a      	ands	r2, r1
 8007d24:	00d2      	lsls	r2, r2, #3
 8007d26:	21ff      	movs	r1, #255	@ 0xff
 8007d28:	4091      	lsls	r1, r2
 8007d2a:	000a      	movs	r2, r1
 8007d2c:	43d2      	mvns	r2, r2
 8007d2e:	401a      	ands	r2, r3
 8007d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	22ff      	movs	r2, #255	@ 0xff
 8007d38:	401a      	ands	r2, r3
 8007d3a:	1dfb      	adds	r3, r7, #7
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	0018      	movs	r0, r3
 8007d40:	2303      	movs	r3, #3
 8007d42:	4003      	ands	r3, r0
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007d48:	481f      	ldr	r0, [pc, #124]	@ (8007dc8 <__NVIC_SetPriority+0xd4>)
 8007d4a:	1dfb      	adds	r3, r7, #7
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	b25b      	sxtb	r3, r3
 8007d50:	089b      	lsrs	r3, r3, #2
 8007d52:	430a      	orrs	r2, r1
 8007d54:	33c0      	adds	r3, #192	@ 0xc0
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007d5a:	e031      	b.n	8007dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007dcc <__NVIC_SetPriority+0xd8>)
 8007d5e:	1dfb      	adds	r3, r7, #7
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	0019      	movs	r1, r3
 8007d64:	230f      	movs	r3, #15
 8007d66:	400b      	ands	r3, r1
 8007d68:	3b08      	subs	r3, #8
 8007d6a:	089b      	lsrs	r3, r3, #2
 8007d6c:	3306      	adds	r3, #6
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	18d3      	adds	r3, r2, r3
 8007d72:	3304      	adds	r3, #4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	1dfa      	adds	r2, r7, #7
 8007d78:	7812      	ldrb	r2, [r2, #0]
 8007d7a:	0011      	movs	r1, r2
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	400a      	ands	r2, r1
 8007d80:	00d2      	lsls	r2, r2, #3
 8007d82:	21ff      	movs	r1, #255	@ 0xff
 8007d84:	4091      	lsls	r1, r2
 8007d86:	000a      	movs	r2, r1
 8007d88:	43d2      	mvns	r2, r2
 8007d8a:	401a      	ands	r2, r3
 8007d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	019b      	lsls	r3, r3, #6
 8007d92:	22ff      	movs	r2, #255	@ 0xff
 8007d94:	401a      	ands	r2, r3
 8007d96:	1dfb      	adds	r3, r7, #7
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	4003      	ands	r3, r0
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007da4:	4809      	ldr	r0, [pc, #36]	@ (8007dcc <__NVIC_SetPriority+0xd8>)
 8007da6:	1dfb      	adds	r3, r7, #7
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	001c      	movs	r4, r3
 8007dac:	230f      	movs	r3, #15
 8007dae:	4023      	ands	r3, r4
 8007db0:	3b08      	subs	r3, #8
 8007db2:	089b      	lsrs	r3, r3, #2
 8007db4:	430a      	orrs	r2, r1
 8007db6:	3306      	adds	r3, #6
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	18c3      	adds	r3, r0, r3
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	601a      	str	r2, [r3, #0]
}
 8007dc0:	46c0      	nop			@ (mov r8, r8)
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b003      	add	sp, #12
 8007dc6:	bd90      	pop	{r4, r7, pc}
 8007dc8:	e000e100 	.word	0xe000e100
 8007dcc:	e000ed00 	.word	0xe000ed00

08007dd0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007de0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e14 <LL_DMA_SetDataTransferDirection+0x44>)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	18d3      	adds	r3, r2, r3
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	001a      	movs	r2, r3
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	18d3      	adds	r3, r2, r3
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a09      	ldr	r2, [pc, #36]	@ (8007e18 <LL_DMA_SetDataTransferDirection+0x48>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	0019      	movs	r1, r3
 8007df6:	4a07      	ldr	r2, [pc, #28]	@ (8007e14 <LL_DMA_SetDataTransferDirection+0x44>)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	18d3      	adds	r3, r2, r3
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	001a      	movs	r2, r3
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	18d3      	adds	r3, r2, r3
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b006      	add	sp, #24
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	08019a10 	.word	0x08019a10
 8007e18:	ffffbfef 	.word	0xffffbfef

08007e1c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007e60 <LL_DMA_SetMode+0x44>)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	18d3      	adds	r3, r2, r3
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	001a      	movs	r2, r3
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	18d3      	adds	r3, r2, r3
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	4393      	bics	r3, r2
 8007e40:	0019      	movs	r1, r3
 8007e42:	4a07      	ldr	r2, [pc, #28]	@ (8007e60 <LL_DMA_SetMode+0x44>)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	18d3      	adds	r3, r2, r3
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	001a      	movs	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	18d3      	adds	r3, r2, r3
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007e56:	46c0      	nop			@ (mov r8, r8)
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	b006      	add	sp, #24
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	08019a10 	.word	0x08019a10

08007e64 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007e74:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea8 <LL_DMA_SetPeriphIncMode+0x44>)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	18d3      	adds	r3, r2, r3
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	001a      	movs	r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	18d3      	adds	r3, r2, r3
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2240      	movs	r2, #64	@ 0x40
 8007e86:	4393      	bics	r3, r2
 8007e88:	0019      	movs	r1, r3
 8007e8a:	4a07      	ldr	r2, [pc, #28]	@ (8007ea8 <LL_DMA_SetPeriphIncMode+0x44>)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	18d3      	adds	r3, r2, r3
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	001a      	movs	r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	18d3      	adds	r3, r2, r3
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	b006      	add	sp, #24
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	46c0      	nop			@ (mov r8, r8)
 8007ea8:	08019a10 	.word	0x08019a10

08007eac <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8007ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef0 <LL_DMA_SetMemoryIncMode+0x44>)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	18d3      	adds	r3, r2, r3
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	001a      	movs	r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	18d3      	adds	r3, r2, r3
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2280      	movs	r2, #128	@ 0x80
 8007ece:	4393      	bics	r3, r2
 8007ed0:	0019      	movs	r1, r3
 8007ed2:	4a07      	ldr	r2, [pc, #28]	@ (8007ef0 <LL_DMA_SetMemoryIncMode+0x44>)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	18d3      	adds	r3, r2, r3
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	001a      	movs	r2, r3
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	18d3      	adds	r3, r2, r3
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007ee6:	46c0      	nop			@ (mov r8, r8)
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	b006      	add	sp, #24
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	46c0      	nop			@ (mov r8, r8)
 8007ef0:	08019a10 	.word	0x08019a10

08007ef4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8007f04:	4a0c      	ldr	r2, [pc, #48]	@ (8007f38 <LL_DMA_SetPeriphSize+0x44>)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	18d3      	adds	r3, r2, r3
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	001a      	movs	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	18d3      	adds	r3, r2, r3
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a09      	ldr	r2, [pc, #36]	@ (8007f3c <LL_DMA_SetPeriphSize+0x48>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	0019      	movs	r1, r3
 8007f1a:	4a07      	ldr	r2, [pc, #28]	@ (8007f38 <LL_DMA_SetPeriphSize+0x44>)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	18d3      	adds	r3, r2, r3
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	001a      	movs	r2, r3
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	18d3      	adds	r3, r2, r3
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8007f2e:	46c0      	nop			@ (mov r8, r8)
 8007f30:	46bd      	mov	sp, r7
 8007f32:	b006      	add	sp, #24
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	46c0      	nop			@ (mov r8, r8)
 8007f38:	08019a10 	.word	0x08019a10
 8007f3c:	fffffcff 	.word	0xfffffcff

08007f40 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007f50:	4a0c      	ldr	r2, [pc, #48]	@ (8007f84 <LL_DMA_SetMemorySize+0x44>)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	18d3      	adds	r3, r2, r3
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	001a      	movs	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	18d3      	adds	r3, r2, r3
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a09      	ldr	r2, [pc, #36]	@ (8007f88 <LL_DMA_SetMemorySize+0x48>)
 8007f62:	4013      	ands	r3, r2
 8007f64:	0019      	movs	r1, r3
 8007f66:	4a07      	ldr	r2, [pc, #28]	@ (8007f84 <LL_DMA_SetMemorySize+0x44>)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	18d3      	adds	r3, r2, r3
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	001a      	movs	r2, r3
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	18d3      	adds	r3, r2, r3
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b006      	add	sp, #24
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	08019a10 	.word	0x08019a10
 8007f88:	fffff3ff 	.word	0xfffff3ff

08007f8c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8007f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	18d3      	adds	r3, r2, r3
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	001a      	movs	r2, r3
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	18d3      	adds	r3, r2, r3
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a09      	ldr	r2, [pc, #36]	@ (8007fd4 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	0019      	movs	r1, r3
 8007fb2:	4a07      	ldr	r2, [pc, #28]	@ (8007fd0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	18d3      	adds	r3, r2, r3
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	001a      	movs	r2, r3
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	18d3      	adds	r3, r2, r3
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	601a      	str	r2, [r3, #0]
             Priority);
}
 8007fc6:	46c0      	nop			@ (mov r8, r8)
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	b006      	add	sp, #24
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	46c0      	nop			@ (mov r8, r8)
 8007fd0:	08019a10 	.word	0x08019a10
 8007fd4:	ffffcfff 	.word	0xffffcfff

08007fd8 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	0a9b      	lsrs	r3, r3, #10
 8007fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8008028 <LL_DMA_SetPeriphRequest+0x50>)
 8007fea:	405a      	eors	r2, r3
 8007fec:	0013      	movs	r3, r2
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	1a9b      	subs	r3, r3, r2
 8007ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	18d3      	adds	r3, r2, r3
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800802c <LL_DMA_SetPeriphRequest+0x54>)
 8007ffe:	4694      	mov	ip, r2
 8008000:	4463      	add	r3, ip
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	227f      	movs	r2, #127	@ 0x7f
 8008006:	4393      	bics	r3, r2
 8008008:	0019      	movs	r1, r3
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	18d3      	adds	r3, r2, r3
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4a06      	ldr	r2, [pc, #24]	@ (800802c <LL_DMA_SetPeriphRequest+0x54>)
 8008014:	4694      	mov	ip, r2
 8008016:	4463      	add	r3, ip
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	430a      	orrs	r2, r1
 800801c:	601a      	str	r2, [r3, #0]
}
 800801e:	46c0      	nop			@ (mov r8, r8)
 8008020:	46bd      	mov	sp, r7
 8008022:	b006      	add	sp, #24
 8008024:	bd80      	pop	{r7, pc}
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	00100080 	.word	0x00100080
 800802c:	40020800 	.word	0x40020800

08008030 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8008038:	4b07      	ldr	r3, [pc, #28]	@ (8008058 <LL_APB1_GRP1_EnableClock+0x28>)
 800803a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <LL_APB1_GRP1_EnableClock+0x28>)
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	430a      	orrs	r2, r1
 8008042:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8008044:	4b04      	ldr	r3, [pc, #16]	@ (8008058 <LL_APB1_GRP1_EnableClock+0x28>)
 8008046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4013      	ands	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800804e:	68fb      	ldr	r3, [r7, #12]
}
 8008050:	46c0      	nop			@ (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	b004      	add	sp, #16
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40021000 	.word	0x40021000

0800805c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8008064:	4b07      	ldr	r3, [pc, #28]	@ (8008084 <LL_IOP_GRP1_EnableClock+0x28>)
 8008066:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008068:	4b06      	ldr	r3, [pc, #24]	@ (8008084 <LL_IOP_GRP1_EnableClock+0x28>)
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	430a      	orrs	r2, r1
 800806e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8008070:	4b04      	ldr	r3, [pc, #16]	@ (8008084 <LL_IOP_GRP1_EnableClock+0x28>)
 8008072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4013      	ands	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800807a:	68fb      	ldr	r3, [r7, #12]
}
 800807c:	46c0      	nop			@ (mov r8, r8)
 800807e:	46bd      	mov	sp, r7
 8008080:	b004      	add	sp, #16
 8008082:	bd80      	pop	{r7, pc}
 8008084:	40021000 	.word	0x40021000

08008088 <pollGPIO>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Perform an action every 10 ticks.
void pollGPIO( void const * pvParameters ) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
	const TickType_t xFrequency = 10 / portTICK_PERIOD_MS;
 8008090:	230a      	movs	r3, #10
 8008092:	61bb      	str	r3, [r7, #24]
	uint16_t inputs[DEBOUNCE];
	uint8_t curr_input = 0;
 8008094:	231f      	movs	r3, #31
 8008096:	18fb      	adds	r3, r7, r3
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 800809c:	231e      	movs	r3, #30
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]

    for( ;; )
    {
        // Wait for the next cycle.
        vTaskDelay(xFrequency);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	0018      	movs	r0, r3
 80080a8:	f00d fe3a 	bl	8015d20 <vTaskDelay>

        inputs[curr_input] = R_GPIO_Port->IDR & R_IQSW_Pins;
 80080ac:	23a0      	movs	r3, #160	@ 0xa0
 80080ae:	05db      	lsls	r3, r3, #23
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	201f      	movs	r0, #31
 80080b6:	183a      	adds	r2, r7, r0
 80080b8:	7812      	ldrb	r2, [r2, #0]
 80080ba:	2138      	movs	r1, #56	@ 0x38
 80080bc:	400b      	ands	r3, r1
 80080be:	b299      	uxth	r1, r3
 80080c0:	230c      	movs	r3, #12
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	0052      	lsls	r2, r2, #1
 80080c6:	52d1      	strh	r1, [r2, r3]
        curr_input = curr_input < DEBOUNCE-1 ? curr_input+1 : 0;
 80080c8:	183b      	adds	r3, r7, r0
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d804      	bhi.n	80080da <pollGPIO+0x52>
 80080d0:	183b      	adds	r3, r7, r0
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	e000      	b.n	80080dc <pollGPIO+0x54>
 80080da:	2200      	movs	r2, #0
 80080dc:	231f      	movs	r3, #31
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	701a      	strb	r2, [r3, #0]

        input = R_IQSW_Pins;
 80080e2:	4b13      	ldr	r3, [pc, #76]	@ (8008130 <pollGPIO+0xa8>)
 80080e4:	2238      	movs	r2, #56	@ 0x38
 80080e6:	801a      	strh	r2, [r3, #0]
        for (idx = 0; idx < DEBOUNCE; ++idx) {
 80080e8:	231e      	movs	r3, #30
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	e011      	b.n	8008116 <pollGPIO+0x8e>
        	input |= inputs[idx];
 80080f2:	211e      	movs	r1, #30
 80080f4:	187b      	adds	r3, r7, r1
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	230c      	movs	r3, #12
 80080fa:	18fb      	adds	r3, r7, r3
 80080fc:	0052      	lsls	r2, r2, #1
 80080fe:	5ad2      	ldrh	r2, [r2, r3]
 8008100:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <pollGPIO+0xa8>)
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	4313      	orrs	r3, r2
 8008106:	b29a      	uxth	r2, r3
 8008108:	4b09      	ldr	r3, [pc, #36]	@ (8008130 <pollGPIO+0xa8>)
 800810a:	801a      	strh	r2, [r3, #0]
        for (idx = 0; idx < DEBOUNCE; ++idx) {
 800810c:	187b      	adds	r3, r7, r1
 800810e:	187a      	adds	r2, r7, r1
 8008110:	7812      	ldrb	r2, [r2, #0]
 8008112:	3201      	adds	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	231e      	movs	r3, #30
 8008118:	18fb      	adds	r3, r7, r3
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b04      	cmp	r3, #4
 800811e:	d9e8      	bls.n	80080f2 <pollGPIO+0x6a>
        }
        input = ~input;
 8008120:	4b03      	ldr	r3, [pc, #12]	@ (8008130 <pollGPIO+0xa8>)
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	43db      	mvns	r3, r3
 8008126:	b29a      	uxth	r2, r3
 8008128:	4b01      	ldr	r3, [pc, #4]	@ (8008130 <pollGPIO+0xa8>)
 800812a:	801a      	strh	r2, [r3, #0]
        vTaskDelay(xFrequency);
 800812c:	e7ba      	b.n	80080a4 <pollGPIO+0x1c>
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	20000348 	.word	0x20000348

08008134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008134:	b5b0      	push	{r4, r5, r7, lr}
 8008136:	b08a      	sub	sp, #40	@ 0x28
 8008138:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800813a:	f000 fdc9 	bl	8008cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800813e:	f000 f839 	bl	80081b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008142:	f000 fa81 	bl	8008648 <MX_GPIO_Init>
  MX_DMA_Init();
 8008146:	f000 fa5b 	bl	8008600 <MX_DMA_Init>
  MX_ADC1_Init();
 800814a:	f000 f895 	bl	8008278 <MX_ADC1_Init>
  MX_I2C2_Init();
 800814e:	f000 f8fd 	bl	800834c <MX_I2C2_Init>
  MX_TIM2_Init();
 8008152:	f000 f93b 	bl	80083cc <MX_TIM2_Init>
  MX_UCPD1_Init();
 8008156:	f000 f9ad 	bl	80084b4 <MX_UCPD1_Init>
  MX_TCPP_Init();
 800815a:	f00e fee9 	bl	8016f30 <MX_TCPP_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 800815e:	f00e ff0b 	bl	8016f78 <MX_USBPD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008162:	2514      	movs	r5, #20
 8008164:	197b      	adds	r3, r7, r5
 8008166:	4a0f      	ldr	r2, [pc, #60]	@ (80081a4 <main+0x70>)
 8008168:	ca13      	ldmia	r2!, {r0, r1, r4}
 800816a:	c313      	stmia	r3!, {r0, r1, r4}
 800816c:	ca03      	ldmia	r2!, {r0, r1}
 800816e:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008170:	197b      	adds	r3, r7, r5
 8008172:	2100      	movs	r1, #0
 8008174:	0018      	movs	r0, r3
 8008176:	f00c feac 	bl	8014ed2 <osThreadCreate>
 800817a:	0002      	movs	r2, r0
 800817c:	4b0a      	ldr	r3, [pc, #40]	@ (80081a8 <main+0x74>)
 800817e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(gpioTask, pollGPIO, osPriorityLow, 0, 32);
 8008180:	003b      	movs	r3, r7
 8008182:	4a0a      	ldr	r2, [pc, #40]	@ (80081ac <main+0x78>)
 8008184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008186:	c313      	stmia	r3!, {r0, r1, r4}
 8008188:	ca03      	ldmia	r2!, {r0, r1}
 800818a:	c303      	stmia	r3!, {r0, r1}
  gpioTaskHandle = osThreadCreate(osThread(gpioTask), NULL);
 800818c:	003b      	movs	r3, r7
 800818e:	2100      	movs	r1, #0
 8008190:	0018      	movs	r0, r3
 8008192:	f00c fe9e 	bl	8014ed2 <osThreadCreate>
 8008196:	0002      	movs	r2, r0
 8008198:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <main+0x7c>)
 800819a:	601a      	str	r2, [r3, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800819c:	f00c fe91 	bl	8014ec2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80081a0:	46c0      	nop			@ (mov r8, r8)
 80081a2:	e7fd      	b.n	80081a0 <main+0x6c>
 80081a4:	080198b8 	.word	0x080198b8
 80081a8:	20000340 	.word	0x20000340
 80081ac:	080198d8 	.word	0x080198d8
 80081b0:	20000344 	.word	0x20000344

080081b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80081b4:	b590      	push	{r4, r7, lr}
 80081b6:	b095      	sub	sp, #84	@ 0x54
 80081b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80081ba:	2414      	movs	r4, #20
 80081bc:	193b      	adds	r3, r7, r4
 80081be:	0018      	movs	r0, r3
 80081c0:	233c      	movs	r3, #60	@ 0x3c
 80081c2:	001a      	movs	r2, r3
 80081c4:	2100      	movs	r1, #0
 80081c6:	f011 fb05 	bl	80197d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80081ca:	1d3b      	adds	r3, r7, #4
 80081cc:	0018      	movs	r0, r3
 80081ce:	2310      	movs	r3, #16
 80081d0:	001a      	movs	r2, r3
 80081d2:	2100      	movs	r1, #0
 80081d4:	f011 fafe 	bl	80197d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80081d8:	2380      	movs	r3, #128	@ 0x80
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	0018      	movs	r0, r3
 80081de:	f003 fc55 	bl	800ba8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80081e2:	193b      	adds	r3, r7, r4
 80081e4:	2222      	movs	r2, #34	@ 0x22
 80081e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80081e8:	193b      	adds	r3, r7, r4
 80081ea:	2280      	movs	r2, #128	@ 0x80
 80081ec:	0052      	lsls	r2, r2, #1
 80081ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80081f0:	193b      	adds	r3, r7, r4
 80081f2:	2280      	movs	r2, #128	@ 0x80
 80081f4:	03d2      	lsls	r2, r2, #15
 80081f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80081f8:	0021      	movs	r1, r4
 80081fa:	187b      	adds	r3, r7, r1
 80081fc:	2200      	movs	r2, #0
 80081fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008200:	187b      	adds	r3, r7, r1
 8008202:	2240      	movs	r2, #64	@ 0x40
 8008204:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008206:	187b      	adds	r3, r7, r1
 8008208:	2202      	movs	r2, #2
 800820a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800820c:	187b      	adds	r3, r7, r1
 800820e:	2202      	movs	r2, #2
 8008210:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8008212:	187b      	adds	r3, r7, r1
 8008214:	2200      	movs	r2, #0
 8008216:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8008218:	187b      	adds	r3, r7, r1
 800821a:	2208      	movs	r2, #8
 800821c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800821e:	187b      	adds	r3, r7, r1
 8008220:	2280      	movs	r2, #128	@ 0x80
 8008222:	0292      	lsls	r2, r2, #10
 8008224:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008226:	187b      	adds	r3, r7, r1
 8008228:	2280      	movs	r2, #128	@ 0x80
 800822a:	0492      	lsls	r2, r2, #18
 800822c:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800822e:	187b      	adds	r3, r7, r1
 8008230:	2280      	movs	r2, #128	@ 0x80
 8008232:	0592      	lsls	r2, r2, #22
 8008234:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008236:	187b      	adds	r3, r7, r1
 8008238:	0018      	movs	r0, r3
 800823a:	f003 fc73 	bl	800bb24 <HAL_RCC_OscConfig>
 800823e:	1e03      	subs	r3, r0, #0
 8008240:	d001      	beq.n	8008246 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8008242:	f000 fafb 	bl	800883c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008246:	1d3b      	adds	r3, r7, #4
 8008248:	2207      	movs	r2, #7
 800824a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800824c:	1d3b      	adds	r3, r7, #4
 800824e:	2202      	movs	r2, #2
 8008250:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008252:	1d3b      	adds	r3, r7, #4
 8008254:	2200      	movs	r2, #0
 8008256:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008258:	1d3b      	adds	r3, r7, #4
 800825a:	2200      	movs	r2, #0
 800825c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800825e:	1d3b      	adds	r3, r7, #4
 8008260:	2102      	movs	r1, #2
 8008262:	0018      	movs	r0, r3
 8008264:	f003 ffbe 	bl	800c1e4 <HAL_RCC_ClockConfig>
 8008268:	1e03      	subs	r3, r0, #0
 800826a:	d001      	beq.n	8008270 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800826c:	f000 fae6 	bl	800883c <Error_Handler>
  }
}
 8008270:	46c0      	nop			@ (mov r8, r8)
 8008272:	46bd      	mov	sp, r7
 8008274:	b015      	add	sp, #84	@ 0x54
 8008276:	bd90      	pop	{r4, r7, pc}

08008278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800827e:	1d3b      	adds	r3, r7, #4
 8008280:	0018      	movs	r0, r3
 8008282:	230c      	movs	r3, #12
 8008284:	001a      	movs	r2, r3
 8008286:	2100      	movs	r1, #0
 8008288:	f011 faa4 	bl	80197d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800828c:	4b2c      	ldr	r3, [pc, #176]	@ (8008340 <MX_ADC1_Init+0xc8>)
 800828e:	4a2d      	ldr	r2, [pc, #180]	@ (8008344 <MX_ADC1_Init+0xcc>)
 8008290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008292:	4b2b      	ldr	r3, [pc, #172]	@ (8008340 <MX_ADC1_Init+0xc8>)
 8008294:	2280      	movs	r2, #128	@ 0x80
 8008296:	0612      	lsls	r2, r2, #24
 8008298:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800829a:	4b29      	ldr	r3, [pc, #164]	@ (8008340 <MX_ADC1_Init+0xc8>)
 800829c:	2200      	movs	r2, #0
 800829e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80082a0:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80082a6:	4b26      	ldr	r3, [pc, #152]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80082ac:	4b24      	ldr	r3, [pc, #144]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082ae:	2204      	movs	r2, #4
 80082b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80082b2:	4b23      	ldr	r3, [pc, #140]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80082b8:	4b21      	ldr	r3, [pc, #132]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80082be:	4b20      	ldr	r3, [pc, #128]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80082c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082c6:	2201      	movs	r2, #1
 80082c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80082ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80082d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80082d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082d8:	222c      	movs	r2, #44	@ 0x2c
 80082da:	2100      	movs	r1, #0
 80082dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80082de:	4b18      	ldr	r3, [pc, #96]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082e0:	2280      	movs	r2, #128	@ 0x80
 80082e2:	0152      	lsls	r2, r2, #5
 80082e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80082e6:	4b16      	ldr	r3, [pc, #88]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082e8:	2207      	movs	r2, #7
 80082ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80082ec:	4b14      	ldr	r3, [pc, #80]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082ee:	2207      	movs	r2, #7
 80082f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80082f2:	4b13      	ldr	r3, [pc, #76]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082f4:	223c      	movs	r2, #60	@ 0x3c
 80082f6:	2100      	movs	r1, #0
 80082f8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80082fa:	4b11      	ldr	r3, [pc, #68]	@ (8008340 <MX_ADC1_Init+0xc8>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008300:	4b0f      	ldr	r3, [pc, #60]	@ (8008340 <MX_ADC1_Init+0xc8>)
 8008302:	0018      	movs	r0, r3
 8008304:	f000 fe7e 	bl	8009004 <HAL_ADC_Init>
 8008308:	1e03      	subs	r3, r0, #0
 800830a:	d001      	beq.n	8008310 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800830c:	f000 fa96 	bl	800883c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008310:	1d3b      	adds	r3, r7, #4
 8008312:	4a0d      	ldr	r2, [pc, #52]	@ (8008348 <MX_ADC1_Init+0xd0>)
 8008314:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008316:	1d3b      	adds	r3, r7, #4
 8008318:	2200      	movs	r2, #0
 800831a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800831c:	1d3b      	adds	r3, r7, #4
 800831e:	2200      	movs	r2, #0
 8008320:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008322:	1d3a      	adds	r2, r7, #4
 8008324:	4b06      	ldr	r3, [pc, #24]	@ (8008340 <MX_ADC1_Init+0xc8>)
 8008326:	0011      	movs	r1, r2
 8008328:	0018      	movs	r0, r3
 800832a:	f001 f861 	bl	80093f0 <HAL_ADC_ConfigChannel>
 800832e:	1e03      	subs	r3, r0, #0
 8008330:	d001      	beq.n	8008336 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8008332:	f000 fa83 	bl	800883c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008336:	46c0      	nop			@ (mov r8, r8)
 8008338:	46bd      	mov	sp, r7
 800833a:	b004      	add	sp, #16
 800833c:	bd80      	pop	{r7, pc}
 800833e:	46c0      	nop			@ (mov r8, r8)
 8008340:	2000023c 	.word	0x2000023c
 8008344:	40012400 	.word	0x40012400
 8008348:	2c000800 	.word	0x2c000800

0800834c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008350:	4b1b      	ldr	r3, [pc, #108]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008352:	4a1c      	ldr	r2, [pc, #112]	@ (80083c4 <MX_I2C2_Init+0x78>)
 8008354:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8008356:	4b1a      	ldr	r3, [pc, #104]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008358:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <MX_I2C2_Init+0x7c>)
 800835a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800835c:	4b18      	ldr	r3, [pc, #96]	@ (80083c0 <MX_I2C2_Init+0x74>)
 800835e:	2200      	movs	r2, #0
 8008360:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008362:	4b17      	ldr	r3, [pc, #92]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008364:	2201      	movs	r2, #1
 8008366:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008368:	4b15      	ldr	r3, [pc, #84]	@ (80083c0 <MX_I2C2_Init+0x74>)
 800836a:	2200      	movs	r2, #0
 800836c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800836e:	4b14      	ldr	r3, [pc, #80]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008370:	2200      	movs	r2, #0
 8008372:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008374:	4b12      	ldr	r3, [pc, #72]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008376:	2200      	movs	r2, #0
 8008378:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800837a:	4b11      	ldr	r3, [pc, #68]	@ (80083c0 <MX_I2C2_Init+0x74>)
 800837c:	2200      	movs	r2, #0
 800837e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008380:	4b0f      	ldr	r3, [pc, #60]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008382:	2200      	movs	r2, #0
 8008384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008386:	4b0e      	ldr	r3, [pc, #56]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008388:	0018      	movs	r0, r3
 800838a:	f001 fcc7 	bl	8009d1c <HAL_I2C_Init>
 800838e:	1e03      	subs	r3, r0, #0
 8008390:	d001      	beq.n	8008396 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008392:	f000 fa53 	bl	800883c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008396:	4b0a      	ldr	r3, [pc, #40]	@ (80083c0 <MX_I2C2_Init+0x74>)
 8008398:	2100      	movs	r1, #0
 800839a:	0018      	movs	r0, r3
 800839c:	f001 fd64 	bl	8009e68 <HAL_I2CEx_ConfigAnalogFilter>
 80083a0:	1e03      	subs	r3, r0, #0
 80083a2:	d001      	beq.n	80083a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80083a4:	f000 fa4a 	bl	800883c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80083a8:	4b05      	ldr	r3, [pc, #20]	@ (80083c0 <MX_I2C2_Init+0x74>)
 80083aa:	2100      	movs	r1, #0
 80083ac:	0018      	movs	r0, r3
 80083ae:	f001 fda7 	bl	8009f00 <HAL_I2CEx_ConfigDigitalFilter>
 80083b2:	1e03      	subs	r3, r0, #0
 80083b4:	d001      	beq.n	80083ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80083b6:	f000 fa41 	bl	800883c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80083ba:	46c0      	nop			@ (mov r8, r8)
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	200002a0 	.word	0x200002a0
 80083c4:	40005800 	.word	0x40005800
 80083c8:	10b17db5 	.word	0x10b17db5

080083cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08a      	sub	sp, #40	@ 0x28
 80083d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083d2:	231c      	movs	r3, #28
 80083d4:	18fb      	adds	r3, r7, r3
 80083d6:	0018      	movs	r0, r3
 80083d8:	230c      	movs	r3, #12
 80083da:	001a      	movs	r2, r3
 80083dc:	2100      	movs	r1, #0
 80083de:	f011 f9f9 	bl	80197d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083e2:	003b      	movs	r3, r7
 80083e4:	0018      	movs	r0, r3
 80083e6:	231c      	movs	r3, #28
 80083e8:	001a      	movs	r2, r3
 80083ea:	2100      	movs	r1, #0
 80083ec:	f011 f9f2 	bl	80197d4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80083f0:	4b2f      	ldr	r3, [pc, #188]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 80083f2:	2280      	movs	r2, #128	@ 0x80
 80083f4:	05d2      	lsls	r2, r2, #23
 80083f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80083f8:	4b2d      	ldr	r3, [pc, #180]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083fe:	4b2c      	ldr	r3, [pc, #176]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 8008400:	2200      	movs	r2, #0
 8008402:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008404:	4b2a      	ldr	r3, [pc, #168]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 8008406:	2201      	movs	r2, #1
 8008408:	4252      	negs	r2, r2
 800840a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800840c:	4b28      	ldr	r3, [pc, #160]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 800840e:	2200      	movs	r2, #0
 8008410:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008412:	4b27      	ldr	r3, [pc, #156]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 8008414:	2200      	movs	r2, #0
 8008416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008418:	4b25      	ldr	r3, [pc, #148]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 800841a:	0018      	movs	r0, r3
 800841c:	f004 fbb4 	bl	800cb88 <HAL_TIM_PWM_Init>
 8008420:	1e03      	subs	r3, r0, #0
 8008422:	d001      	beq.n	8008428 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8008424:	f000 fa0a 	bl	800883c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008428:	211c      	movs	r1, #28
 800842a:	187b      	adds	r3, r7, r1
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008430:	187b      	adds	r3, r7, r1
 8008432:	2200      	movs	r2, #0
 8008434:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008436:	187a      	adds	r2, r7, r1
 8008438:	4b1d      	ldr	r3, [pc, #116]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 800843a:	0011      	movs	r1, r2
 800843c:	0018      	movs	r0, r3
 800843e:	f005 fa93 	bl	800d968 <HAL_TIMEx_MasterConfigSynchronization>
 8008442:	1e03      	subs	r3, r0, #0
 8008444:	d001      	beq.n	800844a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8008446:	f000 f9f9 	bl	800883c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800844a:	003b      	movs	r3, r7
 800844c:	2260      	movs	r2, #96	@ 0x60
 800844e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008450:	003b      	movs	r3, r7
 8008452:	2200      	movs	r2, #0
 8008454:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008456:	003b      	movs	r3, r7
 8008458:	2200      	movs	r2, #0
 800845a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800845c:	003b      	movs	r3, r7
 800845e:	2200      	movs	r2, #0
 8008460:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008462:	0039      	movs	r1, r7
 8008464:	4b12      	ldr	r3, [pc, #72]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 8008466:	2200      	movs	r2, #0
 8008468:	0018      	movs	r0, r3
 800846a:	f004 fddd 	bl	800d028 <HAL_TIM_PWM_ConfigChannel>
 800846e:	1e03      	subs	r3, r0, #0
 8008470:	d001      	beq.n	8008476 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8008472:	f000 f9e3 	bl	800883c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008476:	0039      	movs	r1, r7
 8008478:	4b0d      	ldr	r3, [pc, #52]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 800847a:	2204      	movs	r2, #4
 800847c:	0018      	movs	r0, r3
 800847e:	f004 fdd3 	bl	800d028 <HAL_TIM_PWM_ConfigChannel>
 8008482:	1e03      	subs	r3, r0, #0
 8008484:	d001      	beq.n	800848a <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8008486:	f000 f9d9 	bl	800883c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800848a:	0039      	movs	r1, r7
 800848c:	4b08      	ldr	r3, [pc, #32]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 800848e:	2208      	movs	r2, #8
 8008490:	0018      	movs	r0, r3
 8008492:	f004 fdc9 	bl	800d028 <HAL_TIM_PWM_ConfigChannel>
 8008496:	1e03      	subs	r3, r0, #0
 8008498:	d001      	beq.n	800849e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800849a:	f000 f9cf 	bl	800883c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800849e:	4b04      	ldr	r3, [pc, #16]	@ (80084b0 <MX_TIM2_Init+0xe4>)
 80084a0:	0018      	movs	r0, r3
 80084a2:	f000 fac3 	bl	8008a2c <HAL_TIM_MspPostInit>

}
 80084a6:	46c0      	nop			@ (mov r8, r8)
 80084a8:	46bd      	mov	sp, r7
 80084aa:	b00a      	add	sp, #40	@ 0x28
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	46c0      	nop			@ (mov r8, r8)
 80084b0:	200002f4 	.word	0x200002f4

080084b4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ba:	003b      	movs	r3, r7
 80084bc:	0018      	movs	r0, r3
 80084be:	2318      	movs	r3, #24
 80084c0:	001a      	movs	r2, r3
 80084c2:	2100      	movs	r1, #0
 80084c4:	f011 f986 	bl	80197d4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 80084c8:	2380      	movs	r3, #128	@ 0x80
 80084ca:	049b      	lsls	r3, r3, #18
 80084cc:	0018      	movs	r0, r3
 80084ce:	f7ff fdaf 	bl	8008030 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80084d2:	2002      	movs	r0, #2
 80084d4:	f7ff fdc2 	bl	800805c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80084d8:	2001      	movs	r0, #1
 80084da:	f7ff fdbf 	bl	800805c <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80084de:	003b      	movs	r3, r7
 80084e0:	2280      	movs	r2, #128	@ 0x80
 80084e2:	0212      	lsls	r2, r2, #8
 80084e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80084e6:	003b      	movs	r3, r7
 80084e8:	2203      	movs	r2, #3
 80084ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80084ec:	003b      	movs	r3, r7
 80084ee:	2200      	movs	r2, #0
 80084f0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084f2:	003b      	movs	r3, r7
 80084f4:	4a40      	ldr	r2, [pc, #256]	@ (80085f8 <MX_UCPD1_Init+0x144>)
 80084f6:	0019      	movs	r1, r3
 80084f8:	0010      	movs	r0, r2
 80084fa:	f005 fc89 	bl	800de10 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80084fe:	003b      	movs	r3, r7
 8008500:	2280      	movs	r2, #128	@ 0x80
 8008502:	0052      	lsls	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008506:	003b      	movs	r3, r7
 8008508:	2203      	movs	r2, #3
 800850a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800850c:	003b      	movs	r3, r7
 800850e:	2200      	movs	r2, #0
 8008510:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008512:	003a      	movs	r2, r7
 8008514:	23a0      	movs	r3, #160	@ 0xa0
 8008516:	05db      	lsls	r3, r3, #23
 8008518:	0011      	movs	r1, r2
 800851a:	0018      	movs	r0, r3
 800851c:	f005 fc78 	bl	800de10 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8008520:	4b36      	ldr	r3, [pc, #216]	@ (80085fc <MX_UCPD1_Init+0x148>)
 8008522:	223a      	movs	r2, #58	@ 0x3a
 8008524:	2100      	movs	r1, #0
 8008526:	0018      	movs	r0, r3
 8008528:	f7ff fd56 	bl	8007fd8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800852c:	4b33      	ldr	r3, [pc, #204]	@ (80085fc <MX_UCPD1_Init+0x148>)
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	0018      	movs	r0, r3
 8008534:	f7ff fc4c 	bl	8007dd0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8008538:	4b30      	ldr	r3, [pc, #192]	@ (80085fc <MX_UCPD1_Init+0x148>)
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	0018      	movs	r0, r3
 8008540:	f7ff fd24 	bl	8007f8c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8008544:	4b2d      	ldr	r3, [pc, #180]	@ (80085fc <MX_UCPD1_Init+0x148>)
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	0018      	movs	r0, r3
 800854c:	f7ff fc66 	bl	8007e1c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8008550:	4b2a      	ldr	r3, [pc, #168]	@ (80085fc <MX_UCPD1_Init+0x148>)
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	0018      	movs	r0, r3
 8008558:	f7ff fc84 	bl	8007e64 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800855c:	4b27      	ldr	r3, [pc, #156]	@ (80085fc <MX_UCPD1_Init+0x148>)
 800855e:	2280      	movs	r2, #128	@ 0x80
 8008560:	2100      	movs	r1, #0
 8008562:	0018      	movs	r0, r3
 8008564:	f7ff fca2 	bl	8007eac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8008568:	4b24      	ldr	r3, [pc, #144]	@ (80085fc <MX_UCPD1_Init+0x148>)
 800856a:	2200      	movs	r2, #0
 800856c:	2100      	movs	r1, #0
 800856e:	0018      	movs	r0, r3
 8008570:	f7ff fcc0 	bl	8007ef4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8008574:	4b21      	ldr	r3, [pc, #132]	@ (80085fc <MX_UCPD1_Init+0x148>)
 8008576:	2200      	movs	r2, #0
 8008578:	2100      	movs	r1, #0
 800857a:	0018      	movs	r0, r3
 800857c:	f7ff fce0 	bl	8007f40 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8008580:	4b1e      	ldr	r3, [pc, #120]	@ (80085fc <MX_UCPD1_Init+0x148>)
 8008582:	223b      	movs	r2, #59	@ 0x3b
 8008584:	2101      	movs	r1, #1
 8008586:	0018      	movs	r0, r3
 8008588:	f7ff fd26 	bl	8007fd8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800858c:	4b1b      	ldr	r3, [pc, #108]	@ (80085fc <MX_UCPD1_Init+0x148>)
 800858e:	2210      	movs	r2, #16
 8008590:	2101      	movs	r1, #1
 8008592:	0018      	movs	r0, r3
 8008594:	f7ff fc1c 	bl	8007dd0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8008598:	4b18      	ldr	r3, [pc, #96]	@ (80085fc <MX_UCPD1_Init+0x148>)
 800859a:	2200      	movs	r2, #0
 800859c:	2101      	movs	r1, #1
 800859e:	0018      	movs	r0, r3
 80085a0:	f7ff fcf4 	bl	8007f8c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80085a4:	4b15      	ldr	r3, [pc, #84]	@ (80085fc <MX_UCPD1_Init+0x148>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	2101      	movs	r1, #1
 80085aa:	0018      	movs	r0, r3
 80085ac:	f7ff fc36 	bl	8007e1c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80085b0:	4b12      	ldr	r3, [pc, #72]	@ (80085fc <MX_UCPD1_Init+0x148>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	2101      	movs	r1, #1
 80085b6:	0018      	movs	r0, r3
 80085b8:	f7ff fc54 	bl	8007e64 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80085bc:	4b0f      	ldr	r3, [pc, #60]	@ (80085fc <MX_UCPD1_Init+0x148>)
 80085be:	2280      	movs	r2, #128	@ 0x80
 80085c0:	2101      	movs	r1, #1
 80085c2:	0018      	movs	r0, r3
 80085c4:	f7ff fc72 	bl	8007eac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80085c8:	4b0c      	ldr	r3, [pc, #48]	@ (80085fc <MX_UCPD1_Init+0x148>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	2101      	movs	r1, #1
 80085ce:	0018      	movs	r0, r3
 80085d0:	f7ff fc90 	bl	8007ef4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80085d4:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <MX_UCPD1_Init+0x148>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	2101      	movs	r1, #1
 80085da:	0018      	movs	r0, r3
 80085dc:	f7ff fcb0 	bl	8007f40 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 3);
 80085e0:	2103      	movs	r1, #3
 80085e2:	2008      	movs	r0, #8
 80085e4:	f7ff fb86 	bl	8007cf4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80085e8:	2008      	movs	r0, #8
 80085ea:	f7ff fb69 	bl	8007cc0 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80085ee:	46c0      	nop			@ (mov r8, r8)
 80085f0:	46bd      	mov	sp, r7
 80085f2:	b006      	add	sp, #24
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	46c0      	nop			@ (mov r8, r8)
 80085f8:	50000400 	.word	0x50000400
 80085fc:	40020000 	.word	0x40020000

08008600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008606:	4b0f      	ldr	r3, [pc, #60]	@ (8008644 <MX_DMA_Init+0x44>)
 8008608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800860a:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <MX_DMA_Init+0x44>)
 800860c:	2101      	movs	r1, #1
 800860e:	430a      	orrs	r2, r1
 8008610:	639a      	str	r2, [r3, #56]	@ 0x38
 8008612:	4b0c      	ldr	r3, [pc, #48]	@ (8008644 <MX_DMA_Init+0x44>)
 8008614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008616:	2201      	movs	r2, #1
 8008618:	4013      	ands	r3, r2
 800861a:	607b      	str	r3, [r7, #4]
 800861c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 3);
 800861e:	2103      	movs	r1, #3
 8008620:	2009      	movs	r0, #9
 8008622:	f7ff fb67 	bl	8007cf4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008626:	2009      	movs	r0, #9
 8008628:	f7ff fb4a 	bl	8007cc0 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 800862c:	2103      	movs	r1, #3
 800862e:	200a      	movs	r0, #10
 8008630:	f7ff fb60 	bl	8007cf4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8008634:	200a      	movs	r0, #10
 8008636:	f7ff fb43 	bl	8007cc0 <__NVIC_EnableIRQ>

}
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b002      	add	sp, #8
 8008640:	bd80      	pop	{r7, pc}
 8008642:	46c0      	nop			@ (mov r8, r8)
 8008644:	40021000 	.word	0x40021000

08008648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008648:	b590      	push	{r4, r7, lr}
 800864a:	b089      	sub	sp, #36	@ 0x24
 800864c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800864e:	240c      	movs	r4, #12
 8008650:	193b      	adds	r3, r7, r4
 8008652:	0018      	movs	r0, r3
 8008654:	2314      	movs	r3, #20
 8008656:	001a      	movs	r2, r3
 8008658:	2100      	movs	r1, #0
 800865a:	f011 f8bb 	bl	80197d4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800865e:	4b3f      	ldr	r3, [pc, #252]	@ (800875c <MX_GPIO_Init+0x114>)
 8008660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008662:	4b3e      	ldr	r3, [pc, #248]	@ (800875c <MX_GPIO_Init+0x114>)
 8008664:	2101      	movs	r1, #1
 8008666:	430a      	orrs	r2, r1
 8008668:	635a      	str	r2, [r3, #52]	@ 0x34
 800866a:	4b3c      	ldr	r3, [pc, #240]	@ (800875c <MX_GPIO_Init+0x114>)
 800866c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866e:	2201      	movs	r2, #1
 8008670:	4013      	ands	r3, r2
 8008672:	60bb      	str	r3, [r7, #8]
 8008674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008676:	4b39      	ldr	r3, [pc, #228]	@ (800875c <MX_GPIO_Init+0x114>)
 8008678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800867a:	4b38      	ldr	r3, [pc, #224]	@ (800875c <MX_GPIO_Init+0x114>)
 800867c:	2102      	movs	r1, #2
 800867e:	430a      	orrs	r2, r1
 8008680:	635a      	str	r2, [r3, #52]	@ 0x34
 8008682:	4b36      	ldr	r3, [pc, #216]	@ (800875c <MX_GPIO_Init+0x114>)
 8008684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008686:	2202      	movs	r2, #2
 8008688:	4013      	ands	r3, r2
 800868a:	607b      	str	r3, [r7, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800868e:	4b33      	ldr	r3, [pc, #204]	@ (800875c <MX_GPIO_Init+0x114>)
 8008690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008692:	4b32      	ldr	r3, [pc, #200]	@ (800875c <MX_GPIO_Init+0x114>)
 8008694:	2104      	movs	r1, #4
 8008696:	430a      	orrs	r2, r1
 8008698:	635a      	str	r2, [r3, #52]	@ 0x34
 800869a:	4b30      	ldr	r3, [pc, #192]	@ (800875c <MX_GPIO_Init+0x114>)
 800869c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869e:	2204      	movs	r2, #4
 80086a0:	4013      	ands	r3, r2
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80086a6:	2380      	movs	r3, #128	@ 0x80
 80086a8:	019b      	lsls	r3, r3, #6
 80086aa:	482d      	ldr	r0, [pc, #180]	@ (8008760 <MX_GPIO_Init+0x118>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	0019      	movs	r1, r3
 80086b0:	f001 fb16 	bl	8009ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_SET);
 80086b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008764 <MX_GPIO_Init+0x11c>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	2140      	movs	r1, #64	@ 0x40
 80086ba:	0018      	movs	r0, r3
 80086bc:	f001 fb10 	bl	8009ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R_SW_Pin R_Q_Pin R_I_Pin */
  GPIO_InitStruct.Pin = R_SW_Pin|R_Q_Pin|R_I_Pin;
 80086c0:	193b      	adds	r3, r7, r4
 80086c2:	2238      	movs	r2, #56	@ 0x38
 80086c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086c6:	193b      	adds	r3, r7, r4
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086cc:	193b      	adds	r3, r7, r4
 80086ce:	2201      	movs	r2, #1
 80086d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d2:	193a      	adds	r2, r7, r4
 80086d4:	23a0      	movs	r3, #160	@ 0xa0
 80086d6:	05db      	lsls	r3, r3, #23
 80086d8:	0011      	movs	r1, r2
 80086da:	0018      	movs	r0, r3
 80086dc:	f001 f994 	bl	8009a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80086e0:	0021      	movs	r1, r4
 80086e2:	187b      	adds	r3, r7, r1
 80086e4:	2280      	movs	r2, #128	@ 0x80
 80086e6:	0192      	lsls	r2, r2, #6
 80086e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086ea:	000c      	movs	r4, r1
 80086ec:	193b      	adds	r3, r7, r4
 80086ee:	2201      	movs	r2, #1
 80086f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f2:	193b      	adds	r3, r7, r4
 80086f4:	2200      	movs	r2, #0
 80086f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f8:	193b      	adds	r3, r7, r4
 80086fa:	2200      	movs	r2, #0
 80086fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086fe:	193b      	adds	r3, r7, r4
 8008700:	4a17      	ldr	r2, [pc, #92]	@ (8008760 <MX_GPIO_Init+0x118>)
 8008702:	0019      	movs	r1, r3
 8008704:	0010      	movs	r0, r2
 8008706:	f001 f97f 	bl	8009a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT_IN_Pin */
  GPIO_InitStruct.Pin = FLT_IN_Pin;
 800870a:	193b      	adds	r3, r7, r4
 800870c:	2280      	movs	r2, #128	@ 0x80
 800870e:	0092      	lsls	r2, r2, #2
 8008710:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008712:	193b      	adds	r3, r7, r4
 8008714:	2200      	movs	r2, #0
 8008716:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008718:	193b      	adds	r3, r7, r4
 800871a:	2200      	movs	r2, #0
 800871c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FLT_IN_GPIO_Port, &GPIO_InitStruct);
 800871e:	193a      	adds	r2, r7, r4
 8008720:	23a0      	movs	r3, #160	@ 0xa0
 8008722:	05db      	lsls	r3, r3, #23
 8008724:	0011      	movs	r1, r2
 8008726:	0018      	movs	r0, r3
 8008728:	f001 f96e 	bl	8009a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB_OUT_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin;
 800872c:	0021      	movs	r1, r4
 800872e:	187b      	adds	r3, r7, r1
 8008730:	2240      	movs	r2, #64	@ 0x40
 8008732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008734:	187b      	adds	r3, r7, r1
 8008736:	2201      	movs	r2, #1
 8008738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873a:	187b      	adds	r3, r7, r1
 800873c:	2200      	movs	r2, #0
 800873e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008740:	187b      	adds	r3, r7, r1
 8008742:	2200      	movs	r2, #0
 8008744:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DB_OUT_GPIO_Port, &GPIO_InitStruct);
 8008746:	187b      	adds	r3, r7, r1
 8008748:	4a06      	ldr	r2, [pc, #24]	@ (8008764 <MX_GPIO_Init+0x11c>)
 800874a:	0019      	movs	r1, r3
 800874c:	0010      	movs	r0, r2
 800874e:	f001 f95b 	bl	8009a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8008752:	46c0      	nop			@ (mov r8, r8)
 8008754:	46bd      	mov	sp, r7
 8008756:	b009      	add	sp, #36	@ 0x24
 8008758:	bd90      	pop	{r4, r7, pc}
 800875a:	46c0      	nop			@ (mov r8, r8)
 800875c:	40021000 	.word	0x40021000
 8008760:	50000400 	.word	0x50000400
 8008764:	50000800 	.word	0x50000800

08008768 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8008770:	f010 f9b2 	bl	8018ad8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008774:	4b25      	ldr	r3, [pc, #148]	@ (800880c <StartDefaultTask+0xa4>)
 8008776:	2100      	movs	r1, #0
 8008778:	0018      	movs	r0, r3
 800877a:	f004 fa5d 	bl	800cc38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800877e:	4b23      	ldr	r3, [pc, #140]	@ (800880c <StartDefaultTask+0xa4>)
 8008780:	2104      	movs	r1, #4
 8008782:	0018      	movs	r0, r3
 8008784:	f004 fa58 	bl	800cc38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8008788:	4b20      	ldr	r3, [pc, #128]	@ (800880c <StartDefaultTask+0xa4>)
 800878a:	2108      	movs	r1, #8
 800878c:	0018      	movs	r0, r3
 800878e:	f004 fa53 	bl	800cc38 <HAL_TIM_PWM_Start>
  TIM2->ARR = 100;
 8008792:	2380      	movs	r3, #128	@ 0x80
 8008794:	05db      	lsls	r3, r3, #23
 8008796:	2264      	movs	r2, #100	@ 0x64
 8008798:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->CCR1 = 0;
 800879a:	2380      	movs	r3, #128	@ 0x80
 800879c:	05db      	lsls	r3, r3, #23
 800879e:	2200      	movs	r2, #0
 80087a0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2 = 0;
 80087a2:	2380      	movs	r3, #128	@ 0x80
 80087a4:	05db      	lsls	r3, r3, #23
 80087a6:	2200      	movs	r2, #0
 80087a8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM2->CCR3 = 0;
 80087aa:	2380      	movs	r3, #128	@ 0x80
 80087ac:	05db      	lsls	r3, r3, #23
 80087ae:	2200      	movs	r2, #0
 80087b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  uint8_t i = 0;
 80087b2:	230f      	movs	r3, #15
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]
  CDC_Transmit_FS(txBuf, txBufLen);
 80087ba:	4b15      	ldr	r3, [pc, #84]	@ (8008810 <StartDefaultTask+0xa8>)
 80087bc:	881a      	ldrh	r2, [r3, #0]
 80087be:	4b15      	ldr	r3, [pc, #84]	@ (8008814 <StartDefaultTask+0xac>)
 80087c0:	0011      	movs	r1, r2
 80087c2:	0018      	movs	r0, r3
 80087c4:	f010 fa0c 	bl	8018be0 <CDC_Transmit_FS>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80087c8:	200a      	movs	r0, #10
 80087ca:	f00c fbb2 	bl	8014f32 <osDelay>

    TIM2->CCR1 = i;
 80087ce:	2380      	movs	r3, #128	@ 0x80
 80087d0:	05db      	lsls	r3, r3, #23
 80087d2:	210f      	movs	r1, #15
 80087d4:	187a      	adds	r2, r7, r1
 80087d6:	7812      	ldrb	r2, [r2, #0]
 80087d8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = i;
 80087da:	2380      	movs	r3, #128	@ 0x80
 80087dc:	05db      	lsls	r3, r3, #23
 80087de:	187a      	adds	r2, r7, r1
 80087e0:	7812      	ldrb	r2, [r2, #0]
 80087e2:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = i;
 80087e4:	2380      	movs	r3, #128	@ 0x80
 80087e6:	05db      	lsls	r3, r3, #23
 80087e8:	187a      	adds	r2, r7, r1
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    i = i > 100 ? 0 : i+1;
 80087ee:	187b      	adds	r3, r7, r1
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2b64      	cmp	r3, #100	@ 0x64
 80087f4:	d804      	bhi.n	8008800 <StartDefaultTask+0x98>
 80087f6:	187b      	adds	r3, r7, r1
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	3301      	adds	r3, #1
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	e000      	b.n	8008802 <StartDefaultTask+0x9a>
 8008800:	2200      	movs	r2, #0
 8008802:	230f      	movs	r3, #15
 8008804:	18fb      	adds	r3, r7, r3
 8008806:	701a      	strb	r2, [r3, #0]
    osDelay(10);
 8008808:	e7de      	b.n	80087c8 <StartDefaultTask+0x60>
 800880a:	46c0      	nop			@ (mov r8, r8)
 800880c:	200002f4 	.word	0x200002f4
 8008810:	20000024 	.word	0x20000024
 8008814:	20000004 	.word	0x20000004

08008818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a04      	ldr	r2, [pc, #16]	@ (8008838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d101      	bne.n	800882e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800882a:	f000 fa71 	bl	8008d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	46bd      	mov	sp, r7
 8008832:	b002      	add	sp, #8
 8008834:	bd80      	pop	{r7, pc}
 8008836:	46c0      	nop			@ (mov r8, r8)
 8008838:	40000400 	.word	0x40000400

0800883c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008840:	b672      	cpsid	i
}
 8008842:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008844:	46c0      	nop			@ (mov r8, r8)
 8008846:	e7fd      	b.n	8008844 <Error_Handler+0x8>

08008848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800884e:	4b15      	ldr	r3, [pc, #84]	@ (80088a4 <HAL_MspInit+0x5c>)
 8008850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008852:	4b14      	ldr	r3, [pc, #80]	@ (80088a4 <HAL_MspInit+0x5c>)
 8008854:	2101      	movs	r1, #1
 8008856:	430a      	orrs	r2, r1
 8008858:	641a      	str	r2, [r3, #64]	@ 0x40
 800885a:	4b12      	ldr	r3, [pc, #72]	@ (80088a4 <HAL_MspInit+0x5c>)
 800885c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885e:	2201      	movs	r2, #1
 8008860:	4013      	ands	r3, r2
 8008862:	607b      	str	r3, [r7, #4]
 8008864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008866:	4b0f      	ldr	r3, [pc, #60]	@ (80088a4 <HAL_MspInit+0x5c>)
 8008868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800886a:	4b0e      	ldr	r3, [pc, #56]	@ (80088a4 <HAL_MspInit+0x5c>)
 800886c:	2180      	movs	r1, #128	@ 0x80
 800886e:	0549      	lsls	r1, r1, #21
 8008870:	430a      	orrs	r2, r1
 8008872:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008874:	4b0b      	ldr	r3, [pc, #44]	@ (80088a4 <HAL_MspInit+0x5c>)
 8008876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008878:	2380      	movs	r3, #128	@ 0x80
 800887a:	055b      	lsls	r3, r3, #21
 800887c:	4013      	ands	r3, r2
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008882:	2302      	movs	r3, #2
 8008884:	425b      	negs	r3, r3
 8008886:	2200      	movs	r2, #0
 8008888:	2103      	movs	r1, #3
 800888a:	0018      	movs	r0, r3
 800888c:	f001 f896 	bl	80099bc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008890:	23c0      	movs	r3, #192	@ 0xc0
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	0018      	movs	r0, r3
 8008896:	f000 fa7b 	bl	8008d90 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800889a:	46c0      	nop			@ (mov r8, r8)
 800889c:	46bd      	mov	sp, r7
 800889e:	b002      	add	sp, #8
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	46c0      	nop			@ (mov r8, r8)
 80088a4:	40021000 	.word	0x40021000

080088a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80088a8:	b590      	push	{r4, r7, lr}
 80088aa:	b08b      	sub	sp, #44	@ 0x2c
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b0:	2414      	movs	r4, #20
 80088b2:	193b      	adds	r3, r7, r4
 80088b4:	0018      	movs	r0, r3
 80088b6:	2314      	movs	r3, #20
 80088b8:	001a      	movs	r2, r3
 80088ba:	2100      	movs	r1, #0
 80088bc:	f010 ff8a 	bl	80197d4 <memset>
  if(hadc->Instance==ADC1)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a18      	ldr	r2, [pc, #96]	@ (8008928 <HAL_ADC_MspInit+0x80>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d129      	bne.n	800891e <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80088ca:	4b18      	ldr	r3, [pc, #96]	@ (800892c <HAL_ADC_MspInit+0x84>)
 80088cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088ce:	4b17      	ldr	r3, [pc, #92]	@ (800892c <HAL_ADC_MspInit+0x84>)
 80088d0:	2180      	movs	r1, #128	@ 0x80
 80088d2:	0349      	lsls	r1, r1, #13
 80088d4:	430a      	orrs	r2, r1
 80088d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80088d8:	4b14      	ldr	r3, [pc, #80]	@ (800892c <HAL_ADC_MspInit+0x84>)
 80088da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088dc:	2380      	movs	r3, #128	@ 0x80
 80088de:	035b      	lsls	r3, r3, #13
 80088e0:	4013      	ands	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088e6:	4b11      	ldr	r3, [pc, #68]	@ (800892c <HAL_ADC_MspInit+0x84>)
 80088e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ea:	4b10      	ldr	r3, [pc, #64]	@ (800892c <HAL_ADC_MspInit+0x84>)
 80088ec:	2102      	movs	r1, #2
 80088ee:	430a      	orrs	r2, r1
 80088f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80088f2:	4b0e      	ldr	r3, [pc, #56]	@ (800892c <HAL_ADC_MspInit+0x84>)
 80088f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f6:	2202      	movs	r2, #2
 80088f8:	4013      	ands	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB10     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VSENSE_Pin;
 80088fe:	193b      	adds	r3, r7, r4
 8008900:	2280      	movs	r2, #128	@ 0x80
 8008902:	00d2      	lsls	r2, r2, #3
 8008904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008906:	193b      	adds	r3, r7, r4
 8008908:	2203      	movs	r2, #3
 800890a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890c:	193b      	adds	r3, r7, r4
 800890e:	2200      	movs	r2, #0
 8008910:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VSENSE_GPIO_Port, &GPIO_InitStruct);
 8008912:	193b      	adds	r3, r7, r4
 8008914:	4a06      	ldr	r2, [pc, #24]	@ (8008930 <HAL_ADC_MspInit+0x88>)
 8008916:	0019      	movs	r1, r3
 8008918:	0010      	movs	r0, r2
 800891a:	f001 f875 	bl	8009a08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800891e:	46c0      	nop			@ (mov r8, r8)
 8008920:	46bd      	mov	sp, r7
 8008922:	b00b      	add	sp, #44	@ 0x2c
 8008924:	bd90      	pop	{r4, r7, pc}
 8008926:	46c0      	nop			@ (mov r8, r8)
 8008928:	40012400 	.word	0x40012400
 800892c:	40021000 	.word	0x40021000
 8008930:	50000400 	.word	0x50000400

08008934 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008934:	b590      	push	{r4, r7, lr}
 8008936:	b09d      	sub	sp, #116	@ 0x74
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800893c:	235c      	movs	r3, #92	@ 0x5c
 800893e:	18fb      	adds	r3, r7, r3
 8008940:	0018      	movs	r0, r3
 8008942:	2314      	movs	r3, #20
 8008944:	001a      	movs	r2, r3
 8008946:	2100      	movs	r1, #0
 8008948:	f010 ff44 	bl	80197d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800894c:	2410      	movs	r4, #16
 800894e:	193b      	adds	r3, r7, r4
 8008950:	0018      	movs	r0, r3
 8008952:	234c      	movs	r3, #76	@ 0x4c
 8008954:	001a      	movs	r2, r3
 8008956:	2100      	movs	r1, #0
 8008958:	f010 ff3c 	bl	80197d4 <memset>
  if(hi2c->Instance==I2C2)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a22      	ldr	r2, [pc, #136]	@ (80089ec <HAL_I2C_MspInit+0xb8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d13e      	bne.n	80089e4 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8008966:	193b      	adds	r3, r7, r4
 8008968:	2240      	movs	r2, #64	@ 0x40
 800896a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800896c:	193b      	adds	r3, r7, r4
 800896e:	2200      	movs	r2, #0
 8008970:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008972:	193b      	adds	r3, r7, r4
 8008974:	0018      	movs	r0, r3
 8008976:	f003 fe09 	bl	800c58c <HAL_RCCEx_PeriphCLKConfig>
 800897a:	1e03      	subs	r3, r0, #0
 800897c:	d001      	beq.n	8008982 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800897e:	f7ff ff5d 	bl	800883c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008982:	4b1b      	ldr	r3, [pc, #108]	@ (80089f0 <HAL_I2C_MspInit+0xbc>)
 8008984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008986:	4b1a      	ldr	r3, [pc, #104]	@ (80089f0 <HAL_I2C_MspInit+0xbc>)
 8008988:	2101      	movs	r1, #1
 800898a:	430a      	orrs	r2, r1
 800898c:	635a      	str	r2, [r3, #52]	@ 0x34
 800898e:	4b18      	ldr	r3, [pc, #96]	@ (80089f0 <HAL_I2C_MspInit+0xbc>)
 8008990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008992:	2201      	movs	r2, #1
 8008994:	4013      	ands	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA6     ------> I2C2_SDA
    PA7     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800899a:	215c      	movs	r1, #92	@ 0x5c
 800899c:	187b      	adds	r3, r7, r1
 800899e:	22c0      	movs	r2, #192	@ 0xc0
 80089a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089a2:	187b      	adds	r3, r7, r1
 80089a4:	2212      	movs	r2, #18
 80089a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a8:	187b      	adds	r3, r7, r1
 80089aa:	2200      	movs	r2, #0
 80089ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089ae:	187b      	adds	r3, r7, r1
 80089b0:	2200      	movs	r2, #0
 80089b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 80089b4:	187b      	adds	r3, r7, r1
 80089b6:	2208      	movs	r2, #8
 80089b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ba:	187a      	adds	r2, r7, r1
 80089bc:	23a0      	movs	r3, #160	@ 0xa0
 80089be:	05db      	lsls	r3, r3, #23
 80089c0:	0011      	movs	r1, r2
 80089c2:	0018      	movs	r0, r3
 80089c4:	f001 f820 	bl	8009a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80089c8:	4b09      	ldr	r3, [pc, #36]	@ (80089f0 <HAL_I2C_MspInit+0xbc>)
 80089ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089cc:	4b08      	ldr	r3, [pc, #32]	@ (80089f0 <HAL_I2C_MspInit+0xbc>)
 80089ce:	2180      	movs	r1, #128	@ 0x80
 80089d0:	03c9      	lsls	r1, r1, #15
 80089d2:	430a      	orrs	r2, r1
 80089d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80089d6:	4b06      	ldr	r3, [pc, #24]	@ (80089f0 <HAL_I2C_MspInit+0xbc>)
 80089d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089da:	2380      	movs	r3, #128	@ 0x80
 80089dc:	03db      	lsls	r3, r3, #15
 80089de:	4013      	ands	r3, r2
 80089e0:	60bb      	str	r3, [r7, #8]
 80089e2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80089e4:	46c0      	nop			@ (mov r8, r8)
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b01d      	add	sp, #116	@ 0x74
 80089ea:	bd90      	pop	{r4, r7, pc}
 80089ec:	40005800 	.word	0x40005800
 80089f0:	40021000 	.word	0x40021000

080089f4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	2380      	movs	r3, #128	@ 0x80
 8008a02:	05db      	lsls	r3, r3, #23
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d10b      	bne.n	8008a20 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008a08:	4b07      	ldr	r3, [pc, #28]	@ (8008a28 <HAL_TIM_PWM_MspInit+0x34>)
 8008a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a0c:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <HAL_TIM_PWM_MspInit+0x34>)
 8008a0e:	2101      	movs	r1, #1
 8008a10:	430a      	orrs	r2, r1
 8008a12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008a14:	4b04      	ldr	r3, [pc, #16]	@ (8008a28 <HAL_TIM_PWM_MspInit+0x34>)
 8008a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a18:	2201      	movs	r2, #1
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]
 8008a1e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8008a20:	46c0      	nop			@ (mov r8, r8)
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b004      	add	sp, #16
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40021000 	.word	0x40021000

08008a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b089      	sub	sp, #36	@ 0x24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a34:	240c      	movs	r4, #12
 8008a36:	193b      	adds	r3, r7, r4
 8008a38:	0018      	movs	r0, r3
 8008a3a:	2314      	movs	r3, #20
 8008a3c:	001a      	movs	r2, r3
 8008a3e:	2100      	movs	r1, #0
 8008a40:	f010 fec8 	bl	80197d4 <memset>
  if(htim->Instance==TIM2)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	2380      	movs	r3, #128	@ 0x80
 8008a4a:	05db      	lsls	r3, r3, #23
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d122      	bne.n	8008a96 <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a50:	4b13      	ldr	r3, [pc, #76]	@ (8008aa0 <HAL_TIM_MspPostInit+0x74>)
 8008a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a54:	4b12      	ldr	r3, [pc, #72]	@ (8008aa0 <HAL_TIM_MspPostInit+0x74>)
 8008a56:	2101      	movs	r1, #1
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a5c:	4b10      	ldr	r3, [pc, #64]	@ (8008aa0 <HAL_TIM_MspPostInit+0x74>)
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a60:	2201      	movs	r2, #1
 8008a62:	4013      	ands	r3, r2
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8008a68:	0021      	movs	r1, r4
 8008a6a:	187b      	adds	r3, r7, r1
 8008a6c:	2207      	movs	r2, #7
 8008a6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a70:	187b      	adds	r3, r7, r1
 8008a72:	2202      	movs	r2, #2
 8008a74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	2200      	movs	r2, #0
 8008a7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a7c:	187b      	adds	r3, r7, r1
 8008a7e:	2200      	movs	r2, #0
 8008a80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8008a82:	187b      	adds	r3, r7, r1
 8008a84:	2202      	movs	r2, #2
 8008a86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a88:	187a      	adds	r2, r7, r1
 8008a8a:	23a0      	movs	r3, #160	@ 0xa0
 8008a8c:	05db      	lsls	r3, r3, #23
 8008a8e:	0011      	movs	r1, r2
 8008a90:	0018      	movs	r0, r3
 8008a92:	f000 ffb9 	bl	8009a08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8008a96:	46c0      	nop			@ (mov r8, r8)
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	b009      	add	sp, #36	@ 0x24
 8008a9c:	bd90      	pop	{r4, r7, pc}
 8008a9e:	46c0      	nop			@ (mov r8, r8)
 8008aa0:	40021000 	.word	0x40021000

08008aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008aa4:	b5b0      	push	{r4, r5, r7, lr}
 8008aa6:	b08c      	sub	sp, #48	@ 0x30
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8008aac:	232b      	movs	r3, #43	@ 0x2b
 8008aae:	18fb      	adds	r3, r7, r3
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8008ab4:	4b37      	ldr	r3, [pc, #220]	@ (8008b94 <HAL_InitTick+0xf0>)
 8008ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ab8:	4b36      	ldr	r3, [pc, #216]	@ (8008b94 <HAL_InitTick+0xf0>)
 8008aba:	2102      	movs	r1, #2
 8008abc:	430a      	orrs	r2, r1
 8008abe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008ac0:	4b34      	ldr	r3, [pc, #208]	@ (8008b94 <HAL_InitTick+0xf0>)
 8008ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	60bb      	str	r3, [r7, #8]
 8008aca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008acc:	230c      	movs	r3, #12
 8008ace:	18fa      	adds	r2, r7, r3
 8008ad0:	2410      	movs	r4, #16
 8008ad2:	193b      	adds	r3, r7, r4
 8008ad4:	0011      	movs	r1, r2
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f003 fd2e 	bl	800c538 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008adc:	193b      	adds	r3, r7, r4
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008ae8:	f003 fd10 	bl	800c50c <HAL_RCC_GetPCLK1Freq>
 8008aec:	0003      	movs	r3, r0
 8008aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008af0:	e004      	b.n	8008afc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008af2:	f003 fd0b 	bl	800c50c <HAL_RCC_GetPCLK1Freq>
 8008af6:	0003      	movs	r3, r0
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afe:	4926      	ldr	r1, [pc, #152]	@ (8008b98 <HAL_InitTick+0xf4>)
 8008b00:	0018      	movs	r0, r3
 8008b02:	f7fd fb63 	bl	80061cc <__udivsi3>
 8008b06:	0003      	movs	r3, r0
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8008b0c:	4b23      	ldr	r3, [pc, #140]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b0e:	4a24      	ldr	r2, [pc, #144]	@ (8008ba0 <HAL_InitTick+0xfc>)
 8008b10:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8008b12:	4b22      	ldr	r3, [pc, #136]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b14:	4a23      	ldr	r2, [pc, #140]	@ (8008ba4 <HAL_InitTick+0x100>)
 8008b16:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8008b18:	4b20      	ldr	r3, [pc, #128]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b1a:	6a3a      	ldr	r2, [r7, #32]
 8008b1c:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 8008b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b24:	4b1d      	ldr	r3, [pc, #116]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8008b30:	252b      	movs	r5, #43	@ 0x2b
 8008b32:	197c      	adds	r4, r7, r5
 8008b34:	4b19      	ldr	r3, [pc, #100]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b36:	0018      	movs	r0, r3
 8008b38:	f003 ff64 	bl	800ca04 <HAL_TIM_Base_Init>
 8008b3c:	0003      	movs	r3, r0
 8008b3e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8008b40:	197b      	adds	r3, r7, r5
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11e      	bne.n	8008b86 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8008b48:	197c      	adds	r4, r7, r5
 8008b4a:	4b14      	ldr	r3, [pc, #80]	@ (8008b9c <HAL_InitTick+0xf8>)
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f003 ffb9 	bl	800cac4 <HAL_TIM_Base_Start_IT>
 8008b52:	0003      	movs	r3, r0
 8008b54:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8008b56:	197b      	adds	r3, r7, r5
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d113      	bne.n	8008b86 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f000 ff41 	bl	80099e6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d809      	bhi.n	8008b7e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, TickPriority, 0U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	0019      	movs	r1, r3
 8008b70:	2010      	movs	r0, #16
 8008b72:	f000 ff23 	bl	80099bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba8 <HAL_InitTick+0x104>)
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	e003      	b.n	8008b86 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8008b7e:	232b      	movs	r3, #43	@ 0x2b
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	2201      	movs	r2, #1
 8008b84:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8008b86:	232b      	movs	r3, #43	@ 0x2b
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	781b      	ldrb	r3, [r3, #0]
}
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b00c      	add	sp, #48	@ 0x30
 8008b92:	bdb0      	pop	{r4, r5, r7, pc}
 8008b94:	40021000 	.word	0x40021000
 8008b98:	000f4240 	.word	0x000f4240
 8008b9c:	2000034c 	.word	0x2000034c
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	000003e7 	.word	0x000003e7
 8008ba8:	2000002c 	.word	0x2000002c

08008bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008bb0:	46c0      	nop			@ (mov r8, r8)
 8008bb2:	e7fd      	b.n	8008bb0 <NMI_Handler+0x4>

08008bb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bb8:	46c0      	nop			@ (mov r8, r8)
 8008bba:	e7fd      	b.n	8008bb8 <HardFault_Handler+0x4>

08008bbc <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8008bc0:	4b04      	ldr	r3, [pc, #16]	@ (8008bd4 <USB_UCPD1_2_IRQHandler+0x18>)
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f001 fb6e 	bl	800a2a4 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8008bc8:	f007 ffe6 	bl	8010b98 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8008bcc:	46c0      	nop			@ (mov r8, r8)
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	20003618 	.word	0x20003618

08008bd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008bdc:	46c0      	nop			@ (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008be6:	46c0      	nop			@ (mov r8, r8)
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008bf0:	4b03      	ldr	r3, [pc, #12]	@ (8008c00 <TIM3_TIM4_IRQHandler+0x14>)
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f004 f910 	bl	800ce18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8008bf8:	46c0      	nop			@ (mov r8, r8)
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	46c0      	nop			@ (mov r8, r8)
 8008c00:	2000034c 	.word	0x2000034c

08008c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c0c:	4a14      	ldr	r2, [pc, #80]	@ (8008c60 <_sbrk+0x5c>)
 8008c0e:	4b15      	ldr	r3, [pc, #84]	@ (8008c64 <_sbrk+0x60>)
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c18:	4b13      	ldr	r3, [pc, #76]	@ (8008c68 <_sbrk+0x64>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d102      	bne.n	8008c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c20:	4b11      	ldr	r3, [pc, #68]	@ (8008c68 <_sbrk+0x64>)
 8008c22:	4a12      	ldr	r2, [pc, #72]	@ (8008c6c <_sbrk+0x68>)
 8008c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c26:	4b10      	ldr	r3, [pc, #64]	@ (8008c68 <_sbrk+0x64>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	18d3      	adds	r3, r2, r3
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d207      	bcs.n	8008c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c34:	f010 fde8 	bl	8019808 <__errno>
 8008c38:	0003      	movs	r3, r0
 8008c3a:	220c      	movs	r2, #12
 8008c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	425b      	negs	r3, r3
 8008c42:	e009      	b.n	8008c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c44:	4b08      	ldr	r3, [pc, #32]	@ (8008c68 <_sbrk+0x64>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c4a:	4b07      	ldr	r3, [pc, #28]	@ (8008c68 <_sbrk+0x64>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	18d2      	adds	r2, r2, r3
 8008c52:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <_sbrk+0x64>)
 8008c54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008c56:	68fb      	ldr	r3, [r7, #12]
}
 8008c58:	0018      	movs	r0, r3
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	b006      	add	sp, #24
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20024000 	.word	0x20024000
 8008c64:	00000400 	.word	0x00000400
 8008c68:	20000398 	.word	0x20000398
 8008c6c:	20003c60 	.word	0x20003c60

08008c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c74:	46c0      	nop			@ (mov r8, r8)
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c7c:	480d      	ldr	r0, [pc, #52]	@ (8008cb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008c80:	f7ff fff6 	bl	8008c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c84:	480c      	ldr	r0, [pc, #48]	@ (8008cb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8008c86:	490d      	ldr	r1, [pc, #52]	@ (8008cbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8008c88:	4a0d      	ldr	r2, [pc, #52]	@ (8008cc0 <LoopForever+0xe>)
  movs r3, #0
 8008c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c8c:	e002      	b.n	8008c94 <LoopCopyDataInit>

08008c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c92:	3304      	adds	r3, #4

08008c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c98:	d3f9      	bcc.n	8008c8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8008cc8 <LoopForever+0x16>)
  movs r3, #0
 8008c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ca0:	e001      	b.n	8008ca6 <LoopFillZerobss>

08008ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ca4:	3204      	adds	r2, #4

08008ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ca8:	d3fb      	bcc.n	8008ca2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008caa:	f010 fdb3 	bl	8019814 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008cae:	f7ff fa41 	bl	8008134 <main>

08008cb2 <LoopForever>:

LoopForever:
  b LoopForever
 8008cb2:	e7fe      	b.n	8008cb2 <LoopForever>
  ldr   r0, =_estack
 8008cb4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008cbc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8008cc0:	08019cd4 	.word	0x08019cd4
  ldr r2, =_sbss
 8008cc4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8008cc8:	20003c60 	.word	0x20003c60

08008ccc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008ccc:	e7fe      	b.n	8008ccc <ADC1_COMP_IRQHandler>
	...

08008cd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008cd6:	1dfb      	adds	r3, r7, #7
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8008d0c <HAL_Init+0x3c>)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8008d0c <HAL_Init+0x3c>)
 8008ce2:	2180      	movs	r1, #128	@ 0x80
 8008ce4:	0049      	lsls	r1, r1, #1
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008cea:	2003      	movs	r0, #3
 8008cec:	f7ff feda 	bl	8008aa4 <HAL_InitTick>
 8008cf0:	1e03      	subs	r3, r0, #0
 8008cf2:	d003      	beq.n	8008cfc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008cf4:	1dfb      	adds	r3, r7, #7
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e001      	b.n	8008d00 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008cfc:	f7ff fda4 	bl	8008848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008d00:	1dfb      	adds	r3, r7, #7
 8008d02:	781b      	ldrb	r3, [r3, #0]
}
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b002      	add	sp, #8
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40022000 	.word	0x40022000

08008d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <HAL_IncTick+0x1c>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	001a      	movs	r2, r3
 8008d1a:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <HAL_IncTick+0x20>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	18d2      	adds	r2, r2, r3
 8008d20:	4b03      	ldr	r3, [pc, #12]	@ (8008d30 <HAL_IncTick+0x20>)
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	46c0      	nop			@ (mov r8, r8)
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	46c0      	nop			@ (mov r8, r8)
 8008d2c:	20000030 	.word	0x20000030
 8008d30:	2000039c 	.word	0x2000039c

08008d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  return uwTick;
 8008d38:	4b02      	ldr	r3, [pc, #8]	@ (8008d44 <HAL_GetTick+0x10>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
}
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	46c0      	nop			@ (mov r8, r8)
 8008d44:	2000039c 	.word	0x2000039c

08008d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008d50:	f7ff fff0 	bl	8008d34 <HAL_GetTick>
 8008d54:	0003      	movs	r3, r0
 8008d56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	d005      	beq.n	8008d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d62:	4b0a      	ldr	r3, [pc, #40]	@ (8008d8c <HAL_Delay+0x44>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	001a      	movs	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	189b      	adds	r3, r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d6e:	46c0      	nop			@ (mov r8, r8)
 8008d70:	f7ff ffe0 	bl	8008d34 <HAL_GetTick>
 8008d74:	0002      	movs	r2, r0
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d8f7      	bhi.n	8008d70 <HAL_Delay+0x28>
  {
  }
}
 8008d80:	46c0      	nop			@ (mov r8, r8)
 8008d82:	46c0      	nop			@ (mov r8, r8)
 8008d84:	46bd      	mov	sp, r7
 8008d86:	b004      	add	sp, #16
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	46c0      	nop			@ (mov r8, r8)
 8008d8c:	20000030 	.word	0x20000030

08008d90 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008d98:	4b06      	ldr	r3, [pc, #24]	@ (8008db4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a06      	ldr	r2, [pc, #24]	@ (8008db8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008d9e:	4013      	ands	r3, r2
 8008da0:	0019      	movs	r1, r3
 8008da2:	4b04      	ldr	r3, [pc, #16]	@ (8008db4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	601a      	str	r2, [r3, #0]
}
 8008daa:	46c0      	nop			@ (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b002      	add	sp, #8
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	40010000 	.word	0x40010000
 8008db8:	fffff9ff 	.word	0xfffff9ff

08008dbc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a05      	ldr	r2, [pc, #20]	@ (8008de0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8008dcc:	401a      	ands	r2, r3
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	601a      	str	r2, [r3, #0]
}
 8008dd6:	46c0      	nop			@ (mov r8, r8)
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	b002      	add	sp, #8
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	46c0      	nop			@ (mov r8, r8)
 8008de0:	fe3fffff 	.word	0xfe3fffff

08008de4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	23e0      	movs	r3, #224	@ 0xe0
 8008df2:	045b      	lsls	r3, r3, #17
 8008df4:	4013      	ands	r3, r2
}
 8008df6:	0018      	movs	r0, r3
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	b002      	add	sp, #8
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	2104      	movs	r1, #4
 8008e12:	400a      	ands	r2, r1
 8008e14:	2107      	movs	r1, #7
 8008e16:	4091      	lsls	r1, r2
 8008e18:	000a      	movs	r2, r1
 8008e1a:	43d2      	mvns	r2, r2
 8008e1c:	401a      	ands	r2, r3
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2104      	movs	r1, #4
 8008e22:	400b      	ands	r3, r1
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4099      	lsls	r1, r3
 8008e28:	000b      	movs	r3, r1
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8008e30:	46c0      	nop			@ (mov r8, r8)
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b004      	add	sp, #16
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	2104      	movs	r1, #4
 8008e4a:	400a      	ands	r2, r1
 8008e4c:	2107      	movs	r1, #7
 8008e4e:	4091      	lsls	r1, r2
 8008e50:	000a      	movs	r2, r1
 8008e52:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2104      	movs	r1, #4
 8008e58:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008e5a:	40da      	lsrs	r2, r3
 8008e5c:	0013      	movs	r3, r2
}
 8008e5e:	0018      	movs	r0, r3
 8008e60:	46bd      	mov	sp, r7
 8008e62:	b002      	add	sp, #8
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	211f      	movs	r1, #31
 8008e7a:	400a      	ands	r2, r1
 8008e7c:	210f      	movs	r1, #15
 8008e7e:	4091      	lsls	r1, r2
 8008e80:	000a      	movs	r2, r1
 8008e82:	43d2      	mvns	r2, r2
 8008e84:	401a      	ands	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	0e9b      	lsrs	r3, r3, #26
 8008e8a:	210f      	movs	r1, #15
 8008e8c:	4019      	ands	r1, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	201f      	movs	r0, #31
 8008e92:	4003      	ands	r3, r0
 8008e94:	4099      	lsls	r1, r3
 8008e96:	000b      	movs	r3, r1
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e9e:	46c0      	nop			@ (mov r8, r8)
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	b004      	add	sp, #16
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	035b      	lsls	r3, r3, #13
 8008eb8:	0b5b      	lsrs	r3, r3, #13
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008ec0:	46c0      	nop			@ (mov r8, r8)
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	b002      	add	sp, #8
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	0352      	lsls	r2, r2, #13
 8008eda:	0b52      	lsrs	r2, r2, #13
 8008edc:	43d2      	mvns	r2, r2
 8008ede:	401a      	ands	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008ee4:	46c0      	nop			@ (mov r8, r8)
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	b002      	add	sp, #8
 8008eea:	bd80      	pop	{r7, pc}

08008eec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	0212      	lsls	r2, r2, #8
 8008f00:	43d2      	mvns	r2, r2
 8008f02:	401a      	ands	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	400b      	ands	r3, r1
 8008f0c:	4904      	ldr	r1, [pc, #16]	@ (8008f20 <LL_ADC_SetChannelSamplingTime+0x34>)
 8008f0e:	400b      	ands	r3, r1
 8008f10:	431a      	orrs	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	b004      	add	sp, #16
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	46c0      	nop			@ (mov r8, r8)
 8008f20:	07ffff00 	.word	0x07ffff00

08008f24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	4a05      	ldr	r2, [pc, #20]	@ (8008f48 <LL_ADC_EnableInternalRegulator+0x24>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	2280      	movs	r2, #128	@ 0x80
 8008f36:	0552      	lsls	r2, r2, #21
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f3e:	46c0      	nop			@ (mov r8, r8)
 8008f40:	46bd      	mov	sp, r7
 8008f42:	b002      	add	sp, #8
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	46c0      	nop			@ (mov r8, r8)
 8008f48:	6fffffe8 	.word	0x6fffffe8

08008f4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	2380      	movs	r3, #128	@ 0x80
 8008f5a:	055b      	lsls	r3, r3, #21
 8008f5c:	401a      	ands	r2, r3
 8008f5e:	2380      	movs	r3, #128	@ 0x80
 8008f60:	055b      	lsls	r3, r3, #21
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d101      	bne.n	8008f6a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	b002      	add	sp, #8
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	4a04      	ldr	r2, [pc, #16]	@ (8008f94 <LL_ADC_Enable+0x20>)
 8008f82:	4013      	ands	r3, r2
 8008f84:	2201      	movs	r2, #1
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008f8c:	46c0      	nop			@ (mov r8, r8)
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	b002      	add	sp, #8
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	7fffffe8 	.word	0x7fffffe8

08008f98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <LL_ADC_IsEnabled+0x18>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <LL_ADC_IsEnabled+0x1a>
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b002      	add	sp, #8
 8008fb8:	bd80      	pop	{r7, pc}
	...

08008fbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	4a04      	ldr	r2, [pc, #16]	@ (8008fdc <LL_ADC_REG_StartConversion+0x20>)
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2204      	movs	r2, #4
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008fd4:	46c0      	nop			@ (mov r8, r8)
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b002      	add	sp, #8
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	7fffffe8 	.word	0x7fffffe8

08008fe0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2204      	movs	r2, #4
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d101      	bne.n	8008ff8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e000      	b.n	8008ffa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	b002      	add	sp, #8
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800900c:	231f      	movs	r3, #31
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8009014:	2300      	movs	r3, #0
 8009016:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e17f      	b.n	800932a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	0018      	movs	r0, r3
 8009036:	f7ff fc37 	bl	80088a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2254      	movs	r2, #84	@ 0x54
 8009044:	2100      	movs	r1, #0
 8009046:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	0018      	movs	r0, r3
 800904e:	f7ff ff7d 	bl	8008f4c <LL_ADC_IsInternalRegulatorEnabled>
 8009052:	1e03      	subs	r3, r0, #0
 8009054:	d115      	bne.n	8009082 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	0018      	movs	r0, r3
 800905c:	f7ff ff62 	bl	8008f24 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009060:	4bb4      	ldr	r3, [pc, #720]	@ (8009334 <HAL_ADC_Init+0x330>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	49b4      	ldr	r1, [pc, #720]	@ (8009338 <HAL_ADC_Init+0x334>)
 8009066:	0018      	movs	r0, r3
 8009068:	f7fd f8b0 	bl	80061cc <__udivsi3>
 800906c:	0003      	movs	r3, r0
 800906e:	3301      	adds	r3, #1
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009074:	e002      	b.n	800907c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b01      	subs	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1f9      	bne.n	8009076 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	0018      	movs	r0, r3
 8009088:	f7ff ff60 	bl	8008f4c <LL_ADC_IsInternalRegulatorEnabled>
 800908c:	1e03      	subs	r3, r0, #0
 800908e:	d10f      	bne.n	80090b0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009094:	2210      	movs	r2, #16
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090a0:	2201      	movs	r2, #1
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80090a8:	231f      	movs	r3, #31
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	2201      	movs	r2, #1
 80090ae:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	0018      	movs	r0, r3
 80090b6:	f7ff ff93 	bl	8008fe0 <LL_ADC_REG_IsConversionOngoing>
 80090ba:	0003      	movs	r3, r0
 80090bc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c2:	2210      	movs	r2, #16
 80090c4:	4013      	ands	r3, r2
 80090c6:	d000      	beq.n	80090ca <HAL_ADC_Init+0xc6>
 80090c8:	e122      	b.n	8009310 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d000      	beq.n	80090d2 <HAL_ADC_Init+0xce>
 80090d0:	e11e      	b.n	8009310 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d6:	4a99      	ldr	r2, [pc, #612]	@ (800933c <HAL_ADC_Init+0x338>)
 80090d8:	4013      	ands	r3, r2
 80090da:	2202      	movs	r2, #2
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	0018      	movs	r0, r3
 80090e8:	f7ff ff56 	bl	8008f98 <LL_ADC_IsEnabled>
 80090ec:	1e03      	subs	r3, r0, #0
 80090ee:	d000      	beq.n	80090f2 <HAL_ADC_Init+0xee>
 80090f0:	e0ad      	b.n	800924e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7e1b      	ldrb	r3, [r3, #24]
 80090fa:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80090fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	7e5b      	ldrb	r3, [r3, #25]
 8009102:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009104:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7e9b      	ldrb	r3, [r3, #26]
 800910a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800910c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_ADC_Init+0x118>
 8009116:	2380      	movs	r3, #128	@ 0x80
 8009118:	015b      	lsls	r3, r3, #5
 800911a:	e000      	b.n	800911e <HAL_ADC_Init+0x11a>
 800911c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800911e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8009124:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	da04      	bge.n	8009138 <HAL_ADC_Init+0x134>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	085b      	lsrs	r3, r3, #1
 8009136:	e001      	b.n	800913c <HAL_ADC_Init+0x138>
 8009138:	2380      	movs	r3, #128	@ 0x80
 800913a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800913c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	212c      	movs	r1, #44	@ 0x2c
 8009142:	5c5b      	ldrb	r3, [r3, r1]
 8009144:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8009146:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	4313      	orrs	r3, r2
 800914c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2220      	movs	r2, #32
 8009152:	5c9b      	ldrb	r3, [r3, r2]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d115      	bne.n	8009184 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7e9b      	ldrb	r3, [r3, #26]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d105      	bne.n	800916c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2280      	movs	r2, #128	@ 0x80
 8009164:	0252      	lsls	r2, r2, #9
 8009166:	4313      	orrs	r3, r2
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	e00b      	b.n	8009184 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009170:	2220      	movs	r2, #32
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800917c:	2201      	movs	r2, #1
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009190:	23e0      	movs	r3, #224	@ 0xe0
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800919a:	4313      	orrs	r3, r2
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	4313      	orrs	r3, r2
 80091a0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	4a65      	ldr	r2, [pc, #404]	@ (8009340 <HAL_ADC_Init+0x33c>)
 80091aa:	4013      	ands	r3, r2
 80091ac:	0019      	movs	r1, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	0f9b      	lsrs	r3, r3, #30
 80091be:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80091c4:	4313      	orrs	r3, r2
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	223c      	movs	r2, #60	@ 0x3c
 80091d0:	5c9b      	ldrb	r3, [r3, r2]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d111      	bne.n	80091fa <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	0f9b      	lsrs	r3, r3, #30
 80091dc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80091e2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80091e8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80091ee:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	2201      	movs	r2, #1
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	4a50      	ldr	r2, [pc, #320]	@ (8009344 <HAL_ADC_Init+0x340>)
 8009202:	4013      	ands	r3, r2
 8009204:	0019      	movs	r1, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	430a      	orrs	r2, r1
 800920e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	23c0      	movs	r3, #192	@ 0xc0
 8009216:	061b      	lsls	r3, r3, #24
 8009218:	429a      	cmp	r2, r3
 800921a:	d018      	beq.n	800924e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009220:	2380      	movs	r3, #128	@ 0x80
 8009222:	05db      	lsls	r3, r3, #23
 8009224:	429a      	cmp	r2, r3
 8009226:	d012      	beq.n	800924e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800922c:	2380      	movs	r3, #128	@ 0x80
 800922e:	061b      	lsls	r3, r3, #24
 8009230:	429a      	cmp	r2, r3
 8009232:	d00c      	beq.n	800924e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8009234:	4b44      	ldr	r3, [pc, #272]	@ (8009348 <HAL_ADC_Init+0x344>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a44      	ldr	r2, [pc, #272]	@ (800934c <HAL_ADC_Init+0x348>)
 800923a:	4013      	ands	r3, r2
 800923c:	0019      	movs	r1, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	23f0      	movs	r3, #240	@ 0xf0
 8009244:	039b      	lsls	r3, r3, #14
 8009246:	401a      	ands	r2, r3
 8009248:	4b3f      	ldr	r3, [pc, #252]	@ (8009348 <HAL_ADC_Init+0x344>)
 800924a:	430a      	orrs	r2, r1
 800924c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009256:	001a      	movs	r2, r3
 8009258:	2100      	movs	r1, #0
 800925a:	f7ff fdd0 	bl	8008dfe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009266:	493a      	ldr	r1, [pc, #232]	@ (8009350 <HAL_ADC_Init+0x34c>)
 8009268:	001a      	movs	r2, r3
 800926a:	f7ff fdc8 	bl	8008dfe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d109      	bne.n	800928a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2110      	movs	r1, #16
 8009282:	4249      	negs	r1, r1
 8009284:	430a      	orrs	r2, r1
 8009286:	629a      	str	r2, [r3, #40]	@ 0x28
 8009288:	e018      	b.n	80092bc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691a      	ldr	r2, [r3, #16]
 800928e:	2380      	movs	r3, #128	@ 0x80
 8009290:	039b      	lsls	r3, r3, #14
 8009292:	429a      	cmp	r2, r3
 8009294:	d112      	bne.n	80092bc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	221c      	movs	r2, #28
 80092a6:	4013      	ands	r3, r2
 80092a8:	2210      	movs	r2, #16
 80092aa:	4252      	negs	r2, r2
 80092ac:	409a      	lsls	r2, r3
 80092ae:	0011      	movs	r1, r2
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2100      	movs	r1, #0
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7ff fdb8 	bl	8008e38 <LL_ADC_GetSamplingTimeCommonChannels>
 80092c8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d10b      	bne.n	80092ea <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092dc:	2203      	movs	r2, #3
 80092de:	4393      	bics	r3, r2
 80092e0:	2201      	movs	r2, #1
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80092e8:	e01c      	b.n	8009324 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ee:	2212      	movs	r2, #18
 80092f0:	4393      	bics	r3, r2
 80092f2:	2210      	movs	r2, #16
 80092f4:	431a      	orrs	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092fe:	2201      	movs	r2, #1
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8009306:	231f      	movs	r3, #31
 8009308:	18fb      	adds	r3, r7, r3
 800930a:	2201      	movs	r2, #1
 800930c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800930e:	e009      	b.n	8009324 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009314:	2210      	movs	r2, #16
 8009316:	431a      	orrs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800931c:	231f      	movs	r3, #31
 800931e:	18fb      	adds	r3, r7, r3
 8009320:	2201      	movs	r2, #1
 8009322:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009324:	231f      	movs	r3, #31
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	781b      	ldrb	r3, [r3, #0]
}
 800932a:	0018      	movs	r0, r3
 800932c:	46bd      	mov	sp, r7
 800932e:	b008      	add	sp, #32
 8009330:	bd80      	pop	{r7, pc}
 8009332:	46c0      	nop			@ (mov r8, r8)
 8009334:	20000028 	.word	0x20000028
 8009338:	00030d40 	.word	0x00030d40
 800933c:	fffffefd 	.word	0xfffffefd
 8009340:	ffde0201 	.word	0xffde0201
 8009344:	1ffffc02 	.word	0x1ffffc02
 8009348:	40012708 	.word	0x40012708
 800934c:	ffc3ffff 	.word	0xffc3ffff
 8009350:	07ffff04 	.word	0x07ffff04

08009354 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8009354:	b5b0      	push	{r4, r5, r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	0018      	movs	r0, r3
 8009362:	f7ff fe3d 	bl	8008fe0 <LL_ADC_REG_IsConversionOngoing>
 8009366:	1e03      	subs	r3, r0, #0
 8009368:	d135      	bne.n	80093d6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2254      	movs	r2, #84	@ 0x54
 800936e:	5c9b      	ldrb	r3, [r3, r2]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_ADC_Start+0x24>
 8009374:	2302      	movs	r3, #2
 8009376:	e035      	b.n	80093e4 <HAL_ADC_Start+0x90>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2254      	movs	r2, #84	@ 0x54
 800937c:	2101      	movs	r1, #1
 800937e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009380:	250f      	movs	r5, #15
 8009382:	197c      	adds	r4, r7, r5
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	0018      	movs	r0, r3
 8009388:	f000 fa0a 	bl	80097a0 <ADC_Enable>
 800938c:	0003      	movs	r3, r0
 800938e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009390:	197b      	adds	r3, r7, r5
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d119      	bne.n	80093cc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800939c:	4a13      	ldr	r2, [pc, #76]	@ (80093ec <HAL_ADC_Start+0x98>)
 800939e:	4013      	ands	r3, r2
 80093a0:	2280      	movs	r2, #128	@ 0x80
 80093a2:	0052      	lsls	r2, r2, #1
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	221c      	movs	r2, #28
 80093b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2254      	movs	r2, #84	@ 0x54
 80093bc:	2100      	movs	r1, #0
 80093be:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	0018      	movs	r0, r3
 80093c6:	f7ff fdf9 	bl	8008fbc <LL_ADC_REG_StartConversion>
 80093ca:	e008      	b.n	80093de <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2254      	movs	r2, #84	@ 0x54
 80093d0:	2100      	movs	r1, #0
 80093d2:	5499      	strb	r1, [r3, r2]
 80093d4:	e003      	b.n	80093de <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80093d6:	230f      	movs	r3, #15
 80093d8:	18fb      	adds	r3, r7, r3
 80093da:	2202      	movs	r2, #2
 80093dc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80093de:	230f      	movs	r3, #15
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	781b      	ldrb	r3, [r3, #0]
}
 80093e4:	0018      	movs	r0, r3
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b004      	add	sp, #16
 80093ea:	bdb0      	pop	{r4, r5, r7, pc}
 80093ec:	fffff0fe 	.word	0xfffff0fe

080093f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093fa:	2317      	movs	r3, #23
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	2200      	movs	r2, #0
 8009400:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2254      	movs	r2, #84	@ 0x54
 800940a:	5c9b      	ldrb	r3, [r3, r2]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_ADC_ConfigChannel+0x24>
 8009410:	2302      	movs	r3, #2
 8009412:	e1c0      	b.n	8009796 <HAL_ADC_ConfigChannel+0x3a6>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2254      	movs	r2, #84	@ 0x54
 8009418:	2101      	movs	r1, #1
 800941a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	0018      	movs	r0, r3
 8009422:	f7ff fddd 	bl	8008fe0 <LL_ADC_REG_IsConversionOngoing>
 8009426:	1e03      	subs	r3, r0, #0
 8009428:	d000      	beq.n	800942c <HAL_ADC_ConfigChannel+0x3c>
 800942a:	e1a3      	b.n	8009774 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d100      	bne.n	8009436 <HAL_ADC_ConfigChannel+0x46>
 8009434:	e143      	b.n	80096be <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	2380      	movs	r3, #128	@ 0x80
 800943c:	061b      	lsls	r3, r3, #24
 800943e:	429a      	cmp	r2, r3
 8009440:	d004      	beq.n	800944c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009446:	4ac1      	ldr	r2, [pc, #772]	@ (800974c <HAL_ADC_ConfigChannel+0x35c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d108      	bne.n	800945e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	0019      	movs	r1, r3
 8009456:	0010      	movs	r0, r2
 8009458:	f7ff fd25 	bl	8008ea6 <LL_ADC_REG_SetSequencerChAdd>
 800945c:	e0c9      	b.n	80095f2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	211f      	movs	r1, #31
 8009468:	400b      	ands	r3, r1
 800946a:	210f      	movs	r1, #15
 800946c:	4099      	lsls	r1, r3
 800946e:	000b      	movs	r3, r1
 8009470:	43db      	mvns	r3, r3
 8009472:	4013      	ands	r3, r2
 8009474:	0019      	movs	r1, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	035b      	lsls	r3, r3, #13
 800947c:	0b5b      	lsrs	r3, r3, #13
 800947e:	d105      	bne.n	800948c <HAL_ADC_ConfigChannel+0x9c>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	0e9b      	lsrs	r3, r3, #26
 8009486:	221f      	movs	r2, #31
 8009488:	4013      	ands	r3, r2
 800948a:	e098      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2201      	movs	r2, #1
 8009492:	4013      	ands	r3, r2
 8009494:	d000      	beq.n	8009498 <HAL_ADC_ConfigChannel+0xa8>
 8009496:	e091      	b.n	80095bc <HAL_ADC_ConfigChannel+0x1cc>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2202      	movs	r2, #2
 800949e:	4013      	ands	r3, r2
 80094a0:	d000      	beq.n	80094a4 <HAL_ADC_ConfigChannel+0xb4>
 80094a2:	e089      	b.n	80095b8 <HAL_ADC_ConfigChannel+0x1c8>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2204      	movs	r2, #4
 80094aa:	4013      	ands	r3, r2
 80094ac:	d000      	beq.n	80094b0 <HAL_ADC_ConfigChannel+0xc0>
 80094ae:	e081      	b.n	80095b4 <HAL_ADC_ConfigChannel+0x1c4>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2208      	movs	r2, #8
 80094b6:	4013      	ands	r3, r2
 80094b8:	d000      	beq.n	80094bc <HAL_ADC_ConfigChannel+0xcc>
 80094ba:	e079      	b.n	80095b0 <HAL_ADC_ConfigChannel+0x1c0>
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2210      	movs	r2, #16
 80094c2:	4013      	ands	r3, r2
 80094c4:	d000      	beq.n	80094c8 <HAL_ADC_ConfigChannel+0xd8>
 80094c6:	e071      	b.n	80095ac <HAL_ADC_ConfigChannel+0x1bc>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2220      	movs	r2, #32
 80094ce:	4013      	ands	r3, r2
 80094d0:	d000      	beq.n	80094d4 <HAL_ADC_ConfigChannel+0xe4>
 80094d2:	e069      	b.n	80095a8 <HAL_ADC_ConfigChannel+0x1b8>
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2240      	movs	r2, #64	@ 0x40
 80094da:	4013      	ands	r3, r2
 80094dc:	d000      	beq.n	80094e0 <HAL_ADC_ConfigChannel+0xf0>
 80094de:	e061      	b.n	80095a4 <HAL_ADC_ConfigChannel+0x1b4>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2280      	movs	r2, #128	@ 0x80
 80094e6:	4013      	ands	r3, r2
 80094e8:	d000      	beq.n	80094ec <HAL_ADC_ConfigChannel+0xfc>
 80094ea:	e059      	b.n	80095a0 <HAL_ADC_ConfigChannel+0x1b0>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	2380      	movs	r3, #128	@ 0x80
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	4013      	ands	r3, r2
 80094f6:	d151      	bne.n	800959c <HAL_ADC_ConfigChannel+0x1ac>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	2380      	movs	r3, #128	@ 0x80
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4013      	ands	r3, r2
 8009502:	d149      	bne.n	8009598 <HAL_ADC_ConfigChannel+0x1a8>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	2380      	movs	r3, #128	@ 0x80
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4013      	ands	r3, r2
 800950e:	d141      	bne.n	8009594 <HAL_ADC_ConfigChannel+0x1a4>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	2380      	movs	r3, #128	@ 0x80
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	4013      	ands	r3, r2
 800951a:	d139      	bne.n	8009590 <HAL_ADC_ConfigChannel+0x1a0>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	2380      	movs	r3, #128	@ 0x80
 8009522:	015b      	lsls	r3, r3, #5
 8009524:	4013      	ands	r3, r2
 8009526:	d131      	bne.n	800958c <HAL_ADC_ConfigChannel+0x19c>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	2380      	movs	r3, #128	@ 0x80
 800952e:	019b      	lsls	r3, r3, #6
 8009530:	4013      	ands	r3, r2
 8009532:	d129      	bne.n	8009588 <HAL_ADC_ConfigChannel+0x198>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	2380      	movs	r3, #128	@ 0x80
 800953a:	01db      	lsls	r3, r3, #7
 800953c:	4013      	ands	r3, r2
 800953e:	d121      	bne.n	8009584 <HAL_ADC_ConfigChannel+0x194>
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	2380      	movs	r3, #128	@ 0x80
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	4013      	ands	r3, r2
 800954a:	d119      	bne.n	8009580 <HAL_ADC_ConfigChannel+0x190>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	2380      	movs	r3, #128	@ 0x80
 8009552:	025b      	lsls	r3, r3, #9
 8009554:	4013      	ands	r3, r2
 8009556:	d111      	bne.n	800957c <HAL_ADC_ConfigChannel+0x18c>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	2380      	movs	r3, #128	@ 0x80
 800955e:	029b      	lsls	r3, r3, #10
 8009560:	4013      	ands	r3, r2
 8009562:	d109      	bne.n	8009578 <HAL_ADC_ConfigChannel+0x188>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	2380      	movs	r3, #128	@ 0x80
 800956a:	02db      	lsls	r3, r3, #11
 800956c:	4013      	ands	r3, r2
 800956e:	d001      	beq.n	8009574 <HAL_ADC_ConfigChannel+0x184>
 8009570:	2312      	movs	r3, #18
 8009572:	e024      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009574:	2300      	movs	r3, #0
 8009576:	e022      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009578:	2311      	movs	r3, #17
 800957a:	e020      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 800957c:	2310      	movs	r3, #16
 800957e:	e01e      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009580:	230f      	movs	r3, #15
 8009582:	e01c      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009584:	230e      	movs	r3, #14
 8009586:	e01a      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009588:	230d      	movs	r3, #13
 800958a:	e018      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 800958c:	230c      	movs	r3, #12
 800958e:	e016      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009590:	230b      	movs	r3, #11
 8009592:	e014      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009594:	230a      	movs	r3, #10
 8009596:	e012      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 8009598:	2309      	movs	r3, #9
 800959a:	e010      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 800959c:	2308      	movs	r3, #8
 800959e:	e00e      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095a0:	2307      	movs	r3, #7
 80095a2:	e00c      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095a4:	2306      	movs	r3, #6
 80095a6:	e00a      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095a8:	2305      	movs	r3, #5
 80095aa:	e008      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095ac:	2304      	movs	r3, #4
 80095ae:	e006      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095b0:	2303      	movs	r3, #3
 80095b2:	e004      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095b4:	2302      	movs	r3, #2
 80095b6:	e002      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <HAL_ADC_ConfigChannel+0x1ce>
 80095bc:	2300      	movs	r3, #0
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	6852      	ldr	r2, [r2, #4]
 80095c2:	201f      	movs	r0, #31
 80095c4:	4002      	ands	r2, r0
 80095c6:	4093      	lsls	r3, r2
 80095c8:	000a      	movs	r2, r1
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	089b      	lsrs	r3, r3, #2
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d808      	bhi.n	80095f2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	6859      	ldr	r1, [r3, #4]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	001a      	movs	r2, r3
 80095ee:	f7ff fc3a 	bl	8008e66 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6819      	ldr	r1, [r3, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	001a      	movs	r2, r3
 8009600:	f7ff fc74 	bl	8008eec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	db00      	blt.n	800960e <HAL_ADC_ConfigChannel+0x21e>
 800960c:	e0bc      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800960e:	4b50      	ldr	r3, [pc, #320]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 8009610:	0018      	movs	r0, r3
 8009612:	f7ff fbe7 	bl	8008de4 <LL_ADC_GetCommonPathInternalCh>
 8009616:	0003      	movs	r3, r0
 8009618:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a4d      	ldr	r2, [pc, #308]	@ (8009754 <HAL_ADC_ConfigChannel+0x364>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d122      	bne.n	800966a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	2380      	movs	r3, #128	@ 0x80
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800962c:	d11d      	bne.n	800966a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2280      	movs	r2, #128	@ 0x80
 8009632:	0412      	lsls	r2, r2, #16
 8009634:	4313      	orrs	r3, r2
 8009636:	4a46      	ldr	r2, [pc, #280]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 8009638:	0019      	movs	r1, r3
 800963a:	0010      	movs	r0, r2
 800963c:	f7ff fbbe 	bl	8008dbc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009640:	4b45      	ldr	r3, [pc, #276]	@ (8009758 <HAL_ADC_ConfigChannel+0x368>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4945      	ldr	r1, [pc, #276]	@ (800975c <HAL_ADC_ConfigChannel+0x36c>)
 8009646:	0018      	movs	r0, r3
 8009648:	f7fc fdc0 	bl	80061cc <__udivsi3>
 800964c:	0003      	movs	r3, r0
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	0013      	movs	r3, r2
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	189b      	adds	r3, r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800965a:	e002      	b.n	8009662 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3b01      	subs	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1f9      	bne.n	800965c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8009668:	e08e      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a3c      	ldr	r2, [pc, #240]	@ (8009760 <HAL_ADC_ConfigChannel+0x370>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d10e      	bne.n	8009692 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	2380      	movs	r3, #128	@ 0x80
 8009678:	045b      	lsls	r3, r3, #17
 800967a:	4013      	ands	r3, r2
 800967c:	d109      	bne.n	8009692 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	2280      	movs	r2, #128	@ 0x80
 8009682:	0452      	lsls	r2, r2, #17
 8009684:	4313      	orrs	r3, r2
 8009686:	4a32      	ldr	r2, [pc, #200]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 8009688:	0019      	movs	r1, r3
 800968a:	0010      	movs	r0, r2
 800968c:	f7ff fb96 	bl	8008dbc <LL_ADC_SetCommonPathInternalCh>
 8009690:	e07a      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a33      	ldr	r2, [pc, #204]	@ (8009764 <HAL_ADC_ConfigChannel+0x374>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d000      	beq.n	800969e <HAL_ADC_ConfigChannel+0x2ae>
 800969c:	e074      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	2380      	movs	r3, #128	@ 0x80
 80096a2:	03db      	lsls	r3, r3, #15
 80096a4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80096a6:	d000      	beq.n	80096aa <HAL_ADC_ConfigChannel+0x2ba>
 80096a8:	e06e      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	2280      	movs	r2, #128	@ 0x80
 80096ae:	03d2      	lsls	r2, r2, #15
 80096b0:	4313      	orrs	r3, r2
 80096b2:	4a27      	ldr	r2, [pc, #156]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 80096b4:	0019      	movs	r1, r3
 80096b6:	0010      	movs	r0, r2
 80096b8:	f7ff fb80 	bl	8008dbc <LL_ADC_SetCommonPathInternalCh>
 80096bc:	e064      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	691a      	ldr	r2, [r3, #16]
 80096c2:	2380      	movs	r3, #128	@ 0x80
 80096c4:	061b      	lsls	r3, r3, #24
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d004      	beq.n	80096d4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80096ce:	4a1f      	ldr	r2, [pc, #124]	@ (800974c <HAL_ADC_ConfigChannel+0x35c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d107      	bne.n	80096e4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	0019      	movs	r1, r3
 80096de:	0010      	movs	r0, r2
 80096e0:	f7ff fbf2 	bl	8008ec8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	da4d      	bge.n	8009788 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80096ec:	4b18      	ldr	r3, [pc, #96]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 80096ee:	0018      	movs	r0, r3
 80096f0:	f7ff fb78 	bl	8008de4 <LL_ADC_GetCommonPathInternalCh>
 80096f4:	0003      	movs	r3, r0
 80096f6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a15      	ldr	r2, [pc, #84]	@ (8009754 <HAL_ADC_ConfigChannel+0x364>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d108      	bne.n	8009714 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	4a18      	ldr	r2, [pc, #96]	@ (8009768 <HAL_ADC_ConfigChannel+0x378>)
 8009706:	4013      	ands	r3, r2
 8009708:	4a11      	ldr	r2, [pc, #68]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 800970a:	0019      	movs	r1, r3
 800970c:	0010      	movs	r0, r2
 800970e:	f7ff fb55 	bl	8008dbc <LL_ADC_SetCommonPathInternalCh>
 8009712:	e039      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a11      	ldr	r2, [pc, #68]	@ (8009760 <HAL_ADC_ConfigChannel+0x370>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d108      	bne.n	8009730 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	4a12      	ldr	r2, [pc, #72]	@ (800976c <HAL_ADC_ConfigChannel+0x37c>)
 8009722:	4013      	ands	r3, r2
 8009724:	4a0a      	ldr	r2, [pc, #40]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 8009726:	0019      	movs	r1, r3
 8009728:	0010      	movs	r0, r2
 800972a:	f7ff fb47 	bl	8008dbc <LL_ADC_SetCommonPathInternalCh>
 800972e:	e02b      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a0b      	ldr	r2, [pc, #44]	@ (8009764 <HAL_ADC_ConfigChannel+0x374>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d126      	bne.n	8009788 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	4a0c      	ldr	r2, [pc, #48]	@ (8009770 <HAL_ADC_ConfigChannel+0x380>)
 800973e:	4013      	ands	r3, r2
 8009740:	4a03      	ldr	r2, [pc, #12]	@ (8009750 <HAL_ADC_ConfigChannel+0x360>)
 8009742:	0019      	movs	r1, r3
 8009744:	0010      	movs	r0, r2
 8009746:	f7ff fb39 	bl	8008dbc <LL_ADC_SetCommonPathInternalCh>
 800974a:	e01d      	b.n	8009788 <HAL_ADC_ConfigChannel+0x398>
 800974c:	80000004 	.word	0x80000004
 8009750:	40012708 	.word	0x40012708
 8009754:	b0001000 	.word	0xb0001000
 8009758:	20000028 	.word	0x20000028
 800975c:	00030d40 	.word	0x00030d40
 8009760:	b8004000 	.word	0xb8004000
 8009764:	b4002000 	.word	0xb4002000
 8009768:	ff7fffff 	.word	0xff7fffff
 800976c:	feffffff 	.word	0xfeffffff
 8009770:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009778:	2220      	movs	r2, #32
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009780:	2317      	movs	r3, #23
 8009782:	18fb      	adds	r3, r7, r3
 8009784:	2201      	movs	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2254      	movs	r2, #84	@ 0x54
 800978c:	2100      	movs	r1, #0
 800978e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8009790:	2317      	movs	r3, #23
 8009792:	18fb      	adds	r3, r7, r3
 8009794:	781b      	ldrb	r3, [r3, #0]
}
 8009796:	0018      	movs	r0, r3
 8009798:	46bd      	mov	sp, r7
 800979a:	b006      	add	sp, #24
 800979c:	bd80      	pop	{r7, pc}
 800979e:	46c0      	nop			@ (mov r8, r8)

080097a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	0018      	movs	r0, r3
 80097b2:	f7ff fbf1 	bl	8008f98 <LL_ADC_IsEnabled>
 80097b6:	1e03      	subs	r3, r0, #0
 80097b8:	d000      	beq.n	80097bc <ADC_Enable+0x1c>
 80097ba:	e069      	b.n	8009890 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	4a36      	ldr	r2, [pc, #216]	@ (800989c <ADC_Enable+0xfc>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	d00d      	beq.n	80097e4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097cc:	2210      	movs	r2, #16
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097d8:	2201      	movs	r2, #1
 80097da:	431a      	orrs	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e056      	b.n	8009892 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	0018      	movs	r0, r3
 80097ea:	f7ff fbc3 	bl	8008f74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80097ee:	4b2c      	ldr	r3, [pc, #176]	@ (80098a0 <ADC_Enable+0x100>)
 80097f0:	0018      	movs	r0, r3
 80097f2:	f7ff faf7 	bl	8008de4 <LL_ADC_GetCommonPathInternalCh>
 80097f6:	0002      	movs	r2, r0
 80097f8:	2380      	movs	r3, #128	@ 0x80
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	4013      	ands	r3, r2
 80097fe:	d00f      	beq.n	8009820 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009800:	4b28      	ldr	r3, [pc, #160]	@ (80098a4 <ADC_Enable+0x104>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4928      	ldr	r1, [pc, #160]	@ (80098a8 <ADC_Enable+0x108>)
 8009806:	0018      	movs	r0, r3
 8009808:	f7fc fce0 	bl	80061cc <__udivsi3>
 800980c:	0003      	movs	r3, r0
 800980e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8009810:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009812:	e002      	b.n	800981a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	3b01      	subs	r3, #1
 8009818:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1f9      	bne.n	8009814 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7e5b      	ldrb	r3, [r3, #25]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d033      	beq.n	8009890 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009828:	f7ff fa84 	bl	8008d34 <HAL_GetTick>
 800982c:	0003      	movs	r3, r0
 800982e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009830:	e027      	b.n	8009882 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	0018      	movs	r0, r3
 8009838:	f7ff fbae 	bl	8008f98 <LL_ADC_IsEnabled>
 800983c:	1e03      	subs	r3, r0, #0
 800983e:	d104      	bne.n	800984a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	0018      	movs	r0, r3
 8009846:	f7ff fb95 	bl	8008f74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800984a:	f7ff fa73 	bl	8008d34 <HAL_GetTick>
 800984e:	0002      	movs	r2, r0
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	2b02      	cmp	r3, #2
 8009856:	d914      	bls.n	8009882 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2201      	movs	r2, #1
 8009860:	4013      	ands	r3, r2
 8009862:	2b01      	cmp	r3, #1
 8009864:	d00d      	beq.n	8009882 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800986a:	2210      	movs	r2, #16
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009876:	2201      	movs	r2, #1
 8009878:	431a      	orrs	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e007      	b.n	8009892 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2201      	movs	r2, #1
 800988a:	4013      	ands	r3, r2
 800988c:	2b01      	cmp	r3, #1
 800988e:	d1d0      	bne.n	8009832 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	0018      	movs	r0, r3
 8009894:	46bd      	mov	sp, r7
 8009896:	b004      	add	sp, #16
 8009898:	bd80      	pop	{r7, pc}
 800989a:	46c0      	nop			@ (mov r8, r8)
 800989c:	80000017 	.word	0x80000017
 80098a0:	40012708 	.word	0x40012708
 80098a4:	20000028 	.word	0x20000028
 80098a8:	00030d40 	.word	0x00030d40

080098ac <__NVIC_EnableIRQ>:
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	0002      	movs	r2, r0
 80098b4:	1dfb      	adds	r3, r7, #7
 80098b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80098b8:	1dfb      	adds	r3, r7, #7
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80098be:	d809      	bhi.n	80098d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098c0:	1dfb      	adds	r3, r7, #7
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	001a      	movs	r2, r3
 80098c6:	231f      	movs	r3, #31
 80098c8:	401a      	ands	r2, r3
 80098ca:	4b04      	ldr	r3, [pc, #16]	@ (80098dc <__NVIC_EnableIRQ+0x30>)
 80098cc:	2101      	movs	r1, #1
 80098ce:	4091      	lsls	r1, r2
 80098d0:	000a      	movs	r2, r1
 80098d2:	601a      	str	r2, [r3, #0]
}
 80098d4:	46c0      	nop			@ (mov r8, r8)
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b002      	add	sp, #8
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	e000e100 	.word	0xe000e100

080098e0 <__NVIC_SetPriority>:
{
 80098e0:	b590      	push	{r4, r7, lr}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	0002      	movs	r2, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	1dfb      	adds	r3, r7, #7
 80098ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80098ee:	1dfb      	adds	r3, r7, #7
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80098f4:	d828      	bhi.n	8009948 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80098f6:	4a2f      	ldr	r2, [pc, #188]	@ (80099b4 <__NVIC_SetPriority+0xd4>)
 80098f8:	1dfb      	adds	r3, r7, #7
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	b25b      	sxtb	r3, r3
 80098fe:	089b      	lsrs	r3, r3, #2
 8009900:	33c0      	adds	r3, #192	@ 0xc0
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	589b      	ldr	r3, [r3, r2]
 8009906:	1dfa      	adds	r2, r7, #7
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	0011      	movs	r1, r2
 800990c:	2203      	movs	r2, #3
 800990e:	400a      	ands	r2, r1
 8009910:	00d2      	lsls	r2, r2, #3
 8009912:	21ff      	movs	r1, #255	@ 0xff
 8009914:	4091      	lsls	r1, r2
 8009916:	000a      	movs	r2, r1
 8009918:	43d2      	mvns	r2, r2
 800991a:	401a      	ands	r2, r3
 800991c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	019b      	lsls	r3, r3, #6
 8009922:	22ff      	movs	r2, #255	@ 0xff
 8009924:	401a      	ands	r2, r3
 8009926:	1dfb      	adds	r3, r7, #7
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	0018      	movs	r0, r3
 800992c:	2303      	movs	r3, #3
 800992e:	4003      	ands	r3, r0
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009934:	481f      	ldr	r0, [pc, #124]	@ (80099b4 <__NVIC_SetPriority+0xd4>)
 8009936:	1dfb      	adds	r3, r7, #7
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	b25b      	sxtb	r3, r3
 800993c:	089b      	lsrs	r3, r3, #2
 800993e:	430a      	orrs	r2, r1
 8009940:	33c0      	adds	r3, #192	@ 0xc0
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	501a      	str	r2, [r3, r0]
}
 8009946:	e031      	b.n	80099ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009948:	4a1b      	ldr	r2, [pc, #108]	@ (80099b8 <__NVIC_SetPriority+0xd8>)
 800994a:	1dfb      	adds	r3, r7, #7
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	0019      	movs	r1, r3
 8009950:	230f      	movs	r3, #15
 8009952:	400b      	ands	r3, r1
 8009954:	3b08      	subs	r3, #8
 8009956:	089b      	lsrs	r3, r3, #2
 8009958:	3306      	adds	r3, #6
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	18d3      	adds	r3, r2, r3
 800995e:	3304      	adds	r3, #4
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	1dfa      	adds	r2, r7, #7
 8009964:	7812      	ldrb	r2, [r2, #0]
 8009966:	0011      	movs	r1, r2
 8009968:	2203      	movs	r2, #3
 800996a:	400a      	ands	r2, r1
 800996c:	00d2      	lsls	r2, r2, #3
 800996e:	21ff      	movs	r1, #255	@ 0xff
 8009970:	4091      	lsls	r1, r2
 8009972:	000a      	movs	r2, r1
 8009974:	43d2      	mvns	r2, r2
 8009976:	401a      	ands	r2, r3
 8009978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	019b      	lsls	r3, r3, #6
 800997e:	22ff      	movs	r2, #255	@ 0xff
 8009980:	401a      	ands	r2, r3
 8009982:	1dfb      	adds	r3, r7, #7
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	0018      	movs	r0, r3
 8009988:	2303      	movs	r3, #3
 800998a:	4003      	ands	r3, r0
 800998c:	00db      	lsls	r3, r3, #3
 800998e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009990:	4809      	ldr	r0, [pc, #36]	@ (80099b8 <__NVIC_SetPriority+0xd8>)
 8009992:	1dfb      	adds	r3, r7, #7
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	001c      	movs	r4, r3
 8009998:	230f      	movs	r3, #15
 800999a:	4023      	ands	r3, r4
 800999c:	3b08      	subs	r3, #8
 800999e:	089b      	lsrs	r3, r3, #2
 80099a0:	430a      	orrs	r2, r1
 80099a2:	3306      	adds	r3, #6
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	18c3      	adds	r3, r0, r3
 80099a8:	3304      	adds	r3, #4
 80099aa:	601a      	str	r2, [r3, #0]
}
 80099ac:	46c0      	nop			@ (mov r8, r8)
 80099ae:	46bd      	mov	sp, r7
 80099b0:	b003      	add	sp, #12
 80099b2:	bd90      	pop	{r4, r7, pc}
 80099b4:	e000e100 	.word	0xe000e100
 80099b8:	e000ed00 	.word	0xe000ed00

080099bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	607a      	str	r2, [r7, #4]
 80099c6:	210f      	movs	r1, #15
 80099c8:	187b      	adds	r3, r7, r1
 80099ca:	1c02      	adds	r2, r0, #0
 80099cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	187b      	adds	r3, r7, r1
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	b25b      	sxtb	r3, r3
 80099d6:	0011      	movs	r1, r2
 80099d8:	0018      	movs	r0, r3
 80099da:	f7ff ff81 	bl	80098e0 <__NVIC_SetPriority>
}
 80099de:	46c0      	nop			@ (mov r8, r8)
 80099e0:	46bd      	mov	sp, r7
 80099e2:	b004      	add	sp, #16
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	0002      	movs	r2, r0
 80099ee:	1dfb      	adds	r3, r7, #7
 80099f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099f2:	1dfb      	adds	r3, r7, #7
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	0018      	movs	r0, r3
 80099fa:	f7ff ff57 	bl	80098ac <__NVIC_EnableIRQ>
}
 80099fe:	46c0      	nop			@ (mov r8, r8)
 8009a00:	46bd      	mov	sp, r7
 8009a02:	b002      	add	sp, #8
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a12:	2300      	movs	r3, #0
 8009a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a16:	e14d      	b.n	8009cb4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4091      	lsls	r1, r2
 8009a22:	000a      	movs	r2, r1
 8009a24:	4013      	ands	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d100      	bne.n	8009a30 <HAL_GPIO_Init+0x28>
 8009a2e:	e13e      	b.n	8009cae <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2203      	movs	r2, #3
 8009a36:	4013      	ands	r3, r2
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d005      	beq.n	8009a48 <HAL_GPIO_Init+0x40>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2203      	movs	r2, #3
 8009a42:	4013      	ands	r3, r2
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d130      	bne.n	8009aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	2203      	movs	r2, #3
 8009a54:	409a      	lsls	r2, r3
 8009a56:	0013      	movs	r3, r2
 8009a58:	43da      	mvns	r2, r3
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	409a      	lsls	r2, r3
 8009a6a:	0013      	movs	r3, r2
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009a7e:	2201      	movs	r2, #1
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	409a      	lsls	r2, r3
 8009a84:	0013      	movs	r3, r2
 8009a86:	43da      	mvns	r2, r3
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	091b      	lsrs	r3, r3, #4
 8009a94:	2201      	movs	r2, #1
 8009a96:	401a      	ands	r2, r3
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	0013      	movs	r3, r2
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	2203      	movs	r2, #3
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d017      	beq.n	8009ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	409a      	lsls	r2, r3
 8009ac4:	0013      	movs	r3, r2
 8009ac6:	43da      	mvns	r2, r3
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	4013      	ands	r3, r2
 8009acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	689a      	ldr	r2, [r3, #8]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	409a      	lsls	r2, r3
 8009ad8:	0013      	movs	r3, r2
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	2203      	movs	r2, #3
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d123      	bne.n	8009b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	08da      	lsrs	r2, r3, #3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3208      	adds	r2, #8
 8009afa:	0092      	lsls	r2, r2, #2
 8009afc:	58d3      	ldr	r3, [r2, r3]
 8009afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2207      	movs	r2, #7
 8009b04:	4013      	ands	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	220f      	movs	r2, #15
 8009b0a:	409a      	lsls	r2, r3
 8009b0c:	0013      	movs	r3, r2
 8009b0e:	43da      	mvns	r2, r3
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	4013      	ands	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	691a      	ldr	r2, [r3, #16]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2107      	movs	r1, #7
 8009b1e:	400b      	ands	r3, r1
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	409a      	lsls	r2, r3
 8009b24:	0013      	movs	r3, r2
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	08da      	lsrs	r2, r3, #3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3208      	adds	r2, #8
 8009b34:	0092      	lsls	r2, r2, #2
 8009b36:	6939      	ldr	r1, [r7, #16]
 8009b38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	2203      	movs	r2, #3
 8009b46:	409a      	lsls	r2, r3
 8009b48:	0013      	movs	r3, r2
 8009b4a:	43da      	mvns	r2, r3
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	2203      	movs	r2, #3
 8009b58:	401a      	ands	r2, r3
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	409a      	lsls	r2, r3
 8009b60:	0013      	movs	r3, r2
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	23c0      	movs	r3, #192	@ 0xc0
 8009b74:	029b      	lsls	r3, r3, #10
 8009b76:	4013      	ands	r3, r2
 8009b78:	d100      	bne.n	8009b7c <HAL_GPIO_Init+0x174>
 8009b7a:	e098      	b.n	8009cae <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009b7c:	4a53      	ldr	r2, [pc, #332]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	089b      	lsrs	r3, r3, #2
 8009b82:	3318      	adds	r3, #24
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	589b      	ldr	r3, [r3, r2]
 8009b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	4013      	ands	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	220f      	movs	r2, #15
 8009b94:	409a      	lsls	r2, r3
 8009b96:	0013      	movs	r3, r2
 8009b98:	43da      	mvns	r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	23a0      	movs	r3, #160	@ 0xa0
 8009ba4:	05db      	lsls	r3, r3, #23
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d019      	beq.n	8009bde <HAL_GPIO_Init+0x1d6>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a48      	ldr	r2, [pc, #288]	@ (8009cd0 <HAL_GPIO_Init+0x2c8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d013      	beq.n	8009bda <HAL_GPIO_Init+0x1d2>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a47      	ldr	r2, [pc, #284]	@ (8009cd4 <HAL_GPIO_Init+0x2cc>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d00d      	beq.n	8009bd6 <HAL_GPIO_Init+0x1ce>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a46      	ldr	r2, [pc, #280]	@ (8009cd8 <HAL_GPIO_Init+0x2d0>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d007      	beq.n	8009bd2 <HAL_GPIO_Init+0x1ca>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a45      	ldr	r2, [pc, #276]	@ (8009cdc <HAL_GPIO_Init+0x2d4>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d101      	bne.n	8009bce <HAL_GPIO_Init+0x1c6>
 8009bca:	2304      	movs	r3, #4
 8009bcc:	e008      	b.n	8009be0 <HAL_GPIO_Init+0x1d8>
 8009bce:	2305      	movs	r3, #5
 8009bd0:	e006      	b.n	8009be0 <HAL_GPIO_Init+0x1d8>
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e004      	b.n	8009be0 <HAL_GPIO_Init+0x1d8>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e002      	b.n	8009be0 <HAL_GPIO_Init+0x1d8>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e000      	b.n	8009be0 <HAL_GPIO_Init+0x1d8>
 8009bde:	2300      	movs	r3, #0
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	2103      	movs	r1, #3
 8009be4:	400a      	ands	r2, r1
 8009be6:	00d2      	lsls	r2, r2, #3
 8009be8:	4093      	lsls	r3, r2
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8009bf0:	4936      	ldr	r1, [pc, #216]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	089b      	lsrs	r3, r3, #2
 8009bf6:	3318      	adds	r3, #24
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009bfe:	4b33      	ldr	r3, [pc, #204]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	43da      	mvns	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	2380      	movs	r3, #128	@ 0x80
 8009c14:	035b      	lsls	r3, r3, #13
 8009c16:	4013      	ands	r3, r2
 8009c18:	d003      	beq.n	8009c22 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009c22:	4b2a      	ldr	r3, [pc, #168]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009c28:	4b28      	ldr	r3, [pc, #160]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	43da      	mvns	r2, r3
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	4013      	ands	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	2380      	movs	r3, #128	@ 0x80
 8009c3e:	039b      	lsls	r3, r3, #14
 8009c40:	4013      	ands	r3, r2
 8009c42:	d003      	beq.n	8009c4c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009c52:	4a1e      	ldr	r2, [pc, #120]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009c54:	2384      	movs	r3, #132	@ 0x84
 8009c56:	58d3      	ldr	r3, [r2, r3]
 8009c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	43da      	mvns	r2, r3
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	4013      	ands	r3, r2
 8009c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	2380      	movs	r3, #128	@ 0x80
 8009c6a:	029b      	lsls	r3, r3, #10
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009c78:	4914      	ldr	r1, [pc, #80]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009c7a:	2284      	movs	r2, #132	@ 0x84
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009c80:	4a12      	ldr	r2, [pc, #72]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009c82:	2380      	movs	r3, #128	@ 0x80
 8009c84:	58d3      	ldr	r3, [r2, r3]
 8009c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	43da      	mvns	r2, r3
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	2380      	movs	r3, #128	@ 0x80
 8009c98:	025b      	lsls	r3, r3, #9
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	d003      	beq.n	8009ca6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009ca6:	4909      	ldr	r1, [pc, #36]	@ (8009ccc <HAL_GPIO_Init+0x2c4>)
 8009ca8:	2280      	movs	r2, #128	@ 0x80
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	40da      	lsrs	r2, r3
 8009cbc:	1e13      	subs	r3, r2, #0
 8009cbe:	d000      	beq.n	8009cc2 <HAL_GPIO_Init+0x2ba>
 8009cc0:	e6aa      	b.n	8009a18 <HAL_GPIO_Init+0x10>
  }
}
 8009cc2:	46c0      	nop			@ (mov r8, r8)
 8009cc4:	46c0      	nop			@ (mov r8, r8)
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	b006      	add	sp, #24
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40021800 	.word	0x40021800
 8009cd0:	50000400 	.word	0x50000400
 8009cd4:	50000800 	.word	0x50000800
 8009cd8:	50000c00 	.word	0x50000c00
 8009cdc:	50001000 	.word	0x50001000

08009ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	0008      	movs	r0, r1
 8009cea:	0011      	movs	r1, r2
 8009cec:	1cbb      	adds	r3, r7, #2
 8009cee:	1c02      	adds	r2, r0, #0
 8009cf0:	801a      	strh	r2, [r3, #0]
 8009cf2:	1c7b      	adds	r3, r7, #1
 8009cf4:	1c0a      	adds	r2, r1, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cf8:	1c7b      	adds	r3, r7, #1
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d004      	beq.n	8009d0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d00:	1cbb      	adds	r3, r7, #2
 8009d02:	881a      	ldrh	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009d08:	e003      	b.n	8009d12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009d0a:	1cbb      	adds	r3, r7, #2
 8009d0c:	881a      	ldrh	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009d12:	46c0      	nop			@ (mov r8, r8)
 8009d14:	46bd      	mov	sp, r7
 8009d16:	b002      	add	sp, #8
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e08f      	b.n	8009e4e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2241      	movs	r2, #65	@ 0x41
 8009d32:	5c9b      	ldrb	r3, [r3, r2]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d107      	bne.n	8009d4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2240      	movs	r2, #64	@ 0x40
 8009d3e:	2100      	movs	r1, #0
 8009d40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7fe fdf5 	bl	8008934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2241      	movs	r2, #65	@ 0x41
 8009d4e:	2124      	movs	r1, #36	@ 0x24
 8009d50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	438a      	bics	r2, r1
 8009d60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	493b      	ldr	r1, [pc, #236]	@ (8009e58 <HAL_I2C_Init+0x13c>)
 8009d6c:	400a      	ands	r2, r1
 8009d6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4938      	ldr	r1, [pc, #224]	@ (8009e5c <HAL_I2C_Init+0x140>)
 8009d7c:	400a      	ands	r2, r1
 8009d7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d108      	bne.n	8009d9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2180      	movs	r1, #128	@ 0x80
 8009d92:	0209      	lsls	r1, r1, #8
 8009d94:	430a      	orrs	r2, r1
 8009d96:	609a      	str	r2, [r3, #8]
 8009d98:	e007      	b.n	8009daa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689a      	ldr	r2, [r3, #8]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2184      	movs	r1, #132	@ 0x84
 8009da4:	0209      	lsls	r1, r1, #8
 8009da6:	430a      	orrs	r2, r1
 8009da8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d109      	bne.n	8009dc6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2180      	movs	r1, #128	@ 0x80
 8009dbe:	0109      	lsls	r1, r1, #4
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	605a      	str	r2, [r3, #4]
 8009dc4:	e007      	b.n	8009dd6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4923      	ldr	r1, [pc, #140]	@ (8009e60 <HAL_I2C_Init+0x144>)
 8009dd2:	400a      	ands	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4920      	ldr	r1, [pc, #128]	@ (8009e64 <HAL_I2C_Init+0x148>)
 8009de2:	430a      	orrs	r2, r1
 8009de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68da      	ldr	r2, [r3, #12]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	491a      	ldr	r1, [pc, #104]	@ (8009e5c <HAL_I2C_Init+0x140>)
 8009df2:	400a      	ands	r2, r1
 8009df4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691a      	ldr	r2, [r3, #16]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	69d9      	ldr	r1, [r3, #28]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a1a      	ldr	r2, [r3, #32]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2241      	movs	r2, #65	@ 0x41
 8009e3a:	2120      	movs	r1, #32
 8009e3c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2242      	movs	r2, #66	@ 0x42
 8009e48:	2100      	movs	r1, #0
 8009e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	0018      	movs	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b002      	add	sp, #8
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	46c0      	nop			@ (mov r8, r8)
 8009e58:	f0ffffff 	.word	0xf0ffffff
 8009e5c:	ffff7fff 	.word	0xffff7fff
 8009e60:	fffff7ff 	.word	0xfffff7ff
 8009e64:	02008000 	.word	0x02008000

08009e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2241      	movs	r2, #65	@ 0x41
 8009e76:	5c9b      	ldrb	r3, [r3, r2]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b20      	cmp	r3, #32
 8009e7c:	d138      	bne.n	8009ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2240      	movs	r2, #64	@ 0x40
 8009e82:	5c9b      	ldrb	r3, [r3, r2]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e032      	b.n	8009ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2240      	movs	r2, #64	@ 0x40
 8009e90:	2101      	movs	r1, #1
 8009e92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2241      	movs	r2, #65	@ 0x41
 8009e98:	2124      	movs	r1, #36	@ 0x24
 8009e9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	438a      	bics	r2, r1
 8009eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4911      	ldr	r1, [pc, #68]	@ (8009efc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009eb8:	400a      	ands	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6819      	ldr	r1, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2241      	movs	r2, #65	@ 0x41
 8009ee0:	2120      	movs	r1, #32
 8009ee2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2240      	movs	r2, #64	@ 0x40
 8009ee8:	2100      	movs	r1, #0
 8009eea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	e000      	b.n	8009ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ef0:	2302      	movs	r3, #2
  }
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b002      	add	sp, #8
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			@ (mov r8, r8)
 8009efc:	ffffefff 	.word	0xffffefff

08009f00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2241      	movs	r2, #65	@ 0x41
 8009f0e:	5c9b      	ldrb	r3, [r3, r2]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d139      	bne.n	8009f8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2240      	movs	r2, #64	@ 0x40
 8009f1a:	5c9b      	ldrb	r3, [r3, r2]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e033      	b.n	8009f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2240      	movs	r2, #64	@ 0x40
 8009f28:	2101      	movs	r1, #1
 8009f2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2241      	movs	r2, #65	@ 0x41
 8009f30:	2124      	movs	r1, #36	@ 0x24
 8009f32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2101      	movs	r1, #1
 8009f40:	438a      	bics	r2, r1
 8009f42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4a11      	ldr	r2, [pc, #68]	@ (8009f94 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	021b      	lsls	r3, r3, #8
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2101      	movs	r1, #1
 8009f72:	430a      	orrs	r2, r1
 8009f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2241      	movs	r2, #65	@ 0x41
 8009f7a:	2120      	movs	r1, #32
 8009f7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2240      	movs	r2, #64	@ 0x40
 8009f82:	2100      	movs	r1, #0
 8009f84:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e000      	b.n	8009f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f8a:	2302      	movs	r3, #2
  }
}
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	b004      	add	sp, #16
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	fffff0ff 	.word	0xfffff0ff

08009f98 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	000a      	movs	r2, r1
 8009fa2:	1cbb      	adds	r3, r7, #2
 8009fa4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8009fa6:	230a      	movs	r3, #10
 8009fa8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8009faa:	e002      	b.n	8009fb2 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1f9      	bne.n	8009fac <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8009fb8:	1cbb      	adds	r3, r7, #2
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	00db      	lsls	r3, r3, #3
 8009fbe:	4a06      	ldr	r2, [pc, #24]	@ (8009fd8 <PCD_GET_EP_RX_CNT+0x40>)
 8009fc0:	4694      	mov	ip, r2
 8009fc2:	4463      	add	r3, ip
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	059b      	lsls	r3, r3, #22
 8009fcc:	0d9b      	lsrs	r3, r3, #22
 8009fce:	b29b      	uxth	r3, r3
}
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b004      	add	sp, #16
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	40009800 	.word	0x40009800

08009fdc <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	000a      	movs	r2, r1
 8009fe6:	1cbb      	adds	r3, r7, #2
 8009fe8:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8009fea:	230a      	movs	r3, #10
 8009fec:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8009fee:	e002      	b.n	8009ff6 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1f9      	bne.n	8009ff0 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8009ffc:	1cbb      	adds	r3, r7, #2
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	4a06      	ldr	r2, [pc, #24]	@ (800a01c <PCD_GET_EP_DBUF0_CNT+0x40>)
 800a004:	4694      	mov	ip, r2
 800a006:	4463      	add	r3, ip
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	0c1b      	lsrs	r3, r3, #16
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	059b      	lsls	r3, r3, #22
 800a010:	0d9b      	lsrs	r3, r3, #22
 800a012:	b29b      	uxth	r3, r3
}
 800a014:	0018      	movs	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	b004      	add	sp, #16
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	40009800 	.word	0x40009800

0800a020 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	000a      	movs	r2, r1
 800a02a:	1cbb      	adds	r3, r7, #2
 800a02c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800a02e:	230a      	movs	r3, #10
 800a030:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800a032:	e002      	b.n	800a03a <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b01      	subs	r3, #1
 800a038:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1f9      	bne.n	800a034 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800a040:	1cbb      	adds	r3, r7, #2
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	4a06      	ldr	r2, [pc, #24]	@ (800a060 <PCD_GET_EP_DBUF1_CNT+0x40>)
 800a048:	4694      	mov	ip, r2
 800a04a:	4463      	add	r3, ip
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	0c1b      	lsrs	r3, r3, #16
 800a050:	b29b      	uxth	r3, r3
 800a052:	059b      	lsls	r3, r3, #22
 800a054:	0d9b      	lsrs	r3, r3, #22
 800a056:	b29b      	uxth	r3, r3
}
 800a058:	0018      	movs	r0, r3
 800a05a:	46bd      	mov	sp, r7
 800a05c:	b004      	add	sp, #16
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40009800 	.word	0x40009800

0800a064 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a064:	b590      	push	{r4, r7, lr}
 800a066:	b087      	sub	sp, #28
 800a068:	af02      	add	r7, sp, #8
 800a06a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e0ea      	b.n	800a24c <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a76      	ldr	r2, [pc, #472]	@ (800a254 <HAL_PCD_Init+0x1f0>)
 800a07a:	5c9b      	ldrb	r3, [r3, r2]
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d108      	bne.n	800a094 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	23a5      	movs	r3, #165	@ 0xa5
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	2100      	movs	r1, #0
 800a08a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	0018      	movs	r0, r3
 800a090:	f00e ff16 	bl	8018ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a6f      	ldr	r2, [pc, #444]	@ (800a254 <HAL_PCD_Init+0x1f0>)
 800a098:	2103      	movs	r1, #3
 800a09a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f003 ff99 	bl	800dfd8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0a6:	230f      	movs	r3, #15
 800a0a8:	18fb      	adds	r3, r7, r3
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	701a      	strb	r2, [r3, #0]
 800a0ae:	e049      	b.n	800a144 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a0b0:	200f      	movs	r0, #15
 800a0b2:	183b      	adds	r3, r7, r0
 800a0b4:	781a      	ldrb	r2, [r3, #0]
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	0013      	movs	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	189b      	adds	r3, r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	18cb      	adds	r3, r1, r3
 800a0c2:	3315      	adds	r3, #21
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a0c8:	183b      	adds	r3, r7, r0
 800a0ca:	781a      	ldrb	r2, [r3, #0]
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	0013      	movs	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	189b      	adds	r3, r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	18cb      	adds	r3, r1, r3
 800a0d8:	3314      	adds	r3, #20
 800a0da:	183a      	adds	r2, r7, r0
 800a0dc:	7812      	ldrb	r2, [r2, #0]
 800a0de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a0e0:	183b      	adds	r3, r7, r0
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	0013      	movs	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	189b      	adds	r3, r3, r2
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	18cb      	adds	r3, r1, r3
 800a0f0:	3317      	adds	r3, #23
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a0f6:	183b      	adds	r3, r7, r0
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	0013      	movs	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	189b      	adds	r3, r3, r2
 800a102:	00db      	lsls	r3, r3, #3
 800a104:	18cb      	adds	r3, r1, r3
 800a106:	3324      	adds	r3, #36	@ 0x24
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a10c:	183b      	adds	r3, r7, r0
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	0013      	movs	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	189b      	adds	r3, r3, r2
 800a118:	00db      	lsls	r3, r3, #3
 800a11a:	18cb      	adds	r3, r1, r3
 800a11c:	3328      	adds	r3, #40	@ 0x28
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a122:	183b      	adds	r3, r7, r0
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	0013      	movs	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	189b      	adds	r3, r3, r2
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	18cb      	adds	r3, r1, r3
 800a134:	3304      	adds	r3, #4
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a13a:	183b      	adds	r3, r7, r0
 800a13c:	781a      	ldrb	r2, [r3, #0]
 800a13e:	183b      	adds	r3, r7, r0
 800a140:	3201      	adds	r2, #1
 800a142:	701a      	strb	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	791b      	ldrb	r3, [r3, #4]
 800a148:	210f      	movs	r1, #15
 800a14a:	187a      	adds	r2, r7, r1
 800a14c:	7812      	ldrb	r2, [r2, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d3ae      	bcc.n	800a0b0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a152:	187b      	adds	r3, r7, r1
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	e056      	b.n	800a208 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a15a:	240f      	movs	r4, #15
 800a15c:	193b      	adds	r3, r7, r4
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	2356      	movs	r3, #86	@ 0x56
 800a164:	33ff      	adds	r3, #255	@ 0xff
 800a166:	0019      	movs	r1, r3
 800a168:	0013      	movs	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	189b      	adds	r3, r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	18c3      	adds	r3, r0, r3
 800a172:	185b      	adds	r3, r3, r1
 800a174:	2200      	movs	r2, #0
 800a176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a178:	193b      	adds	r3, r7, r4
 800a17a:	781a      	ldrb	r2, [r3, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	23aa      	movs	r3, #170	@ 0xaa
 800a180:	0059      	lsls	r1, r3, #1
 800a182:	0013      	movs	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	189b      	adds	r3, r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	18c3      	adds	r3, r0, r3
 800a18c:	185b      	adds	r3, r3, r1
 800a18e:	193a      	adds	r2, r7, r4
 800a190:	7812      	ldrb	r2, [r2, #0]
 800a192:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a194:	193b      	adds	r3, r7, r4
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	2358      	movs	r3, #88	@ 0x58
 800a19c:	33ff      	adds	r3, #255	@ 0xff
 800a19e:	0019      	movs	r1, r3
 800a1a0:	0013      	movs	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	18c3      	adds	r3, r0, r3
 800a1aa:	185b      	adds	r3, r3, r1
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a1b0:	193b      	adds	r3, r7, r4
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	23b2      	movs	r3, #178	@ 0xb2
 800a1b8:	0059      	lsls	r1, r3, #1
 800a1ba:	0013      	movs	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	189b      	adds	r3, r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	18c3      	adds	r3, r0, r3
 800a1c4:	185b      	adds	r3, r3, r1
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a1ca:	193b      	adds	r3, r7, r4
 800a1cc:	781a      	ldrb	r2, [r3, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	23b4      	movs	r3, #180	@ 0xb4
 800a1d2:	0059      	lsls	r1, r3, #1
 800a1d4:	0013      	movs	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	189b      	adds	r3, r3, r2
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	18c3      	adds	r3, r0, r3
 800a1de:	185b      	adds	r3, r3, r1
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a1e4:	193b      	adds	r3, r7, r4
 800a1e6:	781a      	ldrb	r2, [r3, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	23b6      	movs	r3, #182	@ 0xb6
 800a1ec:	0059      	lsls	r1, r3, #1
 800a1ee:	0013      	movs	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	18c3      	adds	r3, r0, r3
 800a1f8:	185b      	adds	r3, r3, r1
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1fe:	193b      	adds	r3, r7, r4
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	193b      	adds	r3, r7, r4
 800a204:	3201      	adds	r2, #1
 800a206:	701a      	strb	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	791b      	ldrb	r3, [r3, #4]
 800a20c:	220f      	movs	r2, #15
 800a20e:	18ba      	adds	r2, r7, r2
 800a210:	7812      	ldrb	r2, [r2, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d3a1      	bcc.n	800a15a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6818      	ldr	r0, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	466a      	mov	r2, sp
 800a21e:	7c19      	ldrb	r1, [r3, #16]
 800a220:	7011      	strb	r1, [r2, #0]
 800a222:	6859      	ldr	r1, [r3, #4]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f003 ff0f 	bl	800e04a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a07      	ldr	r2, [pc, #28]	@ (800a254 <HAL_PCD_Init+0x1f0>)
 800a236:	2101      	movs	r1, #1
 800a238:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7b1b      	ldrb	r3, [r3, #12]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d103      	bne.n	800a24a <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	0018      	movs	r0, r3
 800a246:	f001 fbf1 	bl	800ba2c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	0018      	movs	r0, r3
 800a24e:	46bd      	mov	sp, r7
 800a250:	b005      	add	sp, #20
 800a252:	bd90      	pop	{r4, r7, pc}
 800a254:	00000295 	.word	0x00000295

0800a258 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	23a5      	movs	r3, #165	@ 0xa5
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	5cd3      	ldrb	r3, [r2, r3]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d101      	bne.n	800a270 <HAL_PCD_Start+0x18>
 800a26c:	2302      	movs	r3, #2
 800a26e:	e014      	b.n	800a29a <HAL_PCD_Start+0x42>
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	23a5      	movs	r3, #165	@ 0xa5
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	2101      	movs	r1, #1
 800a278:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	0018      	movs	r0, r3
 800a280:	f003 fe96 	bl	800dfb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	0018      	movs	r0, r3
 800a28a:	f005 fca0 	bl	800fbce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	23a5      	movs	r3, #165	@ 0xa5
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	2100      	movs	r1, #0
 800a296:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	0018      	movs	r0, r3
 800a29c:	46bd      	mov	sp, r7
 800a29e:	b002      	add	sp, #8
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	f005 fc9c 	bl	800fbee <USB_ReadInterrupts>
 800a2b6:	0003      	movs	r3, r0
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800a2ba:	4a7c      	ldr	r2, [pc, #496]	@ (800a4ac <HAL_PCD_IRQHandler+0x208>)
 800a2bc:	23a0      	movs	r3, #160	@ 0xa0
 800a2be:	58d3      	ldr	r3, [r2, r3]
 800a2c0:	2204      	movs	r2, #4
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	d100      	bne.n	800a2c8 <HAL_PCD_IRQHandler+0x24>
 800a2c6:	e0ed      	b.n	800a4a4 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	2380      	movs	r3, #128	@ 0x80
 800a2cc:	021b      	lsls	r3, r3, #8
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	d004      	beq.n	800a2dc <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f000 fb35 	bl	800a944 <PCD_EP_ISR_Handler>

    return;
 800a2da:	e0e4      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	2380      	movs	r3, #128	@ 0x80
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	d011      	beq.n	800a30a <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	496f      	ldr	r1, [pc, #444]	@ (800a4b0 <HAL_PCD_IRQHandler+0x20c>)
 800a2f2:	400a      	ands	r2, r1
 800a2f4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f00e fea4 	bl	8019046 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2100      	movs	r1, #0
 800a302:	0018      	movs	r0, r3
 800a304:	f000 f8e4 	bl	800a4d0 <HAL_PCD_SetAddress>

    return;
 800a308:	e0cd      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	2380      	movs	r3, #128	@ 0x80
 800a30e:	01db      	lsls	r3, r3, #7
 800a310:	4013      	ands	r3, r2
 800a312:	d008      	beq.n	800a326 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4965      	ldr	r1, [pc, #404]	@ (800a4b4 <HAL_PCD_IRQHandler+0x210>)
 800a320:	400a      	ands	r2, r1
 800a322:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 800a324:	e0bf      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	2380      	movs	r3, #128	@ 0x80
 800a32a:	019b      	lsls	r3, r3, #6
 800a32c:	4013      	ands	r3, r2
 800a32e:	d008      	beq.n	800a342 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	495f      	ldr	r1, [pc, #380]	@ (800a4b8 <HAL_PCD_IRQHandler+0x214>)
 800a33c:	400a      	ands	r2, r1
 800a33e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 800a340:	e0b1      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	2380      	movs	r3, #128	@ 0x80
 800a346:	015b      	lsls	r3, r3, #5
 800a348:	4013      	ands	r3, r2
 800a34a:	d02c      	beq.n	800a3a6 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2104      	movs	r1, #4
 800a358:	438a      	bics	r2, r1
 800a35a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2108      	movs	r1, #8
 800a368:	438a      	bics	r2, r1
 800a36a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	23b3      	movs	r3, #179	@ 0xb3
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	5cd3      	ldrb	r3, [r2, r3]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d109      	bne.n	800a38c <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	23b3      	movs	r3, #179	@ 0xb3
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	2100      	movs	r1, #0
 800a380:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2100      	movs	r1, #0
 800a386:	0018      	movs	r0, r3
 800a388:	f00f f8dc 	bl	8019544 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	0018      	movs	r0, r3
 800a390:	f00e fe9a 	bl	80190c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4947      	ldr	r1, [pc, #284]	@ (800a4bc <HAL_PCD_IRQHandler+0x218>)
 800a3a0:	400a      	ands	r2, r1
 800a3a2:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 800a3a4:	e07f      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	2380      	movs	r3, #128	@ 0x80
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	d01c      	beq.n	800a3ea <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2108      	movs	r1, #8
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	493d      	ldr	r1, [pc, #244]	@ (800a4c0 <HAL_PCD_IRQHandler+0x21c>)
 800a3cc:	400a      	ands	r2, r1
 800a3ce:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2104      	movs	r1, #4
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f00e fe54 	bl	8019090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a3e8:	e05d      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2280      	movs	r2, #128	@ 0x80
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	d038      	beq.n	800a464 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4931      	ldr	r1, [pc, #196]	@ (800a4c4 <HAL_PCD_IRQHandler+0x220>)
 800a3fe:	400a      	ands	r2, r1
 800a400:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	23b3      	movs	r3, #179	@ 0xb3
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	5cd3      	ldrb	r3, [r2, r3]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d125      	bne.n	800a45a <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2104      	movs	r1, #4
 800a41a:	430a      	orrs	r2, r1
 800a41c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2108      	movs	r1, #8
 800a42a:	430a      	orrs	r2, r1
 800a42c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	23b3      	movs	r3, #179	@ 0xb3
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	2101      	movs	r1, #1
 800a436:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43e:	089b      	lsrs	r3, r3, #2
 800a440:	223c      	movs	r2, #60	@ 0x3c
 800a442:	4013      	ands	r3, r2
 800a444:	0019      	movs	r1, r3
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	23b4      	movs	r3, #180	@ 0xb4
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2101      	movs	r1, #1
 800a452:	0018      	movs	r0, r3
 800a454:	f00f f876 	bl	8019544 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a458:	e025      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	0018      	movs	r0, r3
 800a45e:	f00e fe17 	bl	8019090 <HAL_PCD_SuspendCallback>
    return;
 800a462:	e020      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	2380      	movs	r3, #128	@ 0x80
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4013      	ands	r3, r2
 800a46c:	d00c      	beq.n	800a488 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4913      	ldr	r1, [pc, #76]	@ (800a4c8 <HAL_PCD_IRQHandler+0x224>)
 800a47a:	400a      	ands	r2, r1
 800a47c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	0018      	movs	r0, r3
 800a482:	f00e fdd1 	bl	8019028 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a486:	e00e      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	2380      	movs	r3, #128	@ 0x80
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	4013      	ands	r3, r2
 800a490:	d009      	beq.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	490b      	ldr	r1, [pc, #44]	@ (800a4cc <HAL_PCD_IRQHandler+0x228>)
 800a49e:	400a      	ands	r2, r1
 800a4a0:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 800a4a2:	e000      	b.n	800a4a6 <HAL_PCD_IRQHandler+0x202>
    return;
 800a4a4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	b004      	add	sp, #16
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	40010000 	.word	0x40010000
 800a4b0:	0000fbff 	.word	0x0000fbff
 800a4b4:	0000bfff 	.word	0x0000bfff
 800a4b8:	0000dfff 	.word	0x0000dfff
 800a4bc:	0000efff 	.word	0x0000efff
 800a4c0:	0000f7ff 	.word	0x0000f7ff
 800a4c4:	0000ff7f 	.word	0x0000ff7f
 800a4c8:	0000fdff 	.word	0x0000fdff
 800a4cc:	0000feff 	.word	0x0000feff

0800a4d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	000a      	movs	r2, r1
 800a4da:	1cfb      	adds	r3, r7, #3
 800a4dc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	23a5      	movs	r3, #165	@ 0xa5
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	5cd3      	ldrb	r3, [r2, r3]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d101      	bne.n	800a4ee <HAL_PCD_SetAddress+0x1e>
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	e016      	b.n	800a51c <HAL_PCD_SetAddress+0x4c>
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	23a5      	movs	r3, #165	@ 0xa5
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	1cfa      	adds	r2, r7, #3
 800a4fc:	7812      	ldrb	r2, [r2, #0]
 800a4fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	1cfb      	adds	r3, r7, #3
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	0019      	movs	r1, r3
 800a50a:	0010      	movs	r0, r2
 800a50c:	f005 fb4c 	bl	800fba8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	23a5      	movs	r3, #165	@ 0xa5
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	2100      	movs	r1, #0
 800a518:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	0018      	movs	r0, r3
 800a51e:	46bd      	mov	sp, r7
 800a520:	b002      	add	sp, #8
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a524:	b590      	push	{r4, r7, lr}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	000c      	movs	r4, r1
 800a52e:	0010      	movs	r0, r2
 800a530:	0019      	movs	r1, r3
 800a532:	1cfb      	adds	r3, r7, #3
 800a534:	1c22      	adds	r2, r4, #0
 800a536:	701a      	strb	r2, [r3, #0]
 800a538:	003b      	movs	r3, r7
 800a53a:	1c02      	adds	r2, r0, #0
 800a53c:	801a      	strh	r2, [r3, #0]
 800a53e:	1cbb      	adds	r3, r7, #2
 800a540:	1c0a      	adds	r2, r1, #0
 800a542:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a544:	230b      	movs	r3, #11
 800a546:	18fb      	adds	r3, r7, r3
 800a548:	2200      	movs	r2, #0
 800a54a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a54c:	1cfb      	adds	r3, r7, #3
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	b25b      	sxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	da10      	bge.n	800a578 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a556:	1cfb      	adds	r3, r7, #3
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2207      	movs	r2, #7
 800a55c:	401a      	ands	r2, r3
 800a55e:	0013      	movs	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	189b      	adds	r3, r3, r2
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	3310      	adds	r3, #16
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	18d3      	adds	r3, r2, r3
 800a56c:	3304      	adds	r3, #4
 800a56e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	705a      	strb	r2, [r3, #1]
 800a576:	e010      	b.n	800a59a <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a578:	1cfb      	adds	r3, r7, #3
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2207      	movs	r2, #7
 800a57e:	401a      	ands	r2, r3
 800a580:	0013      	movs	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	189b      	adds	r3, r3, r2
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	3351      	adds	r3, #81	@ 0x51
 800a58a:	33ff      	adds	r3, #255	@ 0xff
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	18d3      	adds	r3, r2, r3
 800a590:	3304      	adds	r3, #4
 800a592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a59a:	1cfb      	adds	r3, r7, #3
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2207      	movs	r2, #7
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a5a8:	003b      	movs	r3, r7
 800a5aa:	881a      	ldrh	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	1cba      	adds	r2, r7, #2
 800a5b4:	7812      	ldrb	r2, [r2, #0]
 800a5b6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a5b8:	1cbb      	adds	r3, r7, #2
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d102      	bne.n	800a5c6 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	23a5      	movs	r3, #165	@ 0xa5
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	5cd3      	ldrb	r3, [r2, r3]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d101      	bne.n	800a5d6 <HAL_PCD_EP_Open+0xb2>
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e013      	b.n	800a5fe <HAL_PCD_EP_Open+0xda>
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	23a5      	movs	r3, #165	@ 0xa5
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	2101      	movs	r1, #1
 800a5de:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	0011      	movs	r1, r2
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f003 fd59 	bl	800e0a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	23a5      	movs	r3, #165	@ 0xa5
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	54d1      	strb	r1, [r2, r3]

  return ret;
 800a5f8:	230b      	movs	r3, #11
 800a5fa:	18fb      	adds	r3, r7, r3
 800a5fc:	781b      	ldrb	r3, [r3, #0]
}
 800a5fe:	0018      	movs	r0, r3
 800a600:	46bd      	mov	sp, r7
 800a602:	b005      	add	sp, #20
 800a604:	bd90      	pop	{r4, r7, pc}

0800a606 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	000a      	movs	r2, r1
 800a610:	1cfb      	adds	r3, r7, #3
 800a612:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a614:	1cfb      	adds	r3, r7, #3
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	b25b      	sxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	da10      	bge.n	800a640 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a61e:	1cfb      	adds	r3, r7, #3
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	2207      	movs	r2, #7
 800a624:	401a      	ands	r2, r3
 800a626:	0013      	movs	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	00db      	lsls	r3, r3, #3
 800a62e:	3310      	adds	r3, #16
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	18d3      	adds	r3, r2, r3
 800a634:	3304      	adds	r3, #4
 800a636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	705a      	strb	r2, [r3, #1]
 800a63e:	e010      	b.n	800a662 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a640:	1cfb      	adds	r3, r7, #3
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2207      	movs	r2, #7
 800a646:	401a      	ands	r2, r3
 800a648:	0013      	movs	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	189b      	adds	r3, r3, r2
 800a64e:	00db      	lsls	r3, r3, #3
 800a650:	3351      	adds	r3, #81	@ 0x51
 800a652:	33ff      	adds	r3, #255	@ 0xff
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	18d3      	adds	r3, r2, r3
 800a658:	3304      	adds	r3, #4
 800a65a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a662:	1cfb      	adds	r3, r7, #3
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2207      	movs	r2, #7
 800a668:	4013      	ands	r3, r2
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	23a5      	movs	r3, #165	@ 0xa5
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	5cd3      	ldrb	r3, [r2, r3]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_PCD_EP_Close+0x7a>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e011      	b.n	800a6a4 <HAL_PCD_EP_Close+0x9e>
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	23a5      	movs	r3, #165	@ 0xa5
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	2101      	movs	r1, #1
 800a688:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	0011      	movs	r1, r2
 800a692:	0018      	movs	r0, r3
 800a694:	f004 f838 	bl	800e708 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	23a5      	movs	r3, #165	@ 0xa5
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	2100      	movs	r1, #0
 800a6a0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	b004      	add	sp, #16
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	200b      	movs	r0, #11
 800a6ba:	183b      	adds	r3, r7, r0
 800a6bc:	1c0a      	adds	r2, r1, #0
 800a6be:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6c0:	0001      	movs	r1, r0
 800a6c2:	187b      	adds	r3, r7, r1
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	2207      	movs	r2, #7
 800a6c8:	401a      	ands	r2, r3
 800a6ca:	0013      	movs	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	189b      	adds	r3, r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	3351      	adds	r3, #81	@ 0x51
 800a6d4:	33ff      	adds	r3, #255	@ 0xff
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	18d3      	adds	r3, r2, r3
 800a6da:	3304      	adds	r3, #4
 800a6dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6f6:	187b      	adds	r3, r7, r1
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	2207      	movs	r2, #7
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	0011      	movs	r1, r2
 800a70c:	0018      	movs	r0, r3
 800a70e:	f004 f961 	bl	800e9d4 <USB_EPStartXfer>

  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	0018      	movs	r0, r3
 800a716:	46bd      	mov	sp, r7
 800a718:	b006      	add	sp, #24
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	000a      	movs	r2, r1
 800a726:	1cfb      	adds	r3, r7, #3
 800a728:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a72a:	1cfb      	adds	r3, r7, #3
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2207      	movs	r2, #7
 800a730:	401a      	ands	r2, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	23b8      	movs	r3, #184	@ 0xb8
 800a736:	0059      	lsls	r1, r3, #1
 800a738:	0013      	movs	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	189b      	adds	r3, r3, r2
 800a73e:	00db      	lsls	r3, r3, #3
 800a740:	18c3      	adds	r3, r0, r3
 800a742:	185b      	adds	r3, r3, r1
 800a744:	681b      	ldr	r3, [r3, #0]
}
 800a746:	0018      	movs	r0, r3
 800a748:	46bd      	mov	sp, r7
 800a74a:	b002      	add	sp, #8
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
 800a75a:	200b      	movs	r0, #11
 800a75c:	183b      	adds	r3, r7, r0
 800a75e:	1c0a      	adds	r2, r1, #0
 800a760:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a762:	183b      	adds	r3, r7, r0
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2207      	movs	r2, #7
 800a768:	401a      	ands	r2, r3
 800a76a:	0013      	movs	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	189b      	adds	r3, r3, r2
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	3310      	adds	r3, #16
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	18d3      	adds	r3, r2, r3
 800a778:	3304      	adds	r3, #4
 800a77a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2224      	movs	r2, #36	@ 0x24
 800a78c:	2101      	movs	r1, #1
 800a78e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2200      	movs	r2, #0
 800a79a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7a2:	183b      	adds	r3, r7, r0
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2207      	movs	r2, #7
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	0011      	movs	r1, r2
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f004 f90b 	bl	800e9d4 <USB_EPStartXfer>

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	b006      	add	sp, #24
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	000a      	movs	r2, r1
 800a7d2:	1cfb      	adds	r3, r7, #3
 800a7d4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a7d6:	1cfb      	adds	r3, r7, #3
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2207      	movs	r2, #7
 800a7dc:	4013      	ands	r3, r2
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	7912      	ldrb	r2, [r2, #4]
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d901      	bls.n	800a7ea <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e048      	b.n	800a87c <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a7ea:	1cfb      	adds	r3, r7, #3
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b25b      	sxtb	r3, r3
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da10      	bge.n	800a816 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7f4:	1cfb      	adds	r3, r7, #3
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2207      	movs	r2, #7
 800a7fa:	401a      	ands	r2, r3
 800a7fc:	0013      	movs	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	189b      	adds	r3, r3, r2
 800a802:	00db      	lsls	r3, r3, #3
 800a804:	3310      	adds	r3, #16
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	18d3      	adds	r3, r2, r3
 800a80a:	3304      	adds	r3, #4
 800a80c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2201      	movs	r2, #1
 800a812:	705a      	strb	r2, [r3, #1]
 800a814:	e00e      	b.n	800a834 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a816:	1cfb      	adds	r3, r7, #3
 800a818:	781a      	ldrb	r2, [r3, #0]
 800a81a:	0013      	movs	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	189b      	adds	r3, r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	3351      	adds	r3, #81	@ 0x51
 800a824:	33ff      	adds	r3, #255	@ 0xff
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	18d3      	adds	r3, r2, r3
 800a82a:	3304      	adds	r3, #4
 800a82c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2201      	movs	r2, #1
 800a838:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a83a:	1cfb      	adds	r3, r7, #3
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2207      	movs	r2, #7
 800a840:	4013      	ands	r3, r2
 800a842:	b2da      	uxtb	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	23a5      	movs	r3, #165	@ 0xa5
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	5cd3      	ldrb	r3, [r2, r3]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_PCD_EP_SetStall+0x90>
 800a854:	2302      	movs	r3, #2
 800a856:	e011      	b.n	800a87c <HAL_PCD_EP_SetStall+0xb4>
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	23a5      	movs	r3, #165	@ 0xa5
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	2101      	movs	r1, #1
 800a860:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	0011      	movs	r1, r2
 800a86a:	0018      	movs	r0, r3
 800a86c:	f005 f8c8 	bl	800fa00 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	23a5      	movs	r3, #165	@ 0xa5
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	2100      	movs	r1, #0
 800a878:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	0018      	movs	r0, r3
 800a87e:	46bd      	mov	sp, r7
 800a880:	b004      	add	sp, #16
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	000a      	movs	r2, r1
 800a88e:	1cfb      	adds	r3, r7, #3
 800a890:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a892:	1cfb      	adds	r3, r7, #3
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	220f      	movs	r2, #15
 800a898:	4013      	ands	r3, r2
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	7912      	ldrb	r2, [r2, #4]
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d901      	bls.n	800a8a6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e04a      	b.n	800a93c <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a8a6:	1cfb      	adds	r3, r7, #3
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	b25b      	sxtb	r3, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da10      	bge.n	800a8d2 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8b0:	1cfb      	adds	r3, r7, #3
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2207      	movs	r2, #7
 800a8b6:	401a      	ands	r2, r3
 800a8b8:	0013      	movs	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	189b      	adds	r3, r3, r2
 800a8be:	00db      	lsls	r3, r3, #3
 800a8c0:	3310      	adds	r3, #16
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	18d3      	adds	r3, r2, r3
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	705a      	strb	r2, [r3, #1]
 800a8d0:	e010      	b.n	800a8f4 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a8d2:	1cfb      	adds	r3, r7, #3
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	2207      	movs	r2, #7
 800a8d8:	401a      	ands	r2, r3
 800a8da:	0013      	movs	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	189b      	adds	r3, r3, r2
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	3351      	adds	r3, #81	@ 0x51
 800a8e4:	33ff      	adds	r3, #255	@ 0xff
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	18d3      	adds	r3, r2, r3
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a8fa:	1cfb      	adds	r3, r7, #3
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2207      	movs	r2, #7
 800a900:	4013      	ands	r3, r2
 800a902:	b2da      	uxtb	r2, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	23a5      	movs	r3, #165	@ 0xa5
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	5cd3      	ldrb	r3, [r2, r3]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_PCD_EP_ClrStall+0x94>
 800a914:	2302      	movs	r3, #2
 800a916:	e011      	b.n	800a93c <HAL_PCD_EP_ClrStall+0xb8>
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	23a5      	movs	r3, #165	@ 0xa5
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	2101      	movs	r1, #1
 800a920:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	0011      	movs	r1, r2
 800a92a:	0018      	movs	r0, r3
 800a92c:	f005 f8aa 	bl	800fa84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	23a5      	movs	r3, #165	@ 0xa5
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	2100      	movs	r1, #0
 800a938:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	0018      	movs	r0, r3
 800a93e:	46bd      	mov	sp, r7
 800a940:	b004      	add	sp, #16
 800a942:	bd80      	pop	{r7, pc}

0800a944 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a944:	b5b0      	push	{r4, r5, r7, lr}
 800a946:	b08e      	sub	sp, #56	@ 0x38
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a94c:	e355      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a954:	2022      	movs	r0, #34	@ 0x22
 800a956:	183b      	adds	r3, r7, r0
 800a958:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800a95a:	183b      	adds	r3, r7, r0
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	2421      	movs	r4, #33	@ 0x21
 800a962:	193b      	adds	r3, r7, r4
 800a964:	210f      	movs	r1, #15
 800a966:	400a      	ands	r2, r1
 800a968:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800a96a:	193b      	adds	r3, r7, r4
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d000      	beq.n	800a974 <PCD_EP_ISR_Handler+0x30>
 800a972:	e12b      	b.n	800abcc <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a974:	183b      	adds	r3, r7, r0
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	2210      	movs	r2, #16
 800a97a:	4013      	ands	r3, r2
 800a97c:	d140      	bne.n	800aa00 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4ac5      	ldr	r2, [pc, #788]	@ (800ac9c <PCD_EP_ISR_Handler+0x358>)
 800a986:	4013      	ands	r3, r2
 800a988:	60bb      	str	r3, [r7, #8]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	2180      	movs	r1, #128	@ 0x80
 800a992:	0209      	lsls	r1, r1, #8
 800a994:	430a      	orrs	r2, r1
 800a996:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3314      	adds	r3, #20
 800a99c:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	4abe      	ldr	r2, [pc, #760]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800a9a6:	4694      	mov	ip, r2
 800a9a8:	4463      	add	r3, ip
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	0c1b      	lsrs	r3, r3, #16
 800a9ae:	059b      	lsls	r3, r3, #22
 800a9b0:	0d9a      	lsrs	r2, r3, #22
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b8:	695a      	ldr	r2, [r3, #20]
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	18d2      	adds	r2, r2, r3
 800a9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	0018      	movs	r0, r3
 800a9ca:	f00e fb0f 	bl	8018fec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	7c5b      	ldrb	r3, [r3, #17]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d100      	bne.n	800a9da <PCD_EP_ISR_Handler+0x96>
 800a9d8:	e30f      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
 800a9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d000      	beq.n	800a9e4 <PCD_EP_ISR_Handler+0xa0>
 800a9e2:	e30a      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	7c5b      	ldrb	r3, [r3, #17]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2280      	movs	r2, #128	@ 0x80
 800a9ec:	4252      	negs	r2, r2
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	745a      	strb	r2, [r3, #17]
 800a9fe:	e2fc      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3355      	adds	r3, #85	@ 0x55
 800aa04:	33ff      	adds	r3, #255	@ 0xff
 800aa06:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	2132      	movs	r1, #50	@ 0x32
 800aa10:	187b      	adds	r3, r7, r1
 800aa12:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800aa14:	187b      	adds	r3, r7, r1
 800aa16:	881a      	ldrh	r2, [r3, #0]
 800aa18:	2380      	movs	r3, #128	@ 0x80
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	d029      	beq.n	800aa74 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	0019      	movs	r1, r3
 800aa2a:	0010      	movs	r0, r2
 800aa2c:	f7ff fab4 	bl	8009f98 <PCD_GET_EP_RX_CNT>
 800aa30:	0003      	movs	r3, r0
 800aa32:	001a      	movs	r2, r3
 800aa34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa36:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6818      	ldr	r0, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	22a7      	movs	r2, #167	@ 0xa7
 800aa40:	0092      	lsls	r2, r2, #2
 800aa42:	1899      	adds	r1, r3, r2
 800aa44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa46:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800aa48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f005 f951 	bl	800fcf4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a92      	ldr	r2, [pc, #584]	@ (800aca4 <PCD_EP_ISR_Handler+0x360>)
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	2180      	movs	r1, #128	@ 0x80
 800aa66:	430a      	orrs	r2, r1
 800aa68:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	f00e fa87 	bl	8018f80 <HAL_PCD_SetupStageCallback>
 800aa72:	e2c2      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800aa74:	2332      	movs	r3, #50	@ 0x32
 800aa76:	18fb      	adds	r3, r7, r3
 800aa78:	2200      	movs	r2, #0
 800aa7a:	5e9b      	ldrsh	r3, [r3, r2]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	db00      	blt.n	800aa82 <PCD_EP_ISR_Handler+0x13e>
 800aa80:	e2bb      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a86      	ldr	r2, [pc, #536]	@ (800aca4 <PCD_EP_ISR_Handler+0x360>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa94:	2180      	movs	r1, #128	@ 0x80
 800aa96:	430a      	orrs	r2, r1
 800aa98:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	0019      	movs	r1, r3
 800aaa4:	0010      	movs	r0, r2
 800aaa6:	f7ff fa77 	bl	8009f98 <PCD_GET_EP_RX_CNT>
 800aaaa:	0003      	movs	r3, r0
 800aaac:	001a      	movs	r2, r3
 800aaae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800aab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d01a      	beq.n	800aaf0 <PCD_EP_ISR_Handler+0x1ac>
 800aaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d016      	beq.n	800aaf0 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac8:	6959      	ldr	r1, [r3, #20]
 800aaca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aacc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800aace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	f005 f90e 	bl	800fcf4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800aad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aada:	695a      	ldr	r2, [r3, #20]
 800aadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	18d2      	adds	r2, r2, r3
 800aae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2100      	movs	r1, #0
 800aaea:	0018      	movs	r0, r3
 800aaec:	f00e fa5d 	bl	8018faa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	2132      	movs	r1, #50	@ 0x32
 800aaf8:	187b      	adds	r3, r7, r1
 800aafa:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800aafc:	187b      	adds	r3, r7, r1
 800aafe:	881a      	ldrh	r2, [r3, #0]
 800ab00:	2380      	movs	r3, #128	@ 0x80
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	4013      	ands	r3, r2
 800ab06:	d000      	beq.n	800ab0a <PCD_EP_ISR_Handler+0x1c6>
 800ab08:	e277      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
 800ab0a:	187b      	adds	r3, r7, r1
 800ab0c:	881a      	ldrh	r2, [r3, #0]
 800ab0e:	23c0      	movs	r3, #192	@ 0xc0
 800ab10:	019b      	lsls	r3, r3, #6
 800ab12:	401a      	ands	r2, r3
 800ab14:	23c0      	movs	r3, #192	@ 0xc0
 800ab16:	019b      	lsls	r3, r3, #6
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d100      	bne.n	800ab1e <PCD_EP_ISR_Handler+0x1da>
 800ab1c:	e26d      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ab1e:	4b60      	ldr	r3, [pc, #384]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	4b5f      	ldr	r3, [pc, #380]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab24:	0192      	lsls	r2, r2, #6
 800ab26:	0992      	lsrs	r2, r2, #6
 800ab28:	605a      	str	r2, [r3, #4]
 800ab2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab30:	d916      	bls.n	800ab60 <PCD_EP_ISR_Handler+0x21c>
 800ab32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	095b      	lsrs	r3, r3, #5
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	221f      	movs	r2, #31
 800ab40:	4013      	ands	r3, r2
 800ab42:	d102      	bne.n	800ab4a <PCD_EP_ISR_Handler+0x206>
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	4b55      	ldr	r3, [pc, #340]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	069b      	lsls	r3, r3, #26
 800ab52:	431a      	orrs	r2, r3
 800ab54:	4b52      	ldr	r3, [pc, #328]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab56:	2180      	movs	r1, #128	@ 0x80
 800ab58:	0609      	lsls	r1, r1, #24
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	605a      	str	r2, [r3, #4]
 800ab5e:	e01e      	b.n	800ab9e <PCD_EP_ISR_Handler+0x25a>
 800ab60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d107      	bne.n	800ab78 <PCD_EP_ISR_Handler+0x234>
 800ab68:	4b4d      	ldr	r3, [pc, #308]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	4b4c      	ldr	r3, [pc, #304]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab6e:	2180      	movs	r1, #128	@ 0x80
 800ab70:	0609      	lsls	r1, r1, #24
 800ab72:	430a      	orrs	r2, r1
 800ab74:	605a      	str	r2, [r3, #4]
 800ab76:	e012      	b.n	800ab9e <PCD_EP_ISR_Handler+0x25a>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	085b      	lsrs	r3, r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	2201      	movs	r2, #1
 800ab86:	4013      	ands	r3, r2
 800ab88:	d002      	beq.n	800ab90 <PCD_EP_ISR_Handler+0x24c>
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	4b43      	ldr	r3, [pc, #268]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab92:	6859      	ldr	r1, [r3, #4]
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	069a      	lsls	r2, r3, #26
 800ab98:	4b41      	ldr	r3, [pc, #260]	@ (800aca0 <PCD_EP_ISR_Handler+0x35c>)
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a40      	ldr	r2, [pc, #256]	@ (800aca8 <PCD_EP_ISR_Handler+0x364>)
 800aba6:	4013      	ands	r3, r2
 800aba8:	613b      	str	r3, [r7, #16]
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2280      	movs	r2, #128	@ 0x80
 800abae:	0152      	lsls	r2, r2, #5
 800abb0:	4053      	eors	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2280      	movs	r2, #128	@ 0x80
 800abb8:	0192      	lsls	r2, r2, #6
 800abba:	4053      	eors	r3, r2
 800abbc:	613b      	str	r3, [r7, #16]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	4939      	ldr	r1, [pc, #228]	@ (800acac <PCD_EP_ISR_Handler+0x368>)
 800abc6:	430a      	orrs	r2, r1
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	e216      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	001a      	movs	r2, r3
 800abd2:	2121      	movs	r1, #33	@ 0x21
 800abd4:	187b      	adds	r3, r7, r1
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	18d3      	adds	r3, r2, r3
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	2032      	movs	r0, #50	@ 0x32
 800abe0:	183b      	adds	r3, r7, r0
 800abe2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800abe4:	183b      	adds	r3, r7, r0
 800abe6:	2200      	movs	r2, #0
 800abe8:	5e9b      	ldrsh	r3, [r3, r2]
 800abea:	2b00      	cmp	r3, #0
 800abec:	db00      	blt.n	800abf0 <PCD_EP_ISR_Handler+0x2ac>
 800abee:	e0e0      	b.n	800adb2 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	001a      	movs	r2, r3
 800abf6:	187b      	adds	r3, r7, r1
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	18d3      	adds	r3, r2, r3
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a28      	ldr	r2, [pc, #160]	@ (800aca4 <PCD_EP_ISR_Handler+0x360>)
 800ac02:	4013      	ands	r3, r2
 800ac04:	61fb      	str	r3, [r7, #28]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	001a      	movs	r2, r3
 800ac0c:	0008      	movs	r0, r1
 800ac0e:	187b      	adds	r3, r7, r1
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	18d3      	adds	r3, r2, r3
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	2180      	movs	r1, #128	@ 0x80
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ac1e:	183b      	adds	r3, r7, r0
 800ac20:	781a      	ldrb	r2, [r3, #0]
 800ac22:	0013      	movs	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	189b      	adds	r3, r3, r2
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	3351      	adds	r3, #81	@ 0x51
 800ac2c:	33ff      	adds	r3, #255	@ 0xff
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	18d3      	adds	r3, r2, r3
 800ac32:	3304      	adds	r3, #4
 800ac34:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ac36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac38:	7b1b      	ldrb	r3, [r3, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d11c      	bne.n	800ac78 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2524      	movs	r5, #36	@ 0x24
 800ac48:	197c      	adds	r4, r7, r5
 800ac4a:	0019      	movs	r1, r3
 800ac4c:	0010      	movs	r0, r2
 800ac4e:	f7ff f9a3 	bl	8009f98 <PCD_GET_EP_RX_CNT>
 800ac52:	0003      	movs	r3, r0
 800ac54:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800ac56:	002c      	movs	r4, r5
 800ac58:	193b      	adds	r3, r7, r4
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d100      	bne.n	800ac62 <PCD_EP_ISR_Handler+0x31e>
 800ac60:	e07f      	b.n	800ad62 <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac68:	6959      	ldr	r1, [r3, #20]
 800ac6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac6c:	88da      	ldrh	r2, [r3, #6]
 800ac6e:	193b      	adds	r3, r7, r4
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	f005 f83f 	bl	800fcf4 <USB_ReadPMA>
 800ac76:	e074      	b.n	800ad62 <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ac78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac7a:	78db      	ldrb	r3, [r3, #3]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d117      	bne.n	800acb0 <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ac80:	2324      	movs	r3, #36	@ 0x24
 800ac82:	18fc      	adds	r4, r7, r3
 800ac84:	2332      	movs	r3, #50	@ 0x32
 800ac86:	18fb      	adds	r3, r7, r3
 800ac88:	881a      	ldrh	r2, [r3, #0]
 800ac8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	0018      	movs	r0, r3
 800ac90:	f000 f9c8 	bl	800b024 <HAL_PCD_EP_DB_Receive>
 800ac94:	0003      	movs	r3, r0
 800ac96:	8023      	strh	r3, [r4, #0]
 800ac98:	e063      	b.n	800ad62 <PCD_EP_ISR_Handler+0x41e>
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	07ff8f0f 	.word	0x07ff8f0f
 800aca0:	40009800 	.word	0x40009800
 800aca4:	07ff0f8f 	.word	0x07ff0f8f
 800aca8:	07ffbf8f 	.word	0x07ffbf8f
 800acac:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	001a      	movs	r2, r3
 800acb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	18d3      	adds	r3, r2, r3
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4ad4      	ldr	r2, [pc, #848]	@ (800b014 <PCD_EP_ISR_Handler+0x6d0>)
 800acc2:	4013      	ands	r3, r2
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	001a      	movs	r2, r3
 800accc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	18d3      	adds	r3, r2, r3
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	49d0      	ldr	r1, [pc, #832]	@ (800b018 <PCD_EP_ISR_Handler+0x6d4>)
 800acd8:	430a      	orrs	r2, r1
 800acda:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	001a      	movs	r2, r3
 800ace2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	18d3      	adds	r3, r2, r3
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	2380      	movs	r3, #128	@ 0x80
 800acee:	01db      	lsls	r3, r3, #7
 800acf0:	4013      	ands	r3, r2
 800acf2:	d01b      	beq.n	800ad2c <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2524      	movs	r5, #36	@ 0x24
 800acfe:	197c      	adds	r4, r7, r5
 800ad00:	0019      	movs	r1, r3
 800ad02:	0010      	movs	r0, r2
 800ad04:	f7ff f96a 	bl	8009fdc <PCD_GET_EP_DBUF0_CNT>
 800ad08:	0003      	movs	r3, r0
 800ad0a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800ad0c:	002c      	movs	r4, r5
 800ad0e:	193b      	adds	r3, r7, r4
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d025      	beq.n	800ad62 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad1c:	6959      	ldr	r1, [r3, #20]
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad20:	891a      	ldrh	r2, [r3, #8]
 800ad22:	193b      	adds	r3, r7, r4
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	f004 ffe5 	bl	800fcf4 <USB_ReadPMA>
 800ad2a:	e01a      	b.n	800ad62 <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2524      	movs	r5, #36	@ 0x24
 800ad36:	197c      	adds	r4, r7, r5
 800ad38:	0019      	movs	r1, r3
 800ad3a:	0010      	movs	r0, r2
 800ad3c:	f7ff f970 	bl	800a020 <PCD_GET_EP_DBUF1_CNT>
 800ad40:	0003      	movs	r3, r0
 800ad42:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800ad44:	002c      	movs	r4, r5
 800ad46:	193b      	adds	r3, r7, r4
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d009      	beq.n	800ad62 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad54:	6959      	ldr	r1, [r3, #20]
 800ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad58:	895a      	ldrh	r2, [r3, #10]
 800ad5a:	193b      	adds	r3, r7, r4
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	f004 ffc9 	bl	800fcf4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ad62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad64:	69da      	ldr	r2, [r3, #28]
 800ad66:	2124      	movs	r1, #36	@ 0x24
 800ad68:	187b      	adds	r3, r7, r1
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	18d2      	adds	r2, r2, r3
 800ad6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ad72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad74:	695a      	ldr	r2, [r3, #20]
 800ad76:	187b      	adds	r3, r7, r1
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	18d2      	adds	r2, r2, r3
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ad80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <PCD_EP_ISR_Handler+0x450>
 800ad88:	187b      	adds	r3, r7, r1
 800ad8a:	881a      	ldrh	r2, [r3, #0]
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d207      	bcs.n	800ada4 <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	0011      	movs	r1, r2
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	f00e f904 	bl	8018faa <HAL_PCD_DataOutStageCallback>
 800ada2:	e006      	b.n	800adb2 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adaa:	0011      	movs	r1, r2
 800adac:	0018      	movs	r0, r3
 800adae:	f003 fe11 	bl	800e9d4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800adb2:	2032      	movs	r0, #50	@ 0x32
 800adb4:	183b      	adds	r3, r7, r0
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	2280      	movs	r2, #128	@ 0x80
 800adba:	4013      	ands	r3, r2
 800adbc:	d100      	bne.n	800adc0 <PCD_EP_ISR_Handler+0x47c>
 800adbe:	e11c      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 800adc0:	2121      	movs	r1, #33	@ 0x21
 800adc2:	187b      	adds	r3, r7, r1
 800adc4:	781a      	ldrb	r2, [r3, #0]
 800adc6:	0013      	movs	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	189b      	adds	r3, r3, r2
 800adcc:	00db      	lsls	r3, r3, #3
 800adce:	3310      	adds	r3, #16
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	18d3      	adds	r3, r2, r3
 800add4:	3304      	adds	r3, #4
 800add6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	001a      	movs	r2, r3
 800adde:	187b      	adds	r3, r7, r1
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	18d3      	adds	r3, r2, r3
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a8c      	ldr	r2, [pc, #560]	@ (800b01c <PCD_EP_ISR_Handler+0x6d8>)
 800adea:	4013      	ands	r3, r2
 800adec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	001a      	movs	r2, r3
 800adf4:	187b      	adds	r3, r7, r1
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	18d3      	adds	r3, r2, r3
 800adfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adfe:	2180      	movs	r1, #128	@ 0x80
 800ae00:	0209      	lsls	r1, r1, #8
 800ae02:	430a      	orrs	r2, r1
 800ae04:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ae06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae08:	78db      	ldrb	r3, [r3, #3]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d000      	beq.n	800ae10 <PCD_EP_ISR_Handler+0x4cc>
 800ae0e:	e0a3      	b.n	800af58 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 800ae10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae12:	2200      	movs	r2, #0
 800ae14:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ae16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae18:	7b1b      	ldrb	r3, [r3, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d100      	bne.n	800ae20 <PCD_EP_ISR_Handler+0x4dc>
 800ae1e:	e093      	b.n	800af48 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ae20:	183b      	adds	r3, r7, r0
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	2240      	movs	r2, #64	@ 0x40
 800ae26:	4013      	ands	r3, r2
 800ae28:	d047      	beq.n	800aeba <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d121      	bne.n	800ae76 <PCD_EP_ISR_Handler+0x532>
 800ae32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	4a79      	ldr	r2, [pc, #484]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800ae3a:	4694      	mov	ip, r2
 800ae3c:	4463      	add	r3, ip
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	4976      	ldr	r1, [pc, #472]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800ae48:	468c      	mov	ip, r1
 800ae4a:	4463      	add	r3, ip
 800ae4c:	0192      	lsls	r2, r2, #6
 800ae4e:	0992      	lsrs	r2, r2, #6
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	4a71      	ldr	r2, [pc, #452]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800ae5a:	4694      	mov	ip, r2
 800ae5c:	4463      	add	r3, ip
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	496e      	ldr	r1, [pc, #440]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800ae68:	468c      	mov	ip, r1
 800ae6a:	4463      	add	r3, ip
 800ae6c:	2180      	movs	r1, #128	@ 0x80
 800ae6e:	0609      	lsls	r1, r1, #24
 800ae70:	430a      	orrs	r2, r1
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	e068      	b.n	800af48 <PCD_EP_ISR_Handler+0x604>
 800ae76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d164      	bne.n	800af48 <PCD_EP_ISR_Handler+0x604>
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	4a66      	ldr	r2, [pc, #408]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800ae86:	4694      	mov	ip, r2
 800ae88:	4463      	add	r3, ip
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	4963      	ldr	r1, [pc, #396]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800ae94:	468c      	mov	ip, r1
 800ae96:	4463      	add	r3, ip
 800ae98:	0412      	lsls	r2, r2, #16
 800ae9a:	0c12      	lsrs	r2, r2, #16
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4a5e      	ldr	r2, [pc, #376]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800aea6:	189a      	adds	r2, r3, r2
 800aea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	00db      	lsls	r3, r3, #3
 800aeae:	495c      	ldr	r1, [pc, #368]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800aeb0:	468c      	mov	ip, r1
 800aeb2:	4463      	add	r3, ip
 800aeb4:	6812      	ldr	r2, [r2, #0]
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	e046      	b.n	800af48 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aeba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d121      	bne.n	800af06 <PCD_EP_ISR_Handler+0x5c2>
 800aec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	4a55      	ldr	r2, [pc, #340]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800aeca:	4694      	mov	ip, r2
 800aecc:	4463      	add	r3, ip
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	00db      	lsls	r3, r3, #3
 800aed6:	4952      	ldr	r1, [pc, #328]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800aed8:	468c      	mov	ip, r1
 800aeda:	4463      	add	r3, ip
 800aedc:	0192      	lsls	r2, r2, #6
 800aede:	0992      	lsrs	r2, r2, #6
 800aee0:	605a      	str	r2, [r3, #4]
 800aee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	4a4d      	ldr	r2, [pc, #308]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800aeea:	4694      	mov	ip, r2
 800aeec:	4463      	add	r3, ip
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	494a      	ldr	r1, [pc, #296]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800aef8:	468c      	mov	ip, r1
 800aefa:	4463      	add	r3, ip
 800aefc:	2180      	movs	r1, #128	@ 0x80
 800aefe:	0609      	lsls	r1, r1, #24
 800af00:	430a      	orrs	r2, r1
 800af02:	605a      	str	r2, [r3, #4]
 800af04:	e020      	b.n	800af48 <PCD_EP_ISR_Handler+0x604>
 800af06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af08:	785b      	ldrb	r3, [r3, #1]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d11c      	bne.n	800af48 <PCD_EP_ISR_Handler+0x604>
 800af0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	00db      	lsls	r3, r3, #3
 800af14:	4a42      	ldr	r2, [pc, #264]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800af16:	4694      	mov	ip, r2
 800af18:	4463      	add	r3, ip
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	00db      	lsls	r3, r3, #3
 800af22:	493f      	ldr	r1, [pc, #252]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800af24:	468c      	mov	ip, r1
 800af26:	4463      	add	r3, ip
 800af28:	0412      	lsls	r2, r2, #16
 800af2a:	0c12      	lsrs	r2, r2, #16
 800af2c:	605a      	str	r2, [r3, #4]
 800af2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	4a3a      	ldr	r2, [pc, #232]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800af36:	189a      	adds	r2, r3, r2
 800af38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	4938      	ldr	r1, [pc, #224]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800af40:	468c      	mov	ip, r1
 800af42:	4463      	add	r3, ip
 800af44:	6852      	ldr	r2, [r2, #4]
 800af46:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af4a:	781a      	ldrb	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	0011      	movs	r1, r2
 800af50:	0018      	movs	r0, r3
 800af52:	f00e f84b 	bl	8018fec <HAL_PCD_DataInStageCallback>
 800af56:	e050      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800af58:	2332      	movs	r3, #50	@ 0x32
 800af5a:	18fb      	adds	r3, r7, r3
 800af5c:	881a      	ldrh	r2, [r3, #0]
 800af5e:	2380      	movs	r3, #128	@ 0x80
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	4013      	ands	r3, r2
 800af64:	d141      	bne.n	800afea <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800af66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	4a2c      	ldr	r2, [pc, #176]	@ (800b020 <PCD_EP_ISR_Handler+0x6dc>)
 800af6e:	4694      	mov	ip, r2
 800af70:	4463      	add	r3, ip
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	0c1b      	lsrs	r3, r3, #16
 800af76:	b29a      	uxth	r2, r3
 800af78:	2126      	movs	r1, #38	@ 0x26
 800af7a:	187b      	adds	r3, r7, r1
 800af7c:	0592      	lsls	r2, r2, #22
 800af7e:	0d92      	lsrs	r2, r2, #22
 800af80:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800af82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	187b      	adds	r3, r7, r1
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d907      	bls.n	800af9e <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 800af8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	187b      	adds	r3, r7, r1
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	1ad2      	subs	r2, r2, r3
 800af98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af9a:	619a      	str	r2, [r3, #24]
 800af9c:	e002      	b.n	800afa4 <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 800af9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa0:	2200      	movs	r2, #0
 800afa2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800afa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d107      	bne.n	800afbc <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800afac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afae:	781a      	ldrb	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	0011      	movs	r1, r2
 800afb4:	0018      	movs	r0, r3
 800afb6:	f00e f819 	bl	8018fec <HAL_PCD_DataInStageCallback>
 800afba:	e01e      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800afbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afbe:	695a      	ldr	r2, [r3, #20]
 800afc0:	2126      	movs	r1, #38	@ 0x26
 800afc2:	187b      	adds	r3, r7, r1
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	18d2      	adds	r2, r2, r3
 800afc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afca:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800afcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	187b      	adds	r3, r7, r1
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	18d2      	adds	r2, r2, r3
 800afd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afe0:	0011      	movs	r1, r2
 800afe2:	0018      	movs	r0, r3
 800afe4:	f003 fcf6 	bl	800e9d4 <USB_EPStartXfer>
 800afe8:	e007      	b.n	800affa <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800afea:	2332      	movs	r3, #50	@ 0x32
 800afec:	18fb      	adds	r3, r7, r3
 800afee:	881a      	ldrh	r2, [r3, #0]
 800aff0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	0018      	movs	r0, r3
 800aff6:	f000 f8ff 	bl	800b1f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b000:	2380      	movs	r3, #128	@ 0x80
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	4013      	ands	r3, r2
 800b006:	d000      	beq.n	800b00a <PCD_EP_ISR_Handler+0x6c6>
 800b008:	e4a1      	b.n	800a94e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	0018      	movs	r0, r3
 800b00e:	46bd      	mov	sp, r7
 800b010:	b00e      	add	sp, #56	@ 0x38
 800b012:	bdb0      	pop	{r4, r5, r7, pc}
 800b014:	07ff8f8f 	.word	0x07ff8f8f
 800b018:	000080c0 	.word	0x000080c0
 800b01c:	07ff8f0f 	.word	0x07ff8f0f
 800b020:	40009800 	.word	0x40009800

0800b024 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b024:	b5b0      	push	{r4, r5, r7, lr}
 800b026:	b08a      	sub	sp, #40	@ 0x28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	1dbb      	adds	r3, r7, #6
 800b030:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b032:	1dbb      	adds	r3, r7, #6
 800b034:	881a      	ldrh	r2, [r3, #0]
 800b036:	2380      	movs	r3, #128	@ 0x80
 800b038:	01db      	lsls	r3, r3, #7
 800b03a:	4013      	ands	r3, r2
 800b03c:	d067      	beq.n	800b10e <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	251e      	movs	r5, #30
 800b048:	197c      	adds	r4, r7, r5
 800b04a:	0019      	movs	r1, r3
 800b04c:	0010      	movs	r0, r2
 800b04e:	f7fe ffc5 	bl	8009fdc <PCD_GET_EP_DBUF0_CNT>
 800b052:	0003      	movs	r3, r0
 800b054:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	699a      	ldr	r2, [r3, #24]
 800b05a:	197b      	adds	r3, r7, r5
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d307      	bcc.n	800b072 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	699a      	ldr	r2, [r3, #24]
 800b066:	197b      	adds	r3, r7, r5
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	1ad2      	subs	r2, r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	619a      	str	r2, [r3, #24]
 800b070:	e002      	b.n	800b078 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2200      	movs	r2, #0
 800b076:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d11a      	bne.n	800b0b6 <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	001a      	movs	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	18d3      	adds	r3, r2, r3
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a55      	ldr	r2, [pc, #340]	@ (800b1e8 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800b092:	4013      	ands	r3, r2
 800b094:	61bb      	str	r3, [r7, #24]
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	2280      	movs	r2, #128	@ 0x80
 800b09a:	0192      	lsls	r2, r2, #6
 800b09c:	4053      	eors	r3, r2
 800b09e:	61bb      	str	r3, [r7, #24]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	001a      	movs	r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	18d3      	adds	r3, r2, r3
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	494e      	ldr	r1, [pc, #312]	@ (800b1ec <HAL_PCD_EP_DB_Receive+0x1c8>)
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b0b6:	1dbb      	adds	r3, r7, #6
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	2240      	movs	r2, #64	@ 0x40
 800b0bc:	4013      	ands	r3, r2
 800b0be:	d015      	beq.n	800b0ec <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	001a      	movs	r2, r3
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	18d3      	adds	r3, r2, r3
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a47      	ldr	r2, [pc, #284]	@ (800b1f0 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	001a      	movs	r2, r3
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	18d3      	adds	r3, r2, r3
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	4943      	ldr	r1, [pc, #268]	@ (800b1f4 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800b0ec:	241e      	movs	r4, #30
 800b0ee:	193b      	adds	r3, r7, r4
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d100      	bne.n	800b0f8 <HAL_PCD_EP_DB_Receive+0xd4>
 800b0f6:	e070      	b.n	800b1da <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6959      	ldr	r1, [r3, #20]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	891a      	ldrh	r2, [r3, #8]
 800b104:	193b      	adds	r3, r7, r4
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	f004 fdf4 	bl	800fcf4 <USB_ReadPMA>
 800b10c:	e065      	b.n	800b1da <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	251e      	movs	r5, #30
 800b118:	197c      	adds	r4, r7, r5
 800b11a:	0019      	movs	r1, r3
 800b11c:	0010      	movs	r0, r2
 800b11e:	f7fe ff7f 	bl	800a020 <PCD_GET_EP_DBUF1_CNT>
 800b122:	0003      	movs	r3, r0
 800b124:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	699a      	ldr	r2, [r3, #24]
 800b12a:	197b      	adds	r3, r7, r5
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d307      	bcc.n	800b142 <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	699a      	ldr	r2, [r3, #24]
 800b136:	197b      	adds	r3, r7, r5
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	1ad2      	subs	r2, r2, r3
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	619a      	str	r2, [r3, #24]
 800b140:	e002      	b.n	800b148 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2200      	movs	r2, #0
 800b146:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d11a      	bne.n	800b186 <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	001a      	movs	r2, r3
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	18d3      	adds	r3, r2, r3
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a21      	ldr	r2, [pc, #132]	@ (800b1e8 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800b162:	4013      	ands	r3, r2
 800b164:	627b      	str	r3, [r7, #36]	@ 0x24
 800b166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b168:	2280      	movs	r2, #128	@ 0x80
 800b16a:	0192      	lsls	r2, r2, #6
 800b16c:	4053      	eors	r3, r2
 800b16e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	001a      	movs	r2, r3
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	18d3      	adds	r3, r2, r3
 800b17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b180:	491a      	ldr	r1, [pc, #104]	@ (800b1ec <HAL_PCD_EP_DB_Receive+0x1c8>)
 800b182:	430a      	orrs	r2, r1
 800b184:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b186:	1dbb      	adds	r3, r7, #6
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	2240      	movs	r2, #64	@ 0x40
 800b18c:	4013      	ands	r3, r2
 800b18e:	d115      	bne.n	800b1bc <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	001a      	movs	r2, r3
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	18d3      	adds	r3, r2, r3
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a13      	ldr	r2, [pc, #76]	@ (800b1f0 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	623b      	str	r3, [r7, #32]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	001a      	movs	r2, r3
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	18d3      	adds	r3, r2, r3
 800b1b4:	6a3a      	ldr	r2, [r7, #32]
 800b1b6:	490f      	ldr	r1, [pc, #60]	@ (800b1f4 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800b1bc:	241e      	movs	r4, #30
 800b1be:	193b      	adds	r3, r7, r4
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d009      	beq.n	800b1da <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6959      	ldr	r1, [r3, #20]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	895a      	ldrh	r2, [r3, #10]
 800b1d2:	193b      	adds	r3, r7, r4
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	f004 fd8d 	bl	800fcf4 <USB_ReadPMA>
    }
  }

  return count;
 800b1da:	231e      	movs	r3, #30
 800b1dc:	18fb      	adds	r3, r7, r3
 800b1de:	881b      	ldrh	r3, [r3, #0]
}
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	b00a      	add	sp, #40	@ 0x28
 800b1e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b1e8:	07ffbf8f 	.word	0x07ffbf8f
 800b1ec:	00008080 	.word	0x00008080
 800b1f0:	07ff8f8f 	.word	0x07ff8f8f
 800b1f4:	000080c0 	.word	0x000080c0

0800b1f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b1f8:	b5b0      	push	{r4, r5, r7, lr}
 800b1fa:	b08e      	sub	sp, #56	@ 0x38
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	1dbb      	adds	r3, r7, #6
 800b204:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b206:	1dbb      	adds	r3, r7, #6
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	2240      	movs	r2, #64	@ 0x40
 800b20c:	4013      	ands	r3, r2
 800b20e:	d100      	bne.n	800b212 <HAL_PCD_EP_DB_Transmit+0x1a>
 800b210:	e1c3      	b.n	800b59a <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	251e      	movs	r5, #30
 800b21c:	197c      	adds	r4, r7, r5
 800b21e:	0019      	movs	r1, r3
 800b220:	0010      	movs	r0, r2
 800b222:	f7fe fedb 	bl	8009fdc <PCD_GET_EP_DBUF0_CNT>
 800b226:	0003      	movs	r3, r0
 800b228:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	699a      	ldr	r2, [r3, #24]
 800b22e:	197b      	adds	r3, r7, r5
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d907      	bls.n	800b246 <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	699a      	ldr	r2, [r3, #24]
 800b23a:	197b      	adds	r3, r7, r5
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	619a      	str	r2, [r3, #24]
 800b244:	e002      	b.n	800b24c <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2200      	movs	r2, #0
 800b24a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d000      	beq.n	800b256 <HAL_PCD_EP_DB_Transmit+0x5e>
 800b254:	e0b2      	b.n	800b3bc <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d121      	bne.n	800b2a2 <HAL_PCD_EP_DB_Transmit+0xaa>
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	4ada      	ldr	r2, [pc, #872]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b266:	4694      	mov	ip, r2
 800b268:	4463      	add	r3, ip
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	49d7      	ldr	r1, [pc, #860]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b274:	468c      	mov	ip, r1
 800b276:	4463      	add	r3, ip
 800b278:	0192      	lsls	r2, r2, #6
 800b27a:	0992      	lsrs	r2, r2, #6
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	00db      	lsls	r3, r3, #3
 800b284:	4ad2      	ldr	r2, [pc, #840]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b286:	4694      	mov	ip, r2
 800b288:	4463      	add	r3, ip
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	49cf      	ldr	r1, [pc, #828]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b294:	468c      	mov	ip, r1
 800b296:	4463      	add	r3, ip
 800b298:	2180      	movs	r1, #128	@ 0x80
 800b29a:	0609      	lsls	r1, r1, #24
 800b29c:	430a      	orrs	r2, r1
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e020      	b.n	800b2e4 <HAL_PCD_EP_DB_Transmit+0xec>
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d11c      	bne.n	800b2e4 <HAL_PCD_EP_DB_Transmit+0xec>
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	00db      	lsls	r3, r3, #3
 800b2b0:	4ac7      	ldr	r2, [pc, #796]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b2b2:	4694      	mov	ip, r2
 800b2b4:	4463      	add	r3, ip
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	00db      	lsls	r3, r3, #3
 800b2be:	49c4      	ldr	r1, [pc, #784]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b2c0:	468c      	mov	ip, r1
 800b2c2:	4463      	add	r3, ip
 800b2c4:	0412      	lsls	r2, r2, #16
 800b2c6:	0c12      	lsrs	r2, r2, #16
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4abf      	ldr	r2, [pc, #764]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b2d2:	189a      	adds	r2, r3, r2
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	49bd      	ldr	r1, [pc, #756]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b2dc:	468c      	mov	ip, r1
 800b2de:	4463      	add	r3, ip
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	785b      	ldrb	r3, [r3, #1]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d121      	bne.n	800b330 <HAL_PCD_EP_DB_Transmit+0x138>
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	4ab7      	ldr	r2, [pc, #732]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b2f4:	4694      	mov	ip, r2
 800b2f6:	4463      	add	r3, ip
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	00db      	lsls	r3, r3, #3
 800b300:	49b3      	ldr	r1, [pc, #716]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b302:	468c      	mov	ip, r1
 800b304:	4463      	add	r3, ip
 800b306:	0192      	lsls	r2, r2, #6
 800b308:	0992      	lsrs	r2, r2, #6
 800b30a:	605a      	str	r2, [r3, #4]
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	4aaf      	ldr	r2, [pc, #700]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b314:	4694      	mov	ip, r2
 800b316:	4463      	add	r3, ip
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	49ab      	ldr	r1, [pc, #684]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b322:	468c      	mov	ip, r1
 800b324:	4463      	add	r3, ip
 800b326:	2180      	movs	r1, #128	@ 0x80
 800b328:	0609      	lsls	r1, r1, #24
 800b32a:	430a      	orrs	r2, r1
 800b32c:	605a      	str	r2, [r3, #4]
 800b32e:	e020      	b.n	800b372 <HAL_PCD_EP_DB_Transmit+0x17a>
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	785b      	ldrb	r3, [r3, #1]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d11c      	bne.n	800b372 <HAL_PCD_EP_DB_Transmit+0x17a>
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	4aa4      	ldr	r2, [pc, #656]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b340:	4694      	mov	ip, r2
 800b342:	4463      	add	r3, ip
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	49a0      	ldr	r1, [pc, #640]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b34e:	468c      	mov	ip, r1
 800b350:	4463      	add	r3, ip
 800b352:	0412      	lsls	r2, r2, #16
 800b354:	0c12      	lsrs	r2, r2, #16
 800b356:	605a      	str	r2, [r3, #4]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	00db      	lsls	r3, r3, #3
 800b35e:	4a9c      	ldr	r2, [pc, #624]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b360:	189a      	adds	r2, r3, r2
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	00db      	lsls	r3, r3, #3
 800b368:	4999      	ldr	r1, [pc, #612]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b36a:	468c      	mov	ip, r1
 800b36c:	4463      	add	r3, ip
 800b36e:	6852      	ldr	r2, [r2, #4]
 800b370:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	781a      	ldrb	r2, [r3, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	0011      	movs	r1, r2
 800b37a:	0018      	movs	r0, r3
 800b37c:	f00d fe36 	bl	8018fec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b380:	1dbb      	adds	r3, r7, #6
 800b382:	881a      	ldrh	r2, [r3, #0]
 800b384:	2380      	movs	r3, #128	@ 0x80
 800b386:	01db      	lsls	r3, r3, #7
 800b388:	4013      	ands	r3, r2
 800b38a:	d100      	bne.n	800b38e <HAL_PCD_EP_DB_Transmit+0x196>
 800b38c:	e2d5      	b.n	800b93a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	001a      	movs	r2, r3
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	18d3      	adds	r3, r2, r3
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a8d      	ldr	r2, [pc, #564]	@ (800b5d4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	001a      	movs	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	18d3      	adds	r3, r2, r3
 800b3b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3b4:	4988      	ldr	r1, [pc, #544]	@ (800b5d8 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800b3b6:	430a      	orrs	r2, r1
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	e2be      	b.n	800b93a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b3bc:	1dbb      	adds	r3, r7, #6
 800b3be:	881a      	ldrh	r2, [r3, #0]
 800b3c0:	2380      	movs	r3, #128	@ 0x80
 800b3c2:	01db      	lsls	r3, r3, #7
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	d015      	beq.n	800b3f4 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	001a      	movs	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	18d3      	adds	r3, r2, r3
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a7e      	ldr	r2, [pc, #504]	@ (800b5d4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800b3da:	4013      	ands	r3, r2
 800b3dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	001a      	movs	r2, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	18d3      	adds	r3, r2, r3
 800b3ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3ee:	497a      	ldr	r1, [pc, #488]	@ (800b5d8 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2224      	movs	r2, #36	@ 0x24
 800b3f8:	5c9b      	ldrb	r3, [r3, r2]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d000      	beq.n	800b400 <HAL_PCD_EP_DB_Transmit+0x208>
 800b3fe:	e29c      	b.n	800b93a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	695a      	ldr	r2, [r3, #20]
 800b404:	211e      	movs	r1, #30
 800b406:	187b      	adds	r3, r7, r1
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	18d2      	adds	r2, r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	69da      	ldr	r2, [r3, #28]
 800b414:	187b      	adds	r3, r7, r1
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	18d2      	adds	r2, r2, r3
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6a1a      	ldr	r2, [r3, #32]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	429a      	cmp	r2, r3
 800b428:	d309      	bcc.n	800b43e <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	6a1a      	ldr	r2, [r3, #32]
 800b434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	621a      	str	r2, [r3, #32]
 800b43c:	e016      	b.n	800b46c <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d108      	bne.n	800b458 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 800b446:	231e      	movs	r3, #30
 800b448:	18fb      	adds	r3, r7, r3
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2224      	movs	r2, #36	@ 0x24
 800b452:	2100      	movs	r1, #0
 800b454:	5499      	strb	r1, [r3, r2]
 800b456:	e009      	b.n	800b46c <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2224      	movs	r2, #36	@ 0x24
 800b45c:	2100      	movs	r1, #0
 800b45e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2200      	movs	r2, #0
 800b46a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	785b      	ldrb	r3, [r3, #1]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d162      	bne.n	800b53a <HAL_PCD_EP_DB_Transmit+0x342>
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	00db      	lsls	r3, r3, #3
 800b47a:	4a55      	ldr	r2, [pc, #340]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b47c:	4694      	mov	ip, r2
 800b47e:	4463      	add	r3, ip
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	4951      	ldr	r1, [pc, #324]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b48a:	468c      	mov	ip, r1
 800b48c:	4463      	add	r3, ip
 800b48e:	0192      	lsls	r2, r2, #6
 800b490:	0992      	lsrs	r2, r2, #6
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b496:	2b3e      	cmp	r3, #62	@ 0x3e
 800b498:	d91e      	bls.n	800b4d8 <HAL_PCD_EP_DB_Transmit+0x2e0>
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	095b      	lsrs	r3, r3, #5
 800b49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a2:	221f      	movs	r2, #31
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	d102      	bne.n	800b4ae <HAL_PCD_EP_DB_Transmit+0x2b6>
 800b4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4a46      	ldr	r2, [pc, #280]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b4b6:	4694      	mov	ip, r2
 800b4b8:	4463      	add	r3, ip
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4be:	069b      	lsls	r3, r3, #26
 800b4c0:	431a      	orrs	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	00db      	lsls	r3, r3, #3
 800b4c8:	4941      	ldr	r1, [pc, #260]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b4ca:	468c      	mov	ip, r1
 800b4cc:	4463      	add	r3, ip
 800b4ce:	2180      	movs	r1, #128	@ 0x80
 800b4d0:	0609      	lsls	r1, r1, #24
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	601a      	str	r2, [r3, #0]
 800b4d6:	e055      	b.n	800b584 <HAL_PCD_EP_DB_Transmit+0x38c>
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d111      	bne.n	800b502 <HAL_PCD_EP_DB_Transmit+0x30a>
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	4a3a      	ldr	r2, [pc, #232]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b4e6:	4694      	mov	ip, r2
 800b4e8:	4463      	add	r3, ip
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	00db      	lsls	r3, r3, #3
 800b4f2:	4937      	ldr	r1, [pc, #220]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b4f4:	468c      	mov	ip, r1
 800b4f6:	4463      	add	r3, ip
 800b4f8:	2180      	movs	r1, #128	@ 0x80
 800b4fa:	0609      	lsls	r1, r1, #24
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	601a      	str	r2, [r3, #0]
 800b500:	e040      	b.n	800b584 <HAL_PCD_EP_DB_Transmit+0x38c>
 800b502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b504:	085b      	lsrs	r3, r3, #1
 800b506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50a:	2201      	movs	r2, #1
 800b50c:	4013      	ands	r3, r2
 800b50e:	d002      	beq.n	800b516 <HAL_PCD_EP_DB_Transmit+0x31e>
 800b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b512:	3301      	adds	r3, #1
 800b514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	4a2c      	ldr	r2, [pc, #176]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b51e:	4694      	mov	ip, r2
 800b520:	4463      	add	r3, ip
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b526:	069a      	lsls	r2, r3, #26
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	4828      	ldr	r0, [pc, #160]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b530:	4684      	mov	ip, r0
 800b532:	4463      	add	r3, ip
 800b534:	430a      	orrs	r2, r1
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	e024      	b.n	800b584 <HAL_PCD_EP_DB_Transmit+0x38c>
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	785b      	ldrb	r3, [r3, #1]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d120      	bne.n	800b584 <HAL_PCD_EP_DB_Transmit+0x38c>
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	4a21      	ldr	r2, [pc, #132]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b54a:	4694      	mov	ip, r2
 800b54c:	4463      	add	r3, ip
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	491e      	ldr	r1, [pc, #120]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b558:	468c      	mov	ip, r1
 800b55a:	4463      	add	r3, ip
 800b55c:	0412      	lsls	r2, r2, #16
 800b55e:	0c12      	lsrs	r2, r2, #16
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	00db      	lsls	r3, r3, #3
 800b568:	4a19      	ldr	r2, [pc, #100]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b56a:	4694      	mov	ip, r2
 800b56c:	4463      	add	r3, ip
 800b56e:	6819      	ldr	r1, [r3, #0]
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b572:	041a      	lsls	r2, r3, #16
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	00db      	lsls	r3, r3, #3
 800b57a:	4815      	ldr	r0, [pc, #84]	@ (800b5d0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800b57c:	4684      	mov	ip, r0
 800b57e:	4463      	add	r3, ip
 800b580:	430a      	orrs	r2, r1
 800b582:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	6959      	ldr	r1, [r3, #20]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	891a      	ldrh	r2, [r3, #8]
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	b29b      	uxth	r3, r3
 800b594:	f004 fb38 	bl	800fc08 <USB_WritePMA>
 800b598:	e1cf      	b.n	800b93a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	251e      	movs	r5, #30
 800b5a4:	197c      	adds	r4, r7, r5
 800b5a6:	0019      	movs	r1, r3
 800b5a8:	0010      	movs	r0, r2
 800b5aa:	f7fe fd39 	bl	800a020 <PCD_GET_EP_DBUF1_CNT>
 800b5ae:	0003      	movs	r3, r0
 800b5b0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	699a      	ldr	r2, [r3, #24]
 800b5b6:	197b      	adds	r3, r7, r5
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d30e      	bcc.n	800b5dc <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	197b      	adds	r3, r7, r5
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	1ad2      	subs	r2, r2, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	619a      	str	r2, [r3, #24]
 800b5cc:	e009      	b.n	800b5e2 <HAL_PCD_EP_DB_Transmit+0x3ea>
 800b5ce:	46c0      	nop			@ (mov r8, r8)
 800b5d0:	40009800 	.word	0x40009800
 800b5d4:	07ff8f8f 	.word	0x07ff8f8f
 800b5d8:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d000      	beq.n	800b5ec <HAL_PCD_EP_DB_Transmit+0x3f4>
 800b5ea:	e0b2      	b.n	800b752 <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	785b      	ldrb	r3, [r3, #1]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d121      	bne.n	800b638 <HAL_PCD_EP_DB_Transmit+0x440>
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	00db      	lsls	r3, r3, #3
 800b5fa:	4ab5      	ldr	r2, [pc, #724]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b5fc:	4694      	mov	ip, r2
 800b5fe:	4463      	add	r3, ip
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	49b1      	ldr	r1, [pc, #708]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b60a:	468c      	mov	ip, r1
 800b60c:	4463      	add	r3, ip
 800b60e:	0192      	lsls	r2, r2, #6
 800b610:	0992      	lsrs	r2, r2, #6
 800b612:	601a      	str	r2, [r3, #0]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	00db      	lsls	r3, r3, #3
 800b61a:	4aad      	ldr	r2, [pc, #692]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b61c:	4694      	mov	ip, r2
 800b61e:	4463      	add	r3, ip
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	00db      	lsls	r3, r3, #3
 800b628:	49a9      	ldr	r1, [pc, #676]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b62a:	468c      	mov	ip, r1
 800b62c:	4463      	add	r3, ip
 800b62e:	2180      	movs	r1, #128	@ 0x80
 800b630:	0609      	lsls	r1, r1, #24
 800b632:	430a      	orrs	r2, r1
 800b634:	601a      	str	r2, [r3, #0]
 800b636:	e020      	b.n	800b67a <HAL_PCD_EP_DB_Transmit+0x482>
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d11c      	bne.n	800b67a <HAL_PCD_EP_DB_Transmit+0x482>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	4aa2      	ldr	r2, [pc, #648]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b648:	4694      	mov	ip, r2
 800b64a:	4463      	add	r3, ip
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	00db      	lsls	r3, r3, #3
 800b654:	499e      	ldr	r1, [pc, #632]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b656:	468c      	mov	ip, r1
 800b658:	4463      	add	r3, ip
 800b65a:	0412      	lsls	r2, r2, #16
 800b65c:	0c12      	lsrs	r2, r2, #16
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	00db      	lsls	r3, r3, #3
 800b666:	4a9a      	ldr	r2, [pc, #616]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b668:	189a      	adds	r2, r3, r2
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	00db      	lsls	r3, r3, #3
 800b670:	4997      	ldr	r1, [pc, #604]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b672:	468c      	mov	ip, r1
 800b674:	4463      	add	r3, ip
 800b676:	6812      	ldr	r2, [r2, #0]
 800b678:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d121      	bne.n	800b6c6 <HAL_PCD_EP_DB_Transmit+0x4ce>
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	4a91      	ldr	r2, [pc, #580]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b68a:	4694      	mov	ip, r2
 800b68c:	4463      	add	r3, ip
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	00db      	lsls	r3, r3, #3
 800b696:	498e      	ldr	r1, [pc, #568]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b698:	468c      	mov	ip, r1
 800b69a:	4463      	add	r3, ip
 800b69c:	0192      	lsls	r2, r2, #6
 800b69e:	0992      	lsrs	r2, r2, #6
 800b6a0:	605a      	str	r2, [r3, #4]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	4a89      	ldr	r2, [pc, #548]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b6aa:	4694      	mov	ip, r2
 800b6ac:	4463      	add	r3, ip
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	00db      	lsls	r3, r3, #3
 800b6b6:	4986      	ldr	r1, [pc, #536]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b6b8:	468c      	mov	ip, r1
 800b6ba:	4463      	add	r3, ip
 800b6bc:	2180      	movs	r1, #128	@ 0x80
 800b6be:	0609      	lsls	r1, r1, #24
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	605a      	str	r2, [r3, #4]
 800b6c4:	e020      	b.n	800b708 <HAL_PCD_EP_DB_Transmit+0x510>
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d11c      	bne.n	800b708 <HAL_PCD_EP_DB_Transmit+0x510>
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	00db      	lsls	r3, r3, #3
 800b6d4:	4a7e      	ldr	r2, [pc, #504]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b6d6:	4694      	mov	ip, r2
 800b6d8:	4463      	add	r3, ip
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	497b      	ldr	r1, [pc, #492]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b6e4:	468c      	mov	ip, r1
 800b6e6:	4463      	add	r3, ip
 800b6e8:	0412      	lsls	r2, r2, #16
 800b6ea:	0c12      	lsrs	r2, r2, #16
 800b6ec:	605a      	str	r2, [r3, #4]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	4a76      	ldr	r2, [pc, #472]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b6f6:	189a      	adds	r2, r3, r2
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	4974      	ldr	r1, [pc, #464]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b700:	468c      	mov	ip, r1
 800b702:	4463      	add	r3, ip
 800b704:	6852      	ldr	r2, [r2, #4]
 800b706:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	781a      	ldrb	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	0011      	movs	r1, r2
 800b710:	0018      	movs	r0, r3
 800b712:	f00d fc6b 	bl	8018fec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b716:	1dbb      	adds	r3, r7, #6
 800b718:	881a      	ldrh	r2, [r3, #0]
 800b71a:	2380      	movs	r3, #128	@ 0x80
 800b71c:	01db      	lsls	r3, r3, #7
 800b71e:	4013      	ands	r3, r2
 800b720:	d000      	beq.n	800b724 <HAL_PCD_EP_DB_Transmit+0x52c>
 800b722:	e10a      	b.n	800b93a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	001a      	movs	r2, r3
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	18d3      	adds	r3, r2, r3
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a67      	ldr	r2, [pc, #412]	@ (800b8d4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800b736:	4013      	ands	r3, r2
 800b738:	623b      	str	r3, [r7, #32]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	001a      	movs	r2, r3
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	18d3      	adds	r3, r2, r3
 800b748:	6a3a      	ldr	r2, [r7, #32]
 800b74a:	4963      	ldr	r1, [pc, #396]	@ (800b8d8 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800b74c:	430a      	orrs	r2, r1
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	e0f3      	b.n	800b93a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b752:	1dbb      	adds	r3, r7, #6
 800b754:	881a      	ldrh	r2, [r3, #0]
 800b756:	2380      	movs	r3, #128	@ 0x80
 800b758:	01db      	lsls	r3, r3, #7
 800b75a:	4013      	ands	r3, r2
 800b75c:	d115      	bne.n	800b78a <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	001a      	movs	r2, r3
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	18d3      	adds	r3, r2, r3
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a59      	ldr	r2, [pc, #356]	@ (800b8d4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800b770:	4013      	ands	r3, r2
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	001a      	movs	r2, r3
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	18d3      	adds	r3, r2, r3
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	4954      	ldr	r1, [pc, #336]	@ (800b8d8 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800b786:	430a      	orrs	r2, r1
 800b788:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2224      	movs	r2, #36	@ 0x24
 800b78e:	5c9b      	ldrb	r3, [r3, r2]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d000      	beq.n	800b796 <HAL_PCD_EP_DB_Transmit+0x59e>
 800b794:	e0d1      	b.n	800b93a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	695a      	ldr	r2, [r3, #20]
 800b79a:	211e      	movs	r1, #30
 800b79c:	187b      	adds	r3, r7, r1
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	18d2      	adds	r2, r2, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	69da      	ldr	r2, [r3, #28]
 800b7aa:	187b      	adds	r3, r7, r1
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	18d2      	adds	r2, r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	6a1a      	ldr	r2, [r3, #32]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d309      	bcc.n	800b7d4 <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	6a1a      	ldr	r2, [r3, #32]
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	1ad2      	subs	r2, r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	621a      	str	r2, [r3, #32]
 800b7d2:	e016      	b.n	800b802 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	6a1b      	ldr	r3, [r3, #32]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d108      	bne.n	800b7ee <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 800b7dc:	231e      	movs	r3, #30
 800b7de:	18fb      	adds	r3, r7, r3
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2224      	movs	r2, #36	@ 0x24
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	5499      	strb	r1, [r3, r2]
 800b7ec:	e009      	b.n	800b802 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2224      	movs	r2, #36	@ 0x24
 800b7fe:	2100      	movs	r1, #0
 800b800:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	785b      	ldrb	r3, [r3, #1]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d168      	bne.n	800b8dc <HAL_PCD_EP_DB_Transmit+0x6e4>
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	4a2f      	ldr	r2, [pc, #188]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b812:	4694      	mov	ip, r2
 800b814:	4463      	add	r3, ip
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	492c      	ldr	r1, [pc, #176]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b820:	468c      	mov	ip, r1
 800b822:	4463      	add	r3, ip
 800b824:	0192      	lsls	r2, r2, #6
 800b826:	0992      	lsrs	r2, r2, #6
 800b828:	605a      	str	r2, [r3, #4]
 800b82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b82e:	d91e      	bls.n	800b86e <HAL_PCD_EP_DB_Transmit+0x676>
 800b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b832:	095b      	lsrs	r3, r3, #5
 800b834:	61bb      	str	r3, [r7, #24]
 800b836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b838:	221f      	movs	r2, #31
 800b83a:	4013      	ands	r3, r2
 800b83c:	d102      	bne.n	800b844 <HAL_PCD_EP_DB_Transmit+0x64c>
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	3b01      	subs	r3, #1
 800b842:	61bb      	str	r3, [r7, #24]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	4a21      	ldr	r2, [pc, #132]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b84c:	4694      	mov	ip, r2
 800b84e:	4463      	add	r3, ip
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	069b      	lsls	r3, r3, #26
 800b856:	431a      	orrs	r2, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	491c      	ldr	r1, [pc, #112]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b860:	468c      	mov	ip, r1
 800b862:	4463      	add	r3, ip
 800b864:	2180      	movs	r1, #128	@ 0x80
 800b866:	0609      	lsls	r1, r1, #24
 800b868:	430a      	orrs	r2, r1
 800b86a:	605a      	str	r2, [r3, #4]
 800b86c:	e05b      	b.n	800b926 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b870:	2b00      	cmp	r3, #0
 800b872:	d111      	bne.n	800b898 <HAL_PCD_EP_DB_Transmit+0x6a0>
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	4a15      	ldr	r2, [pc, #84]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b87c:	4694      	mov	ip, r2
 800b87e:	4463      	add	r3, ip
 800b880:	685a      	ldr	r2, [r3, #4]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	4911      	ldr	r1, [pc, #68]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b88a:	468c      	mov	ip, r1
 800b88c:	4463      	add	r3, ip
 800b88e:	2180      	movs	r1, #128	@ 0x80
 800b890:	0609      	lsls	r1, r1, #24
 800b892:	430a      	orrs	r2, r1
 800b894:	605a      	str	r2, [r3, #4]
 800b896:	e046      	b.n	800b926 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89a:	085b      	lsrs	r3, r3, #1
 800b89c:	61bb      	str	r3, [r7, #24]
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	d002      	beq.n	800b8ac <HAL_PCD_EP_DB_Transmit+0x6b4>
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	61bb      	str	r3, [r7, #24]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	4a07      	ldr	r2, [pc, #28]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b8b4:	4694      	mov	ip, r2
 800b8b6:	4463      	add	r3, ip
 800b8b8:	6859      	ldr	r1, [r3, #4]
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	069a      	lsls	r2, r3, #26
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	4802      	ldr	r0, [pc, #8]	@ (800b8d0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b8c6:	4684      	mov	ip, r0
 800b8c8:	4463      	add	r3, ip
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	605a      	str	r2, [r3, #4]
 800b8ce:	e02a      	b.n	800b926 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b8d0:	40009800 	.word	0x40009800
 800b8d4:	07ff8f8f 	.word	0x07ff8f8f
 800b8d8:	0000c080 	.word	0x0000c080
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	785b      	ldrb	r3, [r3, #1]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d120      	bne.n	800b926 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	4a25      	ldr	r2, [pc, #148]	@ (800b980 <HAL_PCD_EP_DB_Transmit+0x788>)
 800b8ec:	4694      	mov	ip, r2
 800b8ee:	4463      	add	r3, ip
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	4921      	ldr	r1, [pc, #132]	@ (800b980 <HAL_PCD_EP_DB_Transmit+0x788>)
 800b8fa:	468c      	mov	ip, r1
 800b8fc:	4463      	add	r3, ip
 800b8fe:	0412      	lsls	r2, r2, #16
 800b900:	0c12      	lsrs	r2, r2, #16
 800b902:	605a      	str	r2, [r3, #4]
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	4a1d      	ldr	r2, [pc, #116]	@ (800b980 <HAL_PCD_EP_DB_Transmit+0x788>)
 800b90c:	4694      	mov	ip, r2
 800b90e:	4463      	add	r3, ip
 800b910:	6859      	ldr	r1, [r3, #4]
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	041a      	lsls	r2, r3, #16
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	4818      	ldr	r0, [pc, #96]	@ (800b980 <HAL_PCD_EP_DB_Transmit+0x788>)
 800b91e:	4684      	mov	ip, r0
 800b920:	4463      	add	r3, ip
 800b922:	430a      	orrs	r2, r1
 800b924:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	6959      	ldr	r1, [r3, #20]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	895a      	ldrh	r2, [r3, #10]
 800b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b934:	b29b      	uxth	r3, r3
 800b936:	f004 f967 	bl	800fc08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	001a      	movs	r2, r3
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	18d3      	adds	r3, r2, r3
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a0e      	ldr	r2, [pc, #56]	@ (800b984 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800b94c:	4013      	ands	r3, r2
 800b94e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b952:	2210      	movs	r2, #16
 800b954:	4053      	eors	r3, r2
 800b956:	633b      	str	r3, [r7, #48]	@ 0x30
 800b958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95a:	2220      	movs	r2, #32
 800b95c:	4053      	eors	r3, r2
 800b95e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	001a      	movs	r2, r3
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	18d3      	adds	r3, r2, r3
 800b96e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b970:	4905      	ldr	r1, [pc, #20]	@ (800b988 <HAL_PCD_EP_DB_Transmit+0x790>)
 800b972:	430a      	orrs	r2, r1
 800b974:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	0018      	movs	r0, r3
 800b97a:	46bd      	mov	sp, r7
 800b97c:	b00e      	add	sp, #56	@ 0x38
 800b97e:	bdb0      	pop	{r4, r5, r7, pc}
 800b980:	40009800 	.word	0x40009800
 800b984:	07ff8fbf 	.word	0x07ff8fbf
 800b988:	00008080 	.word	0x00008080

0800b98c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	0008      	movs	r0, r1
 800b996:	0011      	movs	r1, r2
 800b998:	607b      	str	r3, [r7, #4]
 800b99a:	240a      	movs	r4, #10
 800b99c:	193b      	adds	r3, r7, r4
 800b99e:	1c02      	adds	r2, r0, #0
 800b9a0:	801a      	strh	r2, [r3, #0]
 800b9a2:	2308      	movs	r3, #8
 800b9a4:	18fb      	adds	r3, r7, r3
 800b9a6:	1c0a      	adds	r2, r1, #0
 800b9a8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b9aa:	0021      	movs	r1, r4
 800b9ac:	187b      	adds	r3, r7, r1
 800b9ae:	881b      	ldrh	r3, [r3, #0]
 800b9b0:	2280      	movs	r2, #128	@ 0x80
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00d      	beq.n	800b9d6 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9ba:	187b      	adds	r3, r7, r1
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	2207      	movs	r2, #7
 800b9c0:	401a      	ands	r2, r3
 800b9c2:	0013      	movs	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	189b      	adds	r3, r3, r2
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	3310      	adds	r3, #16
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	18d3      	adds	r3, r2, r3
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	617b      	str	r3, [r7, #20]
 800b9d4:	e00c      	b.n	800b9f0 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b9d6:	230a      	movs	r3, #10
 800b9d8:	18fb      	adds	r3, r7, r3
 800b9da:	881a      	ldrh	r2, [r3, #0]
 800b9dc:	0013      	movs	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	189b      	adds	r3, r3, r2
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	3351      	adds	r3, #81	@ 0x51
 800b9e6:	33ff      	adds	r3, #255	@ 0xff
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	18d3      	adds	r3, r2, r3
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b9f0:	2308      	movs	r3, #8
 800b9f2:	18fb      	adds	r3, r7, r3
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d107      	bne.n	800ba0a <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	80da      	strh	r2, [r3, #6]
 800ba08:	e00b      	b.n	800ba22 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	0c1b      	lsrs	r3, r3, #16
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	0018      	movs	r0, r3
 800ba26:	46bd      	mov	sp, r7
 800ba28:	b007      	add	sp, #28
 800ba2a:	bd90      	pop	{r4, r7, pc}

0800ba2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	23b5      	movs	r3, #181	@ 0xb5
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	2101      	movs	r1, #1
 800ba42:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	23b3      	movs	r3, #179	@ 0xb3
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba52:	2201      	movs	r2, #1
 800ba54:	431a      	orrs	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba5e:	2202      	movs	r2, #2
 800ba60:	431a      	orrs	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	0018      	movs	r0, r3
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	b004      	add	sp, #16
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ba74:	4b04      	ldr	r3, [pc, #16]	@ (800ba88 <HAL_PWREx_EnableVddUSB+0x18>)
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	4b03      	ldr	r3, [pc, #12]	@ (800ba88 <HAL_PWREx_EnableVddUSB+0x18>)
 800ba7a:	2180      	movs	r1, #128	@ 0x80
 800ba7c:	00c9      	lsls	r1, r1, #3
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	605a      	str	r2, [r3, #4]
}
 800ba82:	46c0      	nop			@ (mov r8, r8)
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	40007000 	.word	0x40007000

0800ba8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800ba94:	4b19      	ldr	r3, [pc, #100]	@ (800bafc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a19      	ldr	r2, [pc, #100]	@ (800bb00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	0019      	movs	r1, r3
 800ba9e:	4b17      	ldr	r3, [pc, #92]	@ (800bafc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	2380      	movs	r3, #128	@ 0x80
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	429a      	cmp	r2, r3
 800baae:	d11f      	bne.n	800baf0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800bab0:	4b14      	ldr	r3, [pc, #80]	@ (800bb04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	0013      	movs	r3, r2
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	189b      	adds	r3, r3, r2
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	4912      	ldr	r1, [pc, #72]	@ (800bb08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800babe:	0018      	movs	r0, r3
 800bac0:	f7fa fb84 	bl	80061cc <__udivsi3>
 800bac4:	0003      	movs	r3, r0
 800bac6:	3301      	adds	r3, #1
 800bac8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800baca:	e008      	b.n	800bade <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3b01      	subs	r3, #1
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	e001      	b.n	800bade <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e009      	b.n	800baf2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bade:	4b07      	ldr	r3, [pc, #28]	@ (800bafc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800bae0:	695a      	ldr	r2, [r3, #20]
 800bae2:	2380      	movs	r3, #128	@ 0x80
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	401a      	ands	r2, r3
 800bae8:	2380      	movs	r3, #128	@ 0x80
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	429a      	cmp	r2, r3
 800baee:	d0ed      	beq.n	800bacc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	0018      	movs	r0, r3
 800baf4:	46bd      	mov	sp, r7
 800baf6:	b004      	add	sp, #16
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	40007000 	.word	0x40007000
 800bb00:	fffff9ff 	.word	0xfffff9ff
 800bb04:	20000028 	.word	0x20000028
 800bb08:	000f4240 	.word	0x000f4240

0800bb0c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800bb10:	4b03      	ldr	r3, [pc, #12]	@ (800bb20 <LL_RCC_GetAPB1Prescaler+0x14>)
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	23e0      	movs	r3, #224	@ 0xe0
 800bb16:	01db      	lsls	r3, r3, #7
 800bb18:	4013      	ands	r3, r2
}
 800bb1a:	0018      	movs	r0, r3
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	40021000 	.word	0x40021000

0800bb24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	f000 fb50 	bl	800c1d8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	4013      	ands	r3, r2
 800bb40:	d100      	bne.n	800bb44 <HAL_RCC_OscConfig+0x20>
 800bb42:	e07c      	b.n	800bc3e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb44:	4bc3      	ldr	r3, [pc, #780]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	2238      	movs	r2, #56	@ 0x38
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb4e:	4bc1      	ldr	r3, [pc, #772]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	2203      	movs	r2, #3
 800bb54:	4013      	ands	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	2b10      	cmp	r3, #16
 800bb5c:	d102      	bne.n	800bb64 <HAL_RCC_OscConfig+0x40>
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d002      	beq.n	800bb6a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	2b08      	cmp	r3, #8
 800bb68:	d10b      	bne.n	800bb82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb6a:	4bba      	ldr	r3, [pc, #744]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	2380      	movs	r3, #128	@ 0x80
 800bb70:	029b      	lsls	r3, r3, #10
 800bb72:	4013      	ands	r3, r2
 800bb74:	d062      	beq.n	800bc3c <HAL_RCC_OscConfig+0x118>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d15e      	bne.n	800bc3c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e32a      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	2380      	movs	r3, #128	@ 0x80
 800bb88:	025b      	lsls	r3, r3, #9
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d107      	bne.n	800bb9e <HAL_RCC_OscConfig+0x7a>
 800bb8e:	4bb1      	ldr	r3, [pc, #708]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4bb0      	ldr	r3, [pc, #704]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bb94:	2180      	movs	r1, #128	@ 0x80
 800bb96:	0249      	lsls	r1, r1, #9
 800bb98:	430a      	orrs	r2, r1
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	e020      	b.n	800bbe0 <HAL_RCC_OscConfig+0xbc>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	23a0      	movs	r3, #160	@ 0xa0
 800bba4:	02db      	lsls	r3, r3, #11
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d10e      	bne.n	800bbc8 <HAL_RCC_OscConfig+0xa4>
 800bbaa:	4baa      	ldr	r3, [pc, #680]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	4ba9      	ldr	r3, [pc, #676]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbb0:	2180      	movs	r1, #128	@ 0x80
 800bbb2:	02c9      	lsls	r1, r1, #11
 800bbb4:	430a      	orrs	r2, r1
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	4ba6      	ldr	r3, [pc, #664]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	4ba5      	ldr	r3, [pc, #660]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbbe:	2180      	movs	r1, #128	@ 0x80
 800bbc0:	0249      	lsls	r1, r1, #9
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	e00b      	b.n	800bbe0 <HAL_RCC_OscConfig+0xbc>
 800bbc8:	4ba2      	ldr	r3, [pc, #648]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	4ba1      	ldr	r3, [pc, #644]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbce:	49a2      	ldr	r1, [pc, #648]	@ (800be58 <HAL_RCC_OscConfig+0x334>)
 800bbd0:	400a      	ands	r2, r1
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	4b9f      	ldr	r3, [pc, #636]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	4b9e      	ldr	r3, [pc, #632]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bbda:	49a0      	ldr	r1, [pc, #640]	@ (800be5c <HAL_RCC_OscConfig+0x338>)
 800bbdc:	400a      	ands	r2, r1
 800bbde:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d014      	beq.n	800bc12 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbe8:	f7fd f8a4 	bl	8008d34 <HAL_GetTick>
 800bbec:	0003      	movs	r3, r0
 800bbee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bbf0:	e008      	b.n	800bc04 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbf2:	f7fd f89f 	bl	8008d34 <HAL_GetTick>
 800bbf6:	0002      	movs	r2, r0
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	2b64      	cmp	r3, #100	@ 0x64
 800bbfe:	d901      	bls.n	800bc04 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e2e9      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc04:	4b93      	ldr	r3, [pc, #588]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	2380      	movs	r3, #128	@ 0x80
 800bc0a:	029b      	lsls	r3, r3, #10
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	d0f0      	beq.n	800bbf2 <HAL_RCC_OscConfig+0xce>
 800bc10:	e015      	b.n	800bc3e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc12:	f7fd f88f 	bl	8008d34 <HAL_GetTick>
 800bc16:	0003      	movs	r3, r0
 800bc18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc1a:	e008      	b.n	800bc2e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc1c:	f7fd f88a 	bl	8008d34 <HAL_GetTick>
 800bc20:	0002      	movs	r2, r0
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b64      	cmp	r3, #100	@ 0x64
 800bc28:	d901      	bls.n	800bc2e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e2d4      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc2e:	4b89      	ldr	r3, [pc, #548]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	2380      	movs	r3, #128	@ 0x80
 800bc34:	029b      	lsls	r3, r3, #10
 800bc36:	4013      	ands	r3, r2
 800bc38:	d1f0      	bne.n	800bc1c <HAL_RCC_OscConfig+0xf8>
 800bc3a:	e000      	b.n	800bc3e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc3c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2202      	movs	r2, #2
 800bc44:	4013      	ands	r3, r2
 800bc46:	d100      	bne.n	800bc4a <HAL_RCC_OscConfig+0x126>
 800bc48:	e099      	b.n	800bd7e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc4a:	4b82      	ldr	r3, [pc, #520]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	2238      	movs	r2, #56	@ 0x38
 800bc50:	4013      	ands	r3, r2
 800bc52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc54:	4b7f      	ldr	r3, [pc, #508]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	2203      	movs	r2, #3
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	2b10      	cmp	r3, #16
 800bc62:	d102      	bne.n	800bc6a <HAL_RCC_OscConfig+0x146>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d002      	beq.n	800bc70 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d135      	bne.n	800bcdc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc70:	4b78      	ldr	r3, [pc, #480]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	2380      	movs	r3, #128	@ 0x80
 800bc76:	00db      	lsls	r3, r3, #3
 800bc78:	4013      	ands	r3, r2
 800bc7a:	d005      	beq.n	800bc88 <HAL_RCC_OscConfig+0x164>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e2a7      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc88:	4b72      	ldr	r3, [pc, #456]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	4a74      	ldr	r2, [pc, #464]	@ (800be60 <HAL_RCC_OscConfig+0x33c>)
 800bc8e:	4013      	ands	r3, r2
 800bc90:	0019      	movs	r1, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	021a      	lsls	r2, r3, #8
 800bc98:	4b6e      	ldr	r3, [pc, #440]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d112      	bne.n	800bcca <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800bca4:	4b6b      	ldr	r3, [pc, #428]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a6e      	ldr	r2, [pc, #440]	@ (800be64 <HAL_RCC_OscConfig+0x340>)
 800bcaa:	4013      	ands	r3, r2
 800bcac:	0019      	movs	r1, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	691a      	ldr	r2, [r3, #16]
 800bcb2:	4b68      	ldr	r3, [pc, #416]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800bcb8:	4b66      	ldr	r3, [pc, #408]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	0adb      	lsrs	r3, r3, #11
 800bcbe:	2207      	movs	r2, #7
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	4a69      	ldr	r2, [pc, #420]	@ (800be68 <HAL_RCC_OscConfig+0x344>)
 800bcc4:	40da      	lsrs	r2, r3
 800bcc6:	4b69      	ldr	r3, [pc, #420]	@ (800be6c <HAL_RCC_OscConfig+0x348>)
 800bcc8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bcca:	4b69      	ldr	r3, [pc, #420]	@ (800be70 <HAL_RCC_OscConfig+0x34c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	0018      	movs	r0, r3
 800bcd0:	f7fc fee8 	bl	8008aa4 <HAL_InitTick>
 800bcd4:	1e03      	subs	r3, r0, #0
 800bcd6:	d051      	beq.n	800bd7c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e27d      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d030      	beq.n	800bd46 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800bce4:	4b5b      	ldr	r3, [pc, #364]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a5e      	ldr	r2, [pc, #376]	@ (800be64 <HAL_RCC_OscConfig+0x340>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	0019      	movs	r1, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	691a      	ldr	r2, [r3, #16]
 800bcf2:	4b58      	ldr	r3, [pc, #352]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800bcf8:	4b56      	ldr	r3, [pc, #344]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	4b55      	ldr	r3, [pc, #340]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bcfe:	2180      	movs	r1, #128	@ 0x80
 800bd00:	0049      	lsls	r1, r1, #1
 800bd02:	430a      	orrs	r2, r1
 800bd04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd06:	f7fd f815 	bl	8008d34 <HAL_GetTick>
 800bd0a:	0003      	movs	r3, r0
 800bd0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd0e:	e008      	b.n	800bd22 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd10:	f7fd f810 	bl	8008d34 <HAL_GetTick>
 800bd14:	0002      	movs	r2, r0
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d901      	bls.n	800bd22 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e25a      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bd22:	4b4c      	ldr	r3, [pc, #304]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	2380      	movs	r3, #128	@ 0x80
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	d0f0      	beq.n	800bd10 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd2e:	4b49      	ldr	r3, [pc, #292]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	4a4b      	ldr	r2, [pc, #300]	@ (800be60 <HAL_RCC_OscConfig+0x33c>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	0019      	movs	r1, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	695b      	ldr	r3, [r3, #20]
 800bd3c:	021a      	lsls	r2, r3, #8
 800bd3e:	4b45      	ldr	r3, [pc, #276]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd40:	430a      	orrs	r2, r1
 800bd42:	605a      	str	r2, [r3, #4]
 800bd44:	e01b      	b.n	800bd7e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800bd46:	4b43      	ldr	r3, [pc, #268]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	4b42      	ldr	r3, [pc, #264]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd4c:	4949      	ldr	r1, [pc, #292]	@ (800be74 <HAL_RCC_OscConfig+0x350>)
 800bd4e:	400a      	ands	r2, r1
 800bd50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd52:	f7fc ffef 	bl	8008d34 <HAL_GetTick>
 800bd56:	0003      	movs	r3, r0
 800bd58:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd5a:	e008      	b.n	800bd6e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd5c:	f7fc ffea 	bl	8008d34 <HAL_GetTick>
 800bd60:	0002      	movs	r2, r0
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d901      	bls.n	800bd6e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	e234      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd6e:	4b39      	ldr	r3, [pc, #228]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	2380      	movs	r3, #128	@ 0x80
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	4013      	ands	r3, r2
 800bd78:	d1f0      	bne.n	800bd5c <HAL_RCC_OscConfig+0x238>
 800bd7a:	e000      	b.n	800bd7e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd7c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2208      	movs	r2, #8
 800bd84:	4013      	ands	r3, r2
 800bd86:	d047      	beq.n	800be18 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800bd88:	4b32      	ldr	r3, [pc, #200]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	2238      	movs	r2, #56	@ 0x38
 800bd8e:	4013      	ands	r3, r2
 800bd90:	2b18      	cmp	r3, #24
 800bd92:	d10a      	bne.n	800bdaa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800bd94:	4b2f      	ldr	r3, [pc, #188]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bd96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd98:	2202      	movs	r2, #2
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	d03c      	beq.n	800be18 <HAL_RCC_OscConfig+0x2f4>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d138      	bne.n	800be18 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e216      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d019      	beq.n	800bde6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800bdb2:	4b28      	ldr	r3, [pc, #160]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bdb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bdb6:	4b27      	ldr	r3, [pc, #156]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bdb8:	2101      	movs	r1, #1
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdbe:	f7fc ffb9 	bl	8008d34 <HAL_GetTick>
 800bdc2:	0003      	movs	r3, r0
 800bdc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bdc6:	e008      	b.n	800bdda <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bdc8:	f7fc ffb4 	bl	8008d34 <HAL_GetTick>
 800bdcc:	0002      	movs	r2, r0
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d901      	bls.n	800bdda <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e1fe      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bdda:	4b1e      	ldr	r3, [pc, #120]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdde:	2202      	movs	r2, #2
 800bde0:	4013      	ands	r3, r2
 800bde2:	d0f1      	beq.n	800bdc8 <HAL_RCC_OscConfig+0x2a4>
 800bde4:	e018      	b.n	800be18 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800bde6:	4b1b      	ldr	r3, [pc, #108]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bde8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bdea:	4b1a      	ldr	r3, [pc, #104]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800bdec:	2101      	movs	r1, #1
 800bdee:	438a      	bics	r2, r1
 800bdf0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdf2:	f7fc ff9f 	bl	8008d34 <HAL_GetTick>
 800bdf6:	0003      	movs	r3, r0
 800bdf8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bdfa:	e008      	b.n	800be0e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bdfc:	f7fc ff9a 	bl	8008d34 <HAL_GetTick>
 800be00:	0002      	movs	r2, r0
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	2b02      	cmp	r3, #2
 800be08:	d901      	bls.n	800be0e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800be0a:	2303      	movs	r3, #3
 800be0c:	e1e4      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800be0e:	4b11      	ldr	r3, [pc, #68]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800be10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be12:	2202      	movs	r2, #2
 800be14:	4013      	ands	r3, r2
 800be16:	d1f1      	bne.n	800bdfc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2204      	movs	r2, #4
 800be1e:	4013      	ands	r3, r2
 800be20:	d100      	bne.n	800be24 <HAL_RCC_OscConfig+0x300>
 800be22:	e0c7      	b.n	800bfb4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800be24:	231f      	movs	r3, #31
 800be26:	18fb      	adds	r3, r7, r3
 800be28:	2200      	movs	r2, #0
 800be2a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800be2c:	4b09      	ldr	r3, [pc, #36]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	2238      	movs	r2, #56	@ 0x38
 800be32:	4013      	ands	r3, r2
 800be34:	2b20      	cmp	r3, #32
 800be36:	d11f      	bne.n	800be78 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800be38:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <HAL_RCC_OscConfig+0x330>)
 800be3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be3c:	2202      	movs	r2, #2
 800be3e:	4013      	ands	r3, r2
 800be40:	d100      	bne.n	800be44 <HAL_RCC_OscConfig+0x320>
 800be42:	e0b7      	b.n	800bfb4 <HAL_RCC_OscConfig+0x490>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d000      	beq.n	800be4e <HAL_RCC_OscConfig+0x32a>
 800be4c:	e0b2      	b.n	800bfb4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	e1c2      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
 800be52:	46c0      	nop			@ (mov r8, r8)
 800be54:	40021000 	.word	0x40021000
 800be58:	fffeffff 	.word	0xfffeffff
 800be5c:	fffbffff 	.word	0xfffbffff
 800be60:	ffff80ff 	.word	0xffff80ff
 800be64:	ffffc7ff 	.word	0xffffc7ff
 800be68:	00f42400 	.word	0x00f42400
 800be6c:	20000028 	.word	0x20000028
 800be70:	2000002c 	.word	0x2000002c
 800be74:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800be78:	4bb5      	ldr	r3, [pc, #724]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800be7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be7c:	2380      	movs	r3, #128	@ 0x80
 800be7e:	055b      	lsls	r3, r3, #21
 800be80:	4013      	ands	r3, r2
 800be82:	d101      	bne.n	800be88 <HAL_RCC_OscConfig+0x364>
 800be84:	2301      	movs	r3, #1
 800be86:	e000      	b.n	800be8a <HAL_RCC_OscConfig+0x366>
 800be88:	2300      	movs	r3, #0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d011      	beq.n	800beb2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800be8e:	4bb0      	ldr	r3, [pc, #704]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800be90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be92:	4baf      	ldr	r3, [pc, #700]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800be94:	2180      	movs	r1, #128	@ 0x80
 800be96:	0549      	lsls	r1, r1, #21
 800be98:	430a      	orrs	r2, r1
 800be9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800be9c:	4bac      	ldr	r3, [pc, #688]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800be9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bea0:	2380      	movs	r3, #128	@ 0x80
 800bea2:	055b      	lsls	r3, r3, #21
 800bea4:	4013      	ands	r3, r2
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800beaa:	231f      	movs	r3, #31
 800beac:	18fb      	adds	r3, r7, r3
 800beae:	2201      	movs	r2, #1
 800beb0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800beb2:	4ba8      	ldr	r3, [pc, #672]	@ (800c154 <HAL_RCC_OscConfig+0x630>)
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	2380      	movs	r3, #128	@ 0x80
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	4013      	ands	r3, r2
 800bebc:	d11a      	bne.n	800bef4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bebe:	4ba5      	ldr	r3, [pc, #660]	@ (800c154 <HAL_RCC_OscConfig+0x630>)
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	4ba4      	ldr	r3, [pc, #656]	@ (800c154 <HAL_RCC_OscConfig+0x630>)
 800bec4:	2180      	movs	r1, #128	@ 0x80
 800bec6:	0049      	lsls	r1, r1, #1
 800bec8:	430a      	orrs	r2, r1
 800beca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800becc:	f7fc ff32 	bl	8008d34 <HAL_GetTick>
 800bed0:	0003      	movs	r3, r0
 800bed2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bed4:	e008      	b.n	800bee8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bed6:	f7fc ff2d 	bl	8008d34 <HAL_GetTick>
 800beda:	0002      	movs	r2, r0
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d901      	bls.n	800bee8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e177      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bee8:	4b9a      	ldr	r3, [pc, #616]	@ (800c154 <HAL_RCC_OscConfig+0x630>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	2380      	movs	r3, #128	@ 0x80
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	4013      	ands	r3, r2
 800bef2:	d0f0      	beq.n	800bed6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d106      	bne.n	800bf0a <HAL_RCC_OscConfig+0x3e6>
 800befc:	4b94      	ldr	r3, [pc, #592]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800befe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf00:	4b93      	ldr	r3, [pc, #588]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf02:	2101      	movs	r1, #1
 800bf04:	430a      	orrs	r2, r1
 800bf06:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf08:	e01c      	b.n	800bf44 <HAL_RCC_OscConfig+0x420>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	2b05      	cmp	r3, #5
 800bf10:	d10c      	bne.n	800bf2c <HAL_RCC_OscConfig+0x408>
 800bf12:	4b8f      	ldr	r3, [pc, #572]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf16:	4b8e      	ldr	r3, [pc, #568]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf18:	2104      	movs	r1, #4
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf1e:	4b8c      	ldr	r3, [pc, #560]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf22:	4b8b      	ldr	r3, [pc, #556]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf24:	2101      	movs	r1, #1
 800bf26:	430a      	orrs	r2, r1
 800bf28:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf2a:	e00b      	b.n	800bf44 <HAL_RCC_OscConfig+0x420>
 800bf2c:	4b88      	ldr	r3, [pc, #544]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf30:	4b87      	ldr	r3, [pc, #540]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf32:	2101      	movs	r1, #1
 800bf34:	438a      	bics	r2, r1
 800bf36:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf38:	4b85      	ldr	r3, [pc, #532]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf3c:	4b84      	ldr	r3, [pc, #528]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf3e:	2104      	movs	r1, #4
 800bf40:	438a      	bics	r2, r1
 800bf42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d014      	beq.n	800bf76 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf4c:	f7fc fef2 	bl	8008d34 <HAL_GetTick>
 800bf50:	0003      	movs	r3, r0
 800bf52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf54:	e009      	b.n	800bf6a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf56:	f7fc feed 	bl	8008d34 <HAL_GetTick>
 800bf5a:	0002      	movs	r2, r0
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	4a7d      	ldr	r2, [pc, #500]	@ (800c158 <HAL_RCC_OscConfig+0x634>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d901      	bls.n	800bf6a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e136      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bf6a:	4b79      	ldr	r3, [pc, #484]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf6e:	2202      	movs	r2, #2
 800bf70:	4013      	ands	r3, r2
 800bf72:	d0f0      	beq.n	800bf56 <HAL_RCC_OscConfig+0x432>
 800bf74:	e013      	b.n	800bf9e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf76:	f7fc fedd 	bl	8008d34 <HAL_GetTick>
 800bf7a:	0003      	movs	r3, r0
 800bf7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bf7e:	e009      	b.n	800bf94 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf80:	f7fc fed8 	bl	8008d34 <HAL_GetTick>
 800bf84:	0002      	movs	r2, r0
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	4a73      	ldr	r2, [pc, #460]	@ (800c158 <HAL_RCC_OscConfig+0x634>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d901      	bls.n	800bf94 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	e121      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bf94:	4b6e      	ldr	r3, [pc, #440]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bf96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf98:	2202      	movs	r2, #2
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	d1f0      	bne.n	800bf80 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800bf9e:	231f      	movs	r3, #31
 800bfa0:	18fb      	adds	r3, r7, r3
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d105      	bne.n	800bfb4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800bfa8:	4b69      	ldr	r3, [pc, #420]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bfaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bfac:	4b68      	ldr	r3, [pc, #416]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bfae:	496b      	ldr	r1, [pc, #428]	@ (800c15c <HAL_RCC_OscConfig+0x638>)
 800bfb0:	400a      	ands	r2, r1
 800bfb2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	4013      	ands	r3, r2
 800bfbc:	d039      	beq.n	800c032 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d01b      	beq.n	800bffe <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bfc6:	4b62      	ldr	r3, [pc, #392]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	4b61      	ldr	r3, [pc, #388]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bfcc:	2180      	movs	r1, #128	@ 0x80
 800bfce:	03c9      	lsls	r1, r1, #15
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfd4:	f7fc feae 	bl	8008d34 <HAL_GetTick>
 800bfd8:	0003      	movs	r3, r0
 800bfda:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800bfdc:	e008      	b.n	800bff0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bfde:	f7fc fea9 	bl	8008d34 <HAL_GetTick>
 800bfe2:	0002      	movs	r2, r0
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d901      	bls.n	800bff0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e0f3      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800bff0:	4b57      	ldr	r3, [pc, #348]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	2380      	movs	r3, #128	@ 0x80
 800bff6:	041b      	lsls	r3, r3, #16
 800bff8:	4013      	ands	r3, r2
 800bffa:	d0f0      	beq.n	800bfde <HAL_RCC_OscConfig+0x4ba>
 800bffc:	e019      	b.n	800c032 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bffe:	4b54      	ldr	r3, [pc, #336]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	4b53      	ldr	r3, [pc, #332]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c004:	4956      	ldr	r1, [pc, #344]	@ (800c160 <HAL_RCC_OscConfig+0x63c>)
 800c006:	400a      	ands	r2, r1
 800c008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c00a:	f7fc fe93 	bl	8008d34 <HAL_GetTick>
 800c00e:	0003      	movs	r3, r0
 800c010:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c012:	e008      	b.n	800c026 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c014:	f7fc fe8e 	bl	8008d34 <HAL_GetTick>
 800c018:	0002      	movs	r2, r0
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d901      	bls.n	800c026 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e0d8      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c026:	4b4a      	ldr	r3, [pc, #296]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	2380      	movs	r3, #128	@ 0x80
 800c02c:	041b      	lsls	r3, r3, #16
 800c02e:	4013      	ands	r3, r2
 800c030:	d1f0      	bne.n	800c014 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d100      	bne.n	800c03c <HAL_RCC_OscConfig+0x518>
 800c03a:	e0cc      	b.n	800c1d6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c03c:	4b44      	ldr	r3, [pc, #272]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	2238      	movs	r2, #56	@ 0x38
 800c042:	4013      	ands	r3, r2
 800c044:	2b10      	cmp	r3, #16
 800c046:	d100      	bne.n	800c04a <HAL_RCC_OscConfig+0x526>
 800c048:	e07b      	b.n	800c142 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d156      	bne.n	800c100 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c052:	4b3f      	ldr	r3, [pc, #252]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	4b3e      	ldr	r3, [pc, #248]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c058:	4942      	ldr	r1, [pc, #264]	@ (800c164 <HAL_RCC_OscConfig+0x640>)
 800c05a:	400a      	ands	r2, r1
 800c05c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c05e:	f7fc fe69 	bl	8008d34 <HAL_GetTick>
 800c062:	0003      	movs	r3, r0
 800c064:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c066:	e008      	b.n	800c07a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c068:	f7fc fe64 	bl	8008d34 <HAL_GetTick>
 800c06c:	0002      	movs	r2, r0
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	2b02      	cmp	r3, #2
 800c074:	d901      	bls.n	800c07a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e0ae      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c07a:	4b35      	ldr	r3, [pc, #212]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	2380      	movs	r3, #128	@ 0x80
 800c080:	049b      	lsls	r3, r3, #18
 800c082:	4013      	ands	r3, r2
 800c084:	d1f0      	bne.n	800c068 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c086:	4b32      	ldr	r3, [pc, #200]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	4a37      	ldr	r2, [pc, #220]	@ (800c168 <HAL_RCC_OscConfig+0x644>)
 800c08c:	4013      	ands	r3, r2
 800c08e:	0019      	movs	r1, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09e:	021b      	lsls	r3, r3, #8
 800c0a0:	431a      	orrs	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0ac:	431a      	orrs	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0b2:	431a      	orrs	r2, r3
 800c0b4:	4b26      	ldr	r3, [pc, #152]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c0ba:	4b25      	ldr	r3, [pc, #148]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	4b24      	ldr	r3, [pc, #144]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c0c0:	2180      	movs	r1, #128	@ 0x80
 800c0c2:	0449      	lsls	r1, r1, #17
 800c0c4:	430a      	orrs	r2, r1
 800c0c6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800c0c8:	4b21      	ldr	r3, [pc, #132]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	4b20      	ldr	r3, [pc, #128]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c0ce:	2180      	movs	r1, #128	@ 0x80
 800c0d0:	0549      	lsls	r1, r1, #21
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d6:	f7fc fe2d 	bl	8008d34 <HAL_GetTick>
 800c0da:	0003      	movs	r3, r0
 800c0dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c0de:	e008      	b.n	800c0f2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0e0:	f7fc fe28 	bl	8008d34 <HAL_GetTick>
 800c0e4:	0002      	movs	r2, r0
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d901      	bls.n	800c0f2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e072      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c0f2:	4b17      	ldr	r3, [pc, #92]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	2380      	movs	r3, #128	@ 0x80
 800c0f8:	049b      	lsls	r3, r3, #18
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	d0f0      	beq.n	800c0e0 <HAL_RCC_OscConfig+0x5bc>
 800c0fe:	e06a      	b.n	800c1d6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c100:	4b13      	ldr	r3, [pc, #76]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	4b12      	ldr	r3, [pc, #72]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c106:	4917      	ldr	r1, [pc, #92]	@ (800c164 <HAL_RCC_OscConfig+0x640>)
 800c108:	400a      	ands	r2, r1
 800c10a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c10c:	f7fc fe12 	bl	8008d34 <HAL_GetTick>
 800c110:	0003      	movs	r3, r0
 800c112:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c114:	e008      	b.n	800c128 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c116:	f7fc fe0d 	bl	8008d34 <HAL_GetTick>
 800c11a:	0002      	movs	r2, r0
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	2b02      	cmp	r3, #2
 800c122:	d901      	bls.n	800c128 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800c124:	2303      	movs	r3, #3
 800c126:	e057      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c128:	4b09      	ldr	r3, [pc, #36]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	2380      	movs	r3, #128	@ 0x80
 800c12e:	049b      	lsls	r3, r3, #18
 800c130:	4013      	ands	r3, r2
 800c132:	d1f0      	bne.n	800c116 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800c134:	4b06      	ldr	r3, [pc, #24]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <HAL_RCC_OscConfig+0x62c>)
 800c13a:	490c      	ldr	r1, [pc, #48]	@ (800c16c <HAL_RCC_OscConfig+0x648>)
 800c13c:	400a      	ands	r2, r1
 800c13e:	60da      	str	r2, [r3, #12]
 800c140:	e049      	b.n	800c1d6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d112      	bne.n	800c170 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e044      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
 800c14e:	46c0      	nop			@ (mov r8, r8)
 800c150:	40021000 	.word	0x40021000
 800c154:	40007000 	.word	0x40007000
 800c158:	00001388 	.word	0x00001388
 800c15c:	efffffff 	.word	0xefffffff
 800c160:	ffbfffff 	.word	0xffbfffff
 800c164:	feffffff 	.word	0xfeffffff
 800c168:	11c1808c 	.word	0x11c1808c
 800c16c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800c170:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e0 <HAL_RCC_OscConfig+0x6bc>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2203      	movs	r2, #3
 800c17a:	401a      	ands	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c180:	429a      	cmp	r2, r3
 800c182:	d126      	bne.n	800c1d2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2270      	movs	r2, #112	@ 0x70
 800c188:	401a      	ands	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c18e:	429a      	cmp	r2, r3
 800c190:	d11f      	bne.n	800c1d2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	23fe      	movs	r3, #254	@ 0xfe
 800c196:	01db      	lsls	r3, r3, #7
 800c198:	401a      	ands	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d116      	bne.n	800c1d2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	23f8      	movs	r3, #248	@ 0xf8
 800c1a8:	039b      	lsls	r3, r3, #14
 800c1aa:	401a      	ands	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d10e      	bne.n	800c1d2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	23e0      	movs	r3, #224	@ 0xe0
 800c1b8:	051b      	lsls	r3, r3, #20
 800c1ba:	401a      	ands	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d106      	bne.n	800c1d2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	0f5b      	lsrs	r3, r3, #29
 800c1c8:	075a      	lsls	r2, r3, #29
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d001      	beq.n	800c1d6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	0018      	movs	r0, r3
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	b008      	add	sp, #32
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	40021000 	.word	0x40021000

0800c1e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d101      	bne.n	800c1f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e0e9      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c1f8:	4b76      	ldr	r3, [pc, #472]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2207      	movs	r2, #7
 800c1fe:	4013      	ands	r3, r2
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	429a      	cmp	r2, r3
 800c204:	d91e      	bls.n	800c244 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c206:	4b73      	ldr	r3, [pc, #460]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2207      	movs	r2, #7
 800c20c:	4393      	bics	r3, r2
 800c20e:	0019      	movs	r1, r3
 800c210:	4b70      	ldr	r3, [pc, #448]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	430a      	orrs	r2, r1
 800c216:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c218:	f7fc fd8c 	bl	8008d34 <HAL_GetTick>
 800c21c:	0003      	movs	r3, r0
 800c21e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c220:	e009      	b.n	800c236 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c222:	f7fc fd87 	bl	8008d34 <HAL_GetTick>
 800c226:	0002      	movs	r2, r0
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	4a6a      	ldr	r2, [pc, #424]	@ (800c3d8 <HAL_RCC_ClockConfig+0x1f4>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d901      	bls.n	800c236 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e0ca      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c236:	4b67      	ldr	r3, [pc, #412]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2207      	movs	r2, #7
 800c23c:	4013      	ands	r3, r2
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	429a      	cmp	r2, r3
 800c242:	d1ee      	bne.n	800c222 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2202      	movs	r2, #2
 800c24a:	4013      	ands	r3, r2
 800c24c:	d015      	beq.n	800c27a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2204      	movs	r2, #4
 800c254:	4013      	ands	r3, r2
 800c256:	d006      	beq.n	800c266 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800c258:	4b60      	ldr	r3, [pc, #384]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c25a:	689a      	ldr	r2, [r3, #8]
 800c25c:	4b5f      	ldr	r3, [pc, #380]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c25e:	21e0      	movs	r1, #224	@ 0xe0
 800c260:	01c9      	lsls	r1, r1, #7
 800c262:	430a      	orrs	r2, r1
 800c264:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c266:	4b5d      	ldr	r3, [pc, #372]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	4a5d      	ldr	r2, [pc, #372]	@ (800c3e0 <HAL_RCC_ClockConfig+0x1fc>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	0019      	movs	r1, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	689a      	ldr	r2, [r3, #8]
 800c274:	4b59      	ldr	r3, [pc, #356]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c276:	430a      	orrs	r2, r1
 800c278:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2201      	movs	r2, #1
 800c280:	4013      	ands	r3, r2
 800c282:	d057      	beq.n	800c334 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d107      	bne.n	800c29c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c28c:	4b53      	ldr	r3, [pc, #332]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	2380      	movs	r3, #128	@ 0x80
 800c292:	029b      	lsls	r3, r3, #10
 800c294:	4013      	ands	r3, r2
 800c296:	d12b      	bne.n	800c2f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e097      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d107      	bne.n	800c2b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2a4:	4b4d      	ldr	r3, [pc, #308]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	2380      	movs	r3, #128	@ 0x80
 800c2aa:	049b      	lsls	r3, r3, #18
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	d11f      	bne.n	800c2f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e08b      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d107      	bne.n	800c2cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c2bc:	4b47      	ldr	r3, [pc, #284]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	2380      	movs	r3, #128	@ 0x80
 800c2c2:	00db      	lsls	r3, r3, #3
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	d113      	bne.n	800c2f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e07f      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d106      	bne.n	800c2e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c2d4:	4b41      	ldr	r3, [pc, #260]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c2d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2d8:	2202      	movs	r2, #2
 800c2da:	4013      	ands	r3, r2
 800c2dc:	d108      	bne.n	800c2f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e074      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c2e2:	4b3e      	ldr	r3, [pc, #248]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c2e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	d101      	bne.n	800c2f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e06d      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c2f0:	4b3a      	ldr	r3, [pc, #232]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	2207      	movs	r2, #7
 800c2f6:	4393      	bics	r3, r2
 800c2f8:	0019      	movs	r1, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	4b37      	ldr	r3, [pc, #220]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c300:	430a      	orrs	r2, r1
 800c302:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c304:	f7fc fd16 	bl	8008d34 <HAL_GetTick>
 800c308:	0003      	movs	r3, r0
 800c30a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c30c:	e009      	b.n	800c322 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c30e:	f7fc fd11 	bl	8008d34 <HAL_GetTick>
 800c312:	0002      	movs	r2, r0
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	4a2f      	ldr	r2, [pc, #188]	@ (800c3d8 <HAL_RCC_ClockConfig+0x1f4>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d901      	bls.n	800c322 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800c31e:	2303      	movs	r3, #3
 800c320:	e054      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c322:	4b2e      	ldr	r3, [pc, #184]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	2238      	movs	r2, #56	@ 0x38
 800c328:	401a      	ands	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	00db      	lsls	r3, r3, #3
 800c330:	429a      	cmp	r2, r3
 800c332:	d1ec      	bne.n	800c30e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c334:	4b27      	ldr	r3, [pc, #156]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2207      	movs	r2, #7
 800c33a:	4013      	ands	r3, r2
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d21e      	bcs.n	800c380 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c342:	4b24      	ldr	r3, [pc, #144]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2207      	movs	r2, #7
 800c348:	4393      	bics	r3, r2
 800c34a:	0019      	movs	r1, r3
 800c34c:	4b21      	ldr	r3, [pc, #132]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c34e:	683a      	ldr	r2, [r7, #0]
 800c350:	430a      	orrs	r2, r1
 800c352:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c354:	f7fc fcee 	bl	8008d34 <HAL_GetTick>
 800c358:	0003      	movs	r3, r0
 800c35a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c35c:	e009      	b.n	800c372 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c35e:	f7fc fce9 	bl	8008d34 <HAL_GetTick>
 800c362:	0002      	movs	r2, r0
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	4a1b      	ldr	r2, [pc, #108]	@ (800c3d8 <HAL_RCC_ClockConfig+0x1f4>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d901      	bls.n	800c372 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e02c      	b.n	800c3cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c372:	4b18      	ldr	r3, [pc, #96]	@ (800c3d4 <HAL_RCC_ClockConfig+0x1f0>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2207      	movs	r2, #7
 800c378:	4013      	ands	r3, r2
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d1ee      	bne.n	800c35e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2204      	movs	r2, #4
 800c386:	4013      	ands	r3, r2
 800c388:	d009      	beq.n	800c39e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800c38a:	4b14      	ldr	r3, [pc, #80]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	4a15      	ldr	r2, [pc, #84]	@ (800c3e4 <HAL_RCC_ClockConfig+0x200>)
 800c390:	4013      	ands	r3, r2
 800c392:	0019      	movs	r1, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	68da      	ldr	r2, [r3, #12]
 800c398:	4b10      	ldr	r3, [pc, #64]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c39a:	430a      	orrs	r2, r1
 800c39c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800c39e:	f000 f829 	bl	800c3f4 <HAL_RCC_GetSysClockFreq>
 800c3a2:	0001      	movs	r1, r0
 800c3a4:	4b0d      	ldr	r3, [pc, #52]	@ (800c3dc <HAL_RCC_ClockConfig+0x1f8>)
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	0a1b      	lsrs	r3, r3, #8
 800c3aa:	220f      	movs	r2, #15
 800c3ac:	401a      	ands	r2, r3
 800c3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c3e8 <HAL_RCC_ClockConfig+0x204>)
 800c3b0:	0092      	lsls	r2, r2, #2
 800c3b2:	58d3      	ldr	r3, [r2, r3]
 800c3b4:	221f      	movs	r2, #31
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	000a      	movs	r2, r1
 800c3ba:	40da      	lsrs	r2, r3
 800c3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c3ec <HAL_RCC_ClockConfig+0x208>)
 800c3be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c3f0 <HAL_RCC_ClockConfig+0x20c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	0018      	movs	r0, r3
 800c3c6:	f7fc fb6d 	bl	8008aa4 <HAL_InitTick>
 800c3ca:	0003      	movs	r3, r0
}
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	b004      	add	sp, #16
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	40022000 	.word	0x40022000
 800c3d8:	00001388 	.word	0x00001388
 800c3dc:	40021000 	.word	0x40021000
 800c3e0:	fffff0ff 	.word	0xfffff0ff
 800c3e4:	ffff8fff 	.word	0xffff8fff
 800c3e8:	08019a18 	.word	0x08019a18
 800c3ec:	20000028 	.word	0x20000028
 800c3f0:	2000002c 	.word	0x2000002c

0800c3f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c3fa:	4b3c      	ldr	r3, [pc, #240]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	2238      	movs	r2, #56	@ 0x38
 800c400:	4013      	ands	r3, r2
 800c402:	d10f      	bne.n	800c424 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c404:	4b39      	ldr	r3, [pc, #228]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	0adb      	lsrs	r3, r3, #11
 800c40a:	2207      	movs	r2, #7
 800c40c:	4013      	ands	r3, r2
 800c40e:	2201      	movs	r2, #1
 800c410:	409a      	lsls	r2, r3
 800c412:	0013      	movs	r3, r2
 800c414:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	4835      	ldr	r0, [pc, #212]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800c41a:	f7f9 fed7 	bl	80061cc <__udivsi3>
 800c41e:	0003      	movs	r3, r0
 800c420:	613b      	str	r3, [r7, #16]
 800c422:	e05d      	b.n	800c4e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c424:	4b31      	ldr	r3, [pc, #196]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	2238      	movs	r2, #56	@ 0x38
 800c42a:	4013      	ands	r3, r2
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	d102      	bne.n	800c436 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c430:	4b30      	ldr	r3, [pc, #192]	@ (800c4f4 <HAL_RCC_GetSysClockFreq+0x100>)
 800c432:	613b      	str	r3, [r7, #16]
 800c434:	e054      	b.n	800c4e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c436:	4b2d      	ldr	r3, [pc, #180]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	2238      	movs	r2, #56	@ 0x38
 800c43c:	4013      	ands	r3, r2
 800c43e:	2b10      	cmp	r3, #16
 800c440:	d138      	bne.n	800c4b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800c442:	4b2a      	ldr	r3, [pc, #168]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	2203      	movs	r2, #3
 800c448:	4013      	ands	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c44c:	4b27      	ldr	r3, [pc, #156]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	091b      	lsrs	r3, r3, #4
 800c452:	2207      	movs	r2, #7
 800c454:	4013      	ands	r3, r2
 800c456:	3301      	adds	r3, #1
 800c458:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d10d      	bne.n	800c47c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c460:	68b9      	ldr	r1, [r7, #8]
 800c462:	4824      	ldr	r0, [pc, #144]	@ (800c4f4 <HAL_RCC_GetSysClockFreq+0x100>)
 800c464:	f7f9 feb2 	bl	80061cc <__udivsi3>
 800c468:	0003      	movs	r3, r0
 800c46a:	0019      	movs	r1, r3
 800c46c:	4b1f      	ldr	r3, [pc, #124]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	0a1b      	lsrs	r3, r3, #8
 800c472:	227f      	movs	r2, #127	@ 0x7f
 800c474:	4013      	ands	r3, r2
 800c476:	434b      	muls	r3, r1
 800c478:	617b      	str	r3, [r7, #20]
        break;
 800c47a:	e00d      	b.n	800c498 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	481c      	ldr	r0, [pc, #112]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800c480:	f7f9 fea4 	bl	80061cc <__udivsi3>
 800c484:	0003      	movs	r3, r0
 800c486:	0019      	movs	r1, r3
 800c488:	4b18      	ldr	r3, [pc, #96]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	0a1b      	lsrs	r3, r3, #8
 800c48e:	227f      	movs	r2, #127	@ 0x7f
 800c490:	4013      	ands	r3, r2
 800c492:	434b      	muls	r3, r1
 800c494:	617b      	str	r3, [r7, #20]
        break;
 800c496:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800c498:	4b14      	ldr	r3, [pc, #80]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	0f5b      	lsrs	r3, r3, #29
 800c49e:	2207      	movs	r2, #7
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	6978      	ldr	r0, [r7, #20]
 800c4aa:	f7f9 fe8f 	bl	80061cc <__udivsi3>
 800c4ae:	0003      	movs	r3, r0
 800c4b0:	613b      	str	r3, [r7, #16]
 800c4b2:	e015      	b.n	800c4e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800c4b4:	4b0d      	ldr	r3, [pc, #52]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	2238      	movs	r2, #56	@ 0x38
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	2b20      	cmp	r3, #32
 800c4be:	d103      	bne.n	800c4c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800c4c0:	2380      	movs	r3, #128	@ 0x80
 800c4c2:	021b      	lsls	r3, r3, #8
 800c4c4:	613b      	str	r3, [r7, #16]
 800c4c6:	e00b      	b.n	800c4e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800c4c8:	4b08      	ldr	r3, [pc, #32]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	2238      	movs	r2, #56	@ 0x38
 800c4ce:	4013      	ands	r3, r2
 800c4d0:	2b18      	cmp	r3, #24
 800c4d2:	d103      	bne.n	800c4dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800c4d4:	23fa      	movs	r3, #250	@ 0xfa
 800c4d6:	01db      	lsls	r3, r3, #7
 800c4d8:	613b      	str	r3, [r7, #16]
 800c4da:	e001      	b.n	800c4e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c4e0:	693b      	ldr	r3, [r7, #16]
}
 800c4e2:	0018      	movs	r0, r3
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	b006      	add	sp, #24
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	46c0      	nop			@ (mov r8, r8)
 800c4ec:	40021000 	.word	0x40021000
 800c4f0:	00f42400 	.word	0x00f42400
 800c4f4:	007a1200 	.word	0x007a1200

0800c4f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4fc:	4b02      	ldr	r3, [pc, #8]	@ (800c508 <HAL_RCC_GetHCLKFreq+0x10>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
}
 800c500:	0018      	movs	r0, r3
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	46c0      	nop			@ (mov r8, r8)
 800c508:	20000028 	.word	0x20000028

0800c50c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c50c:	b5b0      	push	{r4, r5, r7, lr}
 800c50e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c510:	f7ff fff2 	bl	800c4f8 <HAL_RCC_GetHCLKFreq>
 800c514:	0004      	movs	r4, r0
 800c516:	f7ff faf9 	bl	800bb0c <LL_RCC_GetAPB1Prescaler>
 800c51a:	0003      	movs	r3, r0
 800c51c:	0b1a      	lsrs	r2, r3, #12
 800c51e:	4b05      	ldr	r3, [pc, #20]	@ (800c534 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c520:	0092      	lsls	r2, r2, #2
 800c522:	58d3      	ldr	r3, [r2, r3]
 800c524:	221f      	movs	r2, #31
 800c526:	4013      	ands	r3, r2
 800c528:	40dc      	lsrs	r4, r3
 800c52a:	0023      	movs	r3, r4
}
 800c52c:	0018      	movs	r0, r3
 800c52e:	46bd      	mov	sp, r7
 800c530:	bdb0      	pop	{r4, r5, r7, pc}
 800c532:	46c0      	nop			@ (mov r8, r8)
 800c534:	08019a58 	.word	0x08019a58

0800c538 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2207      	movs	r2, #7
 800c546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c548:	4b0e      	ldr	r3, [pc, #56]	@ (800c584 <HAL_RCC_GetClockConfig+0x4c>)
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	2207      	movs	r2, #7
 800c54e:	401a      	ands	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c554:	4b0b      	ldr	r3, [pc, #44]	@ (800c584 <HAL_RCC_GetClockConfig+0x4c>)
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	23f0      	movs	r3, #240	@ 0xf0
 800c55a:	011b      	lsls	r3, r3, #4
 800c55c:	401a      	ands	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800c562:	4b08      	ldr	r3, [pc, #32]	@ (800c584 <HAL_RCC_GetClockConfig+0x4c>)
 800c564:	689a      	ldr	r2, [r3, #8]
 800c566:	23e0      	movs	r3, #224	@ 0xe0
 800c568:	01db      	lsls	r3, r3, #7
 800c56a:	401a      	ands	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c570:	4b05      	ldr	r3, [pc, #20]	@ (800c588 <HAL_RCC_GetClockConfig+0x50>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2207      	movs	r2, #7
 800c576:	401a      	ands	r2, r3
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	601a      	str	r2, [r3, #0]
}
 800c57c:	46c0      	nop			@ (mov r8, r8)
 800c57e:	46bd      	mov	sp, r7
 800c580:	b002      	add	sp, #8
 800c582:	bd80      	pop	{r7, pc}
 800c584:	40021000 	.word	0x40021000
 800c588:	40022000 	.word	0x40022000

0800c58c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800c594:	2313      	movs	r3, #19
 800c596:	18fb      	adds	r3, r7, r3
 800c598:	2200      	movs	r2, #0
 800c59a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c59c:	2312      	movs	r3, #18
 800c59e:	18fb      	adds	r3, r7, r3
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	2380      	movs	r3, #128	@ 0x80
 800c5aa:	029b      	lsls	r3, r3, #10
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	d100      	bne.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800c5b0:	e0ad      	b.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5b2:	2011      	movs	r0, #17
 800c5b4:	183b      	adds	r3, r7, r0
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5ba:	4b47      	ldr	r3, [pc, #284]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c5bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5be:	2380      	movs	r3, #128	@ 0x80
 800c5c0:	055b      	lsls	r3, r3, #21
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	d110      	bne.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5c6:	4b44      	ldr	r3, [pc, #272]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c5c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5ca:	4b43      	ldr	r3, [pc, #268]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c5cc:	2180      	movs	r1, #128	@ 0x80
 800c5ce:	0549      	lsls	r1, r1, #21
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c5d4:	4b40      	ldr	r3, [pc, #256]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c5d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5d8:	2380      	movs	r3, #128	@ 0x80
 800c5da:	055b      	lsls	r3, r3, #21
 800c5dc:	4013      	ands	r3, r2
 800c5de:	60bb      	str	r3, [r7, #8]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c5e2:	183b      	adds	r3, r7, r0
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c5e8:	4b3c      	ldr	r3, [pc, #240]	@ (800c6dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	4b3b      	ldr	r3, [pc, #236]	@ (800c6dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c5ee:	2180      	movs	r1, #128	@ 0x80
 800c5f0:	0049      	lsls	r1, r1, #1
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c5f6:	f7fc fb9d 	bl	8008d34 <HAL_GetTick>
 800c5fa:	0003      	movs	r3, r0
 800c5fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c5fe:	e00b      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c600:	f7fc fb98 	bl	8008d34 <HAL_GetTick>
 800c604:	0002      	movs	r2, r0
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d904      	bls.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800c60e:	2313      	movs	r3, #19
 800c610:	18fb      	adds	r3, r7, r3
 800c612:	2203      	movs	r2, #3
 800c614:	701a      	strb	r2, [r3, #0]
        break;
 800c616:	e005      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c618:	4b30      	ldr	r3, [pc, #192]	@ (800c6dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	2380      	movs	r3, #128	@ 0x80
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	4013      	ands	r3, r2
 800c622:	d0ed      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800c624:	2313      	movs	r3, #19
 800c626:	18fb      	adds	r3, r7, r3
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d15e      	bne.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c62e:	4b2a      	ldr	r3, [pc, #168]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c632:	23c0      	movs	r3, #192	@ 0xc0
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4013      	ands	r3, r2
 800c638:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d019      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	429a      	cmp	r2, r3
 800c648:	d014      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c64a:	4b23      	ldr	r3, [pc, #140]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c64c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c64e:	4a24      	ldr	r2, [pc, #144]	@ (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c650:	4013      	ands	r3, r2
 800c652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c654:	4b20      	ldr	r3, [pc, #128]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c656:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c658:	4b1f      	ldr	r3, [pc, #124]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c65a:	2180      	movs	r1, #128	@ 0x80
 800c65c:	0249      	lsls	r1, r1, #9
 800c65e:	430a      	orrs	r2, r1
 800c660:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c662:	4b1d      	ldr	r3, [pc, #116]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c664:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c666:	4b1c      	ldr	r3, [pc, #112]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c668:	491e      	ldr	r1, [pc, #120]	@ (800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800c66a:	400a      	ands	r2, r1
 800c66c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c66e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2201      	movs	r2, #1
 800c678:	4013      	ands	r3, r2
 800c67a:	d016      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c67c:	f7fc fb5a 	bl	8008d34 <HAL_GetTick>
 800c680:	0003      	movs	r3, r0
 800c682:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c684:	e00c      	b.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c686:	f7fc fb55 	bl	8008d34 <HAL_GetTick>
 800c68a:	0002      	movs	r2, r0
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	4a15      	ldr	r2, [pc, #84]	@ (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d904      	bls.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800c696:	2313      	movs	r3, #19
 800c698:	18fb      	adds	r3, r7, r3
 800c69a:	2203      	movs	r2, #3
 800c69c:	701a      	strb	r2, [r3, #0]
            break;
 800c69e:	e004      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c6a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	d0ed      	beq.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800c6aa:	2313      	movs	r3, #19
 800c6ac:	18fb      	adds	r3, r7, r3
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10a      	bne.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c6b4:	4b08      	ldr	r3, [pc, #32]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c6b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6b8:	4a09      	ldr	r2, [pc, #36]	@ (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	0019      	movs	r1, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6c2:	4b05      	ldr	r3, [pc, #20]	@ (800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800c6c4:	430a      	orrs	r2, r1
 800c6c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c6c8:	e016      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c6ca:	2312      	movs	r3, #18
 800c6cc:	18fb      	adds	r3, r7, r3
 800c6ce:	2213      	movs	r2, #19
 800c6d0:	18ba      	adds	r2, r7, r2
 800c6d2:	7812      	ldrb	r2, [r2, #0]
 800c6d4:	701a      	strb	r2, [r3, #0]
 800c6d6:	e00f      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800c6d8:	40021000 	.word	0x40021000
 800c6dc:	40007000 	.word	0x40007000
 800c6e0:	fffffcff 	.word	0xfffffcff
 800c6e4:	fffeffff 	.word	0xfffeffff
 800c6e8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ec:	2312      	movs	r3, #18
 800c6ee:	18fb      	adds	r3, r7, r3
 800c6f0:	2213      	movs	r2, #19
 800c6f2:	18ba      	adds	r2, r7, r2
 800c6f4:	7812      	ldrb	r2, [r2, #0]
 800c6f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c6f8:	2311      	movs	r3, #17
 800c6fa:	18fb      	adds	r3, r7, r3
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d105      	bne.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c702:	4bb6      	ldr	r3, [pc, #728]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c706:	4bb5      	ldr	r3, [pc, #724]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c708:	49b5      	ldr	r1, [pc, #724]	@ (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800c70a:	400a      	ands	r2, r1
 800c70c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2201      	movs	r2, #1
 800c714:	4013      	ands	r3, r2
 800c716:	d009      	beq.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c718:	4bb0      	ldr	r3, [pc, #704]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c71a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c71c:	2203      	movs	r2, #3
 800c71e:	4393      	bics	r3, r2
 800c720:	0019      	movs	r1, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	4bad      	ldr	r3, [pc, #692]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c728:	430a      	orrs	r2, r1
 800c72a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2202      	movs	r2, #2
 800c732:	4013      	ands	r3, r2
 800c734:	d009      	beq.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c736:	4ba9      	ldr	r3, [pc, #676]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c73a:	220c      	movs	r2, #12
 800c73c:	4393      	bics	r3, r2
 800c73e:	0019      	movs	r1, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	689a      	ldr	r2, [r3, #8]
 800c744:	4ba5      	ldr	r3, [pc, #660]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c746:	430a      	orrs	r2, r1
 800c748:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2204      	movs	r2, #4
 800c750:	4013      	ands	r3, r2
 800c752:	d009      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c754:	4ba1      	ldr	r3, [pc, #644]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c758:	2230      	movs	r2, #48	@ 0x30
 800c75a:	4393      	bics	r3, r2
 800c75c:	0019      	movs	r1, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68da      	ldr	r2, [r3, #12]
 800c762:	4b9e      	ldr	r3, [pc, #632]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c764:	430a      	orrs	r2, r1
 800c766:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2210      	movs	r2, #16
 800c76e:	4013      	ands	r3, r2
 800c770:	d009      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c772:	4b9a      	ldr	r3, [pc, #616]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c776:	4a9b      	ldr	r2, [pc, #620]	@ (800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800c778:	4013      	ands	r3, r2
 800c77a:	0019      	movs	r1, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	691a      	ldr	r2, [r3, #16]
 800c780:	4b96      	ldr	r3, [pc, #600]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c782:	430a      	orrs	r2, r1
 800c784:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	2380      	movs	r3, #128	@ 0x80
 800c78c:	015b      	lsls	r3, r3, #5
 800c78e:	4013      	ands	r3, r2
 800c790:	d009      	beq.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800c792:	4b92      	ldr	r3, [pc, #584]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c796:	4a94      	ldr	r2, [pc, #592]	@ (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c798:	4013      	ands	r3, r2
 800c79a:	0019      	movs	r1, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	695a      	ldr	r2, [r3, #20]
 800c7a0:	4b8e      	ldr	r3, [pc, #568]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	2380      	movs	r3, #128	@ 0x80
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	d009      	beq.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c7b2:	4b8a      	ldr	r3, [pc, #552]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c7b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7b6:	4a8d      	ldr	r2, [pc, #564]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800c7b8:	4013      	ands	r3, r2
 800c7ba:	0019      	movs	r1, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7c0:	4b86      	ldr	r3, [pc, #536]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c7c2:	430a      	orrs	r2, r1
 800c7c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	2380      	movs	r3, #128	@ 0x80
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	d009      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7d2:	4b82      	ldr	r3, [pc, #520]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7d6:	4a86      	ldr	r2, [pc, #536]	@ (800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	0019      	movs	r1, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e0:	4b7e      	ldr	r3, [pc, #504]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c7e2:	430a      	orrs	r2, r1
 800c7e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2220      	movs	r2, #32
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	d009      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c7f0:	4b7a      	ldr	r3, [pc, #488]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c7f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7f4:	4a7f      	ldr	r2, [pc, #508]	@ (800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	0019      	movs	r1, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	699a      	ldr	r2, [r3, #24]
 800c7fe:	4b77      	ldr	r3, [pc, #476]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c800:	430a      	orrs	r2, r1
 800c802:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2240      	movs	r2, #64	@ 0x40
 800c80a:	4013      	ands	r3, r2
 800c80c:	d009      	beq.n	800c822 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c80e:	4b73      	ldr	r3, [pc, #460]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c812:	4a79      	ldr	r2, [pc, #484]	@ (800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c814:	4013      	ands	r3, r2
 800c816:	0019      	movs	r1, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	69da      	ldr	r2, [r3, #28]
 800c81c:	4b6f      	ldr	r3, [pc, #444]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c81e:	430a      	orrs	r2, r1
 800c820:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	2380      	movs	r3, #128	@ 0x80
 800c828:	01db      	lsls	r3, r3, #7
 800c82a:	4013      	ands	r3, r2
 800c82c:	d015      	beq.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c82e:	4b6b      	ldr	r3, [pc, #428]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	0899      	lsrs	r1, r3, #2
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c83a:	4b68      	ldr	r3, [pc, #416]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c83c:	430a      	orrs	r2, r1
 800c83e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c844:	2380      	movs	r3, #128	@ 0x80
 800c846:	05db      	lsls	r3, r3, #23
 800c848:	429a      	cmp	r2, r3
 800c84a:	d106      	bne.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c84c:	4b63      	ldr	r3, [pc, #396]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c84e:	68da      	ldr	r2, [r3, #12]
 800c850:	4b62      	ldr	r3, [pc, #392]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c852:	2180      	movs	r1, #128	@ 0x80
 800c854:	0249      	lsls	r1, r1, #9
 800c856:	430a      	orrs	r2, r1
 800c858:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	2380      	movs	r3, #128	@ 0x80
 800c860:	031b      	lsls	r3, r3, #12
 800c862:	4013      	ands	r3, r2
 800c864:	d009      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c866:	4b5d      	ldr	r3, [pc, #372]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86a:	2240      	movs	r2, #64	@ 0x40
 800c86c:	4393      	bics	r3, r2
 800c86e:	0019      	movs	r1, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c874:	4b59      	ldr	r3, [pc, #356]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c876:	430a      	orrs	r2, r1
 800c878:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	2380      	movs	r3, #128	@ 0x80
 800c880:	039b      	lsls	r3, r3, #14
 800c882:	4013      	ands	r3, r2
 800c884:	d016      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800c886:	4b55      	ldr	r3, [pc, #340]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c88a:	4a5c      	ldr	r2, [pc, #368]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c88c:	4013      	ands	r3, r2
 800c88e:	0019      	movs	r1, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c894:	4b51      	ldr	r3, [pc, #324]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c896:	430a      	orrs	r2, r1
 800c898:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c89e:	2380      	movs	r3, #128	@ 0x80
 800c8a0:	03db      	lsls	r3, r3, #15
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d106      	bne.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c8a6:	4b4d      	ldr	r3, [pc, #308]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c8a8:	68da      	ldr	r2, [r3, #12]
 800c8aa:	4b4c      	ldr	r3, [pc, #304]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c8ac:	2180      	movs	r1, #128	@ 0x80
 800c8ae:	0449      	lsls	r1, r1, #17
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	2380      	movs	r3, #128	@ 0x80
 800c8ba:	03db      	lsls	r3, r3, #15
 800c8bc:	4013      	ands	r3, r2
 800c8be:	d016      	beq.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800c8c0:	4b46      	ldr	r3, [pc, #280]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c8c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8c4:	4a4e      	ldr	r2, [pc, #312]	@ (800ca00 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	0019      	movs	r1, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8ce:	4b43      	ldr	r3, [pc, #268]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c8d8:	2380      	movs	r3, #128	@ 0x80
 800c8da:	045b      	lsls	r3, r3, #17
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d106      	bne.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c8e0:	4b3e      	ldr	r3, [pc, #248]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c8e2:	68da      	ldr	r2, [r3, #12]
 800c8e4:	4b3d      	ldr	r3, [pc, #244]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c8e6:	2180      	movs	r1, #128	@ 0x80
 800c8e8:	0449      	lsls	r1, r1, #17
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	2380      	movs	r3, #128	@ 0x80
 800c8f4:	011b      	lsls	r3, r3, #4
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	d014      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800c8fa:	4b38      	ldr	r3, [pc, #224]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c8fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8fe:	2203      	movs	r2, #3
 800c900:	4393      	bics	r3, r2
 800c902:	0019      	movs	r1, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6a1a      	ldr	r2, [r3, #32]
 800c908:	4b34      	ldr	r3, [pc, #208]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c90a:	430a      	orrs	r2, r1
 800c90c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d106      	bne.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c916:	4b31      	ldr	r3, [pc, #196]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	4b30      	ldr	r3, [pc, #192]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c91c:	2180      	movs	r1, #128	@ 0x80
 800c91e:	0249      	lsls	r1, r1, #9
 800c920:	430a      	orrs	r2, r1
 800c922:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	2380      	movs	r3, #128	@ 0x80
 800c92a:	019b      	lsls	r3, r3, #6
 800c92c:	4013      	ands	r3, r2
 800c92e:	d014      	beq.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800c930:	4b2a      	ldr	r3, [pc, #168]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c934:	220c      	movs	r2, #12
 800c936:	4393      	bics	r3, r2
 800c938:	0019      	movs	r1, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c93e:	4b27      	ldr	r3, [pc, #156]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c940:	430a      	orrs	r2, r1
 800c942:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c948:	2b04      	cmp	r3, #4
 800c94a:	d106      	bne.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c94c:	4b23      	ldr	r3, [pc, #140]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	4b22      	ldr	r3, [pc, #136]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c952:	2180      	movs	r1, #128	@ 0x80
 800c954:	0249      	lsls	r1, r1, #9
 800c956:	430a      	orrs	r2, r1
 800c958:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	2380      	movs	r3, #128	@ 0x80
 800c960:	045b      	lsls	r3, r3, #17
 800c962:	4013      	ands	r3, r2
 800c964:	d016      	beq.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c966:	4b1d      	ldr	r3, [pc, #116]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c96a:	4a22      	ldr	r2, [pc, #136]	@ (800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96c:	4013      	ands	r3, r2
 800c96e:	0019      	movs	r1, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c974:	4b19      	ldr	r3, [pc, #100]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c976:	430a      	orrs	r2, r1
 800c978:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c97e:	2380      	movs	r3, #128	@ 0x80
 800c980:	019b      	lsls	r3, r3, #6
 800c982:	429a      	cmp	r2, r3
 800c984:	d106      	bne.n	800c994 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c986:	4b15      	ldr	r3, [pc, #84]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c988:	68da      	ldr	r2, [r3, #12]
 800c98a:	4b14      	ldr	r3, [pc, #80]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c98c:	2180      	movs	r1, #128	@ 0x80
 800c98e:	0449      	lsls	r1, r1, #17
 800c990:	430a      	orrs	r2, r1
 800c992:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	2380      	movs	r3, #128	@ 0x80
 800c99a:	049b      	lsls	r3, r3, #18
 800c99c:	4013      	ands	r3, r2
 800c99e:	d016      	beq.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c9a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9a4:	4a10      	ldr	r2, [pc, #64]	@ (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	0019      	movs	r1, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9b8:	2380      	movs	r3, #128	@ 0x80
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d106      	bne.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c9c0:	4b06      	ldr	r3, [pc, #24]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c9c2:	68da      	ldr	r2, [r3, #12]
 800c9c4:	4b05      	ldr	r3, [pc, #20]	@ (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800c9c6:	2180      	movs	r1, #128	@ 0x80
 800c9c8:	0449      	lsls	r1, r1, #17
 800c9ca:	430a      	orrs	r2, r1
 800c9cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c9ce:	2312      	movs	r3, #18
 800c9d0:	18fb      	adds	r3, r7, r3
 800c9d2:	781b      	ldrb	r3, [r3, #0]
}
 800c9d4:	0018      	movs	r0, r3
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	b006      	add	sp, #24
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	40021000 	.word	0x40021000
 800c9e0:	efffffff 	.word	0xefffffff
 800c9e4:	fffff3ff 	.word	0xfffff3ff
 800c9e8:	fffffcff 	.word	0xfffffcff
 800c9ec:	fff3ffff 	.word	0xfff3ffff
 800c9f0:	ffcfffff 	.word	0xffcfffff
 800c9f4:	ffffcfff 	.word	0xffffcfff
 800c9f8:	ffff3fff 	.word	0xffff3fff
 800c9fc:	ffbfffff 	.word	0xffbfffff
 800ca00:	feffffff 	.word	0xfeffffff

0800ca04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e04a      	b.n	800caac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	223d      	movs	r2, #61	@ 0x3d
 800ca1a:	5c9b      	ldrb	r3, [r3, r2]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d107      	bne.n	800ca32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	223c      	movs	r2, #60	@ 0x3c
 800ca26:	2100      	movs	r1, #0
 800ca28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f000 f841 	bl	800cab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	223d      	movs	r2, #61	@ 0x3d
 800ca36:	2102      	movs	r1, #2
 800ca38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3304      	adds	r3, #4
 800ca42:	0019      	movs	r1, r3
 800ca44:	0010      	movs	r0, r2
 800ca46:	f000 fc0f 	bl	800d268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2248      	movs	r2, #72	@ 0x48
 800ca4e:	2101      	movs	r1, #1
 800ca50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	223e      	movs	r2, #62	@ 0x3e
 800ca56:	2101      	movs	r1, #1
 800ca58:	5499      	strb	r1, [r3, r2]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	223f      	movs	r2, #63	@ 0x3f
 800ca5e:	2101      	movs	r1, #1
 800ca60:	5499      	strb	r1, [r3, r2]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2240      	movs	r2, #64	@ 0x40
 800ca66:	2101      	movs	r1, #1
 800ca68:	5499      	strb	r1, [r3, r2]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2241      	movs	r2, #65	@ 0x41
 800ca6e:	2101      	movs	r1, #1
 800ca70:	5499      	strb	r1, [r3, r2]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2242      	movs	r2, #66	@ 0x42
 800ca76:	2101      	movs	r1, #1
 800ca78:	5499      	strb	r1, [r3, r2]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2243      	movs	r2, #67	@ 0x43
 800ca7e:	2101      	movs	r1, #1
 800ca80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2244      	movs	r2, #68	@ 0x44
 800ca86:	2101      	movs	r1, #1
 800ca88:	5499      	strb	r1, [r3, r2]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2245      	movs	r2, #69	@ 0x45
 800ca8e:	2101      	movs	r1, #1
 800ca90:	5499      	strb	r1, [r3, r2]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2246      	movs	r2, #70	@ 0x46
 800ca96:	2101      	movs	r1, #1
 800ca98:	5499      	strb	r1, [r3, r2]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2247      	movs	r2, #71	@ 0x47
 800ca9e:	2101      	movs	r1, #1
 800caa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	223d      	movs	r2, #61	@ 0x3d
 800caa6:	2101      	movs	r1, #1
 800caa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	0018      	movs	r0, r3
 800caae:	46bd      	mov	sp, r7
 800cab0:	b002      	add	sp, #8
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cabc:	46c0      	nop			@ (mov r8, r8)
 800cabe:	46bd      	mov	sp, r7
 800cac0:	b002      	add	sp, #8
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	223d      	movs	r2, #61	@ 0x3d
 800cad0:	5c9b      	ldrb	r3, [r3, r2]
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d001      	beq.n	800cadc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	e047      	b.n	800cb6c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	223d      	movs	r2, #61	@ 0x3d
 800cae0:	2102      	movs	r1, #2
 800cae2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68da      	ldr	r2, [r3, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2101      	movs	r1, #1
 800caf0:	430a      	orrs	r2, r1
 800caf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a1e      	ldr	r2, [pc, #120]	@ (800cb74 <HAL_TIM_Base_Start_IT+0xb0>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d014      	beq.n	800cb28 <HAL_TIM_Base_Start_IT+0x64>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	2380      	movs	r3, #128	@ 0x80
 800cb04:	05db      	lsls	r3, r3, #23
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d00e      	beq.n	800cb28 <HAL_TIM_Base_Start_IT+0x64>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a1a      	ldr	r2, [pc, #104]	@ (800cb78 <HAL_TIM_Base_Start_IT+0xb4>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d009      	beq.n	800cb28 <HAL_TIM_Base_Start_IT+0x64>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a18      	ldr	r2, [pc, #96]	@ (800cb7c <HAL_TIM_Base_Start_IT+0xb8>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d004      	beq.n	800cb28 <HAL_TIM_Base_Start_IT+0x64>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a17      	ldr	r2, [pc, #92]	@ (800cb80 <HAL_TIM_Base_Start_IT+0xbc>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d116      	bne.n	800cb56 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	4a15      	ldr	r2, [pc, #84]	@ (800cb84 <HAL_TIM_Base_Start_IT+0xc0>)
 800cb30:	4013      	ands	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d016      	beq.n	800cb68 <HAL_TIM_Base_Start_IT+0xa4>
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	2380      	movs	r3, #128	@ 0x80
 800cb3e:	025b      	lsls	r3, r3, #9
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d011      	beq.n	800cb68 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2101      	movs	r1, #1
 800cb50:	430a      	orrs	r2, r1
 800cb52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb54:	e008      	b.n	800cb68 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2101      	movs	r1, #1
 800cb62:	430a      	orrs	r2, r1
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	e000      	b.n	800cb6a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb68:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	b004      	add	sp, #16
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	40012c00 	.word	0x40012c00
 800cb78:	40000400 	.word	0x40000400
 800cb7c:	40000800 	.word	0x40000800
 800cb80:	40014000 	.word	0x40014000
 800cb84:	00010007 	.word	0x00010007

0800cb88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e04a      	b.n	800cc30 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	223d      	movs	r2, #61	@ 0x3d
 800cb9e:	5c9b      	ldrb	r3, [r3, r2]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d107      	bne.n	800cbb6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	223c      	movs	r2, #60	@ 0x3c
 800cbaa:	2100      	movs	r1, #0
 800cbac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	0018      	movs	r0, r3
 800cbb2:	f7fb ff1f 	bl	80089f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	223d      	movs	r2, #61	@ 0x3d
 800cbba:	2102      	movs	r1, #2
 800cbbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	0019      	movs	r1, r3
 800cbc8:	0010      	movs	r0, r2
 800cbca:	f000 fb4d 	bl	800d268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2248      	movs	r2, #72	@ 0x48
 800cbd2:	2101      	movs	r1, #1
 800cbd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	223e      	movs	r2, #62	@ 0x3e
 800cbda:	2101      	movs	r1, #1
 800cbdc:	5499      	strb	r1, [r3, r2]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	223f      	movs	r2, #63	@ 0x3f
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	5499      	strb	r1, [r3, r2]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2240      	movs	r2, #64	@ 0x40
 800cbea:	2101      	movs	r1, #1
 800cbec:	5499      	strb	r1, [r3, r2]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2241      	movs	r2, #65	@ 0x41
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	5499      	strb	r1, [r3, r2]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2242      	movs	r2, #66	@ 0x42
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	5499      	strb	r1, [r3, r2]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2243      	movs	r2, #67	@ 0x43
 800cc02:	2101      	movs	r1, #1
 800cc04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2244      	movs	r2, #68	@ 0x44
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	5499      	strb	r1, [r3, r2]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2245      	movs	r2, #69	@ 0x45
 800cc12:	2101      	movs	r1, #1
 800cc14:	5499      	strb	r1, [r3, r2]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2246      	movs	r2, #70	@ 0x46
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	5499      	strb	r1, [r3, r2]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2247      	movs	r2, #71	@ 0x47
 800cc22:	2101      	movs	r1, #1
 800cc24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	223d      	movs	r2, #61	@ 0x3d
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	0018      	movs	r0, r3
 800cc32:	46bd      	mov	sp, r7
 800cc34:	b002      	add	sp, #8
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d108      	bne.n	800cc5a <HAL_TIM_PWM_Start+0x22>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	223e      	movs	r2, #62	@ 0x3e
 800cc4c:	5c9b      	ldrb	r3, [r3, r2]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	3b01      	subs	r3, #1
 800cc52:	1e5a      	subs	r2, r3, #1
 800cc54:	4193      	sbcs	r3, r2
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	e037      	b.n	800ccca <HAL_TIM_PWM_Start+0x92>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b04      	cmp	r3, #4
 800cc5e:	d108      	bne.n	800cc72 <HAL_TIM_PWM_Start+0x3a>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	223f      	movs	r2, #63	@ 0x3f
 800cc64:	5c9b      	ldrb	r3, [r3, r2]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	1e5a      	subs	r2, r3, #1
 800cc6c:	4193      	sbcs	r3, r2
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	e02b      	b.n	800ccca <HAL_TIM_PWM_Start+0x92>
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	2b08      	cmp	r3, #8
 800cc76:	d108      	bne.n	800cc8a <HAL_TIM_PWM_Start+0x52>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2240      	movs	r2, #64	@ 0x40
 800cc7c:	5c9b      	ldrb	r3, [r3, r2]
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	3b01      	subs	r3, #1
 800cc82:	1e5a      	subs	r2, r3, #1
 800cc84:	4193      	sbcs	r3, r2
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	e01f      	b.n	800ccca <HAL_TIM_PWM_Start+0x92>
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	2b0c      	cmp	r3, #12
 800cc8e:	d108      	bne.n	800cca2 <HAL_TIM_PWM_Start+0x6a>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2241      	movs	r2, #65	@ 0x41
 800cc94:	5c9b      	ldrb	r3, [r3, r2]
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	1e5a      	subs	r2, r3, #1
 800cc9c:	4193      	sbcs	r3, r2
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	e013      	b.n	800ccca <HAL_TIM_PWM_Start+0x92>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b10      	cmp	r3, #16
 800cca6:	d108      	bne.n	800ccba <HAL_TIM_PWM_Start+0x82>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2242      	movs	r2, #66	@ 0x42
 800ccac:	5c9b      	ldrb	r3, [r3, r2]
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	1e5a      	subs	r2, r3, #1
 800ccb4:	4193      	sbcs	r3, r2
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	e007      	b.n	800ccca <HAL_TIM_PWM_Start+0x92>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2243      	movs	r2, #67	@ 0x43
 800ccbe:	5c9b      	ldrb	r3, [r3, r2]
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	1e5a      	subs	r2, r3, #1
 800ccc6:	4193      	sbcs	r3, r2
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e090      	b.n	800cdf4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d104      	bne.n	800cce2 <HAL_TIM_PWM_Start+0xaa>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	223e      	movs	r2, #62	@ 0x3e
 800ccdc:	2102      	movs	r1, #2
 800ccde:	5499      	strb	r1, [r3, r2]
 800cce0:	e023      	b.n	800cd2a <HAL_TIM_PWM_Start+0xf2>
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d104      	bne.n	800ccf2 <HAL_TIM_PWM_Start+0xba>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	223f      	movs	r2, #63	@ 0x3f
 800ccec:	2102      	movs	r1, #2
 800ccee:	5499      	strb	r1, [r3, r2]
 800ccf0:	e01b      	b.n	800cd2a <HAL_TIM_PWM_Start+0xf2>
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2b08      	cmp	r3, #8
 800ccf6:	d104      	bne.n	800cd02 <HAL_TIM_PWM_Start+0xca>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2240      	movs	r2, #64	@ 0x40
 800ccfc:	2102      	movs	r1, #2
 800ccfe:	5499      	strb	r1, [r3, r2]
 800cd00:	e013      	b.n	800cd2a <HAL_TIM_PWM_Start+0xf2>
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b0c      	cmp	r3, #12
 800cd06:	d104      	bne.n	800cd12 <HAL_TIM_PWM_Start+0xda>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2241      	movs	r2, #65	@ 0x41
 800cd0c:	2102      	movs	r1, #2
 800cd0e:	5499      	strb	r1, [r3, r2]
 800cd10:	e00b      	b.n	800cd2a <HAL_TIM_PWM_Start+0xf2>
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	2b10      	cmp	r3, #16
 800cd16:	d104      	bne.n	800cd22 <HAL_TIM_PWM_Start+0xea>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2242      	movs	r2, #66	@ 0x42
 800cd1c:	2102      	movs	r1, #2
 800cd1e:	5499      	strb	r1, [r3, r2]
 800cd20:	e003      	b.n	800cd2a <HAL_TIM_PWM_Start+0xf2>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2243      	movs	r2, #67	@ 0x43
 800cd26:	2102      	movs	r1, #2
 800cd28:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	2201      	movs	r2, #1
 800cd32:	0018      	movs	r0, r3
 800cd34:	f000 fdf4 	bl	800d920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a2f      	ldr	r2, [pc, #188]	@ (800cdfc <HAL_TIM_PWM_Start+0x1c4>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d00e      	beq.n	800cd60 <HAL_TIM_PWM_Start+0x128>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a2e      	ldr	r2, [pc, #184]	@ (800ce00 <HAL_TIM_PWM_Start+0x1c8>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d009      	beq.n	800cd60 <HAL_TIM_PWM_Start+0x128>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a2c      	ldr	r2, [pc, #176]	@ (800ce04 <HAL_TIM_PWM_Start+0x1cc>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d004      	beq.n	800cd60 <HAL_TIM_PWM_Start+0x128>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a2b      	ldr	r2, [pc, #172]	@ (800ce08 <HAL_TIM_PWM_Start+0x1d0>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d101      	bne.n	800cd64 <HAL_TIM_PWM_Start+0x12c>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e000      	b.n	800cd66 <HAL_TIM_PWM_Start+0x12e>
 800cd64:	2300      	movs	r3, #0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d008      	beq.n	800cd7c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2180      	movs	r1, #128	@ 0x80
 800cd76:	0209      	lsls	r1, r1, #8
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a1e      	ldr	r2, [pc, #120]	@ (800cdfc <HAL_TIM_PWM_Start+0x1c4>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d014      	beq.n	800cdb0 <HAL_TIM_PWM_Start+0x178>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	2380      	movs	r3, #128	@ 0x80
 800cd8c:	05db      	lsls	r3, r3, #23
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d00e      	beq.n	800cdb0 <HAL_TIM_PWM_Start+0x178>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a1d      	ldr	r2, [pc, #116]	@ (800ce0c <HAL_TIM_PWM_Start+0x1d4>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d009      	beq.n	800cdb0 <HAL_TIM_PWM_Start+0x178>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a1b      	ldr	r2, [pc, #108]	@ (800ce10 <HAL_TIM_PWM_Start+0x1d8>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d004      	beq.n	800cdb0 <HAL_TIM_PWM_Start+0x178>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a15      	ldr	r2, [pc, #84]	@ (800ce00 <HAL_TIM_PWM_Start+0x1c8>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d116      	bne.n	800cdde <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	4a17      	ldr	r2, [pc, #92]	@ (800ce14 <HAL_TIM_PWM_Start+0x1dc>)
 800cdb8:	4013      	ands	r3, r2
 800cdba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b06      	cmp	r3, #6
 800cdc0:	d016      	beq.n	800cdf0 <HAL_TIM_PWM_Start+0x1b8>
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	2380      	movs	r3, #128	@ 0x80
 800cdc6:	025b      	lsls	r3, r3, #9
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d011      	beq.n	800cdf0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2101      	movs	r1, #1
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cddc:	e008      	b.n	800cdf0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2101      	movs	r1, #1
 800cdea:	430a      	orrs	r2, r1
 800cdec:	601a      	str	r2, [r3, #0]
 800cdee:	e000      	b.n	800cdf2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdf0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	b004      	add	sp, #16
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	40012c00 	.word	0x40012c00
 800ce00:	40014000 	.word	0x40014000
 800ce04:	40014400 	.word	0x40014400
 800ce08:	40014800 	.word	0x40014800
 800ce0c:	40000400 	.word	0x40000400
 800ce10:	40000800 	.word	0x40000800
 800ce14:	00010007 	.word	0x00010007

0800ce18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2202      	movs	r2, #2
 800ce34:	4013      	ands	r3, r2
 800ce36:	d021      	beq.n	800ce7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	d01d      	beq.n	800ce7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2203      	movs	r2, #3
 800ce46:	4252      	negs	r2, r2
 800ce48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	2203      	movs	r2, #3
 800ce58:	4013      	ands	r3, r2
 800ce5a:	d004      	beq.n	800ce66 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	0018      	movs	r0, r3
 800ce60:	f000 f9ea 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800ce64:	e007      	b.n	800ce76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	0018      	movs	r0, r3
 800ce6a:	f000 f9dd 	bl	800d228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	0018      	movs	r0, r3
 800ce72:	f000 f9e9 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	2204      	movs	r2, #4
 800ce80:	4013      	ands	r3, r2
 800ce82:	d022      	beq.n	800ceca <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2204      	movs	r2, #4
 800ce88:	4013      	ands	r3, r2
 800ce8a:	d01e      	beq.n	800ceca <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2205      	movs	r2, #5
 800ce92:	4252      	negs	r2, r2
 800ce94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2202      	movs	r2, #2
 800ce9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	699a      	ldr	r2, [r3, #24]
 800cea2:	23c0      	movs	r3, #192	@ 0xc0
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4013      	ands	r3, r2
 800cea8:	d004      	beq.n	800ceb4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	0018      	movs	r0, r3
 800ceae:	f000 f9c3 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800ceb2:	e007      	b.n	800cec4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	0018      	movs	r0, r3
 800ceb8:	f000 f9b6 	bl	800d228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	0018      	movs	r0, r3
 800cec0:	f000 f9c2 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	2208      	movs	r2, #8
 800cece:	4013      	ands	r3, r2
 800ced0:	d021      	beq.n	800cf16 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2208      	movs	r2, #8
 800ced6:	4013      	ands	r3, r2
 800ced8:	d01d      	beq.n	800cf16 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2209      	movs	r2, #9
 800cee0:	4252      	negs	r2, r2
 800cee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2204      	movs	r2, #4
 800cee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	69db      	ldr	r3, [r3, #28]
 800cef0:	2203      	movs	r2, #3
 800cef2:	4013      	ands	r3, r2
 800cef4:	d004      	beq.n	800cf00 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	0018      	movs	r0, r3
 800cefa:	f000 f99d 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800cefe:	e007      	b.n	800cf10 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	0018      	movs	r0, r3
 800cf04:	f000 f990 	bl	800d228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f000 f99c 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2210      	movs	r2, #16
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	d022      	beq.n	800cf64 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2210      	movs	r2, #16
 800cf22:	4013      	ands	r3, r2
 800cf24:	d01e      	beq.n	800cf64 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2211      	movs	r2, #17
 800cf2c:	4252      	negs	r2, r2
 800cf2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2208      	movs	r2, #8
 800cf34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	69da      	ldr	r2, [r3, #28]
 800cf3c:	23c0      	movs	r3, #192	@ 0xc0
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4013      	ands	r3, r2
 800cf42:	d004      	beq.n	800cf4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	0018      	movs	r0, r3
 800cf48:	f000 f976 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800cf4c:	e007      	b.n	800cf5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	0018      	movs	r0, r3
 800cf52:	f000 f969 	bl	800d228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	0018      	movs	r0, r3
 800cf5a:	f000 f975 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2201      	movs	r2, #1
 800cf68:	4013      	ands	r3, r2
 800cf6a:	d00c      	beq.n	800cf86 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	4013      	ands	r3, r2
 800cf72:	d008      	beq.n	800cf86 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2202      	movs	r2, #2
 800cf7a:	4252      	negs	r2, r2
 800cf7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	0018      	movs	r0, r3
 800cf82:	f7fb fc49 	bl	8008818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2280      	movs	r2, #128	@ 0x80
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	d104      	bne.n	800cf98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	2380      	movs	r3, #128	@ 0x80
 800cf92:	019b      	lsls	r3, r3, #6
 800cf94:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cf96:	d00b      	beq.n	800cfb0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2280      	movs	r2, #128	@ 0x80
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	d007      	beq.n	800cfb0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a1e      	ldr	r2, [pc, #120]	@ (800d020 <HAL_TIM_IRQHandler+0x208>)
 800cfa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	0018      	movs	r0, r3
 800cfac:	f000 fd5a 	bl	800da64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	2380      	movs	r3, #128	@ 0x80
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	d00b      	beq.n	800cfd2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2280      	movs	r2, #128	@ 0x80
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	d007      	beq.n	800cfd2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a17      	ldr	r2, [pc, #92]	@ (800d024 <HAL_TIM_IRQHandler+0x20c>)
 800cfc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f000 fd51 	bl	800da74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2240      	movs	r2, #64	@ 0x40
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	d00c      	beq.n	800cff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2240      	movs	r2, #64	@ 0x40
 800cfde:	4013      	ands	r3, r2
 800cfe0:	d008      	beq.n	800cff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2241      	movs	r2, #65	@ 0x41
 800cfe8:	4252      	negs	r2, r2
 800cfea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	0018      	movs	r0, r3
 800cff0:	f000 f932 	bl	800d258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2220      	movs	r2, #32
 800cff8:	4013      	ands	r3, r2
 800cffa:	d00c      	beq.n	800d016 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2220      	movs	r2, #32
 800d000:	4013      	ands	r3, r2
 800d002:	d008      	beq.n	800d016 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2221      	movs	r2, #33	@ 0x21
 800d00a:	4252      	negs	r2, r2
 800d00c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	0018      	movs	r0, r3
 800d012:	f000 fd1f 	bl	800da54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d016:	46c0      	nop			@ (mov r8, r8)
 800d018:	46bd      	mov	sp, r7
 800d01a:	b004      	add	sp, #16
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	46c0      	nop			@ (mov r8, r8)
 800d020:	ffffdf7f 	.word	0xffffdf7f
 800d024:	fffffeff 	.word	0xfffffeff

0800d028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d034:	2317      	movs	r3, #23
 800d036:	18fb      	adds	r3, r7, r3
 800d038:	2200      	movs	r2, #0
 800d03a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	223c      	movs	r2, #60	@ 0x3c
 800d040:	5c9b      	ldrb	r3, [r3, r2]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d101      	bne.n	800d04a <HAL_TIM_PWM_ConfigChannel+0x22>
 800d046:	2302      	movs	r3, #2
 800d048:	e0e5      	b.n	800d216 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	223c      	movs	r2, #60	@ 0x3c
 800d04e:	2101      	movs	r1, #1
 800d050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b14      	cmp	r3, #20
 800d056:	d900      	bls.n	800d05a <HAL_TIM_PWM_ConfigChannel+0x32>
 800d058:	e0d1      	b.n	800d1fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	009a      	lsls	r2, r3, #2
 800d05e:	4b70      	ldr	r3, [pc, #448]	@ (800d220 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800d060:	18d3      	adds	r3, r2, r3
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	0011      	movs	r1, r2
 800d06e:	0018      	movs	r0, r3
 800d070:	f000 f992 	bl	800d398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	699a      	ldr	r2, [r3, #24]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2108      	movs	r1, #8
 800d080:	430a      	orrs	r2, r1
 800d082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	699a      	ldr	r2, [r3, #24]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2104      	movs	r1, #4
 800d090:	438a      	bics	r2, r1
 800d092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6999      	ldr	r1, [r3, #24]
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	691a      	ldr	r2, [r3, #16]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	619a      	str	r2, [r3, #24]
      break;
 800d0a6:	e0af      	b.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	0011      	movs	r1, r2
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	f000 f9fb 	bl	800d4ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	699a      	ldr	r2, [r3, #24]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2180      	movs	r1, #128	@ 0x80
 800d0c2:	0109      	lsls	r1, r1, #4
 800d0c4:	430a      	orrs	r2, r1
 800d0c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	699a      	ldr	r2, [r3, #24]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4954      	ldr	r1, [pc, #336]	@ (800d224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d0d4:	400a      	ands	r2, r1
 800d0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6999      	ldr	r1, [r3, #24]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	021a      	lsls	r2, r3, #8
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	619a      	str	r2, [r3, #24]
      break;
 800d0ec:	e08c      	b.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	0011      	movs	r1, r2
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f000 fa5c 	bl	800d5b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	69da      	ldr	r2, [r3, #28]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2108      	movs	r1, #8
 800d108:	430a      	orrs	r2, r1
 800d10a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	69da      	ldr	r2, [r3, #28]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2104      	movs	r1, #4
 800d118:	438a      	bics	r2, r1
 800d11a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	69d9      	ldr	r1, [r3, #28]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	691a      	ldr	r2, [r3, #16]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	430a      	orrs	r2, r1
 800d12c:	61da      	str	r2, [r3, #28]
      break;
 800d12e:	e06b      	b.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	0011      	movs	r1, r2
 800d138:	0018      	movs	r0, r3
 800d13a:	f000 fac3 	bl	800d6c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	69da      	ldr	r2, [r3, #28]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2180      	movs	r1, #128	@ 0x80
 800d14a:	0109      	lsls	r1, r1, #4
 800d14c:	430a      	orrs	r2, r1
 800d14e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	69da      	ldr	r2, [r3, #28]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4932      	ldr	r1, [pc, #200]	@ (800d224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d15c:	400a      	ands	r2, r1
 800d15e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	69d9      	ldr	r1, [r3, #28]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	021a      	lsls	r2, r3, #8
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	430a      	orrs	r2, r1
 800d172:	61da      	str	r2, [r3, #28]
      break;
 800d174:	e048      	b.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	0011      	movs	r1, r2
 800d17e:	0018      	movs	r0, r3
 800d180:	f000 fb0a 	bl	800d798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2108      	movs	r1, #8
 800d190:	430a      	orrs	r2, r1
 800d192:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2104      	movs	r1, #4
 800d1a0:	438a      	bics	r2, r1
 800d1a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	691a      	ldr	r2, [r3, #16]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	430a      	orrs	r2, r1
 800d1b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d1b6:	e027      	b.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	0011      	movs	r1, r2
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f000 fb49 	bl	800d858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2180      	movs	r1, #128	@ 0x80
 800d1d2:	0109      	lsls	r1, r1, #4
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4910      	ldr	r1, [pc, #64]	@ (800d224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800d1e4:	400a      	ands	r2, r1
 800d1e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	021a      	lsls	r2, r3, #8
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	430a      	orrs	r2, r1
 800d1fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d1fc:	e004      	b.n	800d208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800d1fe:	2317      	movs	r3, #23
 800d200:	18fb      	adds	r3, r7, r3
 800d202:	2201      	movs	r2, #1
 800d204:	701a      	strb	r2, [r3, #0]
      break;
 800d206:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	223c      	movs	r2, #60	@ 0x3c
 800d20c:	2100      	movs	r1, #0
 800d20e:	5499      	strb	r1, [r3, r2]

  return status;
 800d210:	2317      	movs	r3, #23
 800d212:	18fb      	adds	r3, r7, r3
 800d214:	781b      	ldrb	r3, [r3, #0]
}
 800d216:	0018      	movs	r0, r3
 800d218:	46bd      	mov	sp, r7
 800d21a:	b006      	add	sp, #24
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	46c0      	nop			@ (mov r8, r8)
 800d220:	08019a78 	.word	0x08019a78
 800d224:	fffffbff 	.word	0xfffffbff

0800d228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d230:	46c0      	nop			@ (mov r8, r8)
 800d232:	46bd      	mov	sp, r7
 800d234:	b002      	add	sp, #8
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d240:	46c0      	nop			@ (mov r8, r8)
 800d242:	46bd      	mov	sp, r7
 800d244:	b002      	add	sp, #8
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d250:	46c0      	nop			@ (mov r8, r8)
 800d252:	46bd      	mov	sp, r7
 800d254:	b002      	add	sp, #8
 800d256:	bd80      	pop	{r7, pc}

0800d258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d260:	46c0      	nop			@ (mov r8, r8)
 800d262:	46bd      	mov	sp, r7
 800d264:	b002      	add	sp, #8
 800d266:	bd80      	pop	{r7, pc}

0800d268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a3f      	ldr	r2, [pc, #252]	@ (800d378 <TIM_Base_SetConfig+0x110>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d00c      	beq.n	800d29a <TIM_Base_SetConfig+0x32>
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	2380      	movs	r3, #128	@ 0x80
 800d284:	05db      	lsls	r3, r3, #23
 800d286:	429a      	cmp	r2, r3
 800d288:	d007      	beq.n	800d29a <TIM_Base_SetConfig+0x32>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4a3b      	ldr	r2, [pc, #236]	@ (800d37c <TIM_Base_SetConfig+0x114>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d003      	beq.n	800d29a <TIM_Base_SetConfig+0x32>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a3a      	ldr	r2, [pc, #232]	@ (800d380 <TIM_Base_SetConfig+0x118>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d108      	bne.n	800d2ac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2270      	movs	r2, #112	@ 0x70
 800d29e:	4393      	bics	r3, r2
 800d2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a32      	ldr	r2, [pc, #200]	@ (800d378 <TIM_Base_SetConfig+0x110>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d01c      	beq.n	800d2ee <TIM_Base_SetConfig+0x86>
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	2380      	movs	r3, #128	@ 0x80
 800d2b8:	05db      	lsls	r3, r3, #23
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d017      	beq.n	800d2ee <TIM_Base_SetConfig+0x86>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a2e      	ldr	r2, [pc, #184]	@ (800d37c <TIM_Base_SetConfig+0x114>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d013      	beq.n	800d2ee <TIM_Base_SetConfig+0x86>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a2d      	ldr	r2, [pc, #180]	@ (800d380 <TIM_Base_SetConfig+0x118>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d00f      	beq.n	800d2ee <TIM_Base_SetConfig+0x86>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a2c      	ldr	r2, [pc, #176]	@ (800d384 <TIM_Base_SetConfig+0x11c>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d00b      	beq.n	800d2ee <TIM_Base_SetConfig+0x86>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a2b      	ldr	r2, [pc, #172]	@ (800d388 <TIM_Base_SetConfig+0x120>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d007      	beq.n	800d2ee <TIM_Base_SetConfig+0x86>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a2a      	ldr	r2, [pc, #168]	@ (800d38c <TIM_Base_SetConfig+0x124>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d003      	beq.n	800d2ee <TIM_Base_SetConfig+0x86>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a29      	ldr	r2, [pc, #164]	@ (800d390 <TIM_Base_SetConfig+0x128>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d108      	bne.n	800d300 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	4a28      	ldr	r2, [pc, #160]	@ (800d394 <TIM_Base_SetConfig+0x12c>)
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2280      	movs	r2, #128	@ 0x80
 800d304:	4393      	bics	r3, r2
 800d306:	001a      	movs	r2, r3
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	695b      	ldr	r3, [r3, #20]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	689a      	ldr	r2, [r3, #8]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a13      	ldr	r2, [pc, #76]	@ (800d378 <TIM_Base_SetConfig+0x110>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d00b      	beq.n	800d346 <TIM_Base_SetConfig+0xde>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a15      	ldr	r2, [pc, #84]	@ (800d388 <TIM_Base_SetConfig+0x120>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d007      	beq.n	800d346 <TIM_Base_SetConfig+0xde>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4a14      	ldr	r2, [pc, #80]	@ (800d38c <TIM_Base_SetConfig+0x124>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d003      	beq.n	800d346 <TIM_Base_SetConfig+0xde>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4a13      	ldr	r2, [pc, #76]	@ (800d390 <TIM_Base_SetConfig+0x128>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d103      	bne.n	800d34e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	691a      	ldr	r2, [r3, #16]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	691b      	ldr	r3, [r3, #16]
 800d358:	2201      	movs	r2, #1
 800d35a:	4013      	ands	r3, r2
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d106      	bne.n	800d36e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	2201      	movs	r2, #1
 800d366:	4393      	bics	r3, r2
 800d368:	001a      	movs	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	611a      	str	r2, [r3, #16]
  }
}
 800d36e:	46c0      	nop			@ (mov r8, r8)
 800d370:	46bd      	mov	sp, r7
 800d372:	b004      	add	sp, #16
 800d374:	bd80      	pop	{r7, pc}
 800d376:	46c0      	nop			@ (mov r8, r8)
 800d378:	40012c00 	.word	0x40012c00
 800d37c:	40000400 	.word	0x40000400
 800d380:	40000800 	.word	0x40000800
 800d384:	40002000 	.word	0x40002000
 800d388:	40014000 	.word	0x40014000
 800d38c:	40014400 	.word	0x40014400
 800d390:	40014800 	.word	0x40014800
 800d394:	fffffcff 	.word	0xfffffcff

0800d398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a1b      	ldr	r3, [r3, #32]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	4393      	bics	r3, r2
 800d3b0:	001a      	movs	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4a32      	ldr	r2, [pc, #200]	@ (800d490 <TIM_OC1_SetConfig+0xf8>)
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2203      	movs	r2, #3
 800d3ce:	4393      	bics	r3, r2
 800d3d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	2202      	movs	r2, #2
 800d3e0:	4393      	bics	r3, r2
 800d3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	4a28      	ldr	r2, [pc, #160]	@ (800d494 <TIM_OC1_SetConfig+0xfc>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d00b      	beq.n	800d40e <TIM_OC1_SetConfig+0x76>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4a27      	ldr	r2, [pc, #156]	@ (800d498 <TIM_OC1_SetConfig+0x100>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d007      	beq.n	800d40e <TIM_OC1_SetConfig+0x76>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4a26      	ldr	r2, [pc, #152]	@ (800d49c <TIM_OC1_SetConfig+0x104>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d003      	beq.n	800d40e <TIM_OC1_SetConfig+0x76>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a25      	ldr	r2, [pc, #148]	@ (800d4a0 <TIM_OC1_SetConfig+0x108>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d10c      	bne.n	800d428 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2208      	movs	r2, #8
 800d412:	4393      	bics	r3, r2
 800d414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	697a      	ldr	r2, [r7, #20]
 800d41c:	4313      	orrs	r3, r2
 800d41e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2204      	movs	r2, #4
 800d424:	4393      	bics	r3, r2
 800d426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4a1a      	ldr	r2, [pc, #104]	@ (800d494 <TIM_OC1_SetConfig+0xfc>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d00b      	beq.n	800d448 <TIM_OC1_SetConfig+0xb0>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a19      	ldr	r2, [pc, #100]	@ (800d498 <TIM_OC1_SetConfig+0x100>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d007      	beq.n	800d448 <TIM_OC1_SetConfig+0xb0>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a18      	ldr	r2, [pc, #96]	@ (800d49c <TIM_OC1_SetConfig+0x104>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d003      	beq.n	800d448 <TIM_OC1_SetConfig+0xb0>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a17      	ldr	r2, [pc, #92]	@ (800d4a0 <TIM_OC1_SetConfig+0x108>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d111      	bne.n	800d46c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	4a16      	ldr	r2, [pc, #88]	@ (800d4a4 <TIM_OC1_SetConfig+0x10c>)
 800d44c:	4013      	ands	r3, r2
 800d44e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	4a15      	ldr	r2, [pc, #84]	@ (800d4a8 <TIM_OC1_SetConfig+0x110>)
 800d454:	4013      	ands	r3, r2
 800d456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	4313      	orrs	r3, r2
 800d460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	4313      	orrs	r3, r2
 800d46a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	693a      	ldr	r2, [r7, #16]
 800d470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	621a      	str	r2, [r3, #32]
}
 800d486:	46c0      	nop			@ (mov r8, r8)
 800d488:	46bd      	mov	sp, r7
 800d48a:	b006      	add	sp, #24
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	46c0      	nop			@ (mov r8, r8)
 800d490:	fffeff8f 	.word	0xfffeff8f
 800d494:	40012c00 	.word	0x40012c00
 800d498:	40014000 	.word	0x40014000
 800d49c:	40014400 	.word	0x40014400
 800d4a0:	40014800 	.word	0x40014800
 800d4a4:	fffffeff 	.word	0xfffffeff
 800d4a8:	fffffdff 	.word	0xfffffdff

0800d4ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a1b      	ldr	r3, [r3, #32]
 800d4c0:	2210      	movs	r2, #16
 800d4c2:	4393      	bics	r3, r2
 800d4c4:	001a      	movs	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	4a2e      	ldr	r2, [pc, #184]	@ (800d594 <TIM_OC2_SetConfig+0xe8>)
 800d4da:	4013      	ands	r3, r2
 800d4dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d598 <TIM_OC2_SetConfig+0xec>)
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	021b      	lsls	r3, r3, #8
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	4393      	bics	r3, r2
 800d4f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	011b      	lsls	r3, r3, #4
 800d500:	697a      	ldr	r2, [r7, #20]
 800d502:	4313      	orrs	r3, r2
 800d504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a24      	ldr	r2, [pc, #144]	@ (800d59c <TIM_OC2_SetConfig+0xf0>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d10d      	bne.n	800d52a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	2280      	movs	r2, #128	@ 0x80
 800d512:	4393      	bics	r3, r2
 800d514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	011b      	lsls	r3, r3, #4
 800d51c:	697a      	ldr	r2, [r7, #20]
 800d51e:	4313      	orrs	r3, r2
 800d520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	2240      	movs	r2, #64	@ 0x40
 800d526:	4393      	bics	r3, r2
 800d528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a1b      	ldr	r2, [pc, #108]	@ (800d59c <TIM_OC2_SetConfig+0xf0>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d00b      	beq.n	800d54a <TIM_OC2_SetConfig+0x9e>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a1a      	ldr	r2, [pc, #104]	@ (800d5a0 <TIM_OC2_SetConfig+0xf4>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d007      	beq.n	800d54a <TIM_OC2_SetConfig+0x9e>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a19      	ldr	r2, [pc, #100]	@ (800d5a4 <TIM_OC2_SetConfig+0xf8>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d003      	beq.n	800d54a <TIM_OC2_SetConfig+0x9e>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a18      	ldr	r2, [pc, #96]	@ (800d5a8 <TIM_OC2_SetConfig+0xfc>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d113      	bne.n	800d572 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	4a17      	ldr	r2, [pc, #92]	@ (800d5ac <TIM_OC2_SetConfig+0x100>)
 800d54e:	4013      	ands	r3, r2
 800d550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	4a16      	ldr	r2, [pc, #88]	@ (800d5b0 <TIM_OC2_SetConfig+0x104>)
 800d556:	4013      	ands	r3, r2
 800d558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	693a      	ldr	r2, [r7, #16]
 800d562:	4313      	orrs	r3, r2
 800d564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	4313      	orrs	r3, r2
 800d570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	68fa      	ldr	r2, [r7, #12]
 800d57c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	697a      	ldr	r2, [r7, #20]
 800d58a:	621a      	str	r2, [r3, #32]
}
 800d58c:	46c0      	nop			@ (mov r8, r8)
 800d58e:	46bd      	mov	sp, r7
 800d590:	b006      	add	sp, #24
 800d592:	bd80      	pop	{r7, pc}
 800d594:	feff8fff 	.word	0xfeff8fff
 800d598:	fffffcff 	.word	0xfffffcff
 800d59c:	40012c00 	.word	0x40012c00
 800d5a0:	40014000 	.word	0x40014000
 800d5a4:	40014400 	.word	0x40014400
 800d5a8:	40014800 	.word	0x40014800
 800d5ac:	fffffbff 	.word	0xfffffbff
 800d5b0:	fffff7ff 	.word	0xfffff7ff

0800d5b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	4a33      	ldr	r2, [pc, #204]	@ (800d698 <TIM_OC3_SetConfig+0xe4>)
 800d5ca:	401a      	ands	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	69db      	ldr	r3, [r3, #28]
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	4a2f      	ldr	r2, [pc, #188]	@ (800d69c <TIM_OC3_SetConfig+0xe8>)
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2203      	movs	r2, #3
 800d5e8:	4393      	bics	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	4a29      	ldr	r2, [pc, #164]	@ (800d6a0 <TIM_OC3_SetConfig+0xec>)
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	021b      	lsls	r3, r3, #8
 800d604:	697a      	ldr	r2, [r7, #20]
 800d606:	4313      	orrs	r3, r2
 800d608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a25      	ldr	r2, [pc, #148]	@ (800d6a4 <TIM_OC3_SetConfig+0xf0>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d10d      	bne.n	800d62e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	4a24      	ldr	r2, [pc, #144]	@ (800d6a8 <TIM_OC3_SetConfig+0xf4>)
 800d616:	4013      	ands	r3, r2
 800d618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	4313      	orrs	r3, r2
 800d624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	4a20      	ldr	r2, [pc, #128]	@ (800d6ac <TIM_OC3_SetConfig+0xf8>)
 800d62a:	4013      	ands	r3, r2
 800d62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a1c      	ldr	r2, [pc, #112]	@ (800d6a4 <TIM_OC3_SetConfig+0xf0>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d00b      	beq.n	800d64e <TIM_OC3_SetConfig+0x9a>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a1d      	ldr	r2, [pc, #116]	@ (800d6b0 <TIM_OC3_SetConfig+0xfc>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d007      	beq.n	800d64e <TIM_OC3_SetConfig+0x9a>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a1c      	ldr	r2, [pc, #112]	@ (800d6b4 <TIM_OC3_SetConfig+0x100>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d003      	beq.n	800d64e <TIM_OC3_SetConfig+0x9a>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a1b      	ldr	r2, [pc, #108]	@ (800d6b8 <TIM_OC3_SetConfig+0x104>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d113      	bne.n	800d676 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	4a1a      	ldr	r2, [pc, #104]	@ (800d6bc <TIM_OC3_SetConfig+0x108>)
 800d652:	4013      	ands	r3, r2
 800d654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	4a19      	ldr	r2, [pc, #100]	@ (800d6c0 <TIM_OC3_SetConfig+0x10c>)
 800d65a:	4013      	ands	r3, r2
 800d65c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	695b      	ldr	r3, [r3, #20]
 800d662:	011b      	lsls	r3, r3, #4
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	4313      	orrs	r3, r2
 800d668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	699b      	ldr	r3, [r3, #24]
 800d66e:	011b      	lsls	r3, r3, #4
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	4313      	orrs	r3, r2
 800d674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	693a      	ldr	r2, [r7, #16]
 800d67a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	697a      	ldr	r2, [r7, #20]
 800d68e:	621a      	str	r2, [r3, #32]
}
 800d690:	46c0      	nop			@ (mov r8, r8)
 800d692:	46bd      	mov	sp, r7
 800d694:	b006      	add	sp, #24
 800d696:	bd80      	pop	{r7, pc}
 800d698:	fffffeff 	.word	0xfffffeff
 800d69c:	fffeff8f 	.word	0xfffeff8f
 800d6a0:	fffffdff 	.word	0xfffffdff
 800d6a4:	40012c00 	.word	0x40012c00
 800d6a8:	fffff7ff 	.word	0xfffff7ff
 800d6ac:	fffffbff 	.word	0xfffffbff
 800d6b0:	40014000 	.word	0x40014000
 800d6b4:	40014400 	.word	0x40014400
 800d6b8:	40014800 	.word	0x40014800
 800d6bc:	ffffefff 	.word	0xffffefff
 800d6c0:	ffffdfff 	.word	0xffffdfff

0800d6c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6a1b      	ldr	r3, [r3, #32]
 800d6d8:	4a26      	ldr	r2, [pc, #152]	@ (800d774 <TIM_OC4_SetConfig+0xb0>)
 800d6da:	401a      	ands	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	4a22      	ldr	r2, [pc, #136]	@ (800d778 <TIM_OC4_SetConfig+0xb4>)
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	4a21      	ldr	r2, [pc, #132]	@ (800d77c <TIM_OC4_SetConfig+0xb8>)
 800d6f8:	4013      	ands	r3, r2
 800d6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	021b      	lsls	r3, r3, #8
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	4313      	orrs	r3, r2
 800d706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	4a1d      	ldr	r2, [pc, #116]	@ (800d780 <TIM_OC4_SetConfig+0xbc>)
 800d70c:	4013      	ands	r3, r2
 800d70e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	031b      	lsls	r3, r3, #12
 800d716:	693a      	ldr	r2, [r7, #16]
 800d718:	4313      	orrs	r3, r2
 800d71a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a19      	ldr	r2, [pc, #100]	@ (800d784 <TIM_OC4_SetConfig+0xc0>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d00b      	beq.n	800d73c <TIM_OC4_SetConfig+0x78>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a18      	ldr	r2, [pc, #96]	@ (800d788 <TIM_OC4_SetConfig+0xc4>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d007      	beq.n	800d73c <TIM_OC4_SetConfig+0x78>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a17      	ldr	r2, [pc, #92]	@ (800d78c <TIM_OC4_SetConfig+0xc8>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d003      	beq.n	800d73c <TIM_OC4_SetConfig+0x78>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a16      	ldr	r2, [pc, #88]	@ (800d790 <TIM_OC4_SetConfig+0xcc>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d109      	bne.n	800d750 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	4a15      	ldr	r2, [pc, #84]	@ (800d794 <TIM_OC4_SetConfig+0xd0>)
 800d740:	4013      	ands	r3, r2
 800d742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	019b      	lsls	r3, r3, #6
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	4313      	orrs	r3, r2
 800d74e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	621a      	str	r2, [r3, #32]
}
 800d76a:	46c0      	nop			@ (mov r8, r8)
 800d76c:	46bd      	mov	sp, r7
 800d76e:	b006      	add	sp, #24
 800d770:	bd80      	pop	{r7, pc}
 800d772:	46c0      	nop			@ (mov r8, r8)
 800d774:	ffffefff 	.word	0xffffefff
 800d778:	feff8fff 	.word	0xfeff8fff
 800d77c:	fffffcff 	.word	0xfffffcff
 800d780:	ffffdfff 	.word	0xffffdfff
 800d784:	40012c00 	.word	0x40012c00
 800d788:	40014000 	.word	0x40014000
 800d78c:	40014400 	.word	0x40014400
 800d790:	40014800 	.word	0x40014800
 800d794:	ffffbfff 	.word	0xffffbfff

0800d798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a1b      	ldr	r3, [r3, #32]
 800d7ac:	4a23      	ldr	r2, [pc, #140]	@ (800d83c <TIM_OC5_SetConfig+0xa4>)
 800d7ae:	401a      	ands	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	4a1f      	ldr	r2, [pc, #124]	@ (800d840 <TIM_OC5_SetConfig+0xa8>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	4a1b      	ldr	r2, [pc, #108]	@ (800d844 <TIM_OC5_SetConfig+0xac>)
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	041b      	lsls	r3, r3, #16
 800d7e0:	693a      	ldr	r2, [r7, #16]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a17      	ldr	r2, [pc, #92]	@ (800d848 <TIM_OC5_SetConfig+0xb0>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d00b      	beq.n	800d806 <TIM_OC5_SetConfig+0x6e>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a16      	ldr	r2, [pc, #88]	@ (800d84c <TIM_OC5_SetConfig+0xb4>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d007      	beq.n	800d806 <TIM_OC5_SetConfig+0x6e>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a15      	ldr	r2, [pc, #84]	@ (800d850 <TIM_OC5_SetConfig+0xb8>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d003      	beq.n	800d806 <TIM_OC5_SetConfig+0x6e>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a14      	ldr	r2, [pc, #80]	@ (800d854 <TIM_OC5_SetConfig+0xbc>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d109      	bne.n	800d81a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	4a0c      	ldr	r2, [pc, #48]	@ (800d83c <TIM_OC5_SetConfig+0xa4>)
 800d80a:	4013      	ands	r3, r2
 800d80c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	021b      	lsls	r3, r3, #8
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	4313      	orrs	r3, r2
 800d818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	697a      	ldr	r2, [r7, #20]
 800d81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	685a      	ldr	r2, [r3, #4]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	621a      	str	r2, [r3, #32]
}
 800d834:	46c0      	nop			@ (mov r8, r8)
 800d836:	46bd      	mov	sp, r7
 800d838:	b006      	add	sp, #24
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	fffeffff 	.word	0xfffeffff
 800d840:	fffeff8f 	.word	0xfffeff8f
 800d844:	fffdffff 	.word	0xfffdffff
 800d848:	40012c00 	.word	0x40012c00
 800d84c:	40014000 	.word	0x40014000
 800d850:	40014400 	.word	0x40014400
 800d854:	40014800 	.word	0x40014800

0800d858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a1b      	ldr	r3, [r3, #32]
 800d866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a1b      	ldr	r3, [r3, #32]
 800d86c:	4a24      	ldr	r2, [pc, #144]	@ (800d900 <TIM_OC6_SetConfig+0xa8>)
 800d86e:	401a      	ands	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4a20      	ldr	r2, [pc, #128]	@ (800d904 <TIM_OC6_SetConfig+0xac>)
 800d884:	4013      	ands	r3, r2
 800d886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	021b      	lsls	r3, r3, #8
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	4313      	orrs	r3, r2
 800d892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	4a1c      	ldr	r2, [pc, #112]	@ (800d908 <TIM_OC6_SetConfig+0xb0>)
 800d898:	4013      	ands	r3, r2
 800d89a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	051b      	lsls	r3, r3, #20
 800d8a2:	693a      	ldr	r2, [r7, #16]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4a18      	ldr	r2, [pc, #96]	@ (800d90c <TIM_OC6_SetConfig+0xb4>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d00b      	beq.n	800d8c8 <TIM_OC6_SetConfig+0x70>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a17      	ldr	r2, [pc, #92]	@ (800d910 <TIM_OC6_SetConfig+0xb8>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d007      	beq.n	800d8c8 <TIM_OC6_SetConfig+0x70>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a16      	ldr	r2, [pc, #88]	@ (800d914 <TIM_OC6_SetConfig+0xbc>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d003      	beq.n	800d8c8 <TIM_OC6_SetConfig+0x70>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a15      	ldr	r2, [pc, #84]	@ (800d918 <TIM_OC6_SetConfig+0xc0>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d109      	bne.n	800d8dc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	4a14      	ldr	r2, [pc, #80]	@ (800d91c <TIM_OC6_SetConfig+0xc4>)
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	029b      	lsls	r3, r3, #10
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	621a      	str	r2, [r3, #32]
}
 800d8f6:	46c0      	nop			@ (mov r8, r8)
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	b006      	add	sp, #24
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	46c0      	nop			@ (mov r8, r8)
 800d900:	ffefffff 	.word	0xffefffff
 800d904:	feff8fff 	.word	0xfeff8fff
 800d908:	ffdfffff 	.word	0xffdfffff
 800d90c:	40012c00 	.word	0x40012c00
 800d910:	40014000 	.word	0x40014000
 800d914:	40014400 	.word	0x40014400
 800d918:	40014800 	.word	0x40014800
 800d91c:	fffbffff 	.word	0xfffbffff

0800d920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	221f      	movs	r2, #31
 800d930:	4013      	ands	r3, r2
 800d932:	2201      	movs	r2, #1
 800d934:	409a      	lsls	r2, r3
 800d936:	0013      	movs	r3, r2
 800d938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	43d2      	mvns	r2, r2
 800d942:	401a      	ands	r2, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6a1a      	ldr	r2, [r3, #32]
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	211f      	movs	r1, #31
 800d950:	400b      	ands	r3, r1
 800d952:	6879      	ldr	r1, [r7, #4]
 800d954:	4099      	lsls	r1, r3
 800d956:	000b      	movs	r3, r1
 800d958:	431a      	orrs	r2, r3
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	621a      	str	r2, [r3, #32]
}
 800d95e:	46c0      	nop			@ (mov r8, r8)
 800d960:	46bd      	mov	sp, r7
 800d962:	b006      	add	sp, #24
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	223c      	movs	r2, #60	@ 0x3c
 800d976:	5c9b      	ldrb	r3, [r3, r2]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d101      	bne.n	800d980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d97c:	2302      	movs	r3, #2
 800d97e:	e05a      	b.n	800da36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	223c      	movs	r2, #60	@ 0x3c
 800d984:	2101      	movs	r1, #1
 800d986:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	223d      	movs	r2, #61	@ 0x3d
 800d98c:	2102      	movs	r1, #2
 800d98e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a26      	ldr	r2, [pc, #152]	@ (800da40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d108      	bne.n	800d9bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	4a25      	ldr	r2, [pc, #148]	@ (800da44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2270      	movs	r2, #112	@ 0x70
 800d9c0:	4393      	bics	r3, r2
 800d9c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a19      	ldr	r2, [pc, #100]	@ (800da40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d014      	beq.n	800da0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	2380      	movs	r3, #128	@ 0x80
 800d9e6:	05db      	lsls	r3, r3, #23
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d00e      	beq.n	800da0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a15      	ldr	r2, [pc, #84]	@ (800da48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d009      	beq.n	800da0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a14      	ldr	r2, [pc, #80]	@ (800da4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d004      	beq.n	800da0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a12      	ldr	r2, [pc, #72]	@ (800da50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d10c      	bne.n	800da24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	2280      	movs	r2, #128	@ 0x80
 800da0e:	4393      	bics	r3, r2
 800da10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	4313      	orrs	r3, r2
 800da1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	223d      	movs	r2, #61	@ 0x3d
 800da28:	2101      	movs	r1, #1
 800da2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	223c      	movs	r2, #60	@ 0x3c
 800da30:	2100      	movs	r1, #0
 800da32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	0018      	movs	r0, r3
 800da38:	46bd      	mov	sp, r7
 800da3a:	b004      	add	sp, #16
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	46c0      	nop			@ (mov r8, r8)
 800da40:	40012c00 	.word	0x40012c00
 800da44:	ff0fffff 	.word	0xff0fffff
 800da48:	40000400 	.word	0x40000400
 800da4c:	40000800 	.word	0x40000800
 800da50:	40014000 	.word	0x40014000

0800da54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da5c:	46c0      	nop			@ (mov r8, r8)
 800da5e:	46bd      	mov	sp, r7
 800da60:	b002      	add	sp, #8
 800da62:	bd80      	pop	{r7, pc}

0800da64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da6c:	46c0      	nop			@ (mov r8, r8)
 800da6e:	46bd      	mov	sp, r7
 800da70:	b002      	add	sp, #8
 800da72:	bd80      	pop	{r7, pc}

0800da74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da7c:	46c0      	nop			@ (mov r8, r8)
 800da7e:	46bd      	mov	sp, r7
 800da80:	b002      	add	sp, #8
 800da82:	bd80      	pop	{r7, pc}

0800da84 <LL_DMA_ConfigTransfer>:
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800da94:	4a0c      	ldr	r2, [pc, #48]	@ (800dac8 <LL_DMA_ConfigTransfer+0x44>)
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	18d3      	adds	r3, r2, r3
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	001a      	movs	r2, r3
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	18d3      	adds	r3, r2, r3
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a09      	ldr	r2, [pc, #36]	@ (800dacc <LL_DMA_ConfigTransfer+0x48>)
 800daa6:	4013      	ands	r3, r2
 800daa8:	0019      	movs	r1, r3
 800daaa:	4a07      	ldr	r2, [pc, #28]	@ (800dac8 <LL_DMA_ConfigTransfer+0x44>)
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	18d3      	adds	r3, r2, r3
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	001a      	movs	r2, r3
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	18d3      	adds	r3, r2, r3
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	430a      	orrs	r2, r1
 800dabc:	601a      	str	r2, [r3, #0]
}
 800dabe:	46c0      	nop			@ (mov r8, r8)
 800dac0:	46bd      	mov	sp, r7
 800dac2:	b006      	add	sp, #24
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	46c0      	nop			@ (mov r8, r8)
 800dac8:	08019acc 	.word	0x08019acc
 800dacc:	ffff800f 	.word	0xffff800f

0800dad0 <LL_DMA_SetDataLength>:
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800dae0:	4a0b      	ldr	r2, [pc, #44]	@ (800db10 <LL_DMA_SetDataLength+0x40>)
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	18d3      	adds	r3, r2, r3
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	001a      	movs	r2, r3
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	18d3      	adds	r3, r2, r3
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	0c1b      	lsrs	r3, r3, #16
 800daf2:	0419      	lsls	r1, r3, #16
 800daf4:	4a06      	ldr	r2, [pc, #24]	@ (800db10 <LL_DMA_SetDataLength+0x40>)
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	18d3      	adds	r3, r2, r3
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	001a      	movs	r2, r3
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	18d3      	adds	r3, r2, r3
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	430a      	orrs	r2, r1
 800db06:	605a      	str	r2, [r3, #4]
}
 800db08:	46c0      	nop			@ (mov r8, r8)
 800db0a:	46bd      	mov	sp, r7
 800db0c:	b006      	add	sp, #24
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	08019acc 	.word	0x08019acc

0800db14 <LL_DMA_SetMemoryAddress>:
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800db24:	4a06      	ldr	r2, [pc, #24]	@ (800db40 <LL_DMA_SetMemoryAddress+0x2c>)
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	18d3      	adds	r3, r2, r3
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	001a      	movs	r2, r3
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	18d3      	adds	r3, r2, r3
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	60da      	str	r2, [r3, #12]
}
 800db36:	46c0      	nop			@ (mov r8, r8)
 800db38:	46bd      	mov	sp, r7
 800db3a:	b006      	add	sp, #24
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	46c0      	nop			@ (mov r8, r8)
 800db40:	08019acc 	.word	0x08019acc

0800db44 <LL_DMA_SetPeriphAddress>:
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800db54:	4a06      	ldr	r2, [pc, #24]	@ (800db70 <LL_DMA_SetPeriphAddress+0x2c>)
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	18d3      	adds	r3, r2, r3
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	001a      	movs	r2, r3
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	18d3      	adds	r3, r2, r3
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	609a      	str	r2, [r3, #8]
}
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	46bd      	mov	sp, r7
 800db6a:	b006      	add	sp, #24
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	46c0      	nop			@ (mov r8, r8)
 800db70:	08019acc 	.word	0x08019acc

0800db74 <LL_DMA_SetPeriphRequest>:
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	60b9      	str	r1, [r7, #8]
 800db7e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	0a9b      	lsrs	r3, r3, #10
 800db84:	4a0f      	ldr	r2, [pc, #60]	@ (800dbc4 <LL_DMA_SetPeriphRequest+0x50>)
 800db86:	405a      	eors	r2, r3
 800db88:	0013      	movs	r3, r2
 800db8a:	00db      	lsls	r3, r3, #3
 800db8c:	1a9b      	subs	r3, r3, r2
 800db8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	18d3      	adds	r3, r2, r3
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4a0b      	ldr	r2, [pc, #44]	@ (800dbc8 <LL_DMA_SetPeriphRequest+0x54>)
 800db9a:	4694      	mov	ip, r2
 800db9c:	4463      	add	r3, ip
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	227f      	movs	r2, #127	@ 0x7f
 800dba2:	4393      	bics	r3, r2
 800dba4:	0019      	movs	r1, r3
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	18d3      	adds	r3, r2, r3
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4a06      	ldr	r2, [pc, #24]	@ (800dbc8 <LL_DMA_SetPeriphRequest+0x54>)
 800dbb0:	4694      	mov	ip, r2
 800dbb2:	4463      	add	r3, ip
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	430a      	orrs	r2, r1
 800dbb8:	601a      	str	r2, [r3, #0]
}
 800dbba:	46c0      	nop			@ (mov r8, r8)
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	b006      	add	sp, #24
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	46c0      	nop			@ (mov r8, r8)
 800dbc4:	00100080 	.word	0x00100080
 800dbc8:	40020800 	.word	0x40020800

0800dbcc <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800dbe0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800dbe6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800dbec:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800dbf2:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800dbf8:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800dbfe:	431a      	orrs	r2, r3
 800dc00:	68b9      	ldr	r1, [r7, #8]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	0018      	movs	r0, r3
 800dc06:	f7ff ff3d 	bl	800da84 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	685a      	ldr	r2, [r3, #4]
 800dc0e:	68b9      	ldr	r1, [r7, #8]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	0018      	movs	r0, r3
 800dc14:	f7ff ff7e 	bl	800db14 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	68b9      	ldr	r1, [r7, #8]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	0018      	movs	r0, r3
 800dc22:	f7ff ff8f 	bl	800db44 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a1a      	ldr	r2, [r3, #32]
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	0018      	movs	r0, r3
 800dc30:	f7ff ff4e 	bl	800dad0 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc38:	68b9      	ldr	r1, [r7, #8]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f7ff ff99 	bl	800db74 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	0018      	movs	r0, r3
 800dc46:	46bd      	mov	sp, r7
 800dc48:	b004      	add	sp, #16
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800dc96:	46c0      	nop			@ (mov r8, r8)
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	b002      	add	sp, #8
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6819      	ldr	r1, [r3, #0]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	435b      	muls	r3, r3
 800dcb2:	001a      	movs	r2, r3
 800dcb4:	0013      	movs	r3, r2
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	189b      	adds	r3, r3, r2
 800dcba:	43db      	mvns	r3, r3
 800dcbc:	400b      	ands	r3, r1
 800dcbe:	001a      	movs	r2, r3
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	435b      	muls	r3, r3
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	434b      	muls	r3, r1
 800dcc8:	431a      	orrs	r2, r3
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	601a      	str	r2, [r3, #0]
}
 800dcce:	46c0      	nop			@ (mov r8, r8)
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	b004      	add	sp, #16
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b084      	sub	sp, #16
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	60f8      	str	r0, [r7, #12]
 800dcde:	60b9      	str	r1, [r7, #8]
 800dce0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	43d2      	mvns	r2, r2
 800dcea:	401a      	ands	r2, r3
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	6879      	ldr	r1, [r7, #4]
 800dcf0:	434b      	muls	r3, r1
 800dcf2:	431a      	orrs	r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	605a      	str	r2, [r3, #4]
}
 800dcf8:	46c0      	nop			@ (mov r8, r8)
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	b004      	add	sp, #16
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6899      	ldr	r1, [r3, #8]
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	435b      	muls	r3, r3
 800dd14:	001a      	movs	r2, r3
 800dd16:	0013      	movs	r3, r2
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	189b      	adds	r3, r3, r2
 800dd1c:	43db      	mvns	r3, r3
 800dd1e:	400b      	ands	r3, r1
 800dd20:	001a      	movs	r2, r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	435b      	muls	r3, r3
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	434b      	muls	r3, r1
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	609a      	str	r2, [r3, #8]
}
 800dd30:	46c0      	nop			@ (mov r8, r8)
 800dd32:	46bd      	mov	sp, r7
 800dd34:	b004      	add	sp, #16
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	68d9      	ldr	r1, [r3, #12]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	435b      	muls	r3, r3
 800dd4c:	001a      	movs	r2, r3
 800dd4e:	0013      	movs	r3, r2
 800dd50:	005b      	lsls	r3, r3, #1
 800dd52:	189b      	adds	r3, r3, r2
 800dd54:	43db      	mvns	r3, r3
 800dd56:	400b      	ands	r3, r1
 800dd58:	001a      	movs	r2, r3
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	435b      	muls	r3, r3
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	434b      	muls	r3, r1
 800dd62:	431a      	orrs	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	60da      	str	r2, [r3, #12]
}
 800dd68:	46c0      	nop			@ (mov r8, r8)
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	b004      	add	sp, #16
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6a19      	ldr	r1, [r3, #32]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	435b      	muls	r3, r3
 800dd84:	68ba      	ldr	r2, [r7, #8]
 800dd86:	4353      	muls	r3, r2
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	435a      	muls	r2, r3
 800dd8c:	0013      	movs	r3, r2
 800dd8e:	011b      	lsls	r3, r3, #4
 800dd90:	1a9b      	subs	r3, r3, r2
 800dd92:	43db      	mvns	r3, r3
 800dd94:	400b      	ands	r3, r1
 800dd96:	001a      	movs	r2, r3
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	435b      	muls	r3, r3
 800dd9c:	68b9      	ldr	r1, [r7, #8]
 800dd9e:	434b      	muls	r3, r1
 800dda0:	68b9      	ldr	r1, [r7, #8]
 800dda2:	434b      	muls	r3, r1
 800dda4:	6879      	ldr	r1, [r7, #4]
 800dda6:	434b      	muls	r3, r1
 800dda8:	431a      	orrs	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800ddae:	46c0      	nop			@ (mov r8, r8)
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	b004      	add	sp, #16
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	0a1b      	lsrs	r3, r3, #8
 800ddca:	68ba      	ldr	r2, [r7, #8]
 800ddcc:	0a12      	lsrs	r2, r2, #8
 800ddce:	4353      	muls	r3, r2
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	0a12      	lsrs	r2, r2, #8
 800ddd4:	4353      	muls	r3, r2
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	0a12      	lsrs	r2, r2, #8
 800ddda:	435a      	muls	r2, r3
 800dddc:	0013      	movs	r3, r2
 800ddde:	011b      	lsls	r3, r3, #4
 800dde0:	1a9b      	subs	r3, r3, r2
 800dde2:	43db      	mvns	r3, r3
 800dde4:	400b      	ands	r3, r1
 800dde6:	001a      	movs	r2, r3
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	0a1b      	lsrs	r3, r3, #8
 800ddec:	68b9      	ldr	r1, [r7, #8]
 800ddee:	0a09      	lsrs	r1, r1, #8
 800ddf0:	434b      	muls	r3, r1
 800ddf2:	68b9      	ldr	r1, [r7, #8]
 800ddf4:	0a09      	lsrs	r1, r1, #8
 800ddf6:	434b      	muls	r3, r1
 800ddf8:	68b9      	ldr	r1, [r7, #8]
 800ddfa:	0a09      	lsrs	r1, r1, #8
 800ddfc:	434b      	muls	r3, r1
 800ddfe:	6879      	ldr	r1, [r7, #4]
 800de00:	434b      	muls	r3, r1
 800de02:	431a      	orrs	r2, r3
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800de08:	46c0      	nop			@ (mov r8, r8)
 800de0a:	46bd      	mov	sp, r7
 800de0c:	b004      	add	sp, #16
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800de1e:	e047      	b.n	800deb0 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2101      	movs	r1, #1
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	4091      	lsls	r1, r2
 800de2a:	000a      	movs	r2, r1
 800de2c:	4013      	ands	r3, r2
 800de2e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d039      	beq.n	800deaa <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d003      	beq.n	800de46 <LL_GPIO_Init+0x36>
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	2b02      	cmp	r3, #2
 800de44:	d10d      	bne.n	800de62 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	689a      	ldr	r2, [r3, #8]
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	0018      	movs	r0, r3
 800de50:	f7ff ff56 	bl	800dd00 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	68da      	ldr	r2, [r3, #12]
 800de58:	68b9      	ldr	r1, [r7, #8]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	0018      	movs	r0, r3
 800de5e:	f7ff ff3a 	bl	800dcd6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	691a      	ldr	r2, [r3, #16]
 800de66:	68b9      	ldr	r1, [r7, #8]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	0018      	movs	r0, r3
 800de6c:	f7ff ff64 	bl	800dd38 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d111      	bne.n	800de9c <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	2bff      	cmp	r3, #255	@ 0xff
 800de7c:	d807      	bhi.n	800de8e <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	695a      	ldr	r2, [r3, #20]
 800de82:	68b9      	ldr	r1, [r7, #8]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	0018      	movs	r0, r3
 800de88:	f7ff ff72 	bl	800dd70 <LL_GPIO_SetAFPin_0_7>
 800de8c:	e006      	b.n	800de9c <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	695a      	ldr	r2, [r3, #20]
 800de92:	68b9      	ldr	r1, [r7, #8]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	0018      	movs	r0, r3
 800de98:	f7ff ff8d 	bl	800ddb6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	68b9      	ldr	r1, [r7, #8]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	0018      	movs	r0, r3
 800dea6:	f7ff fefa 	bl	800dc9e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	40da      	lsrs	r2, r3
 800deb8:	1e13      	subs	r3, r2, #0
 800deba:	d1b1      	bne.n	800de20 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800debc:	2300      	movs	r3, #0
}
 800debe:	0018      	movs	r0, r3
 800dec0:	46bd      	mov	sp, r7
 800dec2:	b004      	add	sp, #16
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b082      	sub	sp, #8
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	085a      	lsrs	r2, r3, #1
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	601a      	str	r2, [r3, #0]
}
 800deda:	46c0      	nop			@ (mov r8, r8)
 800dedc:	46bd      	mov	sp, r7
 800dede:	b002      	add	sp, #8
 800dee0:	bd80      	pop	{r7, pc}
	...

0800dee4 <LL_APB1_GRP1_EnableClock>:
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800deec:	4b07      	ldr	r3, [pc, #28]	@ (800df0c <LL_APB1_GRP1_EnableClock+0x28>)
 800deee:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800def0:	4b06      	ldr	r3, [pc, #24]	@ (800df0c <LL_APB1_GRP1_EnableClock+0x28>)
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	430a      	orrs	r2, r1
 800def6:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800def8:	4b04      	ldr	r3, [pc, #16]	@ (800df0c <LL_APB1_GRP1_EnableClock+0x28>)
 800defa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	4013      	ands	r3, r2
 800df00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800df02:	68fb      	ldr	r3, [r7, #12]
}
 800df04:	46c0      	nop			@ (mov r8, r8)
 800df06:	46bd      	mov	sp, r7
 800df08:	b004      	add	sp, #16
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	40021000 	.word	0x40021000

0800df10 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a16      	ldr	r2, [pc, #88]	@ (800df78 <LL_UCPD_Init+0x68>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d104      	bne.n	800df2c <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800df22:	2380      	movs	r3, #128	@ 0x80
 800df24:	049b      	lsls	r3, r3, #18
 800df26:	0018      	movs	r0, r3
 800df28:	f7ff ffdc 	bl	800dee4 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a13      	ldr	r2, [pc, #76]	@ (800df7c <LL_UCPD_Init+0x6c>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d104      	bne.n	800df3e <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800df34:	2380      	movs	r3, #128	@ 0x80
 800df36:	04db      	lsls	r3, r3, #19
 800df38:	0018      	movs	r0, r3
 800df3a:	f7ff ffd3 	bl	800dee4 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	0018      	movs	r0, r3
 800df42:	f7ff ffc0 	bl	800dec6 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a0d      	ldr	r2, [pc, #52]	@ (800df80 <LL_UCPD_Init+0x70>)
 800df4c:	401a      	ands	r2, r3
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	6819      	ldr	r1, [r3, #0]
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	02db      	lsls	r3, r3, #11
 800df58:	4319      	orrs	r1, r3
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	019b      	lsls	r3, r3, #6
 800df60:	4319      	orrs	r1, r3
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	430b      	orrs	r3, r1
 800df68:	431a      	orrs	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	0018      	movs	r0, r3
 800df72:	46bd      	mov	sp, r7
 800df74:	b002      	add	sp, #8
 800df76:	bd80      	pop	{r7, pc}
 800df78:	4000a000 	.word	0x4000a000
 800df7c:	4000a400 	.word	0x4000a400
 800df80:	fff10000 	.word	0xfff10000

0800df84 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2280      	movs	r2, #128	@ 0x80
 800df90:	0292      	lsls	r2, r2, #10
 800df92:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2207      	movs	r2, #7
 800df98:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2210      	movs	r2, #16
 800df9e:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	220d      	movs	r2, #13
 800dfa4:	60da      	str	r2, [r3, #12]
}
 800dfa6:	46c0      	nop			@ (mov r8, r8)
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	b002      	add	sp, #8
 800dfac:	bd80      	pop	{r7, pc}
	...

0800dfb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dfbe:	4b05      	ldr	r3, [pc, #20]	@ (800dfd4 <USB_EnableGlobalInt+0x24>)
 800dfc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	0018      	movs	r0, r3
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	b004      	add	sp, #16
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	46c0      	nop			@ (mov r8, r8)
 800dfd4:	0000bf80 	.word	0x0000bf80

0800dfd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dfe0:	4b06      	ldr	r3, [pc, #24]	@ (800dffc <USB_DisableGlobalInt+0x24>)
 800dfe2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	43d2      	mvns	r2, r2
 800dfec:	401a      	ands	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	0018      	movs	r0, r3
 800dff6:	46bd      	mov	sp, r7
 800dff8:	b004      	add	sp, #16
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	0000bf80 	.word	0x0000bf80

0800e000 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	000a      	movs	r2, r1
 800e00a:	1cfb      	adds	r3, r7, #3
 800e00c:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800e00e:	1cfb      	adds	r3, r7, #3
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d106      	bne.n	800e024 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e01a:	005b      	lsls	r3, r3, #1
 800e01c:	085a      	lsrs	r2, r3, #1
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	641a      	str	r2, [r3, #64]	@ 0x40
 800e022:	e00d      	b.n	800e040 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 800e024:	1cfb      	adds	r3, r7, #3
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d107      	bne.n	800e03c <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e030:	2280      	movs	r2, #128	@ 0x80
 800e032:	0612      	lsls	r2, r2, #24
 800e034:	431a      	orrs	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	641a      	str	r2, [r3, #64]	@ 0x40
 800e03a:	e001      	b.n	800e040 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	0018      	movs	r0, r3
 800e044:	46bd      	mov	sp, r7
 800e046:	b002      	add	sp, #8
 800e048:	bd80      	pop	{r7, pc}

0800e04a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800e04a:	b084      	sub	sp, #16
 800e04c:	b5b0      	push	{r4, r5, r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	2004      	movs	r0, #4
 800e056:	2420      	movs	r4, #32
 800e058:	1900      	adds	r0, r0, r4
 800e05a:	19c0      	adds	r0, r0, r7
 800e05c:	6001      	str	r1, [r0, #0]
 800e05e:	6042      	str	r2, [r0, #4]
 800e060:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e06c:	2201      	movs	r2, #1
 800e06e:	4393      	bics	r3, r2
 800e070:	001a      	movs	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800e076:	250f      	movs	r5, #15
 800e078:	197c      	adds	r4, r7, r5
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2100      	movs	r1, #0
 800e07e:	0018      	movs	r0, r3
 800e080:	f7ff ffbe 	bl	800e000 <USB_SetCurrentMode>
 800e084:	0003      	movs	r3, r0
 800e086:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800e08e:	197b      	adds	r3, r7, r5
 800e090:	781b      	ldrb	r3, [r3, #0]
}
 800e092:	0018      	movs	r0, r3
 800e094:	46bd      	mov	sp, r7
 800e096:	b004      	add	sp, #16
 800e098:	bcb0      	pop	{r4, r5, r7}
 800e09a:	bc08      	pop	{r3}
 800e09c:	b004      	add	sp, #16
 800e09e:	4718      	bx	r3

0800e0a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b09e      	sub	sp, #120	@ 0x78
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e0aa:	2377      	movs	r3, #119	@ 0x77
 800e0ac:	18fb      	adds	r3, r7, r3
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	18d3      	adds	r3, r2, r3
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4adc      	ldr	r2, [pc, #880]	@ (800e430 <USB_ActivateEndpoint+0x390>)
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	78db      	ldrb	r3, [r3, #3]
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d00e      	beq.n	800e0ea <USB_ActivateEndpoint+0x4a>
 800e0cc:	dc19      	bgt.n	800e102 <USB_ActivateEndpoint+0x62>
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d01c      	beq.n	800e10c <USB_ActivateEndpoint+0x6c>
 800e0d2:	dc16      	bgt.n	800e102 <USB_ActivateEndpoint+0x62>
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <USB_ActivateEndpoint+0x3e>
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d00c      	beq.n	800e0f6 <USB_ActivateEndpoint+0x56>
 800e0dc:	e011      	b.n	800e102 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e0de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e0e0:	2280      	movs	r2, #128	@ 0x80
 800e0e2:	0092      	lsls	r2, r2, #2
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e0e8:	e011      	b.n	800e10e <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e0ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e0ec:	22c0      	movs	r2, #192	@ 0xc0
 800e0ee:	00d2      	lsls	r2, r2, #3
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e0f4:	e00b      	b.n	800e10e <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e0f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e0f8:	2280      	movs	r2, #128	@ 0x80
 800e0fa:	00d2      	lsls	r2, r2, #3
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e100:	e005      	b.n	800e10e <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800e102:	2377      	movs	r3, #119	@ 0x77
 800e104:	18fb      	adds	r3, r7, r3
 800e106:	2201      	movs	r2, #1
 800e108:	701a      	strb	r2, [r3, #0]
      break;
 800e10a:	e000      	b.n	800e10e <USB_ActivateEndpoint+0x6e>
      break;
 800e10c:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	18d3      	adds	r3, r2, r3
 800e118:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e11a:	49c6      	ldr	r1, [pc, #792]	@ (800e434 <USB_ActivateEndpoint+0x394>)
 800e11c:	430a      	orrs	r2, r1
 800e11e:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	18d3      	adds	r3, r2, r3
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4ac2      	ldr	r2, [pc, #776]	@ (800e438 <USB_ActivateEndpoint+0x398>)
 800e12e:	4013      	ands	r3, r2
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	7812      	ldrb	r2, [r2, #0]
 800e134:	4313      	orrs	r3, r2
 800e136:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	18d3      	adds	r3, r2, r3
 800e142:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e144:	49bb      	ldr	r1, [pc, #748]	@ (800e434 <USB_ActivateEndpoint+0x394>)
 800e146:	430a      	orrs	r2, r1
 800e148:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	7b1b      	ldrb	r3, [r3, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d000      	beq.n	800e154 <USB_ActivateEndpoint+0xb4>
 800e152:	e155      	b.n	800e400 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	785b      	ldrb	r3, [r3, #1]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d06e      	beq.n	800e23a <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	4ab6      	ldr	r2, [pc, #728]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e164:	4694      	mov	ip, r2
 800e166:	4463      	add	r3, ip
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	49b2      	ldr	r1, [pc, #712]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e172:	468c      	mov	ip, r1
 800e174:	4463      	add	r3, ip
 800e176:	0c12      	lsrs	r2, r2, #16
 800e178:	0412      	lsls	r2, r2, #16
 800e17a:	601a      	str	r2, [r3, #0]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	00db      	lsls	r3, r3, #3
 800e182:	4aae      	ldr	r2, [pc, #696]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e184:	4694      	mov	ip, r2
 800e186:	4463      	add	r3, ip
 800e188:	6819      	ldr	r1, [r3, #0]
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	88db      	ldrh	r3, [r3, #6]
 800e18e:	089b      	lsrs	r3, r3, #2
 800e190:	b29b      	uxth	r3, r3
 800e192:	009a      	lsls	r2, r3, #2
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	00db      	lsls	r3, r3, #3
 800e19a:	48a8      	ldr	r0, [pc, #672]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e19c:	4684      	mov	ip, r0
 800e19e:	4463      	add	r3, ip
 800e1a0:	430a      	orrs	r2, r1
 800e1a2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	18d3      	adds	r3, r2, r3
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	61bb      	str	r3, [r7, #24]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	2240      	movs	r2, #64	@ 0x40
 800e1b6:	4013      	ands	r3, r2
 800e1b8:	d011      	beq.n	800e1de <USB_ActivateEndpoint+0x13e>
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	18d3      	adds	r3, r2, r3
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a9c      	ldr	r2, [pc, #624]	@ (800e438 <USB_ActivateEndpoint+0x398>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	617b      	str	r3, [r7, #20]
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	18d3      	adds	r3, r2, r3
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	4999      	ldr	r1, [pc, #612]	@ (800e440 <USB_ActivateEndpoint+0x3a0>)
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	78db      	ldrb	r3, [r3, #3]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d016      	beq.n	800e214 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	18d3      	adds	r3, r2, r3
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4a94      	ldr	r2, [pc, #592]	@ (800e444 <USB_ActivateEndpoint+0x3a4>)
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2220      	movs	r2, #32
 800e1fc:	4053      	eors	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	18d3      	adds	r3, r2, r3
 800e20a:	68fa      	ldr	r2, [r7, #12]
 800e20c:	4989      	ldr	r1, [pc, #548]	@ (800e434 <USB_ActivateEndpoint+0x394>)
 800e20e:	430a      	orrs	r2, r1
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	e261      	b.n	800e6d8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	18d3      	adds	r3, r2, r3
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a88      	ldr	r2, [pc, #544]	@ (800e444 <USB_ActivateEndpoint+0x3a4>)
 800e222:	4013      	ands	r3, r2
 800e224:	613b      	str	r3, [r7, #16]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	18d3      	adds	r3, r2, r3
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	4980      	ldr	r1, [pc, #512]	@ (800e434 <USB_ActivateEndpoint+0x394>)
 800e234:	430a      	orrs	r2, r1
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	e24e      	b.n	800e6d8 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	00db      	lsls	r3, r3, #3
 800e240:	4a7e      	ldr	r2, [pc, #504]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e242:	4694      	mov	ip, r2
 800e244:	4463      	add	r3, ip
 800e246:	685a      	ldr	r2, [r3, #4]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	00db      	lsls	r3, r3, #3
 800e24e:	497b      	ldr	r1, [pc, #492]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e250:	468c      	mov	ip, r1
 800e252:	4463      	add	r3, ip
 800e254:	0c12      	lsrs	r2, r2, #16
 800e256:	0412      	lsls	r2, r2, #16
 800e258:	605a      	str	r2, [r3, #4]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	00db      	lsls	r3, r3, #3
 800e260:	4a76      	ldr	r2, [pc, #472]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e262:	4694      	mov	ip, r2
 800e264:	4463      	add	r3, ip
 800e266:	6859      	ldr	r1, [r3, #4]
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	88db      	ldrh	r3, [r3, #6]
 800e26c:	089b      	lsrs	r3, r3, #2
 800e26e:	b29b      	uxth	r3, r3
 800e270:	009a      	lsls	r2, r3, #2
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	00db      	lsls	r3, r3, #3
 800e278:	4870      	ldr	r0, [pc, #448]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e27a:	4684      	mov	ip, r0
 800e27c:	4463      	add	r3, ip
 800e27e:	430a      	orrs	r2, r1
 800e280:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	00db      	lsls	r3, r3, #3
 800e288:	4a6c      	ldr	r2, [pc, #432]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e28a:	4694      	mov	ip, r2
 800e28c:	4463      	add	r3, ip
 800e28e:	685a      	ldr	r2, [r3, #4]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	4969      	ldr	r1, [pc, #420]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e298:	468c      	mov	ip, r1
 800e29a:	4463      	add	r3, ip
 800e29c:	0192      	lsls	r2, r2, #6
 800e29e:	0992      	lsrs	r2, r2, #6
 800e2a0:	605a      	str	r2, [r3, #4]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	691b      	ldr	r3, [r3, #16]
 800e2a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2a8:	d920      	bls.n	800e2ec <USB_ActivateEndpoint+0x24c>
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	095b      	lsrs	r3, r3, #5
 800e2b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	221f      	movs	r2, #31
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	d102      	bne.n	800e2c2 <USB_ActivateEndpoint+0x222>
 800e2bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	00db      	lsls	r3, r3, #3
 800e2c8:	4a5c      	ldr	r2, [pc, #368]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e2ca:	4694      	mov	ip, r2
 800e2cc:	4463      	add	r3, ip
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2d2:	069b      	lsls	r3, r3, #26
 800e2d4:	431a      	orrs	r2, r3
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	4957      	ldr	r1, [pc, #348]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e2de:	468c      	mov	ip, r1
 800e2e0:	4463      	add	r3, ip
 800e2e2:	2180      	movs	r1, #128	@ 0x80
 800e2e4:	0609      	lsls	r1, r1, #24
 800e2e6:	430a      	orrs	r2, r1
 800e2e8:	605a      	str	r2, [r3, #4]
 800e2ea:	e032      	b.n	800e352 <USB_ActivateEndpoint+0x2b2>
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	691b      	ldr	r3, [r3, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d111      	bne.n	800e318 <USB_ActivateEndpoint+0x278>
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	00db      	lsls	r3, r3, #3
 800e2fa:	4a50      	ldr	r2, [pc, #320]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e2fc:	4694      	mov	ip, r2
 800e2fe:	4463      	add	r3, ip
 800e300:	685a      	ldr	r2, [r3, #4]
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	494c      	ldr	r1, [pc, #304]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e30a:	468c      	mov	ip, r1
 800e30c:	4463      	add	r3, ip
 800e30e:	2180      	movs	r1, #128	@ 0x80
 800e310:	0609      	lsls	r1, r1, #24
 800e312:	430a      	orrs	r2, r1
 800e314:	605a      	str	r2, [r3, #4]
 800e316:	e01c      	b.n	800e352 <USB_ActivateEndpoint+0x2b2>
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	085b      	lsrs	r3, r3, #1
 800e31e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	2201      	movs	r2, #1
 800e326:	4013      	ands	r3, r2
 800e328:	d002      	beq.n	800e330 <USB_ActivateEndpoint+0x290>
 800e32a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e32c:	3301      	adds	r3, #1
 800e32e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	4a41      	ldr	r2, [pc, #260]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e338:	4694      	mov	ip, r2
 800e33a:	4463      	add	r3, ip
 800e33c:	6859      	ldr	r1, [r3, #4]
 800e33e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e340:	069a      	lsls	r2, r3, #26
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	00db      	lsls	r3, r3, #3
 800e348:	483c      	ldr	r0, [pc, #240]	@ (800e43c <USB_ActivateEndpoint+0x39c>)
 800e34a:	4684      	mov	ip, r0
 800e34c:	4463      	add	r3, ip
 800e34e:	430a      	orrs	r2, r1
 800e350:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	18d3      	adds	r3, r2, r3
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e362:	2380      	movs	r3, #128	@ 0x80
 800e364:	01db      	lsls	r3, r3, #7
 800e366:	4013      	ands	r3, r2
 800e368:	d011      	beq.n	800e38e <USB_ActivateEndpoint+0x2ee>
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	18d3      	adds	r3, r2, r3
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a30      	ldr	r2, [pc, #192]	@ (800e438 <USB_ActivateEndpoint+0x398>)
 800e378:	4013      	ands	r3, r2
 800e37a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	18d3      	adds	r3, r2, r3
 800e386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e388:	492f      	ldr	r1, [pc, #188]	@ (800e448 <USB_ActivateEndpoint+0x3a8>)
 800e38a:	430a      	orrs	r2, r1
 800e38c:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d11c      	bne.n	800e3d0 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	18d3      	adds	r3, r2, r3
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a2a      	ldr	r2, [pc, #168]	@ (800e44c <USB_ActivateEndpoint+0x3ac>)
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	61fb      	str	r3, [r7, #28]
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	2280      	movs	r2, #128	@ 0x80
 800e3ac:	0152      	lsls	r2, r2, #5
 800e3ae:	4053      	eors	r3, r2
 800e3b0:	61fb      	str	r3, [r7, #28]
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	2280      	movs	r2, #128	@ 0x80
 800e3b6:	0192      	lsls	r2, r2, #6
 800e3b8:	4053      	eors	r3, r2
 800e3ba:	61fb      	str	r3, [r7, #28]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	18d3      	adds	r3, r2, r3
 800e3c6:	69fa      	ldr	r2, [r7, #28]
 800e3c8:	491a      	ldr	r1, [pc, #104]	@ (800e434 <USB_ActivateEndpoint+0x394>)
 800e3ca:	430a      	orrs	r2, r1
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	e183      	b.n	800e6d8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	18d3      	adds	r3, r2, r3
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a1b      	ldr	r2, [pc, #108]	@ (800e44c <USB_ActivateEndpoint+0x3ac>)
 800e3de:	4013      	ands	r3, r2
 800e3e0:	623b      	str	r3, [r7, #32]
 800e3e2:	6a3b      	ldr	r3, [r7, #32]
 800e3e4:	2280      	movs	r2, #128	@ 0x80
 800e3e6:	0192      	lsls	r2, r2, #6
 800e3e8:	4053      	eors	r3, r2
 800e3ea:	623b      	str	r3, [r7, #32]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	18d3      	adds	r3, r2, r3
 800e3f6:	6a3a      	ldr	r2, [r7, #32]
 800e3f8:	490e      	ldr	r1, [pc, #56]	@ (800e434 <USB_ActivateEndpoint+0x394>)
 800e3fa:	430a      	orrs	r2, r1
 800e3fc:	601a      	str	r2, [r3, #0]
 800e3fe:	e16b      	b.n	800e6d8 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	78db      	ldrb	r3, [r3, #3]
 800e404:	2b02      	cmp	r3, #2
 800e406:	d125      	bne.n	800e454 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	18d3      	adds	r3, r2, r3
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a08      	ldr	r2, [pc, #32]	@ (800e438 <USB_ActivateEndpoint+0x398>)
 800e416:	4013      	ands	r3, r2
 800e418:	663b      	str	r3, [r7, #96]	@ 0x60
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	18d3      	adds	r3, r2, r3
 800e424:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e426:	490a      	ldr	r1, [pc, #40]	@ (800e450 <USB_ActivateEndpoint+0x3b0>)
 800e428:	430a      	orrs	r2, r1
 800e42a:	601a      	str	r2, [r3, #0]
 800e42c:	e024      	b.n	800e478 <USB_ActivateEndpoint+0x3d8>
 800e42e:	46c0      	nop			@ (mov r8, r8)
 800e430:	07ff898f 	.word	0x07ff898f
 800e434:	00008080 	.word	0x00008080
 800e438:	07ff8f8f 	.word	0x07ff8f8f
 800e43c:	40009800 	.word	0x40009800
 800e440:	000080c0 	.word	0x000080c0
 800e444:	07ff8fbf 	.word	0x07ff8fbf
 800e448:	0000c080 	.word	0x0000c080
 800e44c:	07ffbf8f 	.word	0x07ffbf8f
 800e450:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	18d3      	adds	r3, r2, r3
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4aa1      	ldr	r2, [pc, #644]	@ (800e6e8 <USB_ActivateEndpoint+0x648>)
 800e462:	4013      	ands	r3, r2
 800e464:	667b      	str	r3, [r7, #100]	@ 0x64
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	18d3      	adds	r3, r2, r3
 800e470:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e472:	499e      	ldr	r1, [pc, #632]	@ (800e6ec <USB_ActivateEndpoint+0x64c>)
 800e474:	430a      	orrs	r2, r1
 800e476:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	00db      	lsls	r3, r3, #3
 800e47e:	4a9c      	ldr	r2, [pc, #624]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e480:	4694      	mov	ip, r2
 800e482:	4463      	add	r3, ip
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	00db      	lsls	r3, r3, #3
 800e48c:	4998      	ldr	r1, [pc, #608]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e48e:	468c      	mov	ip, r1
 800e490:	4463      	add	r3, ip
 800e492:	0c12      	lsrs	r2, r2, #16
 800e494:	0412      	lsls	r2, r2, #16
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	00db      	lsls	r3, r3, #3
 800e49e:	4a94      	ldr	r2, [pc, #592]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e4a0:	4694      	mov	ip, r2
 800e4a2:	4463      	add	r3, ip
 800e4a4:	6819      	ldr	r1, [r3, #0]
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	891b      	ldrh	r3, [r3, #8]
 800e4aa:	089b      	lsrs	r3, r3, #2
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	009a      	lsls	r2, r3, #2
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	00db      	lsls	r3, r3, #3
 800e4b6:	488e      	ldr	r0, [pc, #568]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e4b8:	4684      	mov	ip, r0
 800e4ba:	4463      	add	r3, ip
 800e4bc:	430a      	orrs	r2, r1
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	00db      	lsls	r3, r3, #3
 800e4c6:	4a8a      	ldr	r2, [pc, #552]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e4c8:	4694      	mov	ip, r2
 800e4ca:	4463      	add	r3, ip
 800e4cc:	685a      	ldr	r2, [r3, #4]
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	00db      	lsls	r3, r3, #3
 800e4d4:	4986      	ldr	r1, [pc, #536]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e4d6:	468c      	mov	ip, r1
 800e4d8:	4463      	add	r3, ip
 800e4da:	0c12      	lsrs	r2, r2, #16
 800e4dc:	0412      	lsls	r2, r2, #16
 800e4de:	605a      	str	r2, [r3, #4]
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	4a82      	ldr	r2, [pc, #520]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e4e8:	4694      	mov	ip, r2
 800e4ea:	4463      	add	r3, ip
 800e4ec:	6859      	ldr	r1, [r3, #4]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	895b      	ldrh	r3, [r3, #10]
 800e4f2:	089b      	lsrs	r3, r3, #2
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	009a      	lsls	r2, r3, #2
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	487c      	ldr	r0, [pc, #496]	@ (800e6f0 <USB_ActivateEndpoint+0x650>)
 800e500:	4684      	mov	ip, r0
 800e502:	4463      	add	r3, ip
 800e504:	430a      	orrs	r2, r1
 800e506:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	785b      	ldrb	r3, [r3, #1]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d169      	bne.n	800e5e4 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	18d3      	adds	r3, r2, r3
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e51e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e520:	2380      	movs	r3, #128	@ 0x80
 800e522:	01db      	lsls	r3, r3, #7
 800e524:	4013      	ands	r3, r2
 800e526:	d011      	beq.n	800e54c <USB_ActivateEndpoint+0x4ac>
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	18d3      	adds	r3, r2, r3
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a6f      	ldr	r2, [pc, #444]	@ (800e6f4 <USB_ActivateEndpoint+0x654>)
 800e536:	4013      	ands	r3, r2
 800e538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	18d3      	adds	r3, r2, r3
 800e544:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e546:	496c      	ldr	r1, [pc, #432]	@ (800e6f8 <USB_ActivateEndpoint+0x658>)
 800e548:	430a      	orrs	r2, r1
 800e54a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	18d3      	adds	r3, r2, r3
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55c:	2240      	movs	r2, #64	@ 0x40
 800e55e:	4013      	ands	r3, r2
 800e560:	d011      	beq.n	800e586 <USB_ActivateEndpoint+0x4e6>
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	18d3      	adds	r3, r2, r3
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a61      	ldr	r2, [pc, #388]	@ (800e6f4 <USB_ActivateEndpoint+0x654>)
 800e570:	4013      	ands	r3, r2
 800e572:	637b      	str	r3, [r7, #52]	@ 0x34
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	18d3      	adds	r3, r2, r3
 800e57e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e580:	495e      	ldr	r1, [pc, #376]	@ (800e6fc <USB_ActivateEndpoint+0x65c>)
 800e582:	430a      	orrs	r2, r1
 800e584:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	18d3      	adds	r3, r2, r3
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a5b      	ldr	r2, [pc, #364]	@ (800e700 <USB_ActivateEndpoint+0x660>)
 800e594:	4013      	ands	r3, r2
 800e596:	633b      	str	r3, [r7, #48]	@ 0x30
 800e598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59a:	2280      	movs	r2, #128	@ 0x80
 800e59c:	0152      	lsls	r2, r2, #5
 800e59e:	4053      	eors	r3, r2
 800e5a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a4:	2280      	movs	r2, #128	@ 0x80
 800e5a6:	0192      	lsls	r2, r2, #6
 800e5a8:	4053      	eors	r3, r2
 800e5aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	18d3      	adds	r3, r2, r3
 800e5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5b8:	494c      	ldr	r1, [pc, #304]	@ (800e6ec <USB_ActivateEndpoint+0x64c>)
 800e5ba:	430a      	orrs	r2, r1
 800e5bc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	18d3      	adds	r3, r2, r3
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a4e      	ldr	r2, [pc, #312]	@ (800e704 <USB_ActivateEndpoint+0x664>)
 800e5cc:	4013      	ands	r3, r2
 800e5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	18d3      	adds	r3, r2, r3
 800e5da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5dc:	4943      	ldr	r1, [pc, #268]	@ (800e6ec <USB_ActivateEndpoint+0x64c>)
 800e5de:	430a      	orrs	r2, r1
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	e079      	b.n	800e6d8 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	18d3      	adds	r3, r2, r3
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e5f4:	2380      	movs	r3, #128	@ 0x80
 800e5f6:	01db      	lsls	r3, r3, #7
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	d011      	beq.n	800e620 <USB_ActivateEndpoint+0x580>
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	18d3      	adds	r3, r2, r3
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a3a      	ldr	r2, [pc, #232]	@ (800e6f4 <USB_ActivateEndpoint+0x654>)
 800e60a:	4013      	ands	r3, r2
 800e60c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	18d3      	adds	r3, r2, r3
 800e618:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e61a:	4937      	ldr	r1, [pc, #220]	@ (800e6f8 <USB_ActivateEndpoint+0x658>)
 800e61c:	430a      	orrs	r2, r1
 800e61e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	18d3      	adds	r3, r2, r3
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e62e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e630:	2240      	movs	r2, #64	@ 0x40
 800e632:	4013      	ands	r3, r2
 800e634:	d011      	beq.n	800e65a <USB_ActivateEndpoint+0x5ba>
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	18d3      	adds	r3, r2, r3
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4a2c      	ldr	r2, [pc, #176]	@ (800e6f4 <USB_ActivateEndpoint+0x654>)
 800e644:	4013      	ands	r3, r2
 800e646:	653b      	str	r3, [r7, #80]	@ 0x50
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	18d3      	adds	r3, r2, r3
 800e652:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e654:	4929      	ldr	r1, [pc, #164]	@ (800e6fc <USB_ActivateEndpoint+0x65c>)
 800e656:	430a      	orrs	r2, r1
 800e658:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	78db      	ldrb	r3, [r3, #3]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d016      	beq.n	800e690 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	18d3      	adds	r3, r2, r3
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a25      	ldr	r2, [pc, #148]	@ (800e704 <USB_ActivateEndpoint+0x664>)
 800e670:	4013      	ands	r3, r2
 800e672:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e676:	2220      	movs	r2, #32
 800e678:	4053      	eors	r3, r2
 800e67a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	18d3      	adds	r3, r2, r3
 800e686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e688:	4918      	ldr	r1, [pc, #96]	@ (800e6ec <USB_ActivateEndpoint+0x64c>)
 800e68a:	430a      	orrs	r2, r1
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	e011      	b.n	800e6b4 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	18d3      	adds	r3, r2, r3
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a19      	ldr	r2, [pc, #100]	@ (800e704 <USB_ActivateEndpoint+0x664>)
 800e69e:	4013      	ands	r3, r2
 800e6a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	18d3      	adds	r3, r2, r3
 800e6ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e6ae:	490f      	ldr	r1, [pc, #60]	@ (800e6ec <USB_ActivateEndpoint+0x64c>)
 800e6b0:	430a      	orrs	r2, r1
 800e6b2:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	18d3      	adds	r3, r2, r3
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a0f      	ldr	r2, [pc, #60]	@ (800e700 <USB_ActivateEndpoint+0x660>)
 800e6c2:	4013      	ands	r3, r2
 800e6c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	18d3      	adds	r3, r2, r3
 800e6d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6d2:	4906      	ldr	r1, [pc, #24]	@ (800e6ec <USB_ActivateEndpoint+0x64c>)
 800e6d4:	430a      	orrs	r2, r1
 800e6d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e6d8:	2377      	movs	r3, #119	@ 0x77
 800e6da:	18fb      	adds	r3, r7, r3
 800e6dc:	781b      	ldrb	r3, [r3, #0]
}
 800e6de:	0018      	movs	r0, r3
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	b01e      	add	sp, #120	@ 0x78
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	46c0      	nop			@ (mov r8, r8)
 800e6e8:	07ff8e8f 	.word	0x07ff8e8f
 800e6ec:	00008080 	.word	0x00008080
 800e6f0:	40009800 	.word	0x40009800
 800e6f4:	07ff8f8f 	.word	0x07ff8f8f
 800e6f8:	0000c080 	.word	0x0000c080
 800e6fc:	000080c0 	.word	0x000080c0
 800e700:	07ffbf8f 	.word	0x07ffbf8f
 800e704:	07ff8fbf 	.word	0x07ff8fbf

0800e708 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b096      	sub	sp, #88	@ 0x58
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	7b1b      	ldrb	r3, [r3, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d164      	bne.n	800e7e4 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	785b      	ldrb	r3, [r3, #1]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d02f      	beq.n	800e782 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	18d3      	adds	r3, r2, r3
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	613b      	str	r3, [r7, #16]
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	2240      	movs	r2, #64	@ 0x40
 800e734:	4013      	ands	r3, r2
 800e736:	d011      	beq.n	800e75c <USB_DeactivateEndpoint+0x54>
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	18d3      	adds	r3, r2, r3
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a9d      	ldr	r2, [pc, #628]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e746:	4013      	ands	r3, r2
 800e748:	60fb      	str	r3, [r7, #12]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	18d3      	adds	r3, r2, r3
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	499a      	ldr	r1, [pc, #616]	@ (800e9c0 <USB_DeactivateEndpoint+0x2b8>)
 800e758:	430a      	orrs	r2, r1
 800e75a:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	18d3      	adds	r3, r2, r3
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a96      	ldr	r2, [pc, #600]	@ (800e9c4 <USB_DeactivateEndpoint+0x2bc>)
 800e76a:	4013      	ands	r3, r2
 800e76c:	60bb      	str	r3, [r7, #8]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	18d3      	adds	r3, r2, r3
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	4993      	ldr	r1, [pc, #588]	@ (800e9c8 <USB_DeactivateEndpoint+0x2c0>)
 800e77c:	430a      	orrs	r2, r1
 800e77e:	601a      	str	r2, [r3, #0]
 800e780:	e117      	b.n	800e9b2 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	18d3      	adds	r3, r2, r3
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	61fb      	str	r3, [r7, #28]
 800e790:	69fa      	ldr	r2, [r7, #28]
 800e792:	2380      	movs	r3, #128	@ 0x80
 800e794:	01db      	lsls	r3, r3, #7
 800e796:	4013      	ands	r3, r2
 800e798:	d011      	beq.n	800e7be <USB_DeactivateEndpoint+0xb6>
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	18d3      	adds	r3, r2, r3
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a85      	ldr	r2, [pc, #532]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	61bb      	str	r3, [r7, #24]
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	18d3      	adds	r3, r2, r3
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	4984      	ldr	r1, [pc, #528]	@ (800e9cc <USB_DeactivateEndpoint+0x2c4>)
 800e7ba:	430a      	orrs	r2, r1
 800e7bc:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	18d3      	adds	r3, r2, r3
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4a81      	ldr	r2, [pc, #516]	@ (800e9d0 <USB_DeactivateEndpoint+0x2c8>)
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	617b      	str	r3, [r7, #20]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	18d3      	adds	r3, r2, r3
 800e7da:	697a      	ldr	r2, [r7, #20]
 800e7dc:	497a      	ldr	r1, [pc, #488]	@ (800e9c8 <USB_DeactivateEndpoint+0x2c0>)
 800e7de:	430a      	orrs	r2, r1
 800e7e0:	601a      	str	r2, [r3, #0]
 800e7e2:	e0e6      	b.n	800e9b2 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	785b      	ldrb	r3, [r3, #1]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d171      	bne.n	800e8d0 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	18d3      	adds	r3, r2, r3
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7fc:	2380      	movs	r3, #128	@ 0x80
 800e7fe:	01db      	lsls	r3, r3, #7
 800e800:	4013      	ands	r3, r2
 800e802:	d011      	beq.n	800e828 <USB_DeactivateEndpoint+0x120>
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	18d3      	adds	r3, r2, r3
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a6a      	ldr	r2, [pc, #424]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e812:	4013      	ands	r3, r2
 800e814:	637b      	str	r3, [r7, #52]	@ 0x34
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	18d3      	adds	r3, r2, r3
 800e820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e822:	496a      	ldr	r1, [pc, #424]	@ (800e9cc <USB_DeactivateEndpoint+0x2c4>)
 800e824:	430a      	orrs	r2, r1
 800e826:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	18d3      	adds	r3, r2, r3
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	633b      	str	r3, [r7, #48]	@ 0x30
 800e836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e838:	2240      	movs	r2, #64	@ 0x40
 800e83a:	4013      	ands	r3, r2
 800e83c:	d011      	beq.n	800e862 <USB_DeactivateEndpoint+0x15a>
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	18d3      	adds	r3, r2, r3
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a5c      	ldr	r2, [pc, #368]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e84c:	4013      	ands	r3, r2
 800e84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	18d3      	adds	r3, r2, r3
 800e85a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e85c:	4958      	ldr	r1, [pc, #352]	@ (800e9c0 <USB_DeactivateEndpoint+0x2b8>)
 800e85e:	430a      	orrs	r2, r1
 800e860:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	18d3      	adds	r3, r2, r3
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	4a53      	ldr	r2, [pc, #332]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e870:	4013      	ands	r3, r2
 800e872:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	18d3      	adds	r3, r2, r3
 800e87e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e880:	494f      	ldr	r1, [pc, #316]	@ (800e9c0 <USB_DeactivateEndpoint+0x2b8>)
 800e882:	430a      	orrs	r2, r1
 800e884:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	18d3      	adds	r3, r2, r3
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a4f      	ldr	r2, [pc, #316]	@ (800e9d0 <USB_DeactivateEndpoint+0x2c8>)
 800e894:	4013      	ands	r3, r2
 800e896:	627b      	str	r3, [r7, #36]	@ 0x24
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	18d3      	adds	r3, r2, r3
 800e8a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8a4:	4948      	ldr	r1, [pc, #288]	@ (800e9c8 <USB_DeactivateEndpoint+0x2c0>)
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	18d3      	adds	r3, r2, r3
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a43      	ldr	r2, [pc, #268]	@ (800e9c4 <USB_DeactivateEndpoint+0x2bc>)
 800e8b8:	4013      	ands	r3, r2
 800e8ba:	623b      	str	r3, [r7, #32]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	18d3      	adds	r3, r2, r3
 800e8c6:	6a3a      	ldr	r2, [r7, #32]
 800e8c8:	493f      	ldr	r1, [pc, #252]	@ (800e9c8 <USB_DeactivateEndpoint+0x2c0>)
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	e070      	b.n	800e9b2 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	18d3      	adds	r3, r2, r3
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e8de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e8e0:	2380      	movs	r3, #128	@ 0x80
 800e8e2:	01db      	lsls	r3, r3, #7
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	d011      	beq.n	800e90c <USB_DeactivateEndpoint+0x204>
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	009b      	lsls	r3, r3, #2
 800e8f0:	18d3      	adds	r3, r2, r3
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a31      	ldr	r2, [pc, #196]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	18d3      	adds	r3, r2, r3
 800e904:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e906:	4931      	ldr	r1, [pc, #196]	@ (800e9cc <USB_DeactivateEndpoint+0x2c4>)
 800e908:	430a      	orrs	r2, r1
 800e90a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	18d3      	adds	r3, r2, r3
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e91a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e91c:	2240      	movs	r2, #64	@ 0x40
 800e91e:	4013      	ands	r3, r2
 800e920:	d011      	beq.n	800e946 <USB_DeactivateEndpoint+0x23e>
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	18d3      	adds	r3, r2, r3
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a23      	ldr	r2, [pc, #140]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e930:	4013      	ands	r3, r2
 800e932:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	18d3      	adds	r3, r2, r3
 800e93e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e940:	491f      	ldr	r1, [pc, #124]	@ (800e9c0 <USB_DeactivateEndpoint+0x2b8>)
 800e942:	430a      	orrs	r2, r1
 800e944:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	18d3      	adds	r3, r2, r3
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4a1a      	ldr	r2, [pc, #104]	@ (800e9bc <USB_DeactivateEndpoint+0x2b4>)
 800e954:	4013      	ands	r3, r2
 800e956:	647b      	str	r3, [r7, #68]	@ 0x44
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	18d3      	adds	r3, r2, r3
 800e962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e964:	4919      	ldr	r1, [pc, #100]	@ (800e9cc <USB_DeactivateEndpoint+0x2c4>)
 800e966:	430a      	orrs	r2, r1
 800e968:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	18d3      	adds	r3, r2, r3
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a13      	ldr	r2, [pc, #76]	@ (800e9c4 <USB_DeactivateEndpoint+0x2bc>)
 800e978:	4013      	ands	r3, r2
 800e97a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	18d3      	adds	r3, r2, r3
 800e986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e988:	490f      	ldr	r1, [pc, #60]	@ (800e9c8 <USB_DeactivateEndpoint+0x2c0>)
 800e98a:	430a      	orrs	r2, r1
 800e98c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	18d3      	adds	r3, r2, r3
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a0d      	ldr	r2, [pc, #52]	@ (800e9d0 <USB_DeactivateEndpoint+0x2c8>)
 800e99c:	4013      	ands	r3, r2
 800e99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	18d3      	adds	r3, r2, r3
 800e9aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e9ac:	4906      	ldr	r1, [pc, #24]	@ (800e9c8 <USB_DeactivateEndpoint+0x2c0>)
 800e9ae:	430a      	orrs	r2, r1
 800e9b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	0018      	movs	r0, r3
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	b016      	add	sp, #88	@ 0x58
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	07ff8f8f 	.word	0x07ff8f8f
 800e9c0:	000080c0 	.word	0x000080c0
 800e9c4:	07ff8fbf 	.word	0x07ff8fbf
 800e9c8:	00008080 	.word	0x00008080
 800e9cc:	0000c080 	.word	0x0000c080
 800e9d0:	07ffbf8f 	.word	0x07ffbf8f

0800e9d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e9d4:	b590      	push	{r4, r7, lr}
 800e9d6:	b097      	sub	sp, #92	@ 0x5c
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	785b      	ldrb	r3, [r3, #1]
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d001      	beq.n	800e9ea <USB_EPStartXfer+0x16>
 800e9e6:	f000 fcbf 	bl	800f368 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	699a      	ldr	r2, [r3, #24]
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d903      	bls.n	800e9fe <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9fc:	e002      	b.n	800ea04 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	699b      	ldr	r3, [r3, #24]
 800ea02:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	7b1b      	ldrb	r3, [r3, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d12b      	bne.n	800ea64 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	6959      	ldr	r1, [r3, #20]
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	88da      	ldrh	r2, [r3, #6]
 800ea14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f001 f8f5 	bl	800fc08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	00db      	lsls	r3, r3, #3
 800ea24:	4ace      	ldr	r2, [pc, #824]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ea26:	4694      	mov	ip, r2
 800ea28:	4463      	add	r3, ip
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	00db      	lsls	r3, r3, #3
 800ea32:	49cb      	ldr	r1, [pc, #812]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ea34:	468c      	mov	ip, r1
 800ea36:	4463      	add	r3, ip
 800ea38:	0412      	lsls	r2, r2, #16
 800ea3a:	0c12      	lsrs	r2, r2, #16
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	00db      	lsls	r3, r3, #3
 800ea44:	4ac6      	ldr	r2, [pc, #792]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ea46:	4694      	mov	ip, r2
 800ea48:	4463      	add	r3, ip
 800ea4a:	6819      	ldr	r1, [r3, #0]
 800ea4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea4e:	041a      	lsls	r2, r3, #16
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	00db      	lsls	r3, r3, #3
 800ea56:	48c2      	ldr	r0, [pc, #776]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ea58:	4684      	mov	ip, r0
 800ea5a:	4463      	add	r3, ip
 800ea5c:	430a      	orrs	r2, r1
 800ea5e:	601a      	str	r2, [r3, #0]
 800ea60:	f000 fc67 	bl	800f332 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	78db      	ldrb	r3, [r3, #3]
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d000      	beq.n	800ea6e <USB_EPStartXfer+0x9a>
 800ea6c:	e31a      	b.n	800f0a4 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	6a1a      	ldr	r2, [r3, #32]
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d800      	bhi.n	800ea7c <USB_EPStartXfer+0xa8>
 800ea7a:	e2c7      	b.n	800f00c <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	18d3      	adds	r3, r2, r3
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4ab6      	ldr	r2, [pc, #728]	@ (800ed64 <USB_EPStartXfer+0x390>)
 800ea8a:	4013      	ands	r3, r2
 800ea8c:	613b      	str	r3, [r7, #16]
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	18d3      	adds	r3, r2, r3
 800ea98:	693a      	ldr	r2, [r7, #16]
 800ea9a:	49b3      	ldr	r1, [pc, #716]	@ (800ed68 <USB_EPStartXfer+0x394>)
 800ea9c:	430a      	orrs	r2, r1
 800ea9e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	6a1a      	ldr	r2, [r3, #32]
 800eaa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaa6:	1ad2      	subs	r2, r2, r3
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	18d3      	adds	r3, r2, r3
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2240      	movs	r2, #64	@ 0x40
 800eaba:	4013      	ands	r3, r2
 800eabc:	d100      	bne.n	800eac0 <USB_EPStartXfer+0xec>
 800eabe:	e155      	b.n	800ed6c <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	785b      	ldrb	r3, [r3, #1]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d162      	bne.n	800eb8e <USB_EPStartXfer+0x1ba>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	00db      	lsls	r3, r3, #3
 800eace:	4aa4      	ldr	r2, [pc, #656]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ead0:	4694      	mov	ip, r2
 800ead2:	4463      	add	r3, ip
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	49a0      	ldr	r1, [pc, #640]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eade:	468c      	mov	ip, r1
 800eae0:	4463      	add	r3, ip
 800eae2:	0192      	lsls	r2, r2, #6
 800eae4:	0992      	lsrs	r2, r2, #6
 800eae6:	605a      	str	r2, [r3, #4]
 800eae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaea:	2b3e      	cmp	r3, #62	@ 0x3e
 800eaec:	d91e      	bls.n	800eb2c <USB_EPStartXfer+0x158>
 800eaee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaf0:	095b      	lsrs	r3, r3, #5
 800eaf2:	653b      	str	r3, [r7, #80]	@ 0x50
 800eaf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaf6:	221f      	movs	r2, #31
 800eaf8:	4013      	ands	r3, r2
 800eafa:	d102      	bne.n	800eb02 <USB_EPStartXfer+0x12e>
 800eafc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eafe:	3b01      	subs	r3, #1
 800eb00:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	4a95      	ldr	r2, [pc, #596]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eb0a:	4694      	mov	ip, r2
 800eb0c:	4463      	add	r3, ip
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb12:	069b      	lsls	r3, r3, #26
 800eb14:	431a      	orrs	r2, r3
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	00db      	lsls	r3, r3, #3
 800eb1c:	4990      	ldr	r1, [pc, #576]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eb1e:	468c      	mov	ip, r1
 800eb20:	4463      	add	r3, ip
 800eb22:	2180      	movs	r1, #128	@ 0x80
 800eb24:	0609      	lsls	r1, r1, #24
 800eb26:	430a      	orrs	r2, r1
 800eb28:	605a      	str	r2, [r3, #4]
 800eb2a:	e055      	b.n	800ebd8 <USB_EPStartXfer+0x204>
 800eb2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d111      	bne.n	800eb56 <USB_EPStartXfer+0x182>
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	00db      	lsls	r3, r3, #3
 800eb38:	4a89      	ldr	r2, [pc, #548]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eb3a:	4694      	mov	ip, r2
 800eb3c:	4463      	add	r3, ip
 800eb3e:	685a      	ldr	r2, [r3, #4]
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	4986      	ldr	r1, [pc, #536]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eb48:	468c      	mov	ip, r1
 800eb4a:	4463      	add	r3, ip
 800eb4c:	2180      	movs	r1, #128	@ 0x80
 800eb4e:	0609      	lsls	r1, r1, #24
 800eb50:	430a      	orrs	r2, r1
 800eb52:	605a      	str	r2, [r3, #4]
 800eb54:	e040      	b.n	800ebd8 <USB_EPStartXfer+0x204>
 800eb56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb58:	085b      	lsrs	r3, r3, #1
 800eb5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5e:	2201      	movs	r2, #1
 800eb60:	4013      	ands	r3, r2
 800eb62:	d002      	beq.n	800eb6a <USB_EPStartXfer+0x196>
 800eb64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb66:	3301      	adds	r3, #1
 800eb68:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	4a7b      	ldr	r2, [pc, #492]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eb72:	4694      	mov	ip, r2
 800eb74:	4463      	add	r3, ip
 800eb76:	6859      	ldr	r1, [r3, #4]
 800eb78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb7a:	069a      	lsls	r2, r3, #26
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	00db      	lsls	r3, r3, #3
 800eb82:	4877      	ldr	r0, [pc, #476]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eb84:	4684      	mov	ip, r0
 800eb86:	4463      	add	r3, ip
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	605a      	str	r2, [r3, #4]
 800eb8c:	e024      	b.n	800ebd8 <USB_EPStartXfer+0x204>
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	785b      	ldrb	r3, [r3, #1]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d120      	bne.n	800ebd8 <USB_EPStartXfer+0x204>
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	00db      	lsls	r3, r3, #3
 800eb9c:	4a70      	ldr	r2, [pc, #448]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eb9e:	4694      	mov	ip, r2
 800eba0:	4463      	add	r3, ip
 800eba2:	685a      	ldr	r2, [r3, #4]
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	00db      	lsls	r3, r3, #3
 800ebaa:	496d      	ldr	r1, [pc, #436]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ebac:	468c      	mov	ip, r1
 800ebae:	4463      	add	r3, ip
 800ebb0:	0412      	lsls	r2, r2, #16
 800ebb2:	0c12      	lsrs	r2, r2, #16
 800ebb4:	605a      	str	r2, [r3, #4]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	00db      	lsls	r3, r3, #3
 800ebbc:	4a68      	ldr	r2, [pc, #416]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ebbe:	4694      	mov	ip, r2
 800ebc0:	4463      	add	r3, ip
 800ebc2:	6859      	ldr	r1, [r3, #4]
 800ebc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc6:	041a      	lsls	r2, r3, #16
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	00db      	lsls	r3, r3, #3
 800ebce:	4864      	ldr	r0, [pc, #400]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ebd0:	4684      	mov	ip, r0
 800ebd2:	4463      	add	r3, ip
 800ebd4:	430a      	orrs	r2, r1
 800ebd6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ebd8:	201a      	movs	r0, #26
 800ebda:	183b      	adds	r3, r7, r0
 800ebdc:	683a      	ldr	r2, [r7, #0]
 800ebde:	8952      	ldrh	r2, [r2, #10]
 800ebe0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	6959      	ldr	r1, [r3, #20]
 800ebe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebe8:	b29c      	uxth	r4, r3
 800ebea:	183b      	adds	r3, r7, r0
 800ebec:	881a      	ldrh	r2, [r3, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	0023      	movs	r3, r4
 800ebf2:	f001 f809 	bl	800fc08 <USB_WritePMA>
            ep->xfer_buff += len;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	695a      	ldr	r2, [r3, #20]
 800ebfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfc:	18d2      	adds	r2, r2, r3
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	6a1a      	ldr	r2, [r3, #32]
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d906      	bls.n	800ec1c <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	6a1a      	ldr	r2, [r3, #32]
 800ec12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec14:	1ad2      	subs	r2, r2, r3
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	621a      	str	r2, [r3, #32]
 800ec1a:	e005      	b.n	800ec28 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	6a1b      	ldr	r3, [r3, #32]
 800ec20:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	2200      	movs	r2, #0
 800ec26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	785b      	ldrb	r3, [r3, #1]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d162      	bne.n	800ecf6 <USB_EPStartXfer+0x322>
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	4a4a      	ldr	r2, [pc, #296]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ec38:	4694      	mov	ip, r2
 800ec3a:	4463      	add	r3, ip
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	4946      	ldr	r1, [pc, #280]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ec46:	468c      	mov	ip, r1
 800ec48:	4463      	add	r3, ip
 800ec4a:	0192      	lsls	r2, r2, #6
 800ec4c:	0992      	lsrs	r2, r2, #6
 800ec4e:	601a      	str	r2, [r3, #0]
 800ec50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec52:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec54:	d91e      	bls.n	800ec94 <USB_EPStartXfer+0x2c0>
 800ec56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec58:	095b      	lsrs	r3, r3, #5
 800ec5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec5e:	221f      	movs	r2, #31
 800ec60:	4013      	ands	r3, r2
 800ec62:	d102      	bne.n	800ec6a <USB_EPStartXfer+0x296>
 800ec64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec66:	3b01      	subs	r3, #1
 800ec68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	00db      	lsls	r3, r3, #3
 800ec70:	4a3b      	ldr	r2, [pc, #236]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ec72:	4694      	mov	ip, r2
 800ec74:	4463      	add	r3, ip
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec7a:	069b      	lsls	r3, r3, #26
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	4936      	ldr	r1, [pc, #216]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ec86:	468c      	mov	ip, r1
 800ec88:	4463      	add	r3, ip
 800ec8a:	2180      	movs	r1, #128	@ 0x80
 800ec8c:	0609      	lsls	r1, r1, #24
 800ec8e:	430a      	orrs	r2, r1
 800ec90:	601a      	str	r2, [r3, #0]
 800ec92:	e055      	b.n	800ed40 <USB_EPStartXfer+0x36c>
 800ec94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d111      	bne.n	800ecbe <USB_EPStartXfer+0x2ea>
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	00db      	lsls	r3, r3, #3
 800eca0:	4a2f      	ldr	r2, [pc, #188]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800eca2:	4694      	mov	ip, r2
 800eca4:	4463      	add	r3, ip
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	492c      	ldr	r1, [pc, #176]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ecb0:	468c      	mov	ip, r1
 800ecb2:	4463      	add	r3, ip
 800ecb4:	2180      	movs	r1, #128	@ 0x80
 800ecb6:	0609      	lsls	r1, r1, #24
 800ecb8:	430a      	orrs	r2, r1
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	e040      	b.n	800ed40 <USB_EPStartXfer+0x36c>
 800ecbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc0:	085b      	lsrs	r3, r3, #1
 800ecc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	4013      	ands	r3, r2
 800ecca:	d002      	beq.n	800ecd2 <USB_EPStartXfer+0x2fe>
 800eccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecce:	3301      	adds	r3, #1
 800ecd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	00db      	lsls	r3, r3, #3
 800ecd8:	4a21      	ldr	r2, [pc, #132]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ecda:	4694      	mov	ip, r2
 800ecdc:	4463      	add	r3, ip
 800ecde:	6819      	ldr	r1, [r3, #0]
 800ece0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ece2:	069a      	lsls	r2, r3, #26
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	00db      	lsls	r3, r3, #3
 800ecea:	481d      	ldr	r0, [pc, #116]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ecec:	4684      	mov	ip, r0
 800ecee:	4463      	add	r3, ip
 800ecf0:	430a      	orrs	r2, r1
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	e024      	b.n	800ed40 <USB_EPStartXfer+0x36c>
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	785b      	ldrb	r3, [r3, #1]
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d120      	bne.n	800ed40 <USB_EPStartXfer+0x36c>
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	4a16      	ldr	r2, [pc, #88]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ed06:	4694      	mov	ip, r2
 800ed08:	4463      	add	r3, ip
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	00db      	lsls	r3, r3, #3
 800ed12:	4913      	ldr	r1, [pc, #76]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ed14:	468c      	mov	ip, r1
 800ed16:	4463      	add	r3, ip
 800ed18:	0412      	lsls	r2, r2, #16
 800ed1a:	0c12      	lsrs	r2, r2, #16
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	00db      	lsls	r3, r3, #3
 800ed24:	4a0e      	ldr	r2, [pc, #56]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ed26:	4694      	mov	ip, r2
 800ed28:	4463      	add	r3, ip
 800ed2a:	6819      	ldr	r1, [r3, #0]
 800ed2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed2e:	041a      	lsls	r2, r3, #16
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	480a      	ldr	r0, [pc, #40]	@ (800ed60 <USB_EPStartXfer+0x38c>)
 800ed38:	4684      	mov	ip, r0
 800ed3a:	4463      	add	r3, ip
 800ed3c:	430a      	orrs	r2, r1
 800ed3e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ed40:	201a      	movs	r0, #26
 800ed42:	183b      	adds	r3, r7, r0
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	8912      	ldrh	r2, [r2, #8]
 800ed48:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	6959      	ldr	r1, [r3, #20]
 800ed4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed50:	b29c      	uxth	r4, r3
 800ed52:	183b      	adds	r3, r7, r0
 800ed54:	881a      	ldrh	r2, [r3, #0]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	0023      	movs	r3, r4
 800ed5a:	f000 ff55 	bl	800fc08 <USB_WritePMA>
 800ed5e:	e2e8      	b.n	800f332 <USB_EPStartXfer+0x95e>
 800ed60:	40009800 	.word	0x40009800
 800ed64:	07ff8f8f 	.word	0x07ff8f8f
 800ed68:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	785b      	ldrb	r3, [r3, #1]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d162      	bne.n	800ee3a <USB_EPStartXfer+0x466>
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	00db      	lsls	r3, r3, #3
 800ed7a:	4ac7      	ldr	r2, [pc, #796]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ed7c:	4694      	mov	ip, r2
 800ed7e:	4463      	add	r3, ip
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	00db      	lsls	r3, r3, #3
 800ed88:	49c3      	ldr	r1, [pc, #780]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ed8a:	468c      	mov	ip, r1
 800ed8c:	4463      	add	r3, ip
 800ed8e:	0192      	lsls	r2, r2, #6
 800ed90:	0992      	lsrs	r2, r2, #6
 800ed92:	601a      	str	r2, [r3, #0]
 800ed94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed96:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed98:	d91e      	bls.n	800edd8 <USB_EPStartXfer+0x404>
 800ed9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed9c:	095b      	lsrs	r3, r3, #5
 800ed9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eda2:	221f      	movs	r2, #31
 800eda4:	4013      	ands	r3, r2
 800eda6:	d102      	bne.n	800edae <USB_EPStartXfer+0x3da>
 800eda8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edaa:	3b01      	subs	r3, #1
 800edac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	4ab8      	ldr	r2, [pc, #736]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800edb6:	4694      	mov	ip, r2
 800edb8:	4463      	add	r3, ip
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edbe:	069b      	lsls	r3, r3, #26
 800edc0:	431a      	orrs	r2, r3
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	49b3      	ldr	r1, [pc, #716]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800edca:	468c      	mov	ip, r1
 800edcc:	4463      	add	r3, ip
 800edce:	2180      	movs	r1, #128	@ 0x80
 800edd0:	0609      	lsls	r1, r1, #24
 800edd2:	430a      	orrs	r2, r1
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	e055      	b.n	800ee84 <USB_EPStartXfer+0x4b0>
 800edd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d111      	bne.n	800ee02 <USB_EPStartXfer+0x42e>
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	4aac      	ldr	r2, [pc, #688]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ede6:	4694      	mov	ip, r2
 800ede8:	4463      	add	r3, ip
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	00db      	lsls	r3, r3, #3
 800edf2:	49a9      	ldr	r1, [pc, #676]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800edf4:	468c      	mov	ip, r1
 800edf6:	4463      	add	r3, ip
 800edf8:	2180      	movs	r1, #128	@ 0x80
 800edfa:	0609      	lsls	r1, r1, #24
 800edfc:	430a      	orrs	r2, r1
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	e040      	b.n	800ee84 <USB_EPStartXfer+0x4b0>
 800ee02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee04:	085b      	lsrs	r3, r3, #1
 800ee06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	d002      	beq.n	800ee16 <USB_EPStartXfer+0x442>
 800ee10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee12:	3301      	adds	r3, #1
 800ee14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	00db      	lsls	r3, r3, #3
 800ee1c:	4a9e      	ldr	r2, [pc, #632]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ee1e:	4694      	mov	ip, r2
 800ee20:	4463      	add	r3, ip
 800ee22:	6819      	ldr	r1, [r3, #0]
 800ee24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee26:	069a      	lsls	r2, r3, #26
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	00db      	lsls	r3, r3, #3
 800ee2e:	489a      	ldr	r0, [pc, #616]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ee30:	4684      	mov	ip, r0
 800ee32:	4463      	add	r3, ip
 800ee34:	430a      	orrs	r2, r1
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	e024      	b.n	800ee84 <USB_EPStartXfer+0x4b0>
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	785b      	ldrb	r3, [r3, #1]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d120      	bne.n	800ee84 <USB_EPStartXfer+0x4b0>
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	00db      	lsls	r3, r3, #3
 800ee48:	4a93      	ldr	r2, [pc, #588]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ee4a:	4694      	mov	ip, r2
 800ee4c:	4463      	add	r3, ip
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	4990      	ldr	r1, [pc, #576]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ee58:	468c      	mov	ip, r1
 800ee5a:	4463      	add	r3, ip
 800ee5c:	0412      	lsls	r2, r2, #16
 800ee5e:	0c12      	lsrs	r2, r2, #16
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	00db      	lsls	r3, r3, #3
 800ee68:	4a8b      	ldr	r2, [pc, #556]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ee6a:	4694      	mov	ip, r2
 800ee6c:	4463      	add	r3, ip
 800ee6e:	6819      	ldr	r1, [r3, #0]
 800ee70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee72:	041a      	lsls	r2, r3, #16
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	00db      	lsls	r3, r3, #3
 800ee7a:	4887      	ldr	r0, [pc, #540]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ee7c:	4684      	mov	ip, r0
 800ee7e:	4463      	add	r3, ip
 800ee80:	430a      	orrs	r2, r1
 800ee82:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ee84:	201a      	movs	r0, #26
 800ee86:	183b      	adds	r3, r7, r0
 800ee88:	683a      	ldr	r2, [r7, #0]
 800ee8a:	8912      	ldrh	r2, [r2, #8]
 800ee8c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	6959      	ldr	r1, [r3, #20]
 800ee92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee94:	b29c      	uxth	r4, r3
 800ee96:	183b      	adds	r3, r7, r0
 800ee98:	881a      	ldrh	r2, [r3, #0]
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	0023      	movs	r3, r4
 800ee9e:	f000 feb3 	bl	800fc08 <USB_WritePMA>
            ep->xfer_buff += len;
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	695a      	ldr	r2, [r3, #20]
 800eea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eea8:	18d2      	adds	r2, r2, r3
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	6a1a      	ldr	r2, [r3, #32]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d906      	bls.n	800eec8 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	6a1a      	ldr	r2, [r3, #32]
 800eebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eec0:	1ad2      	subs	r2, r2, r3
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	621a      	str	r2, [r3, #32]
 800eec6:	e005      	b.n	800eed4 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	6a1b      	ldr	r3, [r3, #32]
 800eecc:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2200      	movs	r2, #0
 800eed2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	785b      	ldrb	r3, [r3, #1]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d162      	bne.n	800efa2 <USB_EPStartXfer+0x5ce>
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	00db      	lsls	r3, r3, #3
 800eee2:	4a6d      	ldr	r2, [pc, #436]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800eee4:	4694      	mov	ip, r2
 800eee6:	4463      	add	r3, ip
 800eee8:	685a      	ldr	r2, [r3, #4]
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	00db      	lsls	r3, r3, #3
 800eef0:	4969      	ldr	r1, [pc, #420]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800eef2:	468c      	mov	ip, r1
 800eef4:	4463      	add	r3, ip
 800eef6:	0192      	lsls	r2, r2, #6
 800eef8:	0992      	lsrs	r2, r2, #6
 800eefa:	605a      	str	r2, [r3, #4]
 800eefc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eefe:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef00:	d91e      	bls.n	800ef40 <USB_EPStartXfer+0x56c>
 800ef02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef04:	095b      	lsrs	r3, r3, #5
 800ef06:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef0a:	221f      	movs	r2, #31
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	d102      	bne.n	800ef16 <USB_EPStartXfer+0x542>
 800ef10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef12:	3b01      	subs	r3, #1
 800ef14:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	00db      	lsls	r3, r3, #3
 800ef1c:	4a5e      	ldr	r2, [pc, #376]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ef1e:	4694      	mov	ip, r2
 800ef20:	4463      	add	r3, ip
 800ef22:	685a      	ldr	r2, [r3, #4]
 800ef24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef26:	069b      	lsls	r3, r3, #26
 800ef28:	431a      	orrs	r2, r3
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	00db      	lsls	r3, r3, #3
 800ef30:	4959      	ldr	r1, [pc, #356]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ef32:	468c      	mov	ip, r1
 800ef34:	4463      	add	r3, ip
 800ef36:	2180      	movs	r1, #128	@ 0x80
 800ef38:	0609      	lsls	r1, r1, #24
 800ef3a:	430a      	orrs	r2, r1
 800ef3c:	605a      	str	r2, [r3, #4]
 800ef3e:	e055      	b.n	800efec <USB_EPStartXfer+0x618>
 800ef40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d111      	bne.n	800ef6a <USB_EPStartXfer+0x596>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	00db      	lsls	r3, r3, #3
 800ef4c:	4a52      	ldr	r2, [pc, #328]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ef4e:	4694      	mov	ip, r2
 800ef50:	4463      	add	r3, ip
 800ef52:	685a      	ldr	r2, [r3, #4]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	00db      	lsls	r3, r3, #3
 800ef5a:	494f      	ldr	r1, [pc, #316]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ef5c:	468c      	mov	ip, r1
 800ef5e:	4463      	add	r3, ip
 800ef60:	2180      	movs	r1, #128	@ 0x80
 800ef62:	0609      	lsls	r1, r1, #24
 800ef64:	430a      	orrs	r2, r1
 800ef66:	605a      	str	r2, [r3, #4]
 800ef68:	e040      	b.n	800efec <USB_EPStartXfer+0x618>
 800ef6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef6c:	085b      	lsrs	r3, r3, #1
 800ef6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef72:	2201      	movs	r2, #1
 800ef74:	4013      	ands	r3, r2
 800ef76:	d002      	beq.n	800ef7e <USB_EPStartXfer+0x5aa>
 800ef78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	4a44      	ldr	r2, [pc, #272]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ef86:	4694      	mov	ip, r2
 800ef88:	4463      	add	r3, ip
 800ef8a:	6859      	ldr	r1, [r3, #4]
 800ef8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef8e:	069a      	lsls	r2, r3, #26
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	00db      	lsls	r3, r3, #3
 800ef96:	4840      	ldr	r0, [pc, #256]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800ef98:	4684      	mov	ip, r0
 800ef9a:	4463      	add	r3, ip
 800ef9c:	430a      	orrs	r2, r1
 800ef9e:	605a      	str	r2, [r3, #4]
 800efa0:	e024      	b.n	800efec <USB_EPStartXfer+0x618>
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	785b      	ldrb	r3, [r3, #1]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d120      	bne.n	800efec <USB_EPStartXfer+0x618>
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	00db      	lsls	r3, r3, #3
 800efb0:	4a39      	ldr	r2, [pc, #228]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800efb2:	4694      	mov	ip, r2
 800efb4:	4463      	add	r3, ip
 800efb6:	685a      	ldr	r2, [r3, #4]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	00db      	lsls	r3, r3, #3
 800efbe:	4936      	ldr	r1, [pc, #216]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800efc0:	468c      	mov	ip, r1
 800efc2:	4463      	add	r3, ip
 800efc4:	0412      	lsls	r2, r2, #16
 800efc6:	0c12      	lsrs	r2, r2, #16
 800efc8:	605a      	str	r2, [r3, #4]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	4a31      	ldr	r2, [pc, #196]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800efd2:	4694      	mov	ip, r2
 800efd4:	4463      	add	r3, ip
 800efd6:	6859      	ldr	r1, [r3, #4]
 800efd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efda:	041a      	lsls	r2, r3, #16
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	482d      	ldr	r0, [pc, #180]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800efe4:	4684      	mov	ip, r0
 800efe6:	4463      	add	r3, ip
 800efe8:	430a      	orrs	r2, r1
 800efea:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800efec:	201a      	movs	r0, #26
 800efee:	183b      	adds	r3, r7, r0
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	8952      	ldrh	r2, [r2, #10]
 800eff4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	6959      	ldr	r1, [r3, #20]
 800effa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800effc:	b29c      	uxth	r4, r3
 800effe:	183b      	adds	r3, r7, r0
 800f000:	881a      	ldrh	r2, [r3, #0]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	0023      	movs	r3, r4
 800f006:	f000 fdff 	bl	800fc08 <USB_WritePMA>
 800f00a:	e192      	b.n	800f332 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	6a1b      	ldr	r3, [r3, #32]
 800f010:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	18d3      	adds	r3, r2, r3
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a1f      	ldr	r2, [pc, #124]	@ (800f09c <USB_EPStartXfer+0x6c8>)
 800f020:	4013      	ands	r3, r2
 800f022:	617b      	str	r3, [r7, #20]
 800f024:	687a      	ldr	r2, [r7, #4]
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	18d3      	adds	r3, r2, r3
 800f02e:	697a      	ldr	r2, [r7, #20]
 800f030:	491b      	ldr	r1, [pc, #108]	@ (800f0a0 <USB_EPStartXfer+0x6cc>)
 800f032:	430a      	orrs	r2, r1
 800f034:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	4a16      	ldr	r2, [pc, #88]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800f03e:	4694      	mov	ip, r2
 800f040:	4463      	add	r3, ip
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	00db      	lsls	r3, r3, #3
 800f04a:	4913      	ldr	r1, [pc, #76]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800f04c:	468c      	mov	ip, r1
 800f04e:	4463      	add	r3, ip
 800f050:	0412      	lsls	r2, r2, #16
 800f052:	0c12      	lsrs	r2, r2, #16
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	00db      	lsls	r3, r3, #3
 800f05c:	4a0e      	ldr	r2, [pc, #56]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800f05e:	4694      	mov	ip, r2
 800f060:	4463      	add	r3, ip
 800f062:	6819      	ldr	r1, [r3, #0]
 800f064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f066:	041a      	lsls	r2, r3, #16
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	00db      	lsls	r3, r3, #3
 800f06e:	480a      	ldr	r0, [pc, #40]	@ (800f098 <USB_EPStartXfer+0x6c4>)
 800f070:	4684      	mov	ip, r0
 800f072:	4463      	add	r3, ip
 800f074:	430a      	orrs	r2, r1
 800f076:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f078:	201a      	movs	r0, #26
 800f07a:	183b      	adds	r3, r7, r0
 800f07c:	683a      	ldr	r2, [r7, #0]
 800f07e:	8912      	ldrh	r2, [r2, #8]
 800f080:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	6959      	ldr	r1, [r3, #20]
 800f086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f088:	b29c      	uxth	r4, r3
 800f08a:	183b      	adds	r3, r7, r0
 800f08c:	881a      	ldrh	r2, [r3, #0]
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	0023      	movs	r3, r4
 800f092:	f000 fdb9 	bl	800fc08 <USB_WritePMA>
 800f096:	e14c      	b.n	800f332 <USB_EPStartXfer+0x95e>
 800f098:	40009800 	.word	0x40009800
 800f09c:	07ff8e8f 	.word	0x07ff8e8f
 800f0a0:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	6a1a      	ldr	r2, [r3, #32]
 800f0a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0aa:	1ad2      	subs	r2, r2, r3
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	18d3      	adds	r3, r2, r3
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2240      	movs	r2, #64	@ 0x40
 800f0be:	4013      	ands	r3, r2
 800f0c0:	d100      	bne.n	800f0c4 <USB_EPStartXfer+0x6f0>
 800f0c2:	e09b      	b.n	800f1fc <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	785b      	ldrb	r3, [r3, #1]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d162      	bne.n	800f192 <USB_EPStartXfer+0x7be>
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	00db      	lsls	r3, r3, #3
 800f0d2:	4ad6      	ldr	r2, [pc, #856]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f0d4:	4694      	mov	ip, r2
 800f0d6:	4463      	add	r3, ip
 800f0d8:	685a      	ldr	r2, [r3, #4]
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	00db      	lsls	r3, r3, #3
 800f0e0:	49d2      	ldr	r1, [pc, #840]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f0e2:	468c      	mov	ip, r1
 800f0e4:	4463      	add	r3, ip
 800f0e6:	0192      	lsls	r2, r2, #6
 800f0e8:	0992      	lsrs	r2, r2, #6
 800f0ea:	605a      	str	r2, [r3, #4]
 800f0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800f0f0:	d91e      	bls.n	800f130 <USB_EPStartXfer+0x75c>
 800f0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0f4:	095b      	lsrs	r3, r3, #5
 800f0f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f0f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0fa:	221f      	movs	r2, #31
 800f0fc:	4013      	ands	r3, r2
 800f0fe:	d102      	bne.n	800f106 <USB_EPStartXfer+0x732>
 800f100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f102:	3b01      	subs	r3, #1
 800f104:	643b      	str	r3, [r7, #64]	@ 0x40
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	00db      	lsls	r3, r3, #3
 800f10c:	4ac7      	ldr	r2, [pc, #796]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f10e:	4694      	mov	ip, r2
 800f110:	4463      	add	r3, ip
 800f112:	685a      	ldr	r2, [r3, #4]
 800f114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f116:	069b      	lsls	r3, r3, #26
 800f118:	431a      	orrs	r2, r3
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	00db      	lsls	r3, r3, #3
 800f120:	49c2      	ldr	r1, [pc, #776]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f122:	468c      	mov	ip, r1
 800f124:	4463      	add	r3, ip
 800f126:	2180      	movs	r1, #128	@ 0x80
 800f128:	0609      	lsls	r1, r1, #24
 800f12a:	430a      	orrs	r2, r1
 800f12c:	605a      	str	r2, [r3, #4]
 800f12e:	e055      	b.n	800f1dc <USB_EPStartXfer+0x808>
 800f130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f132:	2b00      	cmp	r3, #0
 800f134:	d111      	bne.n	800f15a <USB_EPStartXfer+0x786>
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	4abb      	ldr	r2, [pc, #748]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f13e:	4694      	mov	ip, r2
 800f140:	4463      	add	r3, ip
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	00db      	lsls	r3, r3, #3
 800f14a:	49b8      	ldr	r1, [pc, #736]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f14c:	468c      	mov	ip, r1
 800f14e:	4463      	add	r3, ip
 800f150:	2180      	movs	r1, #128	@ 0x80
 800f152:	0609      	lsls	r1, r1, #24
 800f154:	430a      	orrs	r2, r1
 800f156:	605a      	str	r2, [r3, #4]
 800f158:	e040      	b.n	800f1dc <USB_EPStartXfer+0x808>
 800f15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f15c:	085b      	lsrs	r3, r3, #1
 800f15e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f162:	2201      	movs	r2, #1
 800f164:	4013      	ands	r3, r2
 800f166:	d002      	beq.n	800f16e <USB_EPStartXfer+0x79a>
 800f168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f16a:	3301      	adds	r3, #1
 800f16c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	00db      	lsls	r3, r3, #3
 800f174:	4aad      	ldr	r2, [pc, #692]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f176:	4694      	mov	ip, r2
 800f178:	4463      	add	r3, ip
 800f17a:	6859      	ldr	r1, [r3, #4]
 800f17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f17e:	069a      	lsls	r2, r3, #26
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	00db      	lsls	r3, r3, #3
 800f186:	48a9      	ldr	r0, [pc, #676]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f188:	4684      	mov	ip, r0
 800f18a:	4463      	add	r3, ip
 800f18c:	430a      	orrs	r2, r1
 800f18e:	605a      	str	r2, [r3, #4]
 800f190:	e024      	b.n	800f1dc <USB_EPStartXfer+0x808>
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	785b      	ldrb	r3, [r3, #1]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d120      	bne.n	800f1dc <USB_EPStartXfer+0x808>
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	00db      	lsls	r3, r3, #3
 800f1a0:	4aa2      	ldr	r2, [pc, #648]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f1a2:	4694      	mov	ip, r2
 800f1a4:	4463      	add	r3, ip
 800f1a6:	685a      	ldr	r2, [r3, #4]
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	499f      	ldr	r1, [pc, #636]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f1b0:	468c      	mov	ip, r1
 800f1b2:	4463      	add	r3, ip
 800f1b4:	0412      	lsls	r2, r2, #16
 800f1b6:	0c12      	lsrs	r2, r2, #16
 800f1b8:	605a      	str	r2, [r3, #4]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	4a9a      	ldr	r2, [pc, #616]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f1c2:	4694      	mov	ip, r2
 800f1c4:	4463      	add	r3, ip
 800f1c6:	6859      	ldr	r1, [r3, #4]
 800f1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1ca:	041a      	lsls	r2, r3, #16
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	4896      	ldr	r0, [pc, #600]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f1d4:	4684      	mov	ip, r0
 800f1d6:	4463      	add	r3, ip
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800f1dc:	201a      	movs	r0, #26
 800f1de:	183b      	adds	r3, r7, r0
 800f1e0:	683a      	ldr	r2, [r7, #0]
 800f1e2:	8952      	ldrh	r2, [r2, #10]
 800f1e4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	6959      	ldr	r1, [r3, #20]
 800f1ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1ec:	b29c      	uxth	r4, r3
 800f1ee:	183b      	adds	r3, r7, r0
 800f1f0:	881a      	ldrh	r2, [r3, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	0023      	movs	r3, r4
 800f1f6:	f000 fd07 	bl	800fc08 <USB_WritePMA>
 800f1fa:	e09a      	b.n	800f332 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	785b      	ldrb	r3, [r3, #1]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d162      	bne.n	800f2ca <USB_EPStartXfer+0x8f6>
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	4a88      	ldr	r2, [pc, #544]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f20c:	4694      	mov	ip, r2
 800f20e:	4463      	add	r3, ip
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	4984      	ldr	r1, [pc, #528]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f21a:	468c      	mov	ip, r1
 800f21c:	4463      	add	r3, ip
 800f21e:	0192      	lsls	r2, r2, #6
 800f220:	0992      	lsrs	r2, r2, #6
 800f222:	601a      	str	r2, [r3, #0]
 800f224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f226:	2b3e      	cmp	r3, #62	@ 0x3e
 800f228:	d91e      	bls.n	800f268 <USB_EPStartXfer+0x894>
 800f22a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f22c:	095b      	lsrs	r3, r3, #5
 800f22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f232:	221f      	movs	r2, #31
 800f234:	4013      	ands	r3, r2
 800f236:	d102      	bne.n	800f23e <USB_EPStartXfer+0x86a>
 800f238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f23a:	3b01      	subs	r3, #1
 800f23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	4a79      	ldr	r2, [pc, #484]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f246:	4694      	mov	ip, r2
 800f248:	4463      	add	r3, ip
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f24e:	069b      	lsls	r3, r3, #26
 800f250:	431a      	orrs	r2, r3
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	00db      	lsls	r3, r3, #3
 800f258:	4974      	ldr	r1, [pc, #464]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f25a:	468c      	mov	ip, r1
 800f25c:	4463      	add	r3, ip
 800f25e:	2180      	movs	r1, #128	@ 0x80
 800f260:	0609      	lsls	r1, r1, #24
 800f262:	430a      	orrs	r2, r1
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	e055      	b.n	800f314 <USB_EPStartXfer+0x940>
 800f268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d111      	bne.n	800f292 <USB_EPStartXfer+0x8be>
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	4a6d      	ldr	r2, [pc, #436]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f276:	4694      	mov	ip, r2
 800f278:	4463      	add	r3, ip
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	496a      	ldr	r1, [pc, #424]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f284:	468c      	mov	ip, r1
 800f286:	4463      	add	r3, ip
 800f288:	2180      	movs	r1, #128	@ 0x80
 800f28a:	0609      	lsls	r1, r1, #24
 800f28c:	430a      	orrs	r2, r1
 800f28e:	601a      	str	r2, [r3, #0]
 800f290:	e040      	b.n	800f314 <USB_EPStartXfer+0x940>
 800f292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f294:	085b      	lsrs	r3, r3, #1
 800f296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f29a:	2201      	movs	r2, #1
 800f29c:	4013      	ands	r3, r2
 800f29e:	d002      	beq.n	800f2a6 <USB_EPStartXfer+0x8d2>
 800f2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	00db      	lsls	r3, r3, #3
 800f2ac:	4a5f      	ldr	r2, [pc, #380]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f2ae:	4694      	mov	ip, r2
 800f2b0:	4463      	add	r3, ip
 800f2b2:	6819      	ldr	r1, [r3, #0]
 800f2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2b6:	069a      	lsls	r2, r3, #26
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	485b      	ldr	r0, [pc, #364]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f2c0:	4684      	mov	ip, r0
 800f2c2:	4463      	add	r3, ip
 800f2c4:	430a      	orrs	r2, r1
 800f2c6:	601a      	str	r2, [r3, #0]
 800f2c8:	e024      	b.n	800f314 <USB_EPStartXfer+0x940>
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	785b      	ldrb	r3, [r3, #1]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d120      	bne.n	800f314 <USB_EPStartXfer+0x940>
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	00db      	lsls	r3, r3, #3
 800f2d8:	4a54      	ldr	r2, [pc, #336]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f2da:	4694      	mov	ip, r2
 800f2dc:	4463      	add	r3, ip
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	00db      	lsls	r3, r3, #3
 800f2e6:	4951      	ldr	r1, [pc, #324]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f2e8:	468c      	mov	ip, r1
 800f2ea:	4463      	add	r3, ip
 800f2ec:	0412      	lsls	r2, r2, #16
 800f2ee:	0c12      	lsrs	r2, r2, #16
 800f2f0:	601a      	str	r2, [r3, #0]
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	00db      	lsls	r3, r3, #3
 800f2f8:	4a4c      	ldr	r2, [pc, #304]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f2fa:	4694      	mov	ip, r2
 800f2fc:	4463      	add	r3, ip
 800f2fe:	6819      	ldr	r1, [r3, #0]
 800f300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f302:	041a      	lsls	r2, r3, #16
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	4848      	ldr	r0, [pc, #288]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f30c:	4684      	mov	ip, r0
 800f30e:	4463      	add	r3, ip
 800f310:	430a      	orrs	r2, r1
 800f312:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f314:	201a      	movs	r0, #26
 800f316:	183b      	adds	r3, r7, r0
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	8912      	ldrh	r2, [r2, #8]
 800f31c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	6959      	ldr	r1, [r3, #20]
 800f322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f324:	b29c      	uxth	r4, r3
 800f326:	183b      	adds	r3, r7, r0
 800f328:	881a      	ldrh	r2, [r3, #0]
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	0023      	movs	r3, r4
 800f32e:	f000 fc6b 	bl	800fc08 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	18d3      	adds	r3, r2, r3
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4a3c      	ldr	r2, [pc, #240]	@ (800f430 <USB_EPStartXfer+0xa5c>)
 800f340:	4013      	ands	r3, r2
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2210      	movs	r2, #16
 800f348:	4053      	eors	r3, r2
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2220      	movs	r2, #32
 800f350:	4053      	eors	r3, r2
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	18d3      	adds	r3, r2, r3
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	4934      	ldr	r1, [pc, #208]	@ (800f434 <USB_EPStartXfer+0xa60>)
 800f362:	430a      	orrs	r2, r1
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	e340      	b.n	800f9ea <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	7b1b      	ldrb	r3, [r3, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d000      	beq.n	800f372 <USB_EPStartXfer+0x99e>
 800f370:	e07e      	b.n	800f470 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	699a      	ldr	r2, [r3, #24]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d909      	bls.n	800f392 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	699a      	ldr	r2, [r3, #24]
 800f388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f38a:	1ad2      	subs	r2, r2, r3
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	619a      	str	r2, [r3, #24]
 800f390:	e005      	b.n	800f39e <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	699b      	ldr	r3, [r3, #24]
 800f396:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	2200      	movs	r2, #0
 800f39c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	00db      	lsls	r3, r3, #3
 800f3a4:	4a21      	ldr	r2, [pc, #132]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f3a6:	4694      	mov	ip, r2
 800f3a8:	4463      	add	r3, ip
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	491e      	ldr	r1, [pc, #120]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f3b4:	468c      	mov	ip, r1
 800f3b6:	4463      	add	r3, ip
 800f3b8:	0192      	lsls	r2, r2, #6
 800f3ba:	0992      	lsrs	r2, r2, #6
 800f3bc:	605a      	str	r2, [r3, #4]
 800f3be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f3c2:	d91e      	bls.n	800f402 <USB_EPStartXfer+0xa2e>
 800f3c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3c6:	095b      	lsrs	r3, r3, #5
 800f3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f3ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3cc:	221f      	movs	r2, #31
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	d102      	bne.n	800f3d8 <USB_EPStartXfer+0xa04>
 800f3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	00db      	lsls	r3, r3, #3
 800f3de:	4a13      	ldr	r2, [pc, #76]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f3e0:	4694      	mov	ip, r2
 800f3e2:	4463      	add	r3, ip
 800f3e4:	685a      	ldr	r2, [r3, #4]
 800f3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e8:	069b      	lsls	r3, r3, #26
 800f3ea:	431a      	orrs	r2, r3
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	00db      	lsls	r3, r3, #3
 800f3f2:	490e      	ldr	r1, [pc, #56]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f3f4:	468c      	mov	ip, r1
 800f3f6:	4463      	add	r3, ip
 800f3f8:	2180      	movs	r1, #128	@ 0x80
 800f3fa:	0609      	lsls	r1, r1, #24
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	605a      	str	r2, [r3, #4]
 800f400:	e2d7      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
 800f402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f404:	2b00      	cmp	r3, #0
 800f406:	d117      	bne.n	800f438 <USB_EPStartXfer+0xa64>
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	4a07      	ldr	r2, [pc, #28]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f410:	4694      	mov	ip, r2
 800f412:	4463      	add	r3, ip
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	00db      	lsls	r3, r3, #3
 800f41c:	4903      	ldr	r1, [pc, #12]	@ (800f42c <USB_EPStartXfer+0xa58>)
 800f41e:	468c      	mov	ip, r1
 800f420:	4463      	add	r3, ip
 800f422:	2180      	movs	r1, #128	@ 0x80
 800f424:	0609      	lsls	r1, r1, #24
 800f426:	430a      	orrs	r2, r1
 800f428:	605a      	str	r2, [r3, #4]
 800f42a:	e2c2      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
 800f42c:	40009800 	.word	0x40009800
 800f430:	07ff8fbf 	.word	0x07ff8fbf
 800f434:	00008080 	.word	0x00008080
 800f438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f43a:	085b      	lsrs	r3, r3, #1
 800f43c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f440:	2201      	movs	r2, #1
 800f442:	4013      	ands	r3, r2
 800f444:	d002      	beq.n	800f44c <USB_EPStartXfer+0xa78>
 800f446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f448:	3301      	adds	r3, #1
 800f44a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	00db      	lsls	r3, r3, #3
 800f452:	4ac4      	ldr	r2, [pc, #784]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f454:	4694      	mov	ip, r2
 800f456:	4463      	add	r3, ip
 800f458:	6859      	ldr	r1, [r3, #4]
 800f45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f45c:	069a      	lsls	r2, r3, #26
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	00db      	lsls	r3, r3, #3
 800f464:	48bf      	ldr	r0, [pc, #764]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f466:	4684      	mov	ip, r0
 800f468:	4463      	add	r3, ip
 800f46a:	430a      	orrs	r2, r1
 800f46c:	605a      	str	r2, [r3, #4]
 800f46e:	e2a0      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	78db      	ldrb	r3, [r3, #3]
 800f474:	2b02      	cmp	r3, #2
 800f476:	d000      	beq.n	800f47a <USB_EPStartXfer+0xaa6>
 800f478:	e15f      	b.n	800f73a <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	785b      	ldrb	r3, [r3, #1]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d168      	bne.n	800f554 <USB_EPStartXfer+0xb80>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	00db      	lsls	r3, r3, #3
 800f488:	4ab6      	ldr	r2, [pc, #728]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f48a:	4694      	mov	ip, r2
 800f48c:	4463      	add	r3, ip
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	00db      	lsls	r3, r3, #3
 800f496:	49b3      	ldr	r1, [pc, #716]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f498:	468c      	mov	ip, r1
 800f49a:	4463      	add	r3, ip
 800f49c:	0192      	lsls	r2, r2, #6
 800f49e:	0992      	lsrs	r2, r2, #6
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f4a8:	d920      	bls.n	800f4ec <USB_EPStartXfer+0xb18>
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	095b      	lsrs	r3, r3, #5
 800f4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	221f      	movs	r2, #31
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	d102      	bne.n	800f4c2 <USB_EPStartXfer+0xaee>
 800f4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	00db      	lsls	r3, r3, #3
 800f4c8:	4aa6      	ldr	r2, [pc, #664]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f4ca:	4694      	mov	ip, r2
 800f4cc:	4463      	add	r3, ip
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4d2:	069b      	lsls	r3, r3, #26
 800f4d4:	431a      	orrs	r2, r3
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	49a1      	ldr	r1, [pc, #644]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f4de:	468c      	mov	ip, r1
 800f4e0:	4463      	add	r3, ip
 800f4e2:	2180      	movs	r1, #128	@ 0x80
 800f4e4:	0609      	lsls	r1, r1, #24
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	e059      	b.n	800f5a0 <USB_EPStartXfer+0xbcc>
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d111      	bne.n	800f518 <USB_EPStartXfer+0xb44>
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	00db      	lsls	r3, r3, #3
 800f4fa:	4a9a      	ldr	r2, [pc, #616]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f4fc:	4694      	mov	ip, r2
 800f4fe:	4463      	add	r3, ip
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	00db      	lsls	r3, r3, #3
 800f508:	4996      	ldr	r1, [pc, #600]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f50a:	468c      	mov	ip, r1
 800f50c:	4463      	add	r3, ip
 800f50e:	2180      	movs	r1, #128	@ 0x80
 800f510:	0609      	lsls	r1, r1, #24
 800f512:	430a      	orrs	r2, r1
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	e043      	b.n	800f5a0 <USB_EPStartXfer+0xbcc>
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	691b      	ldr	r3, [r3, #16]
 800f51c:	085b      	lsrs	r3, r3, #1
 800f51e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	2201      	movs	r2, #1
 800f526:	4013      	ands	r3, r2
 800f528:	d002      	beq.n	800f530 <USB_EPStartXfer+0xb5c>
 800f52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f52c:	3301      	adds	r3, #1
 800f52e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	00db      	lsls	r3, r3, #3
 800f536:	4a8b      	ldr	r2, [pc, #556]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f538:	4694      	mov	ip, r2
 800f53a:	4463      	add	r3, ip
 800f53c:	6819      	ldr	r1, [r3, #0]
 800f53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f540:	069a      	lsls	r2, r3, #26
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	00db      	lsls	r3, r3, #3
 800f548:	4886      	ldr	r0, [pc, #536]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f54a:	4684      	mov	ip, r0
 800f54c:	4463      	add	r3, ip
 800f54e:	430a      	orrs	r2, r1
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	e025      	b.n	800f5a0 <USB_EPStartXfer+0xbcc>
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	785b      	ldrb	r3, [r3, #1]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d121      	bne.n	800f5a0 <USB_EPStartXfer+0xbcc>
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	00db      	lsls	r3, r3, #3
 800f562:	4a80      	ldr	r2, [pc, #512]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f564:	4694      	mov	ip, r2
 800f566:	4463      	add	r3, ip
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	00db      	lsls	r3, r3, #3
 800f570:	497c      	ldr	r1, [pc, #496]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f572:	468c      	mov	ip, r1
 800f574:	4463      	add	r3, ip
 800f576:	0412      	lsls	r2, r2, #16
 800f578:	0c12      	lsrs	r2, r2, #16
 800f57a:	601a      	str	r2, [r3, #0]
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	00db      	lsls	r3, r3, #3
 800f582:	4a78      	ldr	r2, [pc, #480]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f584:	4694      	mov	ip, r2
 800f586:	4463      	add	r3, ip
 800f588:	6819      	ldr	r1, [r3, #0]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	691b      	ldr	r3, [r3, #16]
 800f58e:	041a      	lsls	r2, r3, #16
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	4873      	ldr	r0, [pc, #460]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f598:	4684      	mov	ip, r0
 800f59a:	4463      	add	r3, ip
 800f59c:	430a      	orrs	r2, r1
 800f59e:	601a      	str	r2, [r3, #0]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	785b      	ldrb	r3, [r3, #1]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d168      	bne.n	800f67a <USB_EPStartXfer+0xca6>
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	4a6d      	ldr	r2, [pc, #436]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f5b0:	4694      	mov	ip, r2
 800f5b2:	4463      	add	r3, ip
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	4969      	ldr	r1, [pc, #420]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f5be:	468c      	mov	ip, r1
 800f5c0:	4463      	add	r3, ip
 800f5c2:	0192      	lsls	r2, r2, #6
 800f5c4:	0992      	lsrs	r2, r2, #6
 800f5c6:	605a      	str	r2, [r3, #4]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800f5ce:	d920      	bls.n	800f612 <USB_EPStartXfer+0xc3e>
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	095b      	lsrs	r3, r3, #5
 800f5d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	691b      	ldr	r3, [r3, #16]
 800f5dc:	221f      	movs	r2, #31
 800f5de:	4013      	ands	r3, r2
 800f5e0:	d102      	bne.n	800f5e8 <USB_EPStartXfer+0xc14>
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	00db      	lsls	r3, r3, #3
 800f5ee:	4a5d      	ldr	r2, [pc, #372]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f5f0:	4694      	mov	ip, r2
 800f5f2:	4463      	add	r3, ip
 800f5f4:	685a      	ldr	r2, [r3, #4]
 800f5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f8:	069b      	lsls	r3, r3, #26
 800f5fa:	431a      	orrs	r2, r3
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	00db      	lsls	r3, r3, #3
 800f602:	4958      	ldr	r1, [pc, #352]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f604:	468c      	mov	ip, r1
 800f606:	4463      	add	r3, ip
 800f608:	2180      	movs	r1, #128	@ 0x80
 800f60a:	0609      	lsls	r1, r1, #24
 800f60c:	430a      	orrs	r2, r1
 800f60e:	605a      	str	r2, [r3, #4]
 800f610:	e059      	b.n	800f6c6 <USB_EPStartXfer+0xcf2>
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d111      	bne.n	800f63e <USB_EPStartXfer+0xc6a>
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	4a50      	ldr	r2, [pc, #320]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f622:	4694      	mov	ip, r2
 800f624:	4463      	add	r3, ip
 800f626:	685a      	ldr	r2, [r3, #4]
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	494d      	ldr	r1, [pc, #308]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f630:	468c      	mov	ip, r1
 800f632:	4463      	add	r3, ip
 800f634:	2180      	movs	r1, #128	@ 0x80
 800f636:	0609      	lsls	r1, r1, #24
 800f638:	430a      	orrs	r2, r1
 800f63a:	605a      	str	r2, [r3, #4]
 800f63c:	e043      	b.n	800f6c6 <USB_EPStartXfer+0xcf2>
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	691b      	ldr	r3, [r3, #16]
 800f642:	085b      	lsrs	r3, r3, #1
 800f644:	633b      	str	r3, [r7, #48]	@ 0x30
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	2201      	movs	r2, #1
 800f64c:	4013      	ands	r3, r2
 800f64e:	d002      	beq.n	800f656 <USB_EPStartXfer+0xc82>
 800f650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f652:	3301      	adds	r3, #1
 800f654:	633b      	str	r3, [r7, #48]	@ 0x30
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	00db      	lsls	r3, r3, #3
 800f65c:	4a41      	ldr	r2, [pc, #260]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f65e:	4694      	mov	ip, r2
 800f660:	4463      	add	r3, ip
 800f662:	6859      	ldr	r1, [r3, #4]
 800f664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f666:	069a      	lsls	r2, r3, #26
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	00db      	lsls	r3, r3, #3
 800f66e:	483d      	ldr	r0, [pc, #244]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f670:	4684      	mov	ip, r0
 800f672:	4463      	add	r3, ip
 800f674:	430a      	orrs	r2, r1
 800f676:	605a      	str	r2, [r3, #4]
 800f678:	e025      	b.n	800f6c6 <USB_EPStartXfer+0xcf2>
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	785b      	ldrb	r3, [r3, #1]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d121      	bne.n	800f6c6 <USB_EPStartXfer+0xcf2>
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	00db      	lsls	r3, r3, #3
 800f688:	4a36      	ldr	r2, [pc, #216]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f68a:	4694      	mov	ip, r2
 800f68c:	4463      	add	r3, ip
 800f68e:	685a      	ldr	r2, [r3, #4]
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	00db      	lsls	r3, r3, #3
 800f696:	4933      	ldr	r1, [pc, #204]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f698:	468c      	mov	ip, r1
 800f69a:	4463      	add	r3, ip
 800f69c:	0412      	lsls	r2, r2, #16
 800f69e:	0c12      	lsrs	r2, r2, #16
 800f6a0:	605a      	str	r2, [r3, #4]
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	00db      	lsls	r3, r3, #3
 800f6a8:	4a2e      	ldr	r2, [pc, #184]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f6aa:	4694      	mov	ip, r2
 800f6ac:	4463      	add	r3, ip
 800f6ae:	6859      	ldr	r1, [r3, #4]
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	041a      	lsls	r2, r3, #16
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	00db      	lsls	r3, r3, #3
 800f6bc:	4829      	ldr	r0, [pc, #164]	@ (800f764 <USB_EPStartXfer+0xd90>)
 800f6be:	4684      	mov	ip, r0
 800f6c0:	4463      	add	r3, ip
 800f6c2:	430a      	orrs	r2, r1
 800f6c4:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	69db      	ldr	r3, [r3, #28]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d100      	bne.n	800f6d0 <USB_EPStartXfer+0xcfc>
 800f6ce:	e170      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	18d3      	adds	r3, r2, r3
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	2126      	movs	r1, #38	@ 0x26
 800f6de:	187b      	adds	r3, r7, r1
 800f6e0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f6e2:	187b      	adds	r3, r7, r1
 800f6e4:	881a      	ldrh	r2, [r3, #0]
 800f6e6:	2380      	movs	r3, #128	@ 0x80
 800f6e8:	01db      	lsls	r3, r3, #7
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	d004      	beq.n	800f6f8 <USB_EPStartXfer+0xd24>
 800f6ee:	187b      	adds	r3, r7, r1
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	2240      	movs	r2, #64	@ 0x40
 800f6f4:	4013      	ands	r3, r2
 800f6f6:	d10d      	bne.n	800f714 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f6f8:	2126      	movs	r1, #38	@ 0x26
 800f6fa:	187b      	adds	r3, r7, r1
 800f6fc:	881a      	ldrh	r2, [r3, #0]
 800f6fe:	2380      	movs	r3, #128	@ 0x80
 800f700:	01db      	lsls	r3, r3, #7
 800f702:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f704:	d000      	beq.n	800f708 <USB_EPStartXfer+0xd34>
 800f706:	e154      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f708:	187b      	adds	r3, r7, r1
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	2240      	movs	r2, #64	@ 0x40
 800f70e:	4013      	ands	r3, r2
 800f710:	d000      	beq.n	800f714 <USB_EPStartXfer+0xd40>
 800f712:	e14e      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	18d3      	adds	r3, r2, r3
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a11      	ldr	r2, [pc, #68]	@ (800f768 <USB_EPStartXfer+0xd94>)
 800f722:	4013      	ands	r3, r2
 800f724:	623b      	str	r3, [r7, #32]
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	18d3      	adds	r3, r2, r3
 800f730:	6a3a      	ldr	r2, [r7, #32]
 800f732:	490e      	ldr	r1, [pc, #56]	@ (800f76c <USB_EPStartXfer+0xd98>)
 800f734:	430a      	orrs	r2, r1
 800f736:	601a      	str	r2, [r3, #0]
 800f738:	e13b      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	78db      	ldrb	r3, [r3, #3]
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d000      	beq.n	800f744 <USB_EPStartXfer+0xd70>
 800f742:	e134      	b.n	800f9ae <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	699a      	ldr	r2, [r3, #24]
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d90f      	bls.n	800f770 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	691b      	ldr	r3, [r3, #16]
 800f754:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	699a      	ldr	r2, [r3, #24]
 800f75a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f75c:	1ad2      	subs	r2, r2, r3
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	619a      	str	r2, [r3, #24]
 800f762:	e00b      	b.n	800f77c <USB_EPStartXfer+0xda8>
 800f764:	40009800 	.word	0x40009800
 800f768:	07ff8f8f 	.word	0x07ff8f8f
 800f76c:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	699b      	ldr	r3, [r3, #24]
 800f774:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	2200      	movs	r2, #0
 800f77a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	785b      	ldrb	r3, [r3, #1]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d162      	bne.n	800f84a <USB_EPStartXfer+0xe76>
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	00db      	lsls	r3, r3, #3
 800f78a:	4a9a      	ldr	r2, [pc, #616]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f78c:	4694      	mov	ip, r2
 800f78e:	4463      	add	r3, ip
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	4996      	ldr	r1, [pc, #600]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f79a:	468c      	mov	ip, r1
 800f79c:	4463      	add	r3, ip
 800f79e:	0192      	lsls	r2, r2, #6
 800f7a0:	0992      	lsrs	r2, r2, #6
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f7a8:	d91e      	bls.n	800f7e8 <USB_EPStartXfer+0xe14>
 800f7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7ac:	095b      	lsrs	r3, r3, #5
 800f7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7b2:	221f      	movs	r2, #31
 800f7b4:	4013      	ands	r3, r2
 800f7b6:	d102      	bne.n	800f7be <USB_EPStartXfer+0xdea>
 800f7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	00db      	lsls	r3, r3, #3
 800f7c4:	4a8b      	ldr	r2, [pc, #556]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f7c6:	4694      	mov	ip, r2
 800f7c8:	4463      	add	r3, ip
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ce:	069b      	lsls	r3, r3, #26
 800f7d0:	431a      	orrs	r2, r3
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	00db      	lsls	r3, r3, #3
 800f7d8:	4986      	ldr	r1, [pc, #536]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f7da:	468c      	mov	ip, r1
 800f7dc:	4463      	add	r3, ip
 800f7de:	2180      	movs	r1, #128	@ 0x80
 800f7e0:	0609      	lsls	r1, r1, #24
 800f7e2:	430a      	orrs	r2, r1
 800f7e4:	601a      	str	r2, [r3, #0]
 800f7e6:	e055      	b.n	800f894 <USB_EPStartXfer+0xec0>
 800f7e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d111      	bne.n	800f812 <USB_EPStartXfer+0xe3e>
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	00db      	lsls	r3, r3, #3
 800f7f4:	4a7f      	ldr	r2, [pc, #508]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f7f6:	4694      	mov	ip, r2
 800f7f8:	4463      	add	r3, ip
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	00db      	lsls	r3, r3, #3
 800f802:	497c      	ldr	r1, [pc, #496]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f804:	468c      	mov	ip, r1
 800f806:	4463      	add	r3, ip
 800f808:	2180      	movs	r1, #128	@ 0x80
 800f80a:	0609      	lsls	r1, r1, #24
 800f80c:	430a      	orrs	r2, r1
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	e040      	b.n	800f894 <USB_EPStartXfer+0xec0>
 800f812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f814:	085b      	lsrs	r3, r3, #1
 800f816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f81a:	2201      	movs	r2, #1
 800f81c:	4013      	ands	r3, r2
 800f81e:	d002      	beq.n	800f826 <USB_EPStartXfer+0xe52>
 800f820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f822:	3301      	adds	r3, #1
 800f824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	00db      	lsls	r3, r3, #3
 800f82c:	4a71      	ldr	r2, [pc, #452]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f82e:	4694      	mov	ip, r2
 800f830:	4463      	add	r3, ip
 800f832:	6819      	ldr	r1, [r3, #0]
 800f834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f836:	069a      	lsls	r2, r3, #26
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	00db      	lsls	r3, r3, #3
 800f83e:	486d      	ldr	r0, [pc, #436]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f840:	4684      	mov	ip, r0
 800f842:	4463      	add	r3, ip
 800f844:	430a      	orrs	r2, r1
 800f846:	601a      	str	r2, [r3, #0]
 800f848:	e024      	b.n	800f894 <USB_EPStartXfer+0xec0>
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	785b      	ldrb	r3, [r3, #1]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d120      	bne.n	800f894 <USB_EPStartXfer+0xec0>
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	4a66      	ldr	r2, [pc, #408]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f85a:	4694      	mov	ip, r2
 800f85c:	4463      	add	r3, ip
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	00db      	lsls	r3, r3, #3
 800f866:	4963      	ldr	r1, [pc, #396]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f868:	468c      	mov	ip, r1
 800f86a:	4463      	add	r3, ip
 800f86c:	0412      	lsls	r2, r2, #16
 800f86e:	0c12      	lsrs	r2, r2, #16
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	00db      	lsls	r3, r3, #3
 800f878:	4a5e      	ldr	r2, [pc, #376]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f87a:	4694      	mov	ip, r2
 800f87c:	4463      	add	r3, ip
 800f87e:	6819      	ldr	r1, [r3, #0]
 800f880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f882:	041a      	lsls	r2, r3, #16
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	00db      	lsls	r3, r3, #3
 800f88a:	485a      	ldr	r0, [pc, #360]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f88c:	4684      	mov	ip, r0
 800f88e:	4463      	add	r3, ip
 800f890:	430a      	orrs	r2, r1
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	785b      	ldrb	r3, [r3, #1]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d162      	bne.n	800f962 <USB_EPStartXfer+0xf8e>
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	00db      	lsls	r3, r3, #3
 800f8a2:	4a54      	ldr	r2, [pc, #336]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f8a4:	4694      	mov	ip, r2
 800f8a6:	4463      	add	r3, ip
 800f8a8:	685a      	ldr	r2, [r3, #4]
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	00db      	lsls	r3, r3, #3
 800f8b0:	4950      	ldr	r1, [pc, #320]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f8b2:	468c      	mov	ip, r1
 800f8b4:	4463      	add	r3, ip
 800f8b6:	0192      	lsls	r2, r2, #6
 800f8b8:	0992      	lsrs	r2, r2, #6
 800f8ba:	605a      	str	r2, [r3, #4]
 800f8bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8be:	2b3e      	cmp	r3, #62	@ 0x3e
 800f8c0:	d91e      	bls.n	800f900 <USB_EPStartXfer+0xf2c>
 800f8c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8c4:	095b      	lsrs	r3, r3, #5
 800f8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f8c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8ca:	221f      	movs	r2, #31
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	d102      	bne.n	800f8d6 <USB_EPStartXfer+0xf02>
 800f8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d2:	3b01      	subs	r3, #1
 800f8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	00db      	lsls	r3, r3, #3
 800f8dc:	4a45      	ldr	r2, [pc, #276]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f8de:	4694      	mov	ip, r2
 800f8e0:	4463      	add	r3, ip
 800f8e2:	685a      	ldr	r2, [r3, #4]
 800f8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e6:	069b      	lsls	r3, r3, #26
 800f8e8:	431a      	orrs	r2, r3
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	00db      	lsls	r3, r3, #3
 800f8f0:	4940      	ldr	r1, [pc, #256]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f8f2:	468c      	mov	ip, r1
 800f8f4:	4463      	add	r3, ip
 800f8f6:	2180      	movs	r1, #128	@ 0x80
 800f8f8:	0609      	lsls	r1, r1, #24
 800f8fa:	430a      	orrs	r2, r1
 800f8fc:	605a      	str	r2, [r3, #4]
 800f8fe:	e058      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
 800f900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f902:	2b00      	cmp	r3, #0
 800f904:	d111      	bne.n	800f92a <USB_EPStartXfer+0xf56>
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	00db      	lsls	r3, r3, #3
 800f90c:	4a39      	ldr	r2, [pc, #228]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f90e:	4694      	mov	ip, r2
 800f910:	4463      	add	r3, ip
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	00db      	lsls	r3, r3, #3
 800f91a:	4936      	ldr	r1, [pc, #216]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f91c:	468c      	mov	ip, r1
 800f91e:	4463      	add	r3, ip
 800f920:	2180      	movs	r1, #128	@ 0x80
 800f922:	0609      	lsls	r1, r1, #24
 800f924:	430a      	orrs	r2, r1
 800f926:	605a      	str	r2, [r3, #4]
 800f928:	e043      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
 800f92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f92c:	085b      	lsrs	r3, r3, #1
 800f92e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f932:	2201      	movs	r2, #1
 800f934:	4013      	ands	r3, r2
 800f936:	d002      	beq.n	800f93e <USB_EPStartXfer+0xf6a>
 800f938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93a:	3301      	adds	r3, #1
 800f93c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	00db      	lsls	r3, r3, #3
 800f944:	4a2b      	ldr	r2, [pc, #172]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f946:	4694      	mov	ip, r2
 800f948:	4463      	add	r3, ip
 800f94a:	6859      	ldr	r1, [r3, #4]
 800f94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94e:	069a      	lsls	r2, r3, #26
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	00db      	lsls	r3, r3, #3
 800f956:	4827      	ldr	r0, [pc, #156]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f958:	4684      	mov	ip, r0
 800f95a:	4463      	add	r3, ip
 800f95c:	430a      	orrs	r2, r1
 800f95e:	605a      	str	r2, [r3, #4]
 800f960:	e027      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	785b      	ldrb	r3, [r3, #1]
 800f966:	2b01      	cmp	r3, #1
 800f968:	d123      	bne.n	800f9b2 <USB_EPStartXfer+0xfde>
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	00db      	lsls	r3, r3, #3
 800f970:	4a20      	ldr	r2, [pc, #128]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f972:	4694      	mov	ip, r2
 800f974:	4463      	add	r3, ip
 800f976:	685a      	ldr	r2, [r3, #4]
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	00db      	lsls	r3, r3, #3
 800f97e:	491d      	ldr	r1, [pc, #116]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f980:	468c      	mov	ip, r1
 800f982:	4463      	add	r3, ip
 800f984:	0412      	lsls	r2, r2, #16
 800f986:	0c12      	lsrs	r2, r2, #16
 800f988:	605a      	str	r2, [r3, #4]
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	00db      	lsls	r3, r3, #3
 800f990:	4a18      	ldr	r2, [pc, #96]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f992:	4694      	mov	ip, r2
 800f994:	4463      	add	r3, ip
 800f996:	6859      	ldr	r1, [r3, #4]
 800f998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f99a:	041a      	lsls	r2, r3, #16
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	00db      	lsls	r3, r3, #3
 800f9a2:	4814      	ldr	r0, [pc, #80]	@ (800f9f4 <USB_EPStartXfer+0x1020>)
 800f9a4:	4684      	mov	ip, r0
 800f9a6:	4463      	add	r3, ip
 800f9a8:	430a      	orrs	r2, r1
 800f9aa:	605a      	str	r2, [r3, #4]
 800f9ac:	e001      	b.n	800f9b2 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e01c      	b.n	800f9ec <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	18d3      	adds	r3, r2, r3
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4a0e      	ldr	r2, [pc, #56]	@ (800f9f8 <USB_EPStartXfer+0x1024>)
 800f9c0:	4013      	ands	r3, r2
 800f9c2:	61fb      	str	r3, [r7, #28]
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	2280      	movs	r2, #128	@ 0x80
 800f9c8:	0152      	lsls	r2, r2, #5
 800f9ca:	4053      	eors	r3, r2
 800f9cc:	61fb      	str	r3, [r7, #28]
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	2280      	movs	r2, #128	@ 0x80
 800f9d2:	0192      	lsls	r2, r2, #6
 800f9d4:	4053      	eors	r3, r2
 800f9d6:	61fb      	str	r3, [r7, #28]
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	18d3      	adds	r3, r2, r3
 800f9e2:	69fa      	ldr	r2, [r7, #28]
 800f9e4:	4905      	ldr	r1, [pc, #20]	@ (800f9fc <USB_EPStartXfer+0x1028>)
 800f9e6:	430a      	orrs	r2, r1
 800f9e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	0018      	movs	r0, r3
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	b017      	add	sp, #92	@ 0x5c
 800f9f2:	bd90      	pop	{r4, r7, pc}
 800f9f4:	40009800 	.word	0x40009800
 800f9f8:	07ffbf8f 	.word	0x07ffbf8f
 800f9fc:	00008080 	.word	0x00008080

0800fa00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	785b      	ldrb	r3, [r3, #1]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d016      	beq.n	800fa40 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	18d3      	adds	r3, r2, r3
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a16      	ldr	r2, [pc, #88]	@ (800fa78 <USB_EPSetStall+0x78>)
 800fa20:	4013      	ands	r3, r2
 800fa22:	60bb      	str	r3, [r7, #8]
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	2210      	movs	r2, #16
 800fa28:	4053      	eors	r3, r2
 800fa2a:	60bb      	str	r3, [r7, #8]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	18d3      	adds	r3, r2, r3
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	4910      	ldr	r1, [pc, #64]	@ (800fa7c <USB_EPSetStall+0x7c>)
 800fa3a:	430a      	orrs	r2, r1
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	e016      	b.n	800fa6e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	18d3      	adds	r3, r2, r3
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4a0c      	ldr	r2, [pc, #48]	@ (800fa80 <USB_EPSetStall+0x80>)
 800fa4e:	4013      	ands	r3, r2
 800fa50:	60fb      	str	r3, [r7, #12]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2280      	movs	r2, #128	@ 0x80
 800fa56:	0152      	lsls	r2, r2, #5
 800fa58:	4053      	eors	r3, r2
 800fa5a:	60fb      	str	r3, [r7, #12]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	18d3      	adds	r3, r2, r3
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	4904      	ldr	r1, [pc, #16]	@ (800fa7c <USB_EPSetStall+0x7c>)
 800fa6a:	430a      	orrs	r2, r1
 800fa6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800fa6e:	2300      	movs	r3, #0
}
 800fa70:	0018      	movs	r0, r3
 800fa72:	46bd      	mov	sp, r7
 800fa74:	b004      	add	sp, #16
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	07ff8fbf 	.word	0x07ff8fbf
 800fa7c:	00008080 	.word	0x00008080
 800fa80:	07ffbf8f 	.word	0x07ffbf8f

0800fa84 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b088      	sub	sp, #32
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	7b1b      	ldrb	r3, [r3, #12]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d000      	beq.n	800fa98 <USB_EPClearStall+0x14>
 800fa96:	e075      	b.n	800fb84 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	785b      	ldrb	r3, [r3, #1]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d037      	beq.n	800fb10 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	18d3      	adds	r3, r2, r3
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	613b      	str	r3, [r7, #16]
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	2240      	movs	r2, #64	@ 0x40
 800fab2:	4013      	ands	r3, r2
 800fab4:	d011      	beq.n	800fada <USB_EPClearStall+0x56>
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	18d3      	adds	r3, r2, r3
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	4a33      	ldr	r2, [pc, #204]	@ (800fb90 <USB_EPClearStall+0x10c>)
 800fac4:	4013      	ands	r3, r2
 800fac6:	60fb      	str	r3, [r7, #12]
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	18d3      	adds	r3, r2, r3
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	492f      	ldr	r1, [pc, #188]	@ (800fb94 <USB_EPClearStall+0x110>)
 800fad6:	430a      	orrs	r2, r1
 800fad8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	78db      	ldrb	r3, [r3, #3]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d050      	beq.n	800fb84 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	18d3      	adds	r3, r2, r3
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a2a      	ldr	r2, [pc, #168]	@ (800fb98 <USB_EPClearStall+0x114>)
 800faf0:	4013      	ands	r3, r2
 800faf2:	60bb      	str	r3, [r7, #8]
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	2220      	movs	r2, #32
 800faf8:	4053      	eors	r3, r2
 800fafa:	60bb      	str	r3, [r7, #8]
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	18d3      	adds	r3, r2, r3
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	4924      	ldr	r1, [pc, #144]	@ (800fb9c <USB_EPClearStall+0x118>)
 800fb0a:	430a      	orrs	r2, r1
 800fb0c:	601a      	str	r2, [r3, #0]
 800fb0e:	e039      	b.n	800fb84 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	18d3      	adds	r3, r2, r3
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	61fb      	str	r3, [r7, #28]
 800fb1e:	69fa      	ldr	r2, [r7, #28]
 800fb20:	2380      	movs	r3, #128	@ 0x80
 800fb22:	01db      	lsls	r3, r3, #7
 800fb24:	4013      	ands	r3, r2
 800fb26:	d011      	beq.n	800fb4c <USB_EPClearStall+0xc8>
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	18d3      	adds	r3, r2, r3
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a16      	ldr	r2, [pc, #88]	@ (800fb90 <USB_EPClearStall+0x10c>)
 800fb36:	4013      	ands	r3, r2
 800fb38:	61bb      	str	r3, [r7, #24]
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	18d3      	adds	r3, r2, r3
 800fb44:	69ba      	ldr	r2, [r7, #24]
 800fb46:	4916      	ldr	r1, [pc, #88]	@ (800fba0 <USB_EPClearStall+0x11c>)
 800fb48:	430a      	orrs	r2, r1
 800fb4a:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	18d3      	adds	r3, r2, r3
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a12      	ldr	r2, [pc, #72]	@ (800fba4 <USB_EPClearStall+0x120>)
 800fb5a:	4013      	ands	r3, r2
 800fb5c:	617b      	str	r3, [r7, #20]
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	2280      	movs	r2, #128	@ 0x80
 800fb62:	0152      	lsls	r2, r2, #5
 800fb64:	4053      	eors	r3, r2
 800fb66:	617b      	str	r3, [r7, #20]
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	2280      	movs	r2, #128	@ 0x80
 800fb6c:	0192      	lsls	r2, r2, #6
 800fb6e:	4053      	eors	r3, r2
 800fb70:	617b      	str	r3, [r7, #20]
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	18d3      	adds	r3, r2, r3
 800fb7c:	697a      	ldr	r2, [r7, #20]
 800fb7e:	4907      	ldr	r1, [pc, #28]	@ (800fb9c <USB_EPClearStall+0x118>)
 800fb80:	430a      	orrs	r2, r1
 800fb82:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	0018      	movs	r0, r3
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	b008      	add	sp, #32
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	46c0      	nop			@ (mov r8, r8)
 800fb90:	07ff8f8f 	.word	0x07ff8f8f
 800fb94:	000080c0 	.word	0x000080c0
 800fb98:	07ff8fbf 	.word	0x07ff8fbf
 800fb9c:	00008080 	.word	0x00008080
 800fba0:	0000c080 	.word	0x0000c080
 800fba4:	07ffbf8f 	.word	0x07ffbf8f

0800fba8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	000a      	movs	r2, r1
 800fbb2:	1cfb      	adds	r3, r7, #3
 800fbb4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800fbb6:	1cfb      	adds	r3, r7, #3
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d102      	bne.n	800fbc4 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2280      	movs	r2, #128	@ 0x80
 800fbc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	0018      	movs	r0, r3
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	b002      	add	sp, #8
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800fbce:	b580      	push	{r7, lr}
 800fbd0:	b082      	sub	sp, #8
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbda:	2280      	movs	r2, #128	@ 0x80
 800fbdc:	0212      	lsls	r2, r2, #8
 800fbde:	431a      	orrs	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	0018      	movs	r0, r3
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	b002      	add	sp, #8
 800fbec:	bd80      	pop	{r7, pc}

0800fbee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b084      	sub	sp, #16
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbfa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
}
 800fbfe:	0018      	movs	r0, r3
 800fc00:	46bd      	mov	sp, r7
 800fc02:	b004      	add	sp, #16
 800fc04:	bd80      	pop	{r7, pc}
	...

0800fc08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b08a      	sub	sp, #40	@ 0x28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	0019      	movs	r1, r3
 800fc14:	1dbb      	adds	r3, r7, #6
 800fc16:	801a      	strh	r2, [r3, #0]
 800fc18:	1d3b      	adds	r3, r7, #4
 800fc1a:	1c0a      	adds	r2, r1, #0
 800fc1c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fc1e:	1d3b      	adds	r3, r7, #4
 800fc20:	881b      	ldrh	r3, [r3, #0]
 800fc22:	3303      	adds	r3, #3
 800fc24:	089b      	lsrs	r3, r3, #2
 800fc26:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fc28:	2016      	movs	r0, #22
 800fc2a:	183b      	adds	r3, r7, r0
 800fc2c:	1d3a      	adds	r2, r7, #4
 800fc2e:	8812      	ldrh	r2, [r2, #0]
 800fc30:	2103      	movs	r1, #3
 800fc32:	400a      	ands	r2, r1
 800fc34:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800fc3a:	183b      	adds	r3, r7, r0
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d002      	beq.n	800fc48 <USB_WritePMA+0x40>
  {
    NbWords--;
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	3b01      	subs	r3, #1
 800fc46:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fc48:	1dbb      	adds	r3, r7, #6
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	4a28      	ldr	r2, [pc, #160]	@ (800fcf0 <USB_WritePMA+0xe8>)
 800fc4e:	4694      	mov	ip, r2
 800fc50:	4463      	add	r3, ip
 800fc52:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	623b      	str	r3, [r7, #32]
 800fc58:	e01f      	b.n	800fc9a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	781a      	ldrb	r2, [r3, #0]
 800fc5e:	7859      	ldrb	r1, [r3, #1]
 800fc60:	0209      	lsls	r1, r1, #8
 800fc62:	430a      	orrs	r2, r1
 800fc64:	7899      	ldrb	r1, [r3, #2]
 800fc66:	0409      	lsls	r1, r1, #16
 800fc68:	430a      	orrs	r2, r1
 800fc6a:	78db      	ldrb	r3, [r3, #3]
 800fc6c:	061b      	lsls	r3, r3, #24
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	001a      	movs	r2, r3
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	3304      	adds	r3, #4
 800fc7a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	3301      	adds	r3, #1
 800fc86:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	3301      	adds	r3, #1
 800fc92:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800fc94:	6a3b      	ldr	r3, [r7, #32]
 800fc96:	3b01      	subs	r3, #1
 800fc98:	623b      	str	r3, [r7, #32]
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1dc      	bne.n	800fc5a <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800fca0:	2316      	movs	r3, #22
 800fca2:	18fb      	adds	r3, r7, r3
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d01e      	beq.n	800fce8 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	001a      	movs	r2, r3
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	00db      	lsls	r3, r3, #3
 800fcb8:	409a      	lsls	r2, r3
 800fcba:	0013      	movs	r3, r2
 800fcbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	623b      	str	r3, [r7, #32]
      pBuf++;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	3301      	adds	r3, #1
 800fccc:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800fcce:	2116      	movs	r1, #22
 800fcd0:	187b      	adds	r3, r7, r1
 800fcd2:	881a      	ldrh	r2, [r3, #0]
 800fcd4:	187b      	adds	r3, r7, r1
 800fcd6:	3a01      	subs	r2, #1
 800fcd8:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800fcda:	187b      	adds	r3, r7, r1
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1e5      	bne.n	800fcae <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fce6:	601a      	str	r2, [r3, #0]
  }
}
 800fce8:	46c0      	nop			@ (mov r8, r8)
 800fcea:	46bd      	mov	sp, r7
 800fcec:	b00a      	add	sp, #40	@ 0x28
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	40009800 	.word	0x40009800

0800fcf4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fcf4:	b590      	push	{r4, r7, lr}
 800fcf6:	b08b      	sub	sp, #44	@ 0x2c
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	0019      	movs	r1, r3
 800fd00:	1dbb      	adds	r3, r7, #6
 800fd02:	801a      	strh	r2, [r3, #0]
 800fd04:	1d3b      	adds	r3, r7, #4
 800fd06:	1c0a      	adds	r2, r1, #0
 800fd08:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fd0a:	1d3b      	adds	r3, r7, #4
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	3303      	adds	r3, #3
 800fd10:	089b      	lsrs	r3, r3, #2
 800fd12:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fd14:	201a      	movs	r0, #26
 800fd16:	183b      	adds	r3, r7, r0
 800fd18:	1d3a      	adds	r2, r7, #4
 800fd1a:	8812      	ldrh	r2, [r2, #0]
 800fd1c:	2103      	movs	r1, #3
 800fd1e:	400a      	ands	r2, r1
 800fd20:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fd26:	1dbb      	adds	r3, r7, #6
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	4a39      	ldr	r2, [pc, #228]	@ (800fe10 <USB_ReadPMA+0x11c>)
 800fd2c:	4694      	mov	ip, r2
 800fd2e:	4463      	add	r3, ip
 800fd30:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800fd32:	183b      	adds	r3, r7, r0
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d002      	beq.n	800fd40 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd44:	e03c      	b.n	800fdc0 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	21ff      	movs	r1, #255	@ 0xff
 800fd4e:	4011      	ands	r1, r2
 800fd50:	000c      	movs	r4, r1
 800fd52:	7819      	ldrb	r1, [r3, #0]
 800fd54:	2000      	movs	r0, #0
 800fd56:	4001      	ands	r1, r0
 800fd58:	1c08      	adds	r0, r1, #0
 800fd5a:	1c21      	adds	r1, r4, #0
 800fd5c:	4301      	orrs	r1, r0
 800fd5e:	7019      	strb	r1, [r3, #0]
 800fd60:	0a11      	lsrs	r1, r2, #8
 800fd62:	20ff      	movs	r0, #255	@ 0xff
 800fd64:	4001      	ands	r1, r0
 800fd66:	000c      	movs	r4, r1
 800fd68:	7859      	ldrb	r1, [r3, #1]
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	4001      	ands	r1, r0
 800fd6e:	1c08      	adds	r0, r1, #0
 800fd70:	1c21      	adds	r1, r4, #0
 800fd72:	4301      	orrs	r1, r0
 800fd74:	7059      	strb	r1, [r3, #1]
 800fd76:	0c11      	lsrs	r1, r2, #16
 800fd78:	20ff      	movs	r0, #255	@ 0xff
 800fd7a:	4001      	ands	r1, r0
 800fd7c:	000c      	movs	r4, r1
 800fd7e:	7899      	ldrb	r1, [r3, #2]
 800fd80:	2000      	movs	r0, #0
 800fd82:	4001      	ands	r1, r0
 800fd84:	1c08      	adds	r0, r1, #0
 800fd86:	1c21      	adds	r1, r4, #0
 800fd88:	4301      	orrs	r1, r0
 800fd8a:	7099      	strb	r1, [r3, #2]
 800fd8c:	0e10      	lsrs	r0, r2, #24
 800fd8e:	78da      	ldrb	r2, [r3, #3]
 800fd90:	2100      	movs	r1, #0
 800fd92:	400a      	ands	r2, r1
 800fd94:	1c11      	adds	r1, r2, #0
 800fd96:	1c02      	adds	r2, r0, #0
 800fd98:	430a      	orrs	r2, r1
 800fd9a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800fd9c:	6a3b      	ldr	r3, [r7, #32]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	623b      	str	r3, [r7, #32]
    pBuf++;
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	3301      	adds	r3, #1
 800fda6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800fdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdbc:	3b01      	subs	r3, #1
 800fdbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1bf      	bne.n	800fd46 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800fdc6:	231a      	movs	r3, #26
 800fdc8:	18fb      	adds	r3, r7, r3
 800fdca:	881b      	ldrh	r3, [r3, #0]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d01b      	beq.n	800fe08 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800fdd0:	6a3b      	ldr	r3, [r7, #32]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	00db      	lsls	r3, r3, #3
 800fddc:	693a      	ldr	r2, [r7, #16]
 800fdde:	40da      	lsrs	r2, r3
 800fde0:	0013      	movs	r3, r2
 800fde2:	b2da      	uxtb	r2, r3
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	701a      	strb	r2, [r3, #0]
      count++;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdea:	3301      	adds	r3, #1
 800fdec:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800fdf4:	211a      	movs	r1, #26
 800fdf6:	187b      	adds	r3, r7, r1
 800fdf8:	881a      	ldrh	r2, [r3, #0]
 800fdfa:	187b      	adds	r3, r7, r1
 800fdfc:	3a01      	subs	r2, #1
 800fdfe:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800fe00:	187b      	adds	r3, r7, r1
 800fe02:	881b      	ldrh	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d1e6      	bne.n	800fdd6 <USB_ReadPMA+0xe2>
  }
}
 800fe08:	46c0      	nop			@ (mov r8, r8)
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	b00b      	add	sp, #44	@ 0x2c
 800fe0e:	bd90      	pop	{r4, r7, pc}
 800fe10:	40009800 	.word	0x40009800

0800fe14 <__NVIC_EnableIRQ>:
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	0002      	movs	r2, r0
 800fe1c:	1dfb      	adds	r3, r7, #7
 800fe1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800fe20:	1dfb      	adds	r3, r7, #7
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	2b7f      	cmp	r3, #127	@ 0x7f
 800fe26:	d809      	bhi.n	800fe3c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fe28:	1dfb      	adds	r3, r7, #7
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	001a      	movs	r2, r3
 800fe2e:	231f      	movs	r3, #31
 800fe30:	401a      	ands	r2, r3
 800fe32:	4b04      	ldr	r3, [pc, #16]	@ (800fe44 <__NVIC_EnableIRQ+0x30>)
 800fe34:	2101      	movs	r1, #1
 800fe36:	4091      	lsls	r1, r2
 800fe38:	000a      	movs	r2, r1
 800fe3a:	601a      	str	r2, [r3, #0]
}
 800fe3c:	46c0      	nop			@ (mov r8, r8)
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	b002      	add	sp, #8
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	e000e100 	.word	0xe000e100

0800fe48 <__NVIC_SetPriority>:
{
 800fe48:	b590      	push	{r4, r7, lr}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	0002      	movs	r2, r0
 800fe50:	6039      	str	r1, [r7, #0]
 800fe52:	1dfb      	adds	r3, r7, #7
 800fe54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800fe56:	1dfb      	adds	r3, r7, #7
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800fe5c:	d828      	bhi.n	800feb0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe5e:	4a2f      	ldr	r2, [pc, #188]	@ (800ff1c <__NVIC_SetPriority+0xd4>)
 800fe60:	1dfb      	adds	r3, r7, #7
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	b25b      	sxtb	r3, r3
 800fe66:	089b      	lsrs	r3, r3, #2
 800fe68:	33c0      	adds	r3, #192	@ 0xc0
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	589b      	ldr	r3, [r3, r2]
 800fe6e:	1dfa      	adds	r2, r7, #7
 800fe70:	7812      	ldrb	r2, [r2, #0]
 800fe72:	0011      	movs	r1, r2
 800fe74:	2203      	movs	r2, #3
 800fe76:	400a      	ands	r2, r1
 800fe78:	00d2      	lsls	r2, r2, #3
 800fe7a:	21ff      	movs	r1, #255	@ 0xff
 800fe7c:	4091      	lsls	r1, r2
 800fe7e:	000a      	movs	r2, r1
 800fe80:	43d2      	mvns	r2, r2
 800fe82:	401a      	ands	r2, r3
 800fe84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	019b      	lsls	r3, r3, #6
 800fe8a:	22ff      	movs	r2, #255	@ 0xff
 800fe8c:	401a      	ands	r2, r3
 800fe8e:	1dfb      	adds	r3, r7, #7
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	0018      	movs	r0, r3
 800fe94:	2303      	movs	r3, #3
 800fe96:	4003      	ands	r3, r0
 800fe98:	00db      	lsls	r3, r3, #3
 800fe9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe9c:	481f      	ldr	r0, [pc, #124]	@ (800ff1c <__NVIC_SetPriority+0xd4>)
 800fe9e:	1dfb      	adds	r3, r7, #7
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	b25b      	sxtb	r3, r3
 800fea4:	089b      	lsrs	r3, r3, #2
 800fea6:	430a      	orrs	r2, r1
 800fea8:	33c0      	adds	r3, #192	@ 0xc0
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	501a      	str	r2, [r3, r0]
}
 800feae:	e031      	b.n	800ff14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800feb0:	4a1b      	ldr	r2, [pc, #108]	@ (800ff20 <__NVIC_SetPriority+0xd8>)
 800feb2:	1dfb      	adds	r3, r7, #7
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	0019      	movs	r1, r3
 800feb8:	230f      	movs	r3, #15
 800feba:	400b      	ands	r3, r1
 800febc:	3b08      	subs	r3, #8
 800febe:	089b      	lsrs	r3, r3, #2
 800fec0:	3306      	adds	r3, #6
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	18d3      	adds	r3, r2, r3
 800fec6:	3304      	adds	r3, #4
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	1dfa      	adds	r2, r7, #7
 800fecc:	7812      	ldrb	r2, [r2, #0]
 800fece:	0011      	movs	r1, r2
 800fed0:	2203      	movs	r2, #3
 800fed2:	400a      	ands	r2, r1
 800fed4:	00d2      	lsls	r2, r2, #3
 800fed6:	21ff      	movs	r1, #255	@ 0xff
 800fed8:	4091      	lsls	r1, r2
 800feda:	000a      	movs	r2, r1
 800fedc:	43d2      	mvns	r2, r2
 800fede:	401a      	ands	r2, r3
 800fee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	019b      	lsls	r3, r3, #6
 800fee6:	22ff      	movs	r2, #255	@ 0xff
 800fee8:	401a      	ands	r2, r3
 800feea:	1dfb      	adds	r3, r7, #7
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	0018      	movs	r0, r3
 800fef0:	2303      	movs	r3, #3
 800fef2:	4003      	ands	r3, r0
 800fef4:	00db      	lsls	r3, r3, #3
 800fef6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fef8:	4809      	ldr	r0, [pc, #36]	@ (800ff20 <__NVIC_SetPriority+0xd8>)
 800fefa:	1dfb      	adds	r3, r7, #7
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	001c      	movs	r4, r3
 800ff00:	230f      	movs	r3, #15
 800ff02:	4023      	ands	r3, r4
 800ff04:	3b08      	subs	r3, #8
 800ff06:	089b      	lsrs	r3, r3, #2
 800ff08:	430a      	orrs	r2, r1
 800ff0a:	3306      	adds	r3, #6
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	18c3      	adds	r3, r0, r3
 800ff10:	3304      	adds	r3, #4
 800ff12:	601a      	str	r2, [r3, #0]
}
 800ff14:	46c0      	nop			@ (mov r8, r8)
 800ff16:	46bd      	mov	sp, r7
 800ff18:	b003      	add	sp, #12
 800ff1a:	bd90      	pop	{r4, r7, pc}
 800ff1c:	e000e100 	.word	0xe000e100
 800ff20:	e000ed00 	.word	0xe000ed00

0800ff24 <LL_UCPD_Enable>:
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2280      	movs	r2, #128	@ 0x80
 800ff32:	0612      	lsls	r2, r2, #24
 800ff34:	431a      	orrs	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	601a      	str	r2, [r3, #0]
}
 800ff3a:	46c0      	nop			@ (mov r8, r8)
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	b002      	add	sp, #8
 800ff40:	bd80      	pop	{r7, pc}
	...

0800ff44 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a05      	ldr	r2, [pc, #20]	@ (800ff68 <LL_UCPD_SetRxOrderSet+0x24>)
 800ff54:	401a      	ands	r2, r3
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	431a      	orrs	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	601a      	str	r2, [r3, #0]
}
 800ff5e:	46c0      	nop			@ (mov r8, r8)
 800ff60:	46bd      	mov	sp, r7
 800ff62:	b002      	add	sp, #8
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	46c0      	nop			@ (mov r8, r8)
 800ff68:	e00fffff 	.word	0xe00fffff

0800ff6c <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	4a05      	ldr	r2, [pc, #20]	@ (800ff90 <LL_UCPD_SetccEnable+0x24>)
 800ff7c:	401a      	ands	r2, r3
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	431a      	orrs	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	60da      	str	r2, [r3, #12]
}
 800ff86:	46c0      	nop			@ (mov r8, r8)
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	b002      	add	sp, #8
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	46c0      	nop			@ (mov r8, r8)
 800ff90:	fffff3ff 	.word	0xfffff3ff

0800ff94 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	691b      	ldr	r3, [r3, #16]
 800ffa0:	2280      	movs	r2, #128	@ 0x80
 800ffa2:	0212      	lsls	r2, r2, #8
 800ffa4:	431a      	orrs	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	611a      	str	r2, [r3, #16]
}
 800ffaa:	46c0      	nop			@ (mov r8, r8)
 800ffac:	46bd      	mov	sp, r7
 800ffae:	b002      	add	sp, #8
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b082      	sub	sp, #8
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	691b      	ldr	r3, [r3, #16]
 800ffbe:	2280      	movs	r2, #128	@ 0x80
 800ffc0:	01d2      	lsls	r2, r2, #7
 800ffc2:	431a      	orrs	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	611a      	str	r2, [r3, #16]
}
 800ffc8:	46c0      	nop			@ (mov r8, r8)
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	b002      	add	sp, #8
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800ffd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffd2:	b08b      	sub	sp, #44	@ 0x2c
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60b9      	str	r1, [r7, #8]
 800ffd8:	607a      	str	r2, [r7, #4]
 800ffda:	603b      	str	r3, [r7, #0]
 800ffdc:	240f      	movs	r4, #15
 800ffde:	193b      	adds	r3, r7, r4
 800ffe0:	1c02      	adds	r2, r0, #0
 800ffe2:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ffe4:	193b      	adds	r3, r7, r4
 800ffe6:	781a      	ldrb	r2, [r3, #0]
 800ffe8:	0013      	movs	r3, r2
 800ffea:	005b      	lsls	r3, r3, #1
 800ffec:	189b      	adds	r3, r3, r2
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	4a65      	ldr	r2, [pc, #404]	@ (8010188 <CAD_Init+0x1b8>)
 800fff2:	189b      	adds	r3, r3, r2
 800fff4:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800fff6:	193b      	adds	r3, r7, r4
 800fff8:	781a      	ldrb	r2, [r3, #0]
 800fffa:	4964      	ldr	r1, [pc, #400]	@ (801018c <CAD_Init+0x1bc>)
 800fffc:	0013      	movs	r3, r2
 800fffe:	011b      	lsls	r3, r3, #4
 8010000:	1a9b      	subs	r3, r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	18cb      	adds	r3, r1, r3
 8010006:	3310      	adds	r3, #16
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 801000c:	193b      	adds	r3, r7, r4
 801000e:	781a      	ldrb	r2, [r3, #0]
 8010010:	495e      	ldr	r1, [pc, #376]	@ (801018c <CAD_Init+0x1bc>)
 8010012:	0013      	movs	r3, r2
 8010014:	011b      	lsls	r3, r3, #4
 8010016:	1a9b      	subs	r3, r3, r2
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	18cb      	adds	r3, r1, r3
 801001c:	330c      	adds	r3, #12
 801001e:	68ba      	ldr	r2, [r7, #8]
 8010020:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8010022:	193b      	adds	r3, r7, r4
 8010024:	781a      	ldrb	r2, [r3, #0]
 8010026:	4959      	ldr	r1, [pc, #356]	@ (801018c <CAD_Init+0x1bc>)
 8010028:	0013      	movs	r3, r2
 801002a:	011b      	lsls	r3, r3, #4
 801002c:	1a9b      	subs	r3, r3, r2
 801002e:	009b      	lsls	r3, r3, #2
 8010030:	18cb      	adds	r3, r1, r3
 8010032:	330c      	adds	r3, #12
 8010034:	6819      	ldr	r1, [r3, #0]
 8010036:	193b      	adds	r3, r7, r4
 8010038:	781a      	ldrb	r2, [r3, #0]
 801003a:	4854      	ldr	r0, [pc, #336]	@ (801018c <CAD_Init+0x1bc>)
 801003c:	0013      	movs	r3, r2
 801003e:	011b      	lsls	r3, r3, #4
 8010040:	1a9b      	subs	r3, r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	18c3      	adds	r3, r0, r3
 8010046:	3310      	adds	r3, #16
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	794a      	ldrb	r2, [r1, #5]
 801004c:	0612      	lsls	r2, r2, #24
 801004e:	0f92      	lsrs	r2, r2, #30
 8010050:	b2d2      	uxtb	r2, r2
 8010052:	2103      	movs	r1, #3
 8010054:	400a      	ands	r2, r1
 8010056:	0010      	movs	r0, r2
 8010058:	789a      	ldrb	r2, [r3, #2]
 801005a:	2103      	movs	r1, #3
 801005c:	438a      	bics	r2, r1
 801005e:	1c11      	adds	r1, r2, #0
 8010060:	1c02      	adds	r2, r0, #0
 8010062:	430a      	orrs	r2, r1
 8010064:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8010066:	193b      	adds	r3, r7, r4
 8010068:	781a      	ldrb	r2, [r3, #0]
 801006a:	4948      	ldr	r1, [pc, #288]	@ (801018c <CAD_Init+0x1bc>)
 801006c:	0013      	movs	r3, r2
 801006e:	011b      	lsls	r3, r3, #4
 8010070:	1a9b      	subs	r3, r3, r2
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	18cb      	adds	r3, r1, r3
 8010076:	3310      	adds	r3, #16
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	789a      	ldrb	r2, [r3, #2]
 801007c:	210c      	movs	r1, #12
 801007e:	438a      	bics	r2, r1
 8010080:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8010082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010084:	220c      	movs	r2, #12
 8010086:	2100      	movs	r1, #0
 8010088:	0018      	movs	r0, r3
 801008a:	f009 fba3 	bl	80197d4 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 801008e:	193b      	adds	r3, r7, r4
 8010090:	781a      	ldrb	r2, [r3, #0]
 8010092:	493e      	ldr	r1, [pc, #248]	@ (801018c <CAD_Init+0x1bc>)
 8010094:	0013      	movs	r3, r2
 8010096:	011b      	lsls	r3, r3, #4
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	18cb      	adds	r3, r1, r3
 801009e:	332c      	adds	r3, #44	@ 0x2c
 80100a0:	683a      	ldr	r2, [r7, #0]
 80100a2:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 80100a4:	0025      	movs	r5, r4
 80100a6:	193b      	adds	r3, r7, r4
 80100a8:	781c      	ldrb	r4, [r3, #0]
 80100aa:	197b      	adds	r3, r7, r5
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	0018      	movs	r0, r3
 80100b0:	f000 fc08 	bl	80108c4 <USBPD_HW_GetUSPDInstance>
 80100b4:	0001      	movs	r1, r0
 80100b6:	4a35      	ldr	r2, [pc, #212]	@ (801018c <CAD_Init+0x1bc>)
 80100b8:	0023      	movs	r3, r4
 80100ba:	011b      	lsls	r3, r3, #4
 80100bc:	1b1b      	subs	r3, r3, r4
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 80100c2:	2614      	movs	r6, #20
 80100c4:	19bb      	adds	r3, r7, r6
 80100c6:	0018      	movs	r0, r3
 80100c8:	f7fd ff5c 	bl	800df84 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80100cc:	002c      	movs	r4, r5
 80100ce:	193b      	adds	r3, r7, r4
 80100d0:	781a      	ldrb	r2, [r3, #0]
 80100d2:	492e      	ldr	r1, [pc, #184]	@ (801018c <CAD_Init+0x1bc>)
 80100d4:	0013      	movs	r3, r2
 80100d6:	011b      	lsls	r3, r3, #4
 80100d8:	1a9b      	subs	r3, r3, r2
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	585b      	ldr	r3, [r3, r1]
 80100de:	19ba      	adds	r2, r7, r6
 80100e0:	0011      	movs	r1, r2
 80100e2:	0018      	movs	r0, r3
 80100e4:	f7fd ff14 	bl	800df10 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80100e8:	193b      	adds	r3, r7, r4
 80100ea:	781a      	ldrb	r2, [r3, #0]
 80100ec:	4927      	ldr	r1, [pc, #156]	@ (801018c <CAD_Init+0x1bc>)
 80100ee:	0013      	movs	r3, r2
 80100f0:	011b      	lsls	r3, r3, #4
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	585b      	ldr	r3, [r3, r1]
 80100f8:	22f8      	movs	r2, #248	@ 0xf8
 80100fa:	0452      	lsls	r2, r2, #17
 80100fc:	0011      	movs	r1, r2
 80100fe:	0018      	movs	r0, r3
 8010100:	f7ff ff20 	bl	800ff44 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010104:	193b      	adds	r3, r7, r4
 8010106:	781a      	ldrb	r2, [r3, #0]
 8010108:	4920      	ldr	r1, [pc, #128]	@ (801018c <CAD_Init+0x1bc>)
 801010a:	0013      	movs	r3, r2
 801010c:	011b      	lsls	r3, r3, #4
 801010e:	1a9b      	subs	r3, r3, r2
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	585b      	ldr	r3, [r3, r1]
 8010114:	22c0      	movs	r2, #192	@ 0xc0
 8010116:	0112      	lsls	r2, r2, #4
 8010118:	0011      	movs	r1, r2
 801011a:	0018      	movs	r0, r3
 801011c:	f7ff ff26 	bl	800ff6c <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8010120:	193b      	adds	r3, r7, r4
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	0018      	movs	r0, r3
 8010126:	f008 fc47 	bl	80189b8 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 801012a:	193b      	adds	r3, r7, r4
 801012c:	781a      	ldrb	r2, [r3, #0]
 801012e:	4917      	ldr	r1, [pc, #92]	@ (801018c <CAD_Init+0x1bc>)
 8010130:	0013      	movs	r3, r2
 8010132:	011b      	lsls	r3, r3, #4
 8010134:	1a9b      	subs	r3, r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	585b      	ldr	r3, [r3, r1]
 801013a:	0018      	movs	r0, r3
 801013c:	f7ff fef2 	bl	800ff24 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8010140:	193b      	adds	r3, r7, r4
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	0018      	movs	r0, r3
 8010146:	f001 fd87 	bl	8011c58 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 801014a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801014c:	4a10      	ldr	r2, [pc, #64]	@ (8010190 <CAD_Init+0x1c0>)
 801014e:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8010150:	193b      	adds	r3, r7, r4
 8010152:	781a      	ldrb	r2, [r3, #0]
 8010154:	490d      	ldr	r1, [pc, #52]	@ (801018c <CAD_Init+0x1bc>)
 8010156:	0013      	movs	r3, r2
 8010158:	011b      	lsls	r3, r3, #4
 801015a:	1a9b      	subs	r3, r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	18cb      	adds	r3, r1, r3
 8010160:	330c      	adds	r3, #12
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	795b      	ldrb	r3, [r3, #5]
 8010166:	06db      	lsls	r3, r3, #27
 8010168:	0fdb      	lsrs	r3, r3, #31
 801016a:	b2da      	uxtb	r2, r3
 801016c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016e:	01d0      	lsls	r0, r2, #7
 8010170:	785a      	ldrb	r2, [r3, #1]
 8010172:	217f      	movs	r1, #127	@ 0x7f
 8010174:	400a      	ands	r2, r1
 8010176:	1c11      	adds	r1, r2, #0
 8010178:	1c02      	adds	r2, r0, #0
 801017a:	430a      	orrs	r2, r1
 801017c:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 801017e:	46c0      	nop			@ (mov r8, r8)
 8010180:	46bd      	mov	sp, r7
 8010182:	b00b      	add	sp, #44	@ 0x2c
 8010184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010186:	46c0      	nop			@ (mov r8, r8)
 8010188:	200003a0 	.word	0x200003a0
 801018c:	200003b8 	.word	0x200003b8
 8010190:	08010291 	.word	0x08010291

08010194 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	0002      	movs	r2, r0
 801019c:	1dfb      	adds	r3, r7, #7
 801019e:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80101a0:	1dfb      	adds	r3, r7, #7
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	0018      	movs	r0, r3
 80101a6:	f001 fe07 	bl	8011db8 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80101aa:	1dfb      	adds	r3, r7, #7
 80101ac:	7819      	ldrb	r1, [r3, #0]
 80101ae:	4a0c      	ldr	r2, [pc, #48]	@ (80101e0 <CAD_Enter_ErrorRecovery+0x4c>)
 80101b0:	000b      	movs	r3, r1
 80101b2:	005b      	lsls	r3, r3, #1
 80101b4:	185b      	adds	r3, r3, r1
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	5c99      	ldrb	r1, [r3, r2]
 80101ba:	2080      	movs	r0, #128	@ 0x80
 80101bc:	4240      	negs	r0, r0
 80101be:	4301      	orrs	r1, r0
 80101c0:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80101c2:	1dfb      	adds	r3, r7, #7
 80101c4:	781a      	ldrb	r2, [r3, #0]
 80101c6:	4907      	ldr	r1, [pc, #28]	@ (80101e4 <CAD_Enter_ErrorRecovery+0x50>)
 80101c8:	0013      	movs	r3, r2
 80101ca:	011b      	lsls	r3, r3, #4
 80101cc:	1a9b      	subs	r3, r3, r2
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	18cb      	adds	r3, r1, r3
 80101d2:	332c      	adds	r3, #44	@ 0x2c
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4798      	blx	r3
}
 80101d8:	46c0      	nop			@ (mov r8, r8)
 80101da:	46bd      	mov	sp, r7
 80101dc:	b002      	add	sp, #8
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	200003a0 	.word	0x200003a0
 80101e4:	200003b8 	.word	0x200003b8

080101e8 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	0002      	movs	r2, r0
 80101f0:	6039      	str	r1, [r7, #0]
 80101f2:	1dfb      	adds	r3, r7, #7
 80101f4:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 80101f6:	1dfb      	adds	r3, r7, #7
 80101f8:	781a      	ldrb	r2, [r3, #0]
 80101fa:	4919      	ldr	r1, [pc, #100]	@ (8010260 <CAD_SRC_Set_ResistorRp+0x78>)
 80101fc:	0013      	movs	r3, r2
 80101fe:	011b      	lsls	r3, r3, #4
 8010200:	1a9b      	subs	r3, r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	18cb      	adds	r3, r1, r3
 8010206:	3310      	adds	r3, #16
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	683a      	ldr	r2, [r7, #0]
 801020c:	1c11      	adds	r1, r2, #0
 801020e:	2203      	movs	r2, #3
 8010210:	400a      	ands	r2, r1
 8010212:	b2d2      	uxtb	r2, r2
 8010214:	2103      	movs	r1, #3
 8010216:	400a      	ands	r2, r1
 8010218:	0010      	movs	r0, r2
 801021a:	789a      	ldrb	r2, [r3, #2]
 801021c:	2103      	movs	r1, #3
 801021e:	438a      	bics	r2, r1
 8010220:	1c11      	adds	r1, r2, #0
 8010222:	1c02      	adds	r2, r0, #0
 8010224:	430a      	orrs	r2, r1
 8010226:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8010228:	1dfb      	adds	r3, r7, #7
 801022a:	781a      	ldrb	r2, [r3, #0]
 801022c:	490d      	ldr	r1, [pc, #52]	@ (8010264 <CAD_SRC_Set_ResistorRp+0x7c>)
 801022e:	0013      	movs	r3, r2
 8010230:	005b      	lsls	r3, r3, #1
 8010232:	189b      	adds	r3, r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	18cb      	adds	r3, r1, r3
 8010238:	785a      	ldrb	r2, [r3, #1]
 801023a:	2101      	movs	r1, #1
 801023c:	430a      	orrs	r2, r1
 801023e:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8010240:	1dfb      	adds	r3, r7, #7
 8010242:	781a      	ldrb	r2, [r3, #0]
 8010244:	4906      	ldr	r1, [pc, #24]	@ (8010260 <CAD_SRC_Set_ResistorRp+0x78>)
 8010246:	0013      	movs	r3, r2
 8010248:	011b      	lsls	r3, r3, #4
 801024a:	1a9b      	subs	r3, r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	18cb      	adds	r3, r1, r3
 8010250:	332c      	adds	r3, #44	@ 0x2c
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4798      	blx	r3
  return 0;
 8010256:	2300      	movs	r3, #0
}
 8010258:	0018      	movs	r0, r3
 801025a:	46bd      	mov	sp, r7
 801025c:	b002      	add	sp, #8
 801025e:	bd80      	pop	{r7, pc}
 8010260:	200003b8 	.word	0x200003b8
 8010264:	200003a0 	.word	0x200003a0

08010268 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	0002      	movs	r2, r0
 8010270:	6039      	str	r1, [r7, #0]
 8010272:	1dfb      	adds	r3, r7, #7
 8010274:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8010276:	683a      	ldr	r2, [r7, #0]
 8010278:	1dfb      	adds	r3, r7, #7
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	0011      	movs	r1, r2
 801027e:	0018      	movs	r0, r3
 8010280:	f7ff ffb2 	bl	80101e8 <CAD_SRC_Set_ResistorRp>
 8010284:	0003      	movs	r3, r0
}
 8010286:	0018      	movs	r0, r3
 8010288:	46bd      	mov	sp, r7
 801028a:	b002      	add	sp, #8
 801028c:	bd80      	pop	{r7, pc}
	...

08010290 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	60b9      	str	r1, [r7, #8]
 8010298:	607a      	str	r2, [r7, #4]
 801029a:	210f      	movs	r1, #15
 801029c:	187b      	adds	r3, r7, r1
 801029e:	1c02      	adds	r2, r0, #0
 80102a0:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80102a2:	187b      	adds	r3, r7, r1
 80102a4:	781a      	ldrb	r2, [r3, #0]
 80102a6:	0013      	movs	r3, r2
 80102a8:	005b      	lsls	r3, r3, #1
 80102aa:	189b      	adds	r3, r3, r2
 80102ac:	009b      	lsls	r3, r3, #2
 80102ae:	4a1b      	ldr	r2, [pc, #108]	@ (801031c <CAD_StateMachine_SNK+0x8c>)
 80102b0:	189b      	adds	r3, r3, r2
 80102b2:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80102b4:	2302      	movs	r3, #2
 80102b6:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	785b      	ldrb	r3, [r3, #1]
 80102bc:	069b      	lsls	r3, r3, #26
 80102be:	0edb      	lsrs	r3, r3, #27
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	2b03      	cmp	r3, #3
 80102c4:	d019      	beq.n	80102fa <CAD_StateMachine_SNK+0x6a>
 80102c6:	dc23      	bgt.n	8010310 <CAD_StateMachine_SNK+0x80>
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d002      	beq.n	80102d2 <CAD_StateMachine_SNK+0x42>
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d009      	beq.n	80102e4 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 80102d0:	e01e      	b.n	8010310 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 80102d2:	230f      	movs	r3, #15
 80102d4:	18fb      	adds	r3, r7, r3
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	0018      	movs	r0, r3
 80102da:	f000 f98b 	bl	80105f4 <ManageStateDetached_SNK>
 80102de:	0003      	movs	r3, r0
 80102e0:	617b      	str	r3, [r7, #20]
      break;
 80102e2:	e016      	b.n	8010312 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	68b9      	ldr	r1, [r7, #8]
 80102e8:	230f      	movs	r3, #15
 80102ea:	18fb      	adds	r3, r7, r3
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	0018      	movs	r0, r3
 80102f0:	f000 f9d2 	bl	8010698 <ManageStateAttachedWait_SNK>
 80102f4:	0003      	movs	r3, r0
 80102f6:	617b      	str	r3, [r7, #20]
      break;
 80102f8:	e00b      	b.n	8010312 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	68b9      	ldr	r1, [r7, #8]
 80102fe:	230f      	movs	r3, #15
 8010300:	18fb      	adds	r3, r7, r3
 8010302:	781b      	ldrb	r3, [r3, #0]
 8010304:	0018      	movs	r0, r3
 8010306:	f000 fa55 	bl	80107b4 <ManageStateAttached_SNK>
 801030a:	0003      	movs	r3, r0
 801030c:	617b      	str	r3, [r7, #20]
      break;
 801030e:	e000      	b.n	8010312 <CAD_StateMachine_SNK+0x82>
      break;
 8010310:	46c0      	nop			@ (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8010312:	697b      	ldr	r3, [r7, #20]
}
 8010314:	0018      	movs	r0, r3
 8010316:	46bd      	mov	sp, r7
 8010318:	b006      	add	sp, #24
 801031a:	bd80      	pop	{r7, pc}
 801031c:	200003a0 	.word	0x200003a0

08010320 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010320:	b590      	push	{r4, r7, lr}
 8010322:	b087      	sub	sp, #28
 8010324:	af00      	add	r7, sp, #0
 8010326:	60b9      	str	r1, [r7, #8]
 8010328:	607a      	str	r2, [r7, #4]
 801032a:	210f      	movs	r1, #15
 801032c:	187b      	adds	r3, r7, r1
 801032e:	1c02      	adds	r2, r0, #0
 8010330:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010332:	187b      	adds	r3, r7, r1
 8010334:	781a      	ldrb	r2, [r3, #0]
 8010336:	0013      	movs	r3, r2
 8010338:	005b      	lsls	r3, r3, #1
 801033a:	189b      	adds	r3, r3, r2
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	4a5d      	ldr	r2, [pc, #372]	@ (80104b4 <CAD_StateMachine+0x194>)
 8010340:	189b      	adds	r3, r3, r2
 8010342:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010344:	2302      	movs	r3, #2
 8010346:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	2200      	movs	r2, #0
 801034c:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 801034e:	187b      	adds	r3, r7, r1
 8010350:	781a      	ldrb	r2, [r3, #0]
 8010352:	4959      	ldr	r1, [pc, #356]	@ (80104b8 <CAD_StateMachine+0x198>)
 8010354:	0013      	movs	r3, r2
 8010356:	011b      	lsls	r3, r3, #4
 8010358:	1a9b      	subs	r3, r3, r2
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	18cb      	adds	r3, r1, r3
 801035e:	3310      	adds	r3, #16
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	2210      	movs	r2, #16
 8010366:	4013      	ands	r3, r2
 8010368:	b2db      	uxtb	r3, r3
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <CAD_StateMachine+0x52>
  {
    return _timing;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	e09c      	b.n	80104ac <CAD_StateMachine+0x18c>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	227f      	movs	r2, #127	@ 0x7f
 8010378:	4393      	bics	r3, r2
 801037a:	b2db      	uxtb	r3, r3
 801037c:	2b00      	cmp	r3, #0
 801037e:	d00c      	beq.n	801039a <CAD_StateMachine+0x7a>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	781a      	ldrb	r2, [r3, #0]
 8010384:	217f      	movs	r1, #127	@ 0x7f
 8010386:	400a      	ands	r2, r1
 8010388:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	785a      	ldrb	r2, [r3, #1]
 801038e:	213e      	movs	r1, #62	@ 0x3e
 8010390:	438a      	bics	r2, r1
 8010392:	1c11      	adds	r1, r2, #0
 8010394:	2218      	movs	r2, #24
 8010396:	430a      	orrs	r2, r1
 8010398:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	785b      	ldrb	r3, [r3, #1]
 801039e:	069b      	lsls	r3, r3, #26
 80103a0:	0edb      	lsrs	r3, r3, #27
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b0d      	cmp	r3, #13
 80103a6:	d05c      	beq.n	8010462 <CAD_StateMachine+0x142>
 80103a8:	dc72      	bgt.n	8010490 <CAD_StateMachine+0x170>
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d002      	beq.n	80103b4 <CAD_StateMachine+0x94>
 80103ae:	2b0c      	cmp	r3, #12
 80103b0:	d02b      	beq.n	801040a <CAD_StateMachine+0xea>
 80103b2:	e06d      	b.n	8010490 <CAD_StateMachine+0x170>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 80103b4:	240f      	movs	r4, #15
 80103b6:	193b      	adds	r3, r7, r4
 80103b8:	781a      	ldrb	r2, [r3, #0]
 80103ba:	493f      	ldr	r1, [pc, #252]	@ (80104b8 <CAD_StateMachine+0x198>)
 80103bc:	0013      	movs	r3, r2
 80103be:	011b      	lsls	r3, r3, #4
 80103c0:	1a9b      	subs	r3, r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	585b      	ldr	r3, [r3, r1]
 80103c6:	0018      	movs	r0, r3
 80103c8:	f7ff fde4 	bl	800ff94 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 80103cc:	193b      	adds	r3, r7, r4
 80103ce:	781a      	ldrb	r2, [r3, #0]
 80103d0:	4939      	ldr	r1, [pc, #228]	@ (80104b8 <CAD_StateMachine+0x198>)
 80103d2:	0013      	movs	r3, r2
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	1a9b      	subs	r3, r3, r2
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	585b      	ldr	r3, [r3, r1]
 80103dc:	0018      	movs	r0, r3
 80103de:	f7ff fde8 	bl	800ffb2 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 80103e2:	193b      	adds	r3, r7, r4
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d106      	bne.n	80103f8 <CAD_StateMachine+0xd8>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 80103ea:	2102      	movs	r1, #2
 80103ec:	2008      	movs	r0, #8
 80103ee:	f7ff fd2b 	bl	800fe48 <__NVIC_SetPriority>
 80103f2:	2008      	movs	r0, #8
 80103f4:	f7ff fd0e 	bl	800fe14 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	785a      	ldrb	r2, [r3, #1]
 80103fc:	213e      	movs	r1, #62	@ 0x3e
 80103fe:	438a      	bics	r2, r1
 8010400:	1c11      	adds	r1, r2, #0
 8010402:	2202      	movs	r2, #2
 8010404:	430a      	orrs	r2, r1
 8010406:	705a      	strb	r2, [r3, #1]
      break;
 8010408:	e04f      	b.n	80104aa <CAD_StateMachine+0x18a>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 801040a:	240f      	movs	r4, #15
 801040c:	193b      	adds	r3, r7, r4
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	0018      	movs	r0, r3
 8010412:	f001 fcd1 	bl	8011db8 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8010416:	193b      	adds	r3, r7, r4
 8010418:	781a      	ldrb	r2, [r3, #0]
 801041a:	4927      	ldr	r1, [pc, #156]	@ (80104b8 <CAD_StateMachine+0x198>)
 801041c:	0013      	movs	r3, r2
 801041e:	011b      	lsls	r3, r3, #4
 8010420:	1a9b      	subs	r3, r3, r2
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	18cb      	adds	r3, r1, r3
 8010426:	3334      	adds	r3, #52	@ 0x34
 8010428:	2200      	movs	r2, #0
 801042a:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	781a      	ldrb	r2, [r3, #0]
 8010436:	2103      	movs	r1, #3
 8010438:	438a      	bics	r2, r1
 801043a:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	2201      	movs	r2, #1
 8010440:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010442:	f7f8 fc77 	bl	8008d34 <HAL_GetTick>
 8010446:	0002      	movs	r2, r0
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 801044c:	231a      	movs	r3, #26
 801044e:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	785a      	ldrb	r2, [r3, #1]
 8010454:	213e      	movs	r1, #62	@ 0x3e
 8010456:	438a      	bics	r2, r1
 8010458:	1c11      	adds	r1, r2, #0
 801045a:	221a      	movs	r2, #26
 801045c:	430a      	orrs	r2, r1
 801045e:	705a      	strb	r2, [r3, #1]
      break;
 8010460:	e023      	b.n	80104aa <CAD_StateMachine+0x18a>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8010462:	f7f8 fc67 	bl	8008d34 <HAL_GetTick>
 8010466:	0002      	movs	r2, r0
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	1ad3      	subs	r3, r2, r3
 801046e:	2b1a      	cmp	r3, #26
 8010470:	d91a      	bls.n	80104a8 <CAD_StateMachine+0x188>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8010472:	230f      	movs	r3, #15
 8010474:	18fb      	adds	r3, r7, r3
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	0018      	movs	r0, r3
 801047a:	f001 fbed 	bl	8011c58 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	785a      	ldrb	r2, [r3, #1]
 8010482:	213e      	movs	r1, #62	@ 0x3e
 8010484:	438a      	bics	r2, r1
 8010486:	1c11      	adds	r1, r2, #0
 8010488:	2202      	movs	r2, #2
 801048a:	430a      	orrs	r2, r1
 801048c:	705a      	strb	r2, [r3, #1]
      }
      break;
 801048e:	e00b      	b.n	80104a8 <CAD_StateMachine+0x188>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	689b      	ldr	r3, [r3, #8]
 8010494:	687c      	ldr	r4, [r7, #4]
 8010496:	68b9      	ldr	r1, [r7, #8]
 8010498:	220f      	movs	r2, #15
 801049a:	18ba      	adds	r2, r7, r2
 801049c:	7810      	ldrb	r0, [r2, #0]
 801049e:	0022      	movs	r2, r4
 80104a0:	4798      	blx	r3
 80104a2:	0003      	movs	r3, r0
 80104a4:	617b      	str	r3, [r7, #20]
      break;
 80104a6:	e000      	b.n	80104aa <CAD_StateMachine+0x18a>
      break;
 80104a8:	46c0      	nop			@ (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80104aa:	697b      	ldr	r3, [r7, #20]
}
 80104ac:	0018      	movs	r0, r3
 80104ae:	46bd      	mov	sp, r7
 80104b0:	b007      	add	sp, #28
 80104b2:	bd90      	pop	{r4, r7, pc}
 80104b4:	200003a0 	.word	0x200003a0
 80104b8:	200003b8 	.word	0x200003b8

080104bc <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b086      	sub	sp, #24
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	0002      	movs	r2, r0
 80104c4:	1dfb      	adds	r3, r7, #7
 80104c6:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80104c8:	1dfb      	adds	r3, r7, #7
 80104ca:	781a      	ldrb	r2, [r3, #0]
 80104cc:	0013      	movs	r3, r2
 80104ce:	005b      	lsls	r3, r3, #1
 80104d0:	189b      	adds	r3, r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4a45      	ldr	r2, [pc, #276]	@ (80105ec <CAD_Check_HW_SNK+0x130>)
 80104d6:	189b      	adds	r3, r3, r2
 80104d8:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 80104da:	1dfb      	adds	r3, r7, #7
 80104dc:	781a      	ldrb	r2, [r3, #0]
 80104de:	4944      	ldr	r1, [pc, #272]	@ (80105f0 <CAD_Check_HW_SNK+0x134>)
 80104e0:	0013      	movs	r3, r2
 80104e2:	011b      	lsls	r3, r3, #4
 80104e4:	1a9b      	subs	r3, r3, r2
 80104e6:	009b      	lsls	r3, r3, #2
 80104e8:	585b      	ldr	r3, [r3, r1]
 80104ea:	695a      	ldr	r2, [r3, #20]
 80104ec:	23c0      	movs	r3, #192	@ 0xc0
 80104ee:	029b      	lsls	r3, r3, #10
 80104f0:	4013      	ands	r3, r2
 80104f2:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 80104f4:	1dfb      	adds	r3, r7, #7
 80104f6:	781a      	ldrb	r2, [r3, #0]
 80104f8:	493d      	ldr	r1, [pc, #244]	@ (80105f0 <CAD_Check_HW_SNK+0x134>)
 80104fa:	0013      	movs	r3, r2
 80104fc:	011b      	lsls	r3, r3, #4
 80104fe:	1a9b      	subs	r3, r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	585b      	ldr	r3, [r3, r1]
 8010504:	695a      	ldr	r2, [r3, #20]
 8010506:	23c0      	movs	r3, #192	@ 0xc0
 8010508:	031b      	lsls	r3, r3, #12
 801050a:	4013      	ands	r3, r2
 801050c:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	781a      	ldrb	r2, [r3, #0]
 8010512:	2103      	movs	r1, #3
 8010514:	438a      	bics	r2, r1
 8010516:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	781a      	ldrb	r2, [r3, #0]
 801051c:	211c      	movs	r1, #28
 801051e:	438a      	bics	r2, r1
 8010520:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d02c      	beq.n	8010582 <CAD_Check_HW_SNK+0xc6>
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d129      	bne.n	8010582 <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	781a      	ldrb	r2, [r3, #0]
 8010532:	211c      	movs	r1, #28
 8010534:	438a      	bics	r2, r1
 8010536:	1c11      	adds	r1, r2, #0
 8010538:	2204      	movs	r2, #4
 801053a:	430a      	orrs	r2, r1
 801053c:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	781a      	ldrb	r2, [r3, #0]
 8010542:	2103      	movs	r1, #3
 8010544:	438a      	bics	r2, r1
 8010546:	1c11      	adds	r1, r2, #0
 8010548:	2201      	movs	r2, #1
 801054a:	430a      	orrs	r2, r1
 801054c:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	0c18      	lsrs	r0, r3, #16
 8010552:	1dfb      	adds	r3, r7, #7
 8010554:	781a      	ldrb	r2, [r3, #0]
 8010556:	4926      	ldr	r1, [pc, #152]	@ (80105f0 <CAD_Check_HW_SNK+0x134>)
 8010558:	0013      	movs	r3, r2
 801055a:	011b      	lsls	r3, r3, #4
 801055c:	1a9b      	subs	r3, r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	18cb      	adds	r3, r1, r3
 8010562:	3310      	adds	r3, #16
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	1c01      	adds	r1, r0, #0
 8010568:	2203      	movs	r2, #3
 801056a:	400a      	ands	r2, r1
 801056c:	b2d2      	uxtb	r2, r2
 801056e:	2103      	movs	r1, #3
 8010570:	400a      	ands	r2, r1
 8010572:	0090      	lsls	r0, r2, #2
 8010574:	789a      	ldrb	r2, [r3, #2]
 8010576:	210c      	movs	r1, #12
 8010578:	438a      	bics	r2, r1
 801057a:	1c11      	adds	r1, r2, #0
 801057c:	1c02      	adds	r2, r0, #0
 801057e:	430a      	orrs	r2, r1
 8010580:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d12c      	bne.n	80105e2 <CAD_Check_HW_SNK+0x126>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d029      	beq.n	80105e2 <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	781a      	ldrb	r2, [r3, #0]
 8010592:	211c      	movs	r1, #28
 8010594:	438a      	bics	r2, r1
 8010596:	1c11      	adds	r1, r2, #0
 8010598:	2204      	movs	r2, #4
 801059a:	430a      	orrs	r2, r1
 801059c:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	781a      	ldrb	r2, [r3, #0]
 80105a2:	2103      	movs	r1, #3
 80105a4:	438a      	bics	r2, r1
 80105a6:	1c11      	adds	r1, r2, #0
 80105a8:	2202      	movs	r2, #2
 80105aa:	430a      	orrs	r2, r1
 80105ac:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	0c98      	lsrs	r0, r3, #18
 80105b2:	1dfb      	adds	r3, r7, #7
 80105b4:	781a      	ldrb	r2, [r3, #0]
 80105b6:	490e      	ldr	r1, [pc, #56]	@ (80105f0 <CAD_Check_HW_SNK+0x134>)
 80105b8:	0013      	movs	r3, r2
 80105ba:	011b      	lsls	r3, r3, #4
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	18cb      	adds	r3, r1, r3
 80105c2:	3310      	adds	r3, #16
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	1c01      	adds	r1, r0, #0
 80105c8:	2203      	movs	r2, #3
 80105ca:	400a      	ands	r2, r1
 80105cc:	b2d2      	uxtb	r2, r2
 80105ce:	2103      	movs	r1, #3
 80105d0:	400a      	ands	r2, r1
 80105d2:	0090      	lsls	r0, r2, #2
 80105d4:	789a      	ldrb	r2, [r3, #2]
 80105d6:	210c      	movs	r1, #12
 80105d8:	438a      	bics	r2, r1
 80105da:	1c11      	adds	r1, r2, #0
 80105dc:	1c02      	adds	r2, r0, #0
 80105de:	430a      	orrs	r2, r1
 80105e0:	709a      	strb	r2, [r3, #2]
  }
}
 80105e2:	46c0      	nop			@ (mov r8, r8)
 80105e4:	46bd      	mov	sp, r7
 80105e6:	b006      	add	sp, #24
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	46c0      	nop			@ (mov r8, r8)
 80105ec:	200003a0 	.word	0x200003a0
 80105f0:	200003b8 	.word	0x200003b8

080105f4 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	0002      	movs	r2, r0
 80105fc:	1dfb      	adds	r3, r7, #7
 80105fe:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010600:	1dfb      	adds	r3, r7, #7
 8010602:	781a      	ldrb	r2, [r3, #0]
 8010604:	0013      	movs	r3, r2
 8010606:	005b      	lsls	r3, r3, #1
 8010608:	189b      	adds	r3, r3, r2
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	4a21      	ldr	r2, [pc, #132]	@ (8010694 <ManageStateDetached_SNK+0xa0>)
 801060e:	189b      	adds	r3, r3, r2
 8010610:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010612:	2302      	movs	r3, #2
 8010614:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8010616:	1dfb      	adds	r3, r7, #7
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	0018      	movs	r0, r3
 801061c:	f7ff ff4e 	bl	80104bc <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	221c      	movs	r2, #28
 8010626:	4013      	ands	r3, r2
 8010628:	b2db      	uxtb	r3, r3
 801062a:	2b00      	cmp	r3, #0
 801062c:	d103      	bne.n	8010636 <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 801062e:	2301      	movs	r3, #1
 8010630:	425b      	negs	r3, r3
 8010632:	60fb      	str	r3, [r7, #12]
 8010634:	e029      	b.n	801068a <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8010636:	f7f8 fb7d 	bl	8008d34 <HAL_GetTick>
 801063a:	0002      	movs	r2, r0
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	785a      	ldrb	r2, [r3, #1]
 8010644:	213e      	movs	r1, #62	@ 0x3e
 8010646:	438a      	bics	r2, r1
 8010648:	1c11      	adds	r1, r2, #0
 801064a:	2204      	movs	r2, #4
 801064c:	430a      	orrs	r2, r1
 801064e:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8010650:	2001      	movs	r0, #1
 8010652:	f7f8 fb79 	bl	8008d48 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8010656:	1dfb      	adds	r3, r7, #7
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	0018      	movs	r0, r3
 801065c:	f7ff ff2e 	bl	80104bc <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	221c      	movs	r2, #28
 8010666:	4013      	ands	r3, r2
 8010668:	b2db      	uxtb	r3, r3
 801066a:	2b00      	cmp	r3, #0
 801066c:	d108      	bne.n	8010680 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	785a      	ldrb	r2, [r3, #1]
 8010672:	213e      	movs	r1, #62	@ 0x3e
 8010674:	438a      	bics	r2, r1
 8010676:	1c11      	adds	r1, r2, #0
 8010678:	2202      	movs	r2, #2
 801067a:	430a      	orrs	r2, r1
 801067c:	705a      	strb	r2, [r3, #1]
 801067e:	e004      	b.n	801068a <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8010680:	1dfb      	adds	r3, r7, #7
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	0018      	movs	r0, r3
 8010686:	f008 f9a8 	bl	80189da <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 801068a:	68fb      	ldr	r3, [r7, #12]
}
 801068c:	0018      	movs	r0, r3
 801068e:	46bd      	mov	sp, r7
 8010690:	b004      	add	sp, #16
 8010692:	bd80      	pop	{r7, pc}
 8010694:	200003a0 	.word	0x200003a0

08010698 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010698:	b590      	push	{r4, r7, lr}
 801069a:	b089      	sub	sp, #36	@ 0x24
 801069c:	af00      	add	r7, sp, #0
 801069e:	60b9      	str	r1, [r7, #8]
 80106a0:	607a      	str	r2, [r7, #4]
 80106a2:	240f      	movs	r4, #15
 80106a4:	193b      	adds	r3, r7, r4
 80106a6:	1c02      	adds	r2, r0, #0
 80106a8:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80106aa:	193b      	adds	r3, r7, r4
 80106ac:	781a      	ldrb	r2, [r3, #0]
 80106ae:	0013      	movs	r3, r2
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	189b      	adds	r3, r3, r2
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	4a3e      	ldr	r2, [pc, #248]	@ (80107b0 <ManageStateAttachedWait_SNK+0x118>)
 80106b8:	189b      	adds	r3, r3, r2
 80106ba:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80106bc:	2302      	movs	r3, #2
 80106be:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80106c0:	f7f8 fb38 	bl	8008d34 <HAL_GetTick>
 80106c4:	0002      	movs	r2, r0
 80106c6:	69bb      	ldr	r3, [r7, #24]
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 80106ce:	193b      	adds	r3, r7, r4
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	0018      	movs	r0, r3
 80106d4:	f7ff fef2 	bl	80104bc <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	221c      	movs	r2, #28
 80106de:	4013      	ands	r3, r2
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b04      	cmp	r3, #4
 80106e4:	d130      	bne.n	8010748 <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	2b78      	cmp	r3, #120	@ 0x78
 80106ea:	d927      	bls.n	801073c <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 80106ec:	193b      	adds	r3, r7, r4
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2101      	movs	r1, #1
 80106f2:	0018      	movs	r0, r3
 80106f4:	f006 ff62 	bl	80175bc <USBPD_PWR_IF_GetVBUSStatus>
 80106f8:	0003      	movs	r3, r0
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d11e      	bne.n	801073c <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	079b      	lsls	r3, r3, #30
 8010704:	0f9b      	lsrs	r3, r3, #30
 8010706:	b2db      	uxtb	r3, r3
 8010708:	001a      	movs	r2, r3
 801070a:	193b      	adds	r3, r7, r4
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	0011      	movs	r1, r2
 8010710:	0018      	movs	r0, r3
 8010712:	f001 fbf3 	bl	8011efc <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	785a      	ldrb	r2, [r3, #1]
 801071a:	213e      	movs	r1, #62	@ 0x3e
 801071c:	438a      	bics	r2, r1
 801071e:	1c11      	adds	r1, r2, #0
 8010720:	2206      	movs	r2, #6
 8010722:	430a      	orrs	r2, r1
 8010724:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	2202      	movs	r2, #2
 801072a:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	079b      	lsls	r3, r3, #30
 8010732:	0f9b      	lsrs	r3, r3, #30
 8010734:	b2db      	uxtb	r3, r3
 8010736:	001a      	movs	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801073c:	69bb      	ldr	r3, [r7, #24]
 801073e:	781a      	ldrb	r2, [r3, #0]
 8010740:	2120      	movs	r1, #32
 8010742:	438a      	bics	r2, r1
 8010744:	701a      	strb	r2, [r3, #0]
 8010746:	e02e      	b.n	80107a6 <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8010748:	69bb      	ldr	r3, [r7, #24]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	2220      	movs	r2, #32
 801074e:	4013      	ands	r3, r2
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d10c      	bne.n	8010770 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010756:	f7f8 faed 	bl	8008d34 <HAL_GetTick>
 801075a:	0002      	movs	r2, r0
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	781a      	ldrb	r2, [r3, #0]
 8010764:	2120      	movs	r1, #32
 8010766:	430a      	orrs	r2, r1
 8010768:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 801076a:	230c      	movs	r3, #12
 801076c:	61fb      	str	r3, [r7, #28]
 801076e:	e01a      	b.n	80107a6 <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8010770:	f7f8 fae0 	bl	8008d34 <HAL_GetTick>
 8010774:	0002      	movs	r2, r0
 8010776:	69bb      	ldr	r3, [r7, #24]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	1ad3      	subs	r3, r2, r3
 801077c:	2b0c      	cmp	r3, #12
 801077e:	d912      	bls.n	80107a6 <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	781a      	ldrb	r2, [r3, #0]
 8010784:	2120      	movs	r1, #32
 8010786:	438a      	bics	r2, r1
 8010788:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	785a      	ldrb	r2, [r3, #1]
 801078e:	213e      	movs	r1, #62	@ 0x3e
 8010790:	438a      	bics	r2, r1
 8010792:	1c11      	adds	r1, r2, #0
 8010794:	2202      	movs	r2, #2
 8010796:	430a      	orrs	r2, r1
 8010798:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801079a:	230f      	movs	r3, #15
 801079c:	18fb      	adds	r3, r7, r3
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	0018      	movs	r0, r3
 80107a2:	f008 f92b 	bl	80189fc <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 80107a6:	69fb      	ldr	r3, [r7, #28]
}
 80107a8:	0018      	movs	r0, r3
 80107aa:	46bd      	mov	sp, r7
 80107ac:	b009      	add	sp, #36	@ 0x24
 80107ae:	bd90      	pop	{r4, r7, pc}
 80107b0:	200003a0 	.word	0x200003a0

080107b4 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80107b4:	b590      	push	{r4, r7, lr}
 80107b6:	b089      	sub	sp, #36	@ 0x24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60b9      	str	r1, [r7, #8]
 80107bc:	607a      	str	r2, [r7, #4]
 80107be:	210f      	movs	r1, #15
 80107c0:	187b      	adds	r3, r7, r1
 80107c2:	1c02      	adds	r2, r0, #0
 80107c4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80107c6:	0008      	movs	r0, r1
 80107c8:	183b      	adds	r3, r7, r0
 80107ca:	781a      	ldrb	r2, [r3, #0]
 80107cc:	0013      	movs	r3, r2
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	189b      	adds	r3, r3, r2
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	4a2e      	ldr	r2, [pc, #184]	@ (8010890 <ManageStateAttached_SNK+0xdc>)
 80107d6:	189b      	adds	r3, r3, r2
 80107d8:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80107da:	2302      	movs	r3, #2
 80107dc:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 80107de:	2300      	movs	r3, #0
 80107e0:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80107e2:	183b      	adds	r3, r7, r0
 80107e4:	781a      	ldrb	r2, [r3, #0]
 80107e6:	492b      	ldr	r1, [pc, #172]	@ (8010894 <ManageStateAttached_SNK+0xe0>)
 80107e8:	0013      	movs	r3, r2
 80107ea:	011b      	lsls	r3, r3, #4
 80107ec:	1a9b      	subs	r3, r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	18cb      	adds	r3, r1, r3
 80107f2:	3334      	adds	r3, #52	@ 0x34
 80107f4:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d10c      	bne.n	8010814 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80107fa:	183b      	adds	r3, r7, r0
 80107fc:	781a      	ldrb	r2, [r3, #0]
 80107fe:	4925      	ldr	r1, [pc, #148]	@ (8010894 <ManageStateAttached_SNK+0xe0>)
 8010800:	0013      	movs	r3, r2
 8010802:	011b      	lsls	r3, r3, #4
 8010804:	1a9b      	subs	r3, r3, r2
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	585b      	ldr	r3, [r3, r1]
 801080a:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 801080c:	23c0      	movs	r3, #192	@ 0xc0
 801080e:	029b      	lsls	r3, r3, #10
 8010810:	4013      	ands	r3, r2
 8010812:	e00c      	b.n	801082e <ManageStateAttached_SNK+0x7a>
 8010814:	230f      	movs	r3, #15
 8010816:	18fb      	adds	r3, r7, r3
 8010818:	781a      	ldrb	r2, [r3, #0]
 801081a:	491e      	ldr	r1, [pc, #120]	@ (8010894 <ManageStateAttached_SNK+0xe0>)
 801081c:	0013      	movs	r3, r2
 801081e:	011b      	lsls	r3, r3, #4
 8010820:	1a9b      	subs	r3, r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	585b      	ldr	r3, [r3, r1]
 8010826:	695a      	ldr	r2, [r3, #20]
 8010828:	23c0      	movs	r3, #192	@ 0xc0
 801082a:	031b      	lsls	r3, r3, #12
 801082c:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801082e:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8010830:	240f      	movs	r4, #15
 8010832:	193b      	adds	r3, r7, r4
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	2102      	movs	r1, #2
 8010838:	0018      	movs	r0, r3
 801083a:	f006 febf 	bl	80175bc <USBPD_PWR_IF_GetVBUSStatus>
 801083e:	0003      	movs	r3, r0
 8010840:	2b01      	cmp	r3, #1
 8010842:	d11e      	bne.n	8010882 <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8010844:	697a      	ldr	r2, [r7, #20]
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	429a      	cmp	r2, r3
 801084a:	d11a      	bne.n	8010882 <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 801084c:	193b      	adds	r3, r7, r4
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	0018      	movs	r0, r3
 8010852:	f001 fcb5 	bl	80121c0 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	781a      	ldrb	r2, [r3, #0]
 801085a:	211c      	movs	r1, #28
 801085c:	438a      	bics	r2, r1
 801085e:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	785a      	ldrb	r2, [r3, #1]
 8010864:	213e      	movs	r1, #62	@ 0x3e
 8010866:	438a      	bics	r2, r1
 8010868:	1c11      	adds	r1, r2, #0
 801086a:	2202      	movs	r2, #2
 801086c:	430a      	orrs	r2, r1
 801086e:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2201      	movs	r2, #1
 8010874:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	601a      	str	r2, [r3, #0]
    _timing = 0;
 801087c:	2300      	movs	r3, #0
 801087e:	61fb      	str	r3, [r7, #28]
 8010880:	e001      	b.n	8010886 <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8010882:	230a      	movs	r3, #10
 8010884:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8010886:	69fb      	ldr	r3, [r7, #28]
}
 8010888:	0018      	movs	r0, r3
 801088a:	46bd      	mov	sp, r7
 801088c:	b009      	add	sp, #36	@ 0x24
 801088e:	bd90      	pop	{r4, r7, pc}
 8010890:	200003a0 	.word	0x200003a0
 8010894:	200003b8 	.word	0x200003b8

08010898 <LL_AHB1_GRP1_EnableClock>:
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80108a0:	4b07      	ldr	r3, [pc, #28]	@ (80108c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80108a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80108a4:	4b06      	ldr	r3, [pc, #24]	@ (80108c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	430a      	orrs	r2, r1
 80108aa:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80108ac:	4b04      	ldr	r3, [pc, #16]	@ (80108c0 <LL_AHB1_GRP1_EnableClock+0x28>)
 80108ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	4013      	ands	r3, r2
 80108b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80108b6:	68fb      	ldr	r3, [r7, #12]
}
 80108b8:	46c0      	nop			@ (mov r8, r8)
 80108ba:	46bd      	mov	sp, r7
 80108bc:	b004      	add	sp, #16
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	40021000 	.word	0x40021000

080108c4 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	0002      	movs	r2, r0
 80108cc:	1dfb      	adds	r3, r7, #7
 80108ce:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 80108d0:	4b02      	ldr	r3, [pc, #8]	@ (80108dc <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 80108d2:	0018      	movs	r0, r3
 80108d4:	46bd      	mov	sp, r7
 80108d6:	b002      	add	sp, #8
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	46c0      	nop			@ (mov r8, r8)
 80108dc:	4000a000 	.word	0x4000a000

080108e0 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b08f      	sub	sp, #60	@ 0x3c
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	0002      	movs	r2, r0
 80108e8:	1dfb      	adds	r3, r7, #7
 80108ea:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 80108ec:	240c      	movs	r4, #12
 80108ee:	193b      	adds	r3, r7, r4
 80108f0:	0018      	movs	r0, r3
 80108f2:	f7fd f9ab 	bl	800dc4c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80108f6:	193b      	adds	r3, r7, r4
 80108f8:	2200      	movs	r2, #0
 80108fa:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80108fc:	193b      	adds	r3, r7, r4
 80108fe:	2200      	movs	r2, #0
 8010900:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8010902:	193b      	adds	r3, r7, r4
 8010904:	2200      	movs	r2, #0
 8010906:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8010908:	193b      	adds	r3, r7, r4
 801090a:	2280      	movs	r2, #128	@ 0x80
 801090c:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801090e:	193b      	adds	r3, r7, r4
 8010910:	2200      	movs	r2, #0
 8010912:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010914:	193b      	adds	r3, r7, r4
 8010916:	2200      	movs	r2, #0
 8010918:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 801091a:	193b      	adds	r3, r7, r4
 801091c:	2200      	movs	r2, #0
 801091e:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8010920:	193b      	adds	r3, r7, r4
 8010922:	2200      	movs	r2, #0
 8010924:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8010926:	193b      	adds	r3, r7, r4
 8010928:	2200      	movs	r2, #0
 801092a:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 801092c:	193b      	adds	r3, r7, r4
 801092e:	2280      	movs	r2, #128	@ 0x80
 8010930:	0192      	lsls	r2, r2, #6
 8010932:	629a      	str	r2, [r3, #40]	@ 0x28

  switch (PortNum)
 8010934:	1dfb      	adds	r3, r7, #7
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d10c      	bne.n	8010956 <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 801093c:	2001      	movs	r0, #1
 801093e:	f7ff ffab 	bl	8010898 <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8010942:	193b      	adds	r3, r7, r4
 8010944:	223a      	movs	r2, #58	@ 0x3a
 8010946:	625a      	str	r2, [r3, #36]	@ 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8010948:	193b      	adds	r3, r7, r4
 801094a:	4806      	ldr	r0, [pc, #24]	@ (8010964 <USBPD_HW_Init_DMARxInstance+0x84>)
 801094c:	001a      	movs	r2, r3
 801094e:	2100      	movs	r1, #0
 8010950:	f7fd f93c 	bl	800dbcc <LL_DMA_Init>
      break;
 8010954:	e000      	b.n	8010958 <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8010956:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8010958:	4b03      	ldr	r3, [pc, #12]	@ (8010968 <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 801095a:	0018      	movs	r0, r3
 801095c:	46bd      	mov	sp, r7
 801095e:	b00f      	add	sp, #60	@ 0x3c
 8010960:	bd90      	pop	{r4, r7, pc}
 8010962:	46c0      	nop			@ (mov r8, r8)
 8010964:	40020000 	.word	0x40020000
 8010968:	40020008 	.word	0x40020008

0801096c <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	0002      	movs	r2, r0
 8010974:	1dfb      	adds	r3, r7, #7
 8010976:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8010978:	46c0      	nop			@ (mov r8, r8)
 801097a:	46bd      	mov	sp, r7
 801097c:	b002      	add	sp, #8
 801097e:	bd80      	pop	{r7, pc}

08010980 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8010980:	b590      	push	{r4, r7, lr}
 8010982:	b08f      	sub	sp, #60	@ 0x3c
 8010984:	af00      	add	r7, sp, #0
 8010986:	0002      	movs	r2, r0
 8010988:	1dfb      	adds	r3, r7, #7
 801098a:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 801098c:	240c      	movs	r4, #12
 801098e:	193b      	adds	r3, r7, r4
 8010990:	0018      	movs	r0, r3
 8010992:	f7fd f95b 	bl	800dc4c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8010996:	193b      	adds	r3, r7, r4
 8010998:	2210      	movs	r2, #16
 801099a:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 801099c:	193b      	adds	r3, r7, r4
 801099e:	2200      	movs	r2, #0
 80109a0:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80109a2:	193b      	adds	r3, r7, r4
 80109a4:	2200      	movs	r2, #0
 80109a6:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80109a8:	193b      	adds	r3, r7, r4
 80109aa:	2280      	movs	r2, #128	@ 0x80
 80109ac:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80109ae:	193b      	adds	r3, r7, r4
 80109b0:	2200      	movs	r2, #0
 80109b2:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80109b4:	193b      	adds	r3, r7, r4
 80109b6:	2200      	movs	r2, #0
 80109b8:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 80109ba:	193b      	adds	r3, r7, r4
 80109bc:	2200      	movs	r2, #0
 80109be:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80109c0:	193b      	adds	r3, r7, r4
 80109c2:	2200      	movs	r2, #0
 80109c4:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80109c6:	193b      	adds	r3, r7, r4
 80109c8:	2200      	movs	r2, #0
 80109ca:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 80109cc:	1dfb      	adds	r3, r7, #7
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d110      	bne.n	80109f6 <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 80109d4:	2001      	movs	r0, #1
 80109d6:	f7ff ff5f 	bl	8010898 <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 80109da:	193b      	adds	r3, r7, r4
 80109dc:	223b      	movs	r2, #59	@ 0x3b
 80109de:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 80109e0:	193b      	adds	r3, r7, r4
 80109e2:	2280      	movs	r2, #128	@ 0x80
 80109e4:	0152      	lsls	r2, r2, #5
 80109e6:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 80109e8:	193b      	adds	r3, r7, r4
 80109ea:	4806      	ldr	r0, [pc, #24]	@ (8010a04 <USBPD_HW_Init_DMATxInstance+0x84>)
 80109ec:	001a      	movs	r2, r3
 80109ee:	2101      	movs	r1, #1
 80109f0:	f7fd f8ec 	bl	800dbcc <LL_DMA_Init>
      break;
 80109f4:	e000      	b.n	80109f8 <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 80109f6:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 80109f8:	4b03      	ldr	r3, [pc, #12]	@ (8010a08 <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 80109fa:	0018      	movs	r0, r3
 80109fc:	46bd      	mov	sp, r7
 80109fe:	b00f      	add	sp, #60	@ 0x3c
 8010a00:	bd90      	pop	{r4, r7, pc}
 8010a02:	46c0      	nop			@ (mov r8, r8)
 8010a04:	40020000 	.word	0x40020000
 8010a08:	4002001c 	.word	0x4002001c

08010a0c <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	0002      	movs	r2, r0
 8010a14:	1dfb      	adds	r3, r7, #7
 8010a16:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8010a18:	46c0      	nop			@ (mov r8, r8)
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	b002      	add	sp, #8
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	0002      	movs	r2, r0
 8010a28:	1dfb      	adds	r3, r7, #7
 8010a2a:	701a      	strb	r2, [r3, #0]
 8010a2c:	1dbb      	adds	r3, r7, #6
 8010a2e:	1c0a      	adds	r2, r1, #0
 8010a30:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8010a32:	46c0      	nop			@ (mov r8, r8)
  }
}
 8010a34:	46c0      	nop			@ (mov r8, r8)
 8010a36:	46bd      	mov	sp, r7
 8010a38:	b002      	add	sp, #8
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	699b      	ldr	r3, [r3, #24]
 8010a48:	2280      	movs	r2, #128	@ 0x80
 8010a4a:	0212      	lsls	r2, r2, #8
 8010a4c:	431a      	orrs	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	619a      	str	r2, [r3, #24]
}
 8010a52:	46c0      	nop			@ (mov r8, r8)
 8010a54:	46bd      	mov	sp, r7
 8010a56:	b002      	add	sp, #8
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b082      	sub	sp, #8
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	699b      	ldr	r3, [r3, #24]
 8010a66:	2280      	movs	r2, #128	@ 0x80
 8010a68:	01d2      	lsls	r2, r2, #7
 8010a6a:	431a      	orrs	r2, r3
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	619a      	str	r2, [r3, #24]
}
 8010a70:	46c0      	nop			@ (mov r8, r8)
 8010a72:	46bd      	mov	sp, r7
 8010a74:	b002      	add	sp, #8
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	699b      	ldr	r3, [r3, #24]
 8010a84:	2280      	movs	r2, #128	@ 0x80
 8010a86:	0152      	lsls	r2, r2, #5
 8010a88:	431a      	orrs	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	619a      	str	r2, [r3, #24]
}
 8010a8e:	46c0      	nop			@ (mov r8, r8)
 8010a90:	46bd      	mov	sp, r7
 8010a92:	b002      	add	sp, #8
 8010a94:	bd80      	pop	{r7, pc}

08010a96 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b082      	sub	sp, #8
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	699b      	ldr	r3, [r3, #24]
 8010aa2:	2280      	movs	r2, #128	@ 0x80
 8010aa4:	0112      	lsls	r2, r2, #4
 8010aa6:	431a      	orrs	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	619a      	str	r2, [r3, #24]
}
 8010aac:	46c0      	nop			@ (mov r8, r8)
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	b002      	add	sp, #8
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	699b      	ldr	r3, [r3, #24]
 8010ac0:	2280      	movs	r2, #128	@ 0x80
 8010ac2:	00d2      	lsls	r2, r2, #3
 8010ac4:	431a      	orrs	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	619a      	str	r2, [r3, #24]
}
 8010aca:	46c0      	nop			@ (mov r8, r8)
 8010acc:	46bd      	mov	sp, r7
 8010ace:	b002      	add	sp, #8
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b082      	sub	sp, #8
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	699b      	ldr	r3, [r3, #24]
 8010ade:	2280      	movs	r2, #128	@ 0x80
 8010ae0:	0092      	lsls	r2, r2, #2
 8010ae2:	431a      	orrs	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	619a      	str	r2, [r3, #24]
}
 8010ae8:	46c0      	nop			@ (mov r8, r8)
 8010aea:	46bd      	mov	sp, r7
 8010aec:	b002      	add	sp, #8
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	699b      	ldr	r3, [r3, #24]
 8010afc:	2240      	movs	r2, #64	@ 0x40
 8010afe:	431a      	orrs	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	619a      	str	r2, [r3, #24]
}
 8010b04:	46c0      	nop			@ (mov r8, r8)
 8010b06:	46bd      	mov	sp, r7
 8010b08:	b002      	add	sp, #8
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	699b      	ldr	r3, [r3, #24]
 8010b18:	2220      	movs	r2, #32
 8010b1a:	431a      	orrs	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	619a      	str	r2, [r3, #24]
}
 8010b20:	46c0      	nop			@ (mov r8, r8)
 8010b22:	46bd      	mov	sp, r7
 8010b24:	b002      	add	sp, #8
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	2210      	movs	r2, #16
 8010b36:	431a      	orrs	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	619a      	str	r2, [r3, #24]
}
 8010b3c:	46c0      	nop			@ (mov r8, r8)
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	b002      	add	sp, #8
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	699b      	ldr	r3, [r3, #24]
 8010b50:	2208      	movs	r2, #8
 8010b52:	431a      	orrs	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	619a      	str	r2, [r3, #24]
}
 8010b58:	46c0      	nop			@ (mov r8, r8)
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	b002      	add	sp, #8
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	699b      	ldr	r3, [r3, #24]
 8010b6c:	2204      	movs	r2, #4
 8010b6e:	431a      	orrs	r2, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	619a      	str	r2, [r3, #24]
}
 8010b74:	46c0      	nop			@ (mov r8, r8)
 8010b76:	46bd      	mov	sp, r7
 8010b78:	b002      	add	sp, #8
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	699b      	ldr	r3, [r3, #24]
 8010b88:	2202      	movs	r2, #2
 8010b8a:	431a      	orrs	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	619a      	str	r2, [r3, #24]
}
 8010b90:	46c0      	nop			@ (mov r8, r8)
 8010b92:	46bd      	mov	sp, r7
 8010b94:	b002      	add	sp, #8
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8010b9c:	2000      	movs	r0, #0
 8010b9e:	f000 f803 	bl	8010ba8 <PORTx_IRQHandler>
}
 8010ba2:	46c0      	nop			@ (mov r8, r8)
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	0002      	movs	r2, r0
 8010bb0:	1dfb      	adds	r3, r7, #7
 8010bb2:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8010bb4:	1dfb      	adds	r3, r7, #7
 8010bb6:	781a      	ldrb	r2, [r3, #0]
 8010bb8:	49a6      	ldr	r1, [pc, #664]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010bba:	0013      	movs	r3, r2
 8010bbc:	011b      	lsls	r3, r3, #4
 8010bbe:	1a9b      	subs	r3, r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	585b      	ldr	r3, [r3, r1]
 8010bc4:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	695b      	ldr	r3, [r3, #20]
 8010bca:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	691b      	ldr	r3, [r3, #16]
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	d100      	bne.n	8010bd8 <PORTx_IRQHandler+0x30>
 8010bd6:	e1fc      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	2202      	movs	r2, #2
 8010bdc:	4013      	ands	r3, r2
 8010bde:	d03c      	beq.n	8010c5a <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	0018      	movs	r0, r3
 8010be4:	f7ff ffca 	bl	8010b7c <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010be8:	1dfb      	adds	r3, r7, #7
 8010bea:	781a      	ldrb	r2, [r3, #0]
 8010bec:	4999      	ldr	r1, [pc, #612]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010bee:	0013      	movs	r3, r2
 8010bf0:	011b      	lsls	r3, r3, #4
 8010bf2:	1a9b      	subs	r3, r3, r2
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	18cb      	adds	r3, r1, r3
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	6819      	ldr	r1, [r3, #0]
 8010bfe:	1dfb      	adds	r3, r7, #7
 8010c00:	781a      	ldrb	r2, [r3, #0]
 8010c02:	4894      	ldr	r0, [pc, #592]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010c04:	0013      	movs	r3, r2
 8010c06:	011b      	lsls	r3, r3, #4
 8010c08:	1a9b      	subs	r3, r3, r2
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	18c3      	adds	r3, r0, r3
 8010c0e:	3304      	adds	r3, #4
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2201      	movs	r2, #1
 8010c14:	4391      	bics	r1, r2
 8010c16:	000a      	movs	r2, r1
 8010c18:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010c1a:	46c0      	nop			@ (mov r8, r8)
 8010c1c:	1dfb      	adds	r3, r7, #7
 8010c1e:	781a      	ldrb	r2, [r3, #0]
 8010c20:	498c      	ldr	r1, [pc, #560]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010c22:	0013      	movs	r3, r2
 8010c24:	011b      	lsls	r3, r3, #4
 8010c26:	1a9b      	subs	r3, r3, r2
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	18cb      	adds	r3, r1, r3
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2201      	movs	r2, #1
 8010c34:	4013      	ands	r3, r2
 8010c36:	2b01      	cmp	r3, #1
 8010c38:	d0f0      	beq.n	8010c1c <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8010c3a:	1dfb      	adds	r3, r7, #7
 8010c3c:	781a      	ldrb	r2, [r3, #0]
 8010c3e:	4985      	ldr	r1, [pc, #532]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010c40:	0013      	movs	r3, r2
 8010c42:	011b      	lsls	r3, r3, #4
 8010c44:	1a9b      	subs	r3, r3, r2
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	18cb      	adds	r3, r1, r3
 8010c4a:	3314      	adds	r3, #20
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	1dfa      	adds	r2, r7, #7
 8010c50:	7812      	ldrb	r2, [r2, #0]
 8010c52:	2101      	movs	r1, #1
 8010c54:	0010      	movs	r0, r2
 8010c56:	4798      	blx	r3
      return;
 8010c58:	e1bb      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	2204      	movs	r2, #4
 8010c5e:	4013      	ands	r3, r2
 8010c60:	d03c      	beq.n	8010cdc <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	0018      	movs	r0, r3
 8010c66:	f7ff ff7b 	bl	8010b60 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010c6a:	1dfb      	adds	r3, r7, #7
 8010c6c:	781a      	ldrb	r2, [r3, #0]
 8010c6e:	4979      	ldr	r1, [pc, #484]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010c70:	0013      	movs	r3, r2
 8010c72:	011b      	lsls	r3, r3, #4
 8010c74:	1a9b      	subs	r3, r3, r2
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	18cb      	adds	r3, r1, r3
 8010c7a:	3304      	adds	r3, #4
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6819      	ldr	r1, [r3, #0]
 8010c80:	1dfb      	adds	r3, r7, #7
 8010c82:	781a      	ldrb	r2, [r3, #0]
 8010c84:	4873      	ldr	r0, [pc, #460]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010c86:	0013      	movs	r3, r2
 8010c88:	011b      	lsls	r3, r3, #4
 8010c8a:	1a9b      	subs	r3, r3, r2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	18c3      	adds	r3, r0, r3
 8010c90:	3304      	adds	r3, #4
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2201      	movs	r2, #1
 8010c96:	4391      	bics	r1, r2
 8010c98:	000a      	movs	r2, r1
 8010c9a:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010c9c:	46c0      	nop			@ (mov r8, r8)
 8010c9e:	1dfb      	adds	r3, r7, #7
 8010ca0:	781a      	ldrb	r2, [r3, #0]
 8010ca2:	496c      	ldr	r1, [pc, #432]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010ca4:	0013      	movs	r3, r2
 8010ca6:	011b      	lsls	r3, r3, #4
 8010ca8:	1a9b      	subs	r3, r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	18cb      	adds	r3, r1, r3
 8010cae:	3304      	adds	r3, #4
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	4013      	ands	r3, r2
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d0f0      	beq.n	8010c9e <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8010cbc:	1dfb      	adds	r3, r7, #7
 8010cbe:	781a      	ldrb	r2, [r3, #0]
 8010cc0:	4964      	ldr	r1, [pc, #400]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010cc2:	0013      	movs	r3, r2
 8010cc4:	011b      	lsls	r3, r3, #4
 8010cc6:	1a9b      	subs	r3, r3, r2
 8010cc8:	009b      	lsls	r3, r3, #2
 8010cca:	18cb      	adds	r3, r1, r3
 8010ccc:	3314      	adds	r3, #20
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	1dfa      	adds	r2, r7, #7
 8010cd2:	7812      	ldrb	r2, [r2, #0]
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	0010      	movs	r0, r2
 8010cd8:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8010cda:	e17a      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	2208      	movs	r2, #8
 8010ce0:	4013      	ands	r3, r2
 8010ce2:	d03c      	beq.n	8010d5e <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	0018      	movs	r0, r3
 8010ce8:	f7ff ff2c 	bl	8010b44 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8010cec:	1dfb      	adds	r3, r7, #7
 8010cee:	781a      	ldrb	r2, [r3, #0]
 8010cf0:	4958      	ldr	r1, [pc, #352]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010cf2:	0013      	movs	r3, r2
 8010cf4:	011b      	lsls	r3, r3, #4
 8010cf6:	1a9b      	subs	r3, r3, r2
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	18cb      	adds	r3, r1, r3
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6819      	ldr	r1, [r3, #0]
 8010d02:	1dfb      	adds	r3, r7, #7
 8010d04:	781a      	ldrb	r2, [r3, #0]
 8010d06:	4853      	ldr	r0, [pc, #332]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010d08:	0013      	movs	r3, r2
 8010d0a:	011b      	lsls	r3, r3, #4
 8010d0c:	1a9b      	subs	r3, r3, r2
 8010d0e:	009b      	lsls	r3, r3, #2
 8010d10:	18c3      	adds	r3, r0, r3
 8010d12:	3304      	adds	r3, #4
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2201      	movs	r2, #1
 8010d18:	4391      	bics	r1, r2
 8010d1a:	000a      	movs	r2, r1
 8010d1c:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8010d1e:	46c0      	nop			@ (mov r8, r8)
 8010d20:	1dfb      	adds	r3, r7, #7
 8010d22:	781a      	ldrb	r2, [r3, #0]
 8010d24:	494b      	ldr	r1, [pc, #300]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010d26:	0013      	movs	r3, r2
 8010d28:	011b      	lsls	r3, r3, #4
 8010d2a:	1a9b      	subs	r3, r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	18cb      	adds	r3, r1, r3
 8010d30:	3304      	adds	r3, #4
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	2201      	movs	r2, #1
 8010d38:	4013      	ands	r3, r2
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d0f0      	beq.n	8010d20 <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8010d3e:	1dfb      	adds	r3, r7, #7
 8010d40:	781a      	ldrb	r2, [r3, #0]
 8010d42:	4944      	ldr	r1, [pc, #272]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010d44:	0013      	movs	r3, r2
 8010d46:	011b      	lsls	r3, r3, #4
 8010d48:	1a9b      	subs	r3, r3, r2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	18cb      	adds	r3, r1, r3
 8010d4e:	3314      	adds	r3, #20
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	1dfa      	adds	r2, r7, #7
 8010d54:	7812      	ldrb	r2, [r2, #0]
 8010d56:	2102      	movs	r1, #2
 8010d58:	0010      	movs	r0, r2
 8010d5a:	4798      	blx	r3
      return;
 8010d5c:	e139      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2210      	movs	r2, #16
 8010d62:	4013      	ands	r3, r2
 8010d64:	d004      	beq.n	8010d70 <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	0018      	movs	r0, r3
 8010d6a:	f7ff fedd 	bl	8010b28 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8010d6e:	e130      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	2220      	movs	r2, #32
 8010d74:	4013      	ands	r3, r2
 8010d76:	d013      	beq.n	8010da0 <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	0018      	movs	r0, r3
 8010d7c:	f7ff fec6 	bl	8010b0c <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010d80:	1dfb      	adds	r3, r7, #7
 8010d82:	781a      	ldrb	r2, [r3, #0]
 8010d84:	4933      	ldr	r1, [pc, #204]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010d86:	0013      	movs	r3, r2
 8010d88:	011b      	lsls	r3, r3, #4
 8010d8a:	1a9b      	subs	r3, r3, r2
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	18cb      	adds	r3, r1, r3
 8010d90:	3324      	adds	r3, #36	@ 0x24
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	1dfa      	adds	r2, r7, #7
 8010d96:	7812      	ldrb	r2, [r2, #0]
 8010d98:	2105      	movs	r1, #5
 8010d9a:	0010      	movs	r0, r2
 8010d9c:	4798      	blx	r3
      return;
 8010d9e:	e118      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	2240      	movs	r2, #64	@ 0x40
 8010da4:	4013      	ands	r3, r2
 8010da6:	d004      	beq.n	8010db2 <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	0018      	movs	r0, r3
 8010dac:	f7ff fea0 	bl	8010af0 <LL_UCPD_ClearFlag_TxUND>
      return;
 8010db0:	e10f      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8010db2:	68ba      	ldr	r2, [r7, #8]
 8010db4:	2380      	movs	r3, #128	@ 0x80
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	4013      	ands	r3, r2
 8010dba:	d023      	beq.n	8010e04 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dc0:	2b05      	cmp	r3, #5
 8010dc2:	d10e      	bne.n	8010de2 <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8010dc4:	1dfb      	adds	r3, r7, #7
 8010dc6:	781a      	ldrb	r2, [r3, #0]
 8010dc8:	4922      	ldr	r1, [pc, #136]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010dca:	0013      	movs	r3, r2
 8010dcc:	011b      	lsls	r3, r3, #4
 8010dce:	1a9b      	subs	r3, r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	18cb      	adds	r3, r1, r3
 8010dd4:	331c      	adds	r3, #28
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	1dfa      	adds	r2, r7, #7
 8010dda:	7812      	ldrb	r2, [r2, #0]
 8010ddc:	2106      	movs	r1, #6
 8010dde:	0010      	movs	r0, r2
 8010de0:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	0018      	movs	r0, r3
 8010de6:	f7ff fe74 	bl	8010ad2 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8010dea:	1dfb      	adds	r3, r7, #7
 8010dec:	781a      	ldrb	r2, [r3, #0]
 8010dee:	4919      	ldr	r1, [pc, #100]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010df0:	2038      	movs	r0, #56	@ 0x38
 8010df2:	0013      	movs	r3, r2
 8010df4:	011b      	lsls	r3, r3, #4
 8010df6:	1a9b      	subs	r3, r3, r2
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	18cb      	adds	r3, r1, r3
 8010dfc:	181b      	adds	r3, r3, r0
 8010dfe:	2201      	movs	r2, #1
 8010e00:	701a      	strb	r2, [r3, #0]
      return;
 8010e02:	e0e6      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	2380      	movs	r3, #128	@ 0x80
 8010e08:	00db      	lsls	r3, r3, #3
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	d013      	beq.n	8010e36 <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8010e0e:	1dfb      	adds	r3, r7, #7
 8010e10:	781a      	ldrb	r2, [r3, #0]
 8010e12:	4910      	ldr	r1, [pc, #64]	@ (8010e54 <PORTx_IRQHandler+0x2ac>)
 8010e14:	0013      	movs	r3, r2
 8010e16:	011b      	lsls	r3, r3, #4
 8010e18:	1a9b      	subs	r3, r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	18cb      	adds	r3, r1, r3
 8010e1e:	331c      	adds	r3, #28
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	1dfa      	adds	r2, r7, #7
 8010e24:	7812      	ldrb	r2, [r2, #0]
 8010e26:	2105      	movs	r1, #5
 8010e28:	0010      	movs	r0, r2
 8010e2a:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	0018      	movs	r0, r3
 8010e30:	f7ff fe40 	bl	8010ab4 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8010e34:	e0cd      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8010e36:	68ba      	ldr	r2, [r7, #8]
 8010e38:	2380      	movs	r3, #128	@ 0x80
 8010e3a:	011b      	lsls	r3, r3, #4
 8010e3c:	4013      	ands	r3, r2
 8010e3e:	d00d      	beq.n	8010e5c <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 8010e40:	1dfb      	adds	r3, r7, #7
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	4a04      	ldr	r2, [pc, #16]	@ (8010e58 <PORTx_IRQHandler+0x2b0>)
 8010e46:	2101      	movs	r1, #1
 8010e48:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	0018      	movs	r0, r3
 8010e4e:	f7ff fe22 	bl	8010a96 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8010e52:	e0be      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
 8010e54:	200003b8 	.word	0x200003b8
 8010e58:	200003ac 	.word	0x200003ac
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8010e5c:	68ba      	ldr	r2, [r7, #8]
 8010e5e:	2380      	movs	r3, #128	@ 0x80
 8010e60:	015b      	lsls	r3, r3, #5
 8010e62:	4013      	ands	r3, r2
 8010e64:	d100      	bne.n	8010e68 <PORTx_IRQHandler+0x2c0>
 8010e66:	e096      	b.n	8010f96 <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8010e68:	1dfb      	adds	r3, r7, #7
 8010e6a:	781a      	ldrb	r2, [r3, #0]
 8010e6c:	495a      	ldr	r1, [pc, #360]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010e6e:	2038      	movs	r0, #56	@ 0x38
 8010e70:	0013      	movs	r3, r2
 8010e72:	011b      	lsls	r3, r3, #4
 8010e74:	1a9b      	subs	r3, r3, r2
 8010e76:	009b      	lsls	r3, r3, #2
 8010e78:	18cb      	adds	r3, r1, r3
 8010e7a:	181b      	adds	r3, r3, r0
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	0018      	movs	r0, r3
 8010e84:	f7ff fdf8 	bl	8010a78 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8010e88:	1dfb      	adds	r3, r7, #7
 8010e8a:	781a      	ldrb	r2, [r3, #0]
 8010e8c:	4952      	ldr	r1, [pc, #328]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010e8e:	0013      	movs	r3, r2
 8010e90:	011b      	lsls	r3, r3, #4
 8010e92:	1a9b      	subs	r3, r3, r2
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	18cb      	adds	r3, r1, r3
 8010e98:	3308      	adds	r3, #8
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	6819      	ldr	r1, [r3, #0]
 8010e9e:	1dfb      	adds	r3, r7, #7
 8010ea0:	781a      	ldrb	r2, [r3, #0]
 8010ea2:	484d      	ldr	r0, [pc, #308]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010ea4:	0013      	movs	r3, r2
 8010ea6:	011b      	lsls	r3, r3, #4
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	18c3      	adds	r3, r0, r3
 8010eae:	3308      	adds	r3, #8
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	4391      	bics	r1, r2
 8010eb6:	000a      	movs	r2, r1
 8010eb8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8010eba:	46c0      	nop			@ (mov r8, r8)
 8010ebc:	1dfb      	adds	r3, r7, #7
 8010ebe:	781a      	ldrb	r2, [r3, #0]
 8010ec0:	4945      	ldr	r1, [pc, #276]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010ec2:	0013      	movs	r3, r2
 8010ec4:	011b      	lsls	r3, r3, #4
 8010ec6:	1a9b      	subs	r3, r3, r2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	18cb      	adds	r3, r1, r3
 8010ecc:	3308      	adds	r3, #8
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	2b01      	cmp	r3, #1
 8010ed8:	d0f0      	beq.n	8010ebc <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8010eda:	1dfb      	adds	r3, r7, #7
 8010edc:	781a      	ldrb	r2, [r3, #0]
 8010ede:	493e      	ldr	r1, [pc, #248]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010ee0:	0013      	movs	r3, r2
 8010ee2:	011b      	lsls	r3, r3, #4
 8010ee4:	1a9b      	subs	r3, r3, r2
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	18cb      	adds	r3, r1, r3
 8010eea:	3330      	adds	r3, #48	@ 0x30
 8010eec:	6818      	ldr	r0, [r3, #0]
 8010eee:	1dfb      	adds	r3, r7, #7
 8010ef0:	781a      	ldrb	r2, [r3, #0]
 8010ef2:	4939      	ldr	r1, [pc, #228]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010ef4:	0013      	movs	r3, r2
 8010ef6:	011b      	lsls	r3, r3, #4
 8010ef8:	1a9b      	subs	r3, r3, r2
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	18cb      	adds	r3, r1, r3
 8010efe:	3308      	adds	r3, #8
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	0002      	movs	r2, r0
 8010f04:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8010f06:	1dfb      	adds	r3, r7, #7
 8010f08:	781a      	ldrb	r2, [r3, #0]
 8010f0a:	4933      	ldr	r1, [pc, #204]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010f0c:	0013      	movs	r3, r2
 8010f0e:	011b      	lsls	r3, r3, #4
 8010f10:	1a9b      	subs	r3, r3, r2
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	18cb      	adds	r3, r1, r3
 8010f16:	3308      	adds	r3, #8
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2284      	movs	r2, #132	@ 0x84
 8010f1c:	0052      	lsls	r2, r2, #1
 8010f1e:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8010f20:	1dfb      	adds	r3, r7, #7
 8010f22:	781a      	ldrb	r2, [r3, #0]
 8010f24:	492c      	ldr	r1, [pc, #176]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010f26:	0013      	movs	r3, r2
 8010f28:	011b      	lsls	r3, r3, #4
 8010f2a:	1a9b      	subs	r3, r3, r2
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	18cb      	adds	r3, r1, r3
 8010f30:	3308      	adds	r3, #8
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	6819      	ldr	r1, [r3, #0]
 8010f36:	1dfb      	adds	r3, r7, #7
 8010f38:	781a      	ldrb	r2, [r3, #0]
 8010f3a:	4827      	ldr	r0, [pc, #156]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010f3c:	0013      	movs	r3, r2
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	18c3      	adds	r3, r0, r3
 8010f46:	3308      	adds	r3, #8
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	430a      	orrs	r2, r1
 8010f4e:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 8010f50:	68ba      	ldr	r2, [r7, #8]
 8010f52:	2380      	movs	r3, #128	@ 0x80
 8010f54:	019b      	lsls	r3, r3, #6
 8010f56:	4013      	ands	r3, r2
 8010f58:	d117      	bne.n	8010f8a <PORTx_IRQHandler+0x3e2>
 8010f5a:	1dfb      	adds	r3, r7, #7
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8010fdc <PORTx_IRQHandler+0x434>)
 8010f60:	5cd3      	ldrb	r3, [r2, r3]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d111      	bne.n	8010f8a <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8010f66:	1dfb      	adds	r3, r7, #7
 8010f68:	781a      	ldrb	r2, [r3, #0]
 8010f6a:	491b      	ldr	r1, [pc, #108]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010f6c:	0013      	movs	r3, r2
 8010f6e:	011b      	lsls	r3, r3, #4
 8010f70:	1a9b      	subs	r3, r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	18cb      	adds	r3, r1, r3
 8010f76:	3320      	adds	r3, #32
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f7e:	2107      	movs	r1, #7
 8010f80:	4019      	ands	r1, r3
 8010f82:	1dfb      	adds	r3, r7, #7
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	0018      	movs	r0, r3
 8010f88:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 8010f8a:	1dfb      	adds	r3, r7, #7
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	4a13      	ldr	r2, [pc, #76]	@ (8010fdc <PORTx_IRQHandler+0x434>)
 8010f90:	2100      	movs	r1, #0
 8010f92:	54d1      	strb	r1, [r2, r3]
      return;
 8010f94:	e01d      	b.n	8010fd2 <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8010f96:	68ba      	ldr	r2, [r7, #8]
 8010f98:	2380      	movs	r3, #128	@ 0x80
 8010f9a:	01db      	lsls	r3, r3, #7
 8010f9c:	4013      	ands	r3, r2
 8010f9e:	d104      	bne.n	8010faa <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8010fa0:	68ba      	ldr	r2, [r7, #8]
 8010fa2:	2380      	movs	r3, #128	@ 0x80
 8010fa4:	021b      	lsls	r3, r3, #8
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	d013      	beq.n	8010fd2 <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	0018      	movs	r0, r3
 8010fae:	f7ff fd54 	bl	8010a5a <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	0018      	movs	r0, r3
 8010fb6:	f7ff fd41 	bl	8010a3c <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8010fba:	1dfb      	adds	r3, r7, #7
 8010fbc:	781a      	ldrb	r2, [r3, #0]
 8010fbe:	4906      	ldr	r1, [pc, #24]	@ (8010fd8 <PORTx_IRQHandler+0x430>)
 8010fc0:	0013      	movs	r3, r2
 8010fc2:	011b      	lsls	r3, r3, #4
 8010fc4:	1a9b      	subs	r3, r3, r2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	18cb      	adds	r3, r1, r3
 8010fca:	332c      	adds	r3, #44	@ 0x2c
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8010fd0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	b004      	add	sp, #16
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	200003b8 	.word	0x200003b8
 8010fdc:	200003ac 	.word	0x200003ac

08010fe0 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8010fe0:	b590      	push	{r4, r7, lr}
 8010fe2:	b085      	sub	sp, #20
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60b9      	str	r1, [r7, #8]
 8010fe8:	607a      	str	r2, [r7, #4]
 8010fea:	603b      	str	r3, [r7, #0]
 8010fec:	240f      	movs	r4, #15
 8010fee:	193b      	adds	r3, r7, r4
 8010ff0:	1c02      	adds	r2, r0, #0
 8010ff2:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8010ff4:	193b      	adds	r3, r7, r4
 8010ff6:	781a      	ldrb	r2, [r3, #0]
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	6919      	ldr	r1, [r3, #16]
 8010ffc:	4830      	ldr	r0, [pc, #192]	@ (80110c0 <USBPD_PHY_Init+0xe0>)
 8010ffe:	0013      	movs	r3, r2
 8011000:	011b      	lsls	r3, r3, #4
 8011002:	1a9b      	subs	r3, r3, r2
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	18c3      	adds	r3, r0, r3
 8011008:	3314      	adds	r3, #20
 801100a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 801100c:	193b      	adds	r3, r7, r4
 801100e:	781a      	ldrb	r2, [r3, #0]
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	68d9      	ldr	r1, [r3, #12]
 8011014:	482a      	ldr	r0, [pc, #168]	@ (80110c0 <USBPD_PHY_Init+0xe0>)
 8011016:	0013      	movs	r3, r2
 8011018:	011b      	lsls	r3, r3, #4
 801101a:	1a9b      	subs	r3, r3, r2
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	18c3      	adds	r3, r0, r3
 8011020:	3318      	adds	r3, #24
 8011022:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8011024:	193b      	adds	r3, r7, r4
 8011026:	781a      	ldrb	r2, [r3, #0]
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	6859      	ldr	r1, [r3, #4]
 801102c:	4824      	ldr	r0, [pc, #144]	@ (80110c0 <USBPD_PHY_Init+0xe0>)
 801102e:	0013      	movs	r3, r2
 8011030:	011b      	lsls	r3, r3, #4
 8011032:	1a9b      	subs	r3, r3, r2
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	18c3      	adds	r3, r0, r3
 8011038:	331c      	adds	r3, #28
 801103a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 801103c:	193b      	adds	r3, r7, r4
 801103e:	781a      	ldrb	r2, [r3, #0]
 8011040:	491f      	ldr	r1, [pc, #124]	@ (80110c0 <USBPD_PHY_Init+0xe0>)
 8011042:	0013      	movs	r3, r2
 8011044:	011b      	lsls	r3, r3, #4
 8011046:	1a9b      	subs	r3, r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	18cb      	adds	r3, r1, r3
 801104c:	3320      	adds	r3, #32
 801104e:	4a1d      	ldr	r2, [pc, #116]	@ (80110c4 <USBPD_PHY_Init+0xe4>)
 8011050:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8011052:	193b      	adds	r3, r7, r4
 8011054:	781a      	ldrb	r2, [r3, #0]
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	6899      	ldr	r1, [r3, #8]
 801105a:	4819      	ldr	r0, [pc, #100]	@ (80110c0 <USBPD_PHY_Init+0xe0>)
 801105c:	0013      	movs	r3, r2
 801105e:	011b      	lsls	r3, r3, #4
 8011060:	1a9b      	subs	r3, r3, r2
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	18c3      	adds	r3, r0, r3
 8011066:	3324      	adds	r3, #36	@ 0x24
 8011068:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 801106a:	193b      	adds	r3, r7, r4
 801106c:	781a      	ldrb	r2, [r3, #0]
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	6959      	ldr	r1, [r3, #20]
 8011072:	4813      	ldr	r0, [pc, #76]	@ (80110c0 <USBPD_PHY_Init+0xe0>)
 8011074:	0013      	movs	r3, r2
 8011076:	011b      	lsls	r3, r3, #4
 8011078:	1a9b      	subs	r3, r3, r2
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	18c3      	adds	r3, r0, r3
 801107e:	3328      	adds	r3, #40	@ 0x28
 8011080:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8011082:	193b      	adds	r3, r7, r4
 8011084:	781a      	ldrb	r2, [r3, #0]
 8011086:	490e      	ldr	r1, [pc, #56]	@ (80110c0 <USBPD_PHY_Init+0xe0>)
 8011088:	0013      	movs	r3, r2
 801108a:	011b      	lsls	r3, r3, #4
 801108c:	1a9b      	subs	r3, r3, r2
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	18cb      	adds	r3, r1, r3
 8011092:	3330      	adds	r3, #48	@ 0x30
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8011098:	193b      	adds	r3, r7, r4
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	4a0a      	ldr	r2, [pc, #40]	@ (80110c8 <USBPD_PHY_Init+0xe8>)
 801109e:	00db      	lsls	r3, r3, #3
 80110a0:	18d3      	adds	r3, r2, r3
 80110a2:	3304      	adds	r3, #4
 80110a4:	6a3a      	ldr	r2, [r7, #32]
 80110a6:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 80110a8:	193b      	adds	r3, r7, r4
 80110aa:	781a      	ldrb	r2, [r3, #0]
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	6819      	ldr	r1, [r3, #0]
 80110b0:	4b05      	ldr	r3, [pc, #20]	@ (80110c8 <USBPD_PHY_Init+0xe8>)
 80110b2:	00d2      	lsls	r2, r2, #3
 80110b4:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 80110b6:	2300      	movs	r3, #0
}
 80110b8:	0018      	movs	r0, r3
 80110ba:	46bd      	mov	sp, r7
 80110bc:	b005      	add	sp, #20
 80110be:	bd90      	pop	{r4, r7, pc}
 80110c0:	200003b8 	.word	0x200003b8
 80110c4:	080112b1 	.word	0x080112b1
 80110c8:	200003b0 	.word	0x200003b0

080110cc <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	0002      	movs	r2, r0
 80110d4:	1dfb      	adds	r3, r7, #7
 80110d6:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 80110d8:	4b02      	ldr	r3, [pc, #8]	@ (80110e4 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 80110da:	0018      	movs	r0, r3
 80110dc:	46bd      	mov	sp, r7
 80110de:	b002      	add	sp, #8
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	46c0      	nop			@ (mov r8, r8)
 80110e4:	00000389 	.word	0x00000389

080110e8 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	0002      	movs	r2, r0
 80110f0:	1dfb      	adds	r3, r7, #7
 80110f2:	701a      	strb	r2, [r3, #0]
  return 30u;
 80110f4:	231e      	movs	r3, #30
}
 80110f6:	0018      	movs	r0, r3
 80110f8:	46bd      	mov	sp, r7
 80110fa:	b002      	add	sp, #8
 80110fc:	bd80      	pop	{r7, pc}

080110fe <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b082      	sub	sp, #8
 8011102:	af00      	add	r7, sp, #0
 8011104:	0002      	movs	r2, r0
 8011106:	1dfb      	adds	r3, r7, #7
 8011108:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 801110a:	46c0      	nop			@ (mov r8, r8)
 801110c:	46bd      	mov	sp, r7
 801110e:	b002      	add	sp, #8
 8011110:	bd80      	pop	{r7, pc}

08011112 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8011112:	b580      	push	{r7, lr}
 8011114:	b082      	sub	sp, #8
 8011116:	af00      	add	r7, sp, #0
 8011118:	0002      	movs	r2, r0
 801111a:	1dfb      	adds	r3, r7, #7
 801111c:	701a      	strb	r2, [r3, #0]
 801111e:	1dbb      	adds	r3, r7, #6
 8011120:	1c0a      	adds	r2, r1, #0
 8011122:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8011124:	1dbb      	adds	r3, r7, #6
 8011126:	7819      	ldrb	r1, [r3, #0]
 8011128:	1dfb      	adds	r3, r7, #7
 801112a:	7818      	ldrb	r0, [r3, #0]
 801112c:	2300      	movs	r3, #0
 801112e:	2200      	movs	r2, #0
 8011130:	f000 f805 	bl	801113e <USBPD_PHY_SendMessage>
 8011134:	0003      	movs	r3, r0
}
 8011136:	0018      	movs	r0, r3
 8011138:	46bd      	mov	sp, r7
 801113a:	b002      	add	sp, #8
 801113c:	bd80      	pop	{r7, pc}

0801113e <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 801113e:	b590      	push	{r4, r7, lr}
 8011140:	b083      	sub	sp, #12
 8011142:	af00      	add	r7, sp, #0
 8011144:	0004      	movs	r4, r0
 8011146:	0008      	movs	r0, r1
 8011148:	603a      	str	r2, [r7, #0]
 801114a:	0019      	movs	r1, r3
 801114c:	1dfb      	adds	r3, r7, #7
 801114e:	1c22      	adds	r2, r4, #0
 8011150:	701a      	strb	r2, [r3, #0]
 8011152:	1dbb      	adds	r3, r7, #6
 8011154:	1c02      	adds	r2, r0, #0
 8011156:	701a      	strb	r2, [r3, #0]
 8011158:	1d3b      	adds	r3, r7, #4
 801115a:	1c0a      	adds	r2, r1, #0
 801115c:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 801115e:	1d3b      	adds	r3, r7, #4
 8011160:	881c      	ldrh	r4, [r3, #0]
 8011162:	683a      	ldr	r2, [r7, #0]
 8011164:	1dbb      	adds	r3, r7, #6
 8011166:	7819      	ldrb	r1, [r3, #0]
 8011168:	1dfb      	adds	r3, r7, #7
 801116a:	7818      	ldrb	r0, [r3, #0]
 801116c:	0023      	movs	r3, r4
 801116e:	f000 fb2f 	bl	80117d0 <USBPD_HW_IF_SendBuffer>
 8011172:	0003      	movs	r3, r0
}
 8011174:	0018      	movs	r0, r3
 8011176:	46bd      	mov	sp, r7
 8011178:	b003      	add	sp, #12
 801117a:	bd90      	pop	{r4, r7, pc}

0801117c <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	0002      	movs	r2, r0
 8011184:	1dfb      	adds	r3, r7, #7
 8011186:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8011188:	1dfb      	adds	r3, r7, #7
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	0018      	movs	r0, r3
 801118e:	f000 fc7d 	bl	8011a8c <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8011192:	2300      	movs	r3, #0
}
 8011194:	0018      	movs	r0, r3
 8011196:	46bd      	mov	sp, r7
 8011198:	b002      	add	sp, #8
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	0002      	movs	r2, r0
 80111a4:	1dfb      	adds	r3, r7, #7
 80111a6:	701a      	strb	r2, [r3, #0]
 80111a8:	1dbb      	adds	r3, r7, #6
 80111aa:	1c0a      	adds	r2, r1, #0
 80111ac:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80111ae:	1dbb      	adds	r3, r7, #6
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b07      	cmp	r3, #7
 80111b4:	d104      	bne.n	80111c0 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80111b6:	1dfb      	adds	r3, r7, #7
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	0018      	movs	r0, r3
 80111bc:	f000 fad0 	bl	8011760 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	0018      	movs	r0, r3
 80111c4:	46bd      	mov	sp, r7
 80111c6:	b002      	add	sp, #8
 80111c8:	bd80      	pop	{r7, pc}

080111ca <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b082      	sub	sp, #8
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	0002      	movs	r2, r0
 80111d2:	1dfb      	adds	r3, r7, #7
 80111d4:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 80111d6:	1dfb      	adds	r3, r7, #7
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	0018      	movs	r0, r3
 80111dc:	f001 f87e 	bl	80122dc <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 80111e0:	46c0      	nop			@ (mov r8, r8)
 80111e2:	46bd      	mov	sp, r7
 80111e4:	b002      	add	sp, #8
 80111e6:	bd80      	pop	{r7, pc}

080111e8 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	0002      	movs	r2, r0
 80111f0:	1dfb      	adds	r3, r7, #7
 80111f2:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80111f4:	1dfb      	adds	r3, r7, #7
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	0018      	movs	r0, r3
 80111fa:	f001 f889 	bl	8012310 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80111fe:	46c0      	nop			@ (mov r8, r8)
 8011200:	46bd      	mov	sp, r7
 8011202:	b002      	add	sp, #8
 8011204:	bd80      	pop	{r7, pc}
	...

08011208 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	0002      	movs	r2, r0
 8011210:	6039      	str	r1, [r7, #0]
 8011212:	1dfb      	adds	r3, r7, #7
 8011214:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 8011216:	1dfb      	adds	r3, r7, #7
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	4a05      	ldr	r2, [pc, #20]	@ (8011230 <USBPD_PHY_SOPSupported+0x28>)
 801121c:	00db      	lsls	r3, r3, #3
 801121e:	18d3      	adds	r3, r2, r3
 8011220:	3304      	adds	r3, #4
 8011222:	683a      	ldr	r2, [r7, #0]
 8011224:	601a      	str	r2, [r3, #0]
}
 8011226:	46c0      	nop			@ (mov r8, r8)
 8011228:	46bd      	mov	sp, r7
 801122a:	b002      	add	sp, #8
 801122c:	bd80      	pop	{r7, pc}
 801122e:	46c0      	nop			@ (mov r8, r8)
 8011230:	200003b0 	.word	0x200003b0

08011234 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	0002      	movs	r2, r0
 801123c:	1dfb      	adds	r3, r7, #7
 801123e:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8011240:	1dfb      	adds	r3, r7, #7
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	0018      	movs	r0, r3
 8011246:	f001 f87d 	bl	8012344 <USBPD_HW_IF_IsResistor_SinkTxOk>
 801124a:	0003      	movs	r3, r0
}
 801124c:	0018      	movs	r0, r3
 801124e:	46bd      	mov	sp, r7
 8011250:	b002      	add	sp, #8
 8011252:	bd80      	pop	{r7, pc}

08011254 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	0002      	movs	r2, r0
 801125c:	1dfb      	adds	r3, r7, #7
 801125e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 8011260:	1dfb      	adds	r3, r7, #7
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	0018      	movs	r0, r3
 8011266:	f001 f8b1 	bl	80123cc <USBPD_HW_IF_FastRoleSwapSignalling>
}
 801126a:	46c0      	nop			@ (mov r8, r8)
 801126c:	46bd      	mov	sp, r7
 801126e:	b002      	add	sp, #8
 8011270:	bd80      	pop	{r7, pc}

08011272 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b082      	sub	sp, #8
 8011276:	af00      	add	r7, sp, #0
 8011278:	0002      	movs	r2, r0
 801127a:	1dfb      	adds	r3, r7, #7
 801127c:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 801127e:	1dfb      	adds	r3, r7, #7
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	0018      	movs	r0, r3
 8011284:	f000 fe0a 	bl	8011e9c <USBPD_HW_IF_EnableRX>
}
 8011288:	46c0      	nop			@ (mov r8, r8)
 801128a:	46bd      	mov	sp, r7
 801128c:	b002      	add	sp, #8
 801128e:	bd80      	pop	{r7, pc}

08011290 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	0002      	movs	r2, r0
 8011298:	1dfb      	adds	r3, r7, #7
 801129a:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 801129c:	1dfb      	adds	r3, r7, #7
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	0018      	movs	r0, r3
 80112a2:	f000 fe13 	bl	8011ecc <USBPD_HW_IF_DisableRX>
}
 80112a6:	46c0      	nop			@ (mov r8, r8)
 80112a8:	46bd      	mov	sp, r7
 80112aa:	b002      	add	sp, #8
 80112ac:	bd80      	pop	{r7, pc}
	...

080112b0 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 80112b0:	b590      	push	{r4, r7, lr}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	0002      	movs	r2, r0
 80112b8:	6039      	str	r1, [r7, #0]
 80112ba:	1dfb      	adds	r3, r7, #7
 80112bc:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 80112be:	2008      	movs	r0, #8
 80112c0:	183b      	adds	r3, r7, r0
 80112c2:	4a2e      	ldr	r2, [pc, #184]	@ (801137c <PHY_Rx_Completed+0xcc>)
 80112c4:	6811      	ldr	r1, [r2, #0]
 80112c6:	6019      	str	r1, [r3, #0]
 80112c8:	8892      	ldrh	r2, [r2, #4]
 80112ca:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 80112cc:	240f      	movs	r4, #15
 80112ce:	193b      	adds	r3, r7, r4
 80112d0:	1839      	adds	r1, r7, r0
 80112d2:	683a      	ldr	r2, [r7, #0]
 80112d4:	188a      	adds	r2, r1, r2
 80112d6:	7812      	ldrb	r2, [r2, #0]
 80112d8:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 80112da:	193b      	adds	r3, r7, r4
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	2b04      	cmp	r3, #4
 80112e0:	dc02      	bgt.n	80112e8 <PHY_Rx_Completed+0x38>
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	da1d      	bge.n	8011322 <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 80112e6:	e040      	b.n	801136a <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 80112e8:	2b06      	cmp	r3, #6
 80112ea:	d13e      	bne.n	801136a <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 80112ec:	1dfb      	adds	r3, r7, #7
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	4a23      	ldr	r2, [pc, #140]	@ (8011380 <PHY_Rx_Completed+0xd0>)
 80112f2:	00db      	lsls	r3, r3, #3
 80112f4:	18d3      	adds	r3, r2, r3
 80112f6:	3304      	adds	r3, #4
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	221e      	movs	r2, #30
 80112fc:	4013      	ands	r3, r2
 80112fe:	2b1e      	cmp	r3, #30
 8011300:	d135      	bne.n	801136e <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8011302:	1dfb      	adds	r3, r7, #7
 8011304:	781a      	ldrb	r2, [r3, #0]
 8011306:	491f      	ldr	r1, [pc, #124]	@ (8011384 <PHY_Rx_Completed+0xd4>)
 8011308:	0013      	movs	r3, r2
 801130a:	011b      	lsls	r3, r3, #4
 801130c:	1a9b      	subs	r3, r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	18cb      	adds	r3, r1, r3
 8011312:	331c      	adds	r3, #28
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	1dfa      	adds	r2, r7, #7
 8011318:	7812      	ldrb	r2, [r2, #0]
 801131a:	2106      	movs	r1, #6
 801131c:	0010      	movs	r0, r2
 801131e:	4798      	blx	r3
      break;
 8011320:	e025      	b.n	801136e <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 8011322:	240f      	movs	r4, #15
 8011324:	193b      	adds	r3, r7, r4
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	2201      	movs	r2, #1
 801132a:	409a      	lsls	r2, r3
 801132c:	0013      	movs	r3, r2
 801132e:	b2db      	uxtb	r3, r3
 8011330:	0018      	movs	r0, r3
 8011332:	1dfb      	adds	r3, r7, #7
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	4a12      	ldr	r2, [pc, #72]	@ (8011380 <PHY_Rx_Completed+0xd0>)
 8011338:	00db      	lsls	r3, r3, #3
 801133a:	18d3      	adds	r3, r2, r3
 801133c:	3304      	adds	r3, #4
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	193a      	adds	r2, r7, r4
 8011342:	7812      	ldrb	r2, [r2, #0]
 8011344:	2101      	movs	r1, #1
 8011346:	4091      	lsls	r1, r2
 8011348:	000a      	movs	r2, r1
 801134a:	b2d2      	uxtb	r2, r2
 801134c:	4013      	ands	r3, r2
 801134e:	4298      	cmp	r0, r3
 8011350:	d10f      	bne.n	8011372 <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 8011352:	1dfb      	adds	r3, r7, #7
 8011354:	781a      	ldrb	r2, [r3, #0]
 8011356:	4b0a      	ldr	r3, [pc, #40]	@ (8011380 <PHY_Rx_Completed+0xd0>)
 8011358:	00d2      	lsls	r2, r2, #3
 801135a:	58d3      	ldr	r3, [r2, r3]
 801135c:	193a      	adds	r2, r7, r4
 801135e:	7811      	ldrb	r1, [r2, #0]
 8011360:	1dfa      	adds	r2, r7, #7
 8011362:	7812      	ldrb	r2, [r2, #0]
 8011364:	0010      	movs	r0, r2
 8011366:	4798      	blx	r3
      break;
 8011368:	e003      	b.n	8011372 <PHY_Rx_Completed+0xc2>
      break;
 801136a:	46c0      	nop			@ (mov r8, r8)
 801136c:	e002      	b.n	8011374 <PHY_Rx_Completed+0xc4>
      break;
 801136e:	46c0      	nop			@ (mov r8, r8)
 8011370:	e000      	b.n	8011374 <PHY_Rx_Completed+0xc4>
      break;
 8011372:	46c0      	nop			@ (mov r8, r8)
  }
}
 8011374:	46c0      	nop			@ (mov r8, r8)
 8011376:	46bd      	mov	sp, r7
 8011378:	b005      	add	sp, #20
 801137a:	bd90      	pop	{r4, r7, pc}
 801137c:	080198ec 	.word	0x080198ec
 8011380:	200003b0 	.word	0x200003b0
 8011384:	200003b8 	.word	0x200003b8

08011388 <LL_AHB1_GRP1_EnableClock>:
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b084      	sub	sp, #16
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8011390:	4b07      	ldr	r3, [pc, #28]	@ (80113b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8011392:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011394:	4b06      	ldr	r3, [pc, #24]	@ (80113b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	430a      	orrs	r2, r1
 801139a:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 801139c:	4b04      	ldr	r3, [pc, #16]	@ (80113b0 <LL_AHB1_GRP1_EnableClock+0x28>)
 801139e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	4013      	ands	r3, r2
 80113a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80113a6:	68fb      	ldr	r3, [r7, #12]
}
 80113a8:	46c0      	nop			@ (mov r8, r8)
 80113aa:	46bd      	mov	sp, r7
 80113ac:	b004      	add	sp, #16
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	40021000 	.word	0x40021000

080113b4 <LL_APB1_GRP1_EnableClock>:
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80113bc:	4b07      	ldr	r3, [pc, #28]	@ (80113dc <LL_APB1_GRP1_EnableClock+0x28>)
 80113be:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80113c0:	4b06      	ldr	r3, [pc, #24]	@ (80113dc <LL_APB1_GRP1_EnableClock+0x28>)
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	430a      	orrs	r2, r1
 80113c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80113c8:	4b04      	ldr	r3, [pc, #16]	@ (80113dc <LL_APB1_GRP1_EnableClock+0x28>)
 80113ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	4013      	ands	r3, r2
 80113d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80113d2:	68fb      	ldr	r3, [r7, #12]
}
 80113d4:	46c0      	nop			@ (mov r8, r8)
 80113d6:	46bd      	mov	sp, r7
 80113d8:	b004      	add	sp, #16
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	40021000 	.word	0x40021000

080113e0 <LL_APB2_GRP1_EnableClock>:
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80113e8:	4b07      	ldr	r3, [pc, #28]	@ (8011408 <LL_APB2_GRP1_EnableClock+0x28>)
 80113ea:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80113ec:	4b06      	ldr	r3, [pc, #24]	@ (8011408 <LL_APB2_GRP1_EnableClock+0x28>)
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	430a      	orrs	r2, r1
 80113f2:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80113f4:	4b04      	ldr	r3, [pc, #16]	@ (8011408 <LL_APB2_GRP1_EnableClock+0x28>)
 80113f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	4013      	ands	r3, r2
 80113fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80113fe:	68fb      	ldr	r3, [r7, #12]
}
 8011400:	46c0      	nop			@ (mov r8, r8)
 8011402:	46bd      	mov	sp, r7
 8011404:	b004      	add	sp, #16
 8011406:	bd80      	pop	{r7, pc}
 8011408:	40021000 	.word	0x40021000

0801140c <LL_UCPD_Enable>:
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2280      	movs	r2, #128	@ 0x80
 801141a:	0612      	lsls	r2, r2, #24
 801141c:	431a      	orrs	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	601a      	str	r2, [r3, #0]
}
 8011422:	46c0      	nop			@ (mov r8, r8)
 8011424:	46bd      	mov	sp, r7
 8011426:	b002      	add	sp, #8
 8011428:	bd80      	pop	{r7, pc}

0801142a <LL_UCPD_Disable>:
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b082      	sub	sp, #8
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	085a      	lsrs	r2, r3, #1
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	601a      	str	r2, [r3, #0]
}
 801143e:	46c0      	nop			@ (mov r8, r8)
 8011440:	46bd      	mov	sp, r7
 8011442:	b002      	add	sp, #8
 8011444:	bd80      	pop	{r7, pc}
	...

08011448 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	4a03      	ldr	r2, [pc, #12]	@ (8011464 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 8011456:	401a      	ands	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	60da      	str	r2, [r3, #12]
}
 801145c:	46c0      	nop			@ (mov r8, r8)
 801145e:	46bd      	mov	sp, r7
 8011460:	b002      	add	sp, #8
 8011462:	bd80      	pop	{r7, pc}
 8011464:	ffdfffff 	.word	0xffdfffff

08011468 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	2280      	movs	r2, #128	@ 0x80
 8011476:	0392      	lsls	r2, r2, #14
 8011478:	431a      	orrs	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	60da      	str	r2, [r3, #12]
}
 801147e:	46c0      	nop			@ (mov r8, r8)
 8011480:	46bd      	mov	sp, r7
 8011482:	b002      	add	sp, #8
 8011484:	bd80      	pop	{r7, pc}
	...

08011488 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	4a03      	ldr	r2, [pc, #12]	@ (80114a4 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 8011496:	401a      	ands	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	60da      	str	r2, [r3, #12]
}
 801149c:	46c0      	nop			@ (mov r8, r8)
 801149e:	46bd      	mov	sp, r7
 80114a0:	b002      	add	sp, #8
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	ffefffff 	.word	0xffefffff

080114a8 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	2280      	movs	r2, #128	@ 0x80
 80114b6:	0352      	lsls	r2, r2, #13
 80114b8:	431a      	orrs	r2, r3
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	60da      	str	r2, [r3, #12]
}
 80114be:	46c0      	nop			@ (mov r8, r8)
 80114c0:	46bd      	mov	sp, r7
 80114c2:	b002      	add	sp, #8
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <LL_UCPD_SignalFRSTX>:
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b082      	sub	sp, #8
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	2280      	movs	r2, #128	@ 0x80
 80114d4:	0292      	lsls	r2, r2, #10
 80114d6:	431a      	orrs	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	60da      	str	r2, [r3, #12]
}
 80114dc:	46c0      	nop			@ (mov r8, r8)
 80114de:	46bd      	mov	sp, r7
 80114e0:	b002      	add	sp, #8
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <LL_UCPD_FRSDetectionEnable>:
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	2280      	movs	r2, #128	@ 0x80
 80114f2:	0252      	lsls	r2, r2, #9
 80114f4:	431a      	orrs	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	60da      	str	r2, [r3, #12]
}
 80114fa:	46c0      	nop			@ (mov r8, r8)
 80114fc:	46bd      	mov	sp, r7
 80114fe:	b002      	add	sp, #8
 8011500:	bd80      	pop	{r7, pc}
	...

08011504 <LL_UCPD_FRSDetectionDisable>:
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	4a03      	ldr	r2, [pc, #12]	@ (8011520 <LL_UCPD_FRSDetectionDisable+0x1c>)
 8011512:	401a      	ands	r2, r3
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	60da      	str	r2, [r3, #12]
}
 8011518:	46c0      	nop			@ (mov r8, r8)
 801151a:	46bd      	mov	sp, r7
 801151c:	b002      	add	sp, #8
 801151e:	bd80      	pop	{r7, pc}
 8011520:	fffeffff 	.word	0xfffeffff

08011524 <LL_UCPD_SetccEnable>:
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	4a05      	ldr	r2, [pc, #20]	@ (8011548 <LL_UCPD_SetccEnable+0x24>)
 8011534:	401a      	ands	r2, r3
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	431a      	orrs	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	60da      	str	r2, [r3, #12]
}
 801153e:	46c0      	nop			@ (mov r8, r8)
 8011540:	46bd      	mov	sp, r7
 8011542:	b002      	add	sp, #8
 8011544:	bd80      	pop	{r7, pc}
 8011546:	46c0      	nop			@ (mov r8, r8)
 8011548:	fffff3ff 	.word	0xfffff3ff

0801154c <LL_UCPD_SetSNKRole>:
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	2280      	movs	r2, #128	@ 0x80
 801155a:	0092      	lsls	r2, r2, #2
 801155c:	431a      	orrs	r2, r3
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	60da      	str	r2, [r3, #12]
}
 8011562:	46c0      	nop			@ (mov r8, r8)
 8011564:	46bd      	mov	sp, r7
 8011566:	b002      	add	sp, #8
 8011568:	bd80      	pop	{r7, pc}
	...

0801156c <LL_UCPD_SetSRCRole>:
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	4a03      	ldr	r2, [pc, #12]	@ (8011588 <LL_UCPD_SetSRCRole+0x1c>)
 801157a:	401a      	ands	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	60da      	str	r2, [r3, #12]
}
 8011580:	46c0      	nop			@ (mov r8, r8)
 8011582:	46bd      	mov	sp, r7
 8011584:	b002      	add	sp, #8
 8011586:	bd80      	pop	{r7, pc}
 8011588:	fffffdff 	.word	0xfffffdff

0801158c <LL_UCPD_SetRpResistor>:
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	4a05      	ldr	r2, [pc, #20]	@ (80115b0 <LL_UCPD_SetRpResistor+0x24>)
 801159c:	401a      	ands	r2, r3
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	431a      	orrs	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	60da      	str	r2, [r3, #12]
}
 80115a6:	46c0      	nop			@ (mov r8, r8)
 80115a8:	46bd      	mov	sp, r7
 80115aa:	b002      	add	sp, #8
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	46c0      	nop			@ (mov r8, r8)
 80115b0:	fffffe7f 	.word	0xfffffe7f

080115b4 <LL_UCPD_SetCCPin>:
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	2240      	movs	r2, #64	@ 0x40
 80115c4:	4393      	bics	r3, r2
 80115c6:	001a      	movs	r2, r3
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	431a      	orrs	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	60da      	str	r2, [r3, #12]
}
 80115d0:	46c0      	nop			@ (mov r8, r8)
 80115d2:	46bd      	mov	sp, r7
 80115d4:	b002      	add	sp, #8
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <LL_UCPD_RxEnable>:
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	2220      	movs	r2, #32
 80115e6:	431a      	orrs	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	60da      	str	r2, [r3, #12]
}
 80115ec:	46c0      	nop			@ (mov r8, r8)
 80115ee:	46bd      	mov	sp, r7
 80115f0:	b002      	add	sp, #8
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <LL_UCPD_RxDisable>:
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	2220      	movs	r2, #32
 8011602:	4393      	bics	r3, r2
 8011604:	001a      	movs	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	60da      	str	r2, [r3, #12]
}
 801160a:	46c0      	nop			@ (mov r8, r8)
 801160c:	46bd      	mov	sp, r7
 801160e:	b002      	add	sp, #8
 8011610:	bd80      	pop	{r7, pc}

08011612 <LL_UCPD_SetRxMode>:
{
 8011612:	b580      	push	{r7, lr}
 8011614:	b082      	sub	sp, #8
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
 801161a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	2210      	movs	r2, #16
 8011622:	4393      	bics	r3, r2
 8011624:	001a      	movs	r2, r3
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	431a      	orrs	r2, r3
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	60da      	str	r2, [r3, #12]
}
 801162e:	46c0      	nop			@ (mov r8, r8)
 8011630:	46bd      	mov	sp, r7
 8011632:	b002      	add	sp, #8
 8011634:	bd80      	pop	{r7, pc}

08011636 <LL_UCPD_SendHardReset>:
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b082      	sub	sp, #8
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	2208      	movs	r2, #8
 8011644:	431a      	orrs	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	60da      	str	r2, [r3, #12]
}
 801164a:	46c0      	nop			@ (mov r8, r8)
 801164c:	46bd      	mov	sp, r7
 801164e:	b002      	add	sp, #8
 8011650:	bd80      	pop	{r7, pc}

08011652 <LL_UCPD_SendMessage>:
{
 8011652:	b580      	push	{r7, lr}
 8011654:	b082      	sub	sp, #8
 8011656:	af00      	add	r7, sp, #0
 8011658:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	68db      	ldr	r3, [r3, #12]
 801165e:	2204      	movs	r2, #4
 8011660:	431a      	orrs	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	60da      	str	r2, [r3, #12]
}
 8011666:	46c0      	nop			@ (mov r8, r8)
 8011668:	46bd      	mov	sp, r7
 801166a:	b002      	add	sp, #8
 801166c:	bd80      	pop	{r7, pc}

0801166e <LL_UCPD_SetTxMode>:
{
 801166e:	b580      	push	{r7, lr}
 8011670:	b082      	sub	sp, #8
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	2203      	movs	r2, #3
 801167e:	4393      	bics	r3, r2
 8011680:	001a      	movs	r2, r3
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	431a      	orrs	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	60da      	str	r2, [r3, #12]
}
 801168a:	46c0      	nop			@ (mov r8, r8)
 801168c:	46bd      	mov	sp, r7
 801168e:	b002      	add	sp, #8
 8011690:	bd80      	pop	{r7, pc}

08011692 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8011692:	b580      	push	{r7, lr}
 8011694:	b082      	sub	sp, #8
 8011696:	af00      	add	r7, sp, #0
 8011698:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2280      	movs	r2, #128	@ 0x80
 80116a0:	05d2      	lsls	r2, r2, #23
 80116a2:	431a      	orrs	r2, r3
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	601a      	str	r2, [r3, #0]
}
 80116a8:	46c0      	nop			@ (mov r8, r8)
 80116aa:	46bd      	mov	sp, r7
 80116ac:	b002      	add	sp, #8
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b082      	sub	sp, #8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4a03      	ldr	r2, [pc, #12]	@ (80116cc <LL_UCPD_RxDMADisable+0x1c>)
 80116be:	401a      	ands	r2, r3
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	601a      	str	r2, [r3, #0]
}
 80116c4:	46c0      	nop			@ (mov r8, r8)
 80116c6:	46bd      	mov	sp, r7
 80116c8:	b002      	add	sp, #8
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	bfffffff 	.word	0xbfffffff

080116d0 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2280      	movs	r2, #128	@ 0x80
 80116de:	0592      	lsls	r2, r2, #22
 80116e0:	431a      	orrs	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	601a      	str	r2, [r3, #0]
}
 80116e6:	46c0      	nop			@ (mov r8, r8)
 80116e8:	46bd      	mov	sp, r7
 80116ea:	b002      	add	sp, #8
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	4a03      	ldr	r2, [pc, #12]	@ (801170c <LL_UCPD_TxDMADisable+0x1c>)
 80116fe:	401a      	ands	r2, r3
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	601a      	str	r2, [r3, #0]
}
 8011704:	46c0      	nop			@ (mov r8, r8)
 8011706:	46bd      	mov	sp, r7
 8011708:	b002      	add	sp, #8
 801170a:	bd80      	pop	{r7, pc}
 801170c:	dfffffff 	.word	0xdfffffff

08011710 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	683a      	ldr	r2, [r7, #0]
 801171e:	61da      	str	r2, [r3, #28]
}
 8011720:	46c0      	nop			@ (mov r8, r8)
 8011722:	46bd      	mov	sp, r7
 8011724:	b002      	add	sp, #8
 8011726:	bd80      	pop	{r7, pc}

08011728 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	621a      	str	r2, [r3, #32]
}
 8011738:	46c0      	nop			@ (mov r8, r8)
 801173a:	46bd      	mov	sp, r7
 801173c:	b002      	add	sp, #8
 801173e:	bd80      	pop	{r7, pc}

08011740 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8011744:	2380      	movs	r3, #128	@ 0x80
 8011746:	055b      	lsls	r3, r3, #21
 8011748:	0018      	movs	r0, r3
 801174a:	f7ff fe33 	bl	80113b4 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 801174e:	2380      	movs	r3, #128	@ 0x80
 8011750:	015b      	lsls	r3, r3, #5
 8011752:	0018      	movs	r0, r3
 8011754:	f7ff fe18 	bl	8011388 <LL_AHB1_GRP1_EnableClock>
}
 8011758:	46c0      	nop			@ (mov r8, r8)
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
	...

08011760 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	0002      	movs	r2, r0
 8011768:	1dfb      	adds	r3, r7, #7
 801176a:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 801176c:	1dfb      	adds	r3, r7, #7
 801176e:	781a      	ldrb	r2, [r3, #0]
 8011770:	4916      	ldr	r1, [pc, #88]	@ (80117cc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011772:	0013      	movs	r3, r2
 8011774:	011b      	lsls	r3, r3, #4
 8011776:	1a9b      	subs	r3, r3, r2
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	585b      	ldr	r3, [r3, r1]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	2207      	movs	r2, #7
 8011780:	4393      	bics	r3, r2
 8011782:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8011784:	1dfb      	adds	r3, r7, #7
 8011786:	781a      	ldrb	r2, [r3, #0]
 8011788:	4910      	ldr	r1, [pc, #64]	@ (80117cc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801178a:	0013      	movs	r3, r2
 801178c:	011b      	lsls	r3, r3, #4
 801178e:	1a9b      	subs	r3, r3, r2
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	585b      	ldr	r3, [r3, r1]
 8011794:	0018      	movs	r0, r3
 8011796:	f7ff fe48 	bl	801142a <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 801179a:	1dfb      	adds	r3, r7, #7
 801179c:	781a      	ldrb	r2, [r3, #0]
 801179e:	490b      	ldr	r1, [pc, #44]	@ (80117cc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80117a0:	0013      	movs	r3, r2
 80117a2:	011b      	lsls	r3, r3, #4
 80117a4:	1a9b      	subs	r3, r3, r2
 80117a6:	009b      	lsls	r3, r3, #2
 80117a8:	585b      	ldr	r3, [r3, r1]
 80117aa:	0018      	movs	r0, r3
 80117ac:	f7ff fe2e 	bl	801140c <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80117b0:	1dfb      	adds	r3, r7, #7
 80117b2:	781a      	ldrb	r2, [r3, #0]
 80117b4:	4905      	ldr	r1, [pc, #20]	@ (80117cc <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80117b6:	0013      	movs	r3, r2
 80117b8:	011b      	lsls	r3, r3, #4
 80117ba:	1a9b      	subs	r3, r3, r2
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	585b      	ldr	r3, [r3, r1]
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	60da      	str	r2, [r3, #12]
}
 80117c4:	46c0      	nop			@ (mov r8, r8)
 80117c6:	46bd      	mov	sp, r7
 80117c8:	b004      	add	sp, #16
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	200003b8 	.word	0x200003b8

080117d0 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 80117d0:	b590      	push	{r4, r7, lr}
 80117d2:	b08b      	sub	sp, #44	@ 0x2c
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	60ba      	str	r2, [r7, #8]
 80117d8:	607b      	str	r3, [r7, #4]
 80117da:	240f      	movs	r4, #15
 80117dc:	193b      	adds	r3, r7, r4
 80117de:	1c02      	adds	r2, r0, #0
 80117e0:	701a      	strb	r2, [r3, #0]
 80117e2:	200e      	movs	r0, #14
 80117e4:	183b      	adds	r3, r7, r0
 80117e6:	1c0a      	adds	r2, r1, #0
 80117e8:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 80117ea:	2327      	movs	r3, #39	@ 0x27
 80117ec:	18fb      	adds	r3, r7, r3
 80117ee:	2200      	movs	r2, #0
 80117f0:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 80117f2:	183b      	adds	r3, r7, r0
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	2b05      	cmp	r3, #5
 80117f8:	d10b      	bne.n	8011812 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 80117fa:	193b      	adds	r3, r7, r4
 80117fc:	781a      	ldrb	r2, [r3, #0]
 80117fe:	499e      	ldr	r1, [pc, #632]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011800:	0013      	movs	r3, r2
 8011802:	011b      	lsls	r3, r3, #4
 8011804:	1a9b      	subs	r3, r3, r2
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	585b      	ldr	r3, [r3, r1]
 801180a:	0018      	movs	r0, r3
 801180c:	f7ff ff13 	bl	8011636 <LL_UCPD_SendHardReset>
 8011810:	e12a      	b.n	8011a68 <USBPD_HW_IF_SendBuffer+0x298>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011812:	f3ef 8310 	mrs	r3, PRIMASK
 8011816:	61fb      	str	r3, [r7, #28]
  return(result);
 8011818:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 801181a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801181c:	b672      	cpsid	i
}
 801181e:	46c0      	nop			@ (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8011820:	240f      	movs	r4, #15
 8011822:	193b      	adds	r3, r7, r4
 8011824:	781a      	ldrb	r2, [r3, #0]
 8011826:	4994      	ldr	r1, [pc, #592]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011828:	2038      	movs	r0, #56	@ 0x38
 801182a:	0013      	movs	r3, r2
 801182c:	011b      	lsls	r3, r3, #4
 801182e:	1a9b      	subs	r3, r3, r2
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	18cb      	adds	r3, r1, r3
 8011834:	181b      	adds	r3, r3, r0
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	b2db      	uxtb	r3, r3
 801183a:	2b01      	cmp	r3, #1
 801183c:	d00e      	beq.n	801185c <USBPD_HW_IF_SendBuffer+0x8c>
 801183e:	193b      	adds	r3, r7, r4
 8011840:	781a      	ldrb	r2, [r3, #0]
 8011842:	498d      	ldr	r1, [pc, #564]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011844:	0013      	movs	r3, r2
 8011846:	011b      	lsls	r3, r3, #4
 8011848:	1a9b      	subs	r3, r3, r2
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	18cb      	adds	r3, r1, r3
 801184e:	3304      	adds	r3, #4
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2201      	movs	r2, #1
 8011856:	4013      	ands	r3, r2
 8011858:	2b01      	cmp	r3, #1
 801185a:	d10a      	bne.n	8011872 <USBPD_HW_IF_SendBuffer+0xa2>
 801185c:	6a3b      	ldr	r3, [r7, #32]
 801185e:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	f383 8810 	msr	PRIMASK, r3
}
 8011866:	46c0      	nop			@ (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8011868:	2327      	movs	r3, #39	@ 0x27
 801186a:	18fb      	adds	r3, r7, r3
 801186c:	2202      	movs	r2, #2
 801186e:	701a      	strb	r2, [r3, #0]
 8011870:	e0fa      	b.n	8011a68 <USBPD_HW_IF_SendBuffer+0x298>
 8011872:	6a3b      	ldr	r3, [r7, #32]
 8011874:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	f383 8810 	msr	PRIMASK, r3
}
 801187c:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 801187e:	230e      	movs	r3, #14
 8011880:	18fb      	adds	r3, r7, r3
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	2b07      	cmp	r3, #7
 8011886:	d871      	bhi.n	801196c <USBPD_HW_IF_SendBuffer+0x19c>
 8011888:	009a      	lsls	r2, r3, #2
 801188a:	4b7c      	ldr	r3, [pc, #496]	@ (8011a7c <USBPD_HW_IF_SendBuffer+0x2ac>)
 801188c:	18d3      	adds	r3, r2, r3
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8011892:	240f      	movs	r4, #15
 8011894:	193b      	adds	r3, r7, r4
 8011896:	781a      	ldrb	r2, [r3, #0]
 8011898:	4977      	ldr	r1, [pc, #476]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801189a:	0013      	movs	r3, r2
 801189c:	011b      	lsls	r3, r3, #4
 801189e:	1a9b      	subs	r3, r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	585b      	ldr	r3, [r3, r1]
 80118a4:	4a76      	ldr	r2, [pc, #472]	@ (8011a80 <USBPD_HW_IF_SendBuffer+0x2b0>)
 80118a6:	0011      	movs	r1, r2
 80118a8:	0018      	movs	r0, r3
 80118aa:	f7ff ff31 	bl	8011710 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80118ae:	193b      	adds	r3, r7, r4
 80118b0:	781a      	ldrb	r2, [r3, #0]
 80118b2:	4971      	ldr	r1, [pc, #452]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80118b4:	0013      	movs	r3, r2
 80118b6:	011b      	lsls	r3, r3, #4
 80118b8:	1a9b      	subs	r3, r3, r2
 80118ba:	009b      	lsls	r3, r3, #2
 80118bc:	585b      	ldr	r3, [r3, r1]
 80118be:	2100      	movs	r1, #0
 80118c0:	0018      	movs	r0, r3
 80118c2:	f7ff fed4 	bl	801166e <LL_UCPD_SetTxMode>
          break;
 80118c6:	e056      	b.n	8011976 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 80118c8:	240f      	movs	r4, #15
 80118ca:	193b      	adds	r3, r7, r4
 80118cc:	781a      	ldrb	r2, [r3, #0]
 80118ce:	496a      	ldr	r1, [pc, #424]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80118d0:	0013      	movs	r3, r2
 80118d2:	011b      	lsls	r3, r3, #4
 80118d4:	1a9b      	subs	r3, r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	585b      	ldr	r3, [r3, r1]
 80118da:	4a6a      	ldr	r2, [pc, #424]	@ (8011a84 <USBPD_HW_IF_SendBuffer+0x2b4>)
 80118dc:	0011      	movs	r1, r2
 80118de:	0018      	movs	r0, r3
 80118e0:	f7ff ff16 	bl	8011710 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80118e4:	193b      	adds	r3, r7, r4
 80118e6:	781a      	ldrb	r2, [r3, #0]
 80118e8:	4963      	ldr	r1, [pc, #396]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80118ea:	0013      	movs	r3, r2
 80118ec:	011b      	lsls	r3, r3, #4
 80118ee:	1a9b      	subs	r3, r3, r2
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	585b      	ldr	r3, [r3, r1]
 80118f4:	2100      	movs	r1, #0
 80118f6:	0018      	movs	r0, r3
 80118f8:	f7ff feb9 	bl	801166e <LL_UCPD_SetTxMode>
          break;
 80118fc:	e03b      	b.n	8011976 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 80118fe:	240f      	movs	r4, #15
 8011900:	193b      	adds	r3, r7, r4
 8011902:	781a      	ldrb	r2, [r3, #0]
 8011904:	495c      	ldr	r1, [pc, #368]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011906:	0013      	movs	r3, r2
 8011908:	011b      	lsls	r3, r3, #4
 801190a:	1a9b      	subs	r3, r3, r2
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	585b      	ldr	r3, [r3, r1]
 8011910:	4a5d      	ldr	r2, [pc, #372]	@ (8011a88 <USBPD_HW_IF_SendBuffer+0x2b8>)
 8011912:	0011      	movs	r1, r2
 8011914:	0018      	movs	r0, r3
 8011916:	f7ff fefb 	bl	8011710 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801191a:	193b      	adds	r3, r7, r4
 801191c:	781a      	ldrb	r2, [r3, #0]
 801191e:	4956      	ldr	r1, [pc, #344]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011920:	0013      	movs	r3, r2
 8011922:	011b      	lsls	r3, r3, #4
 8011924:	1a9b      	subs	r3, r3, r2
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	585b      	ldr	r3, [r3, r1]
 801192a:	2100      	movs	r1, #0
 801192c:	0018      	movs	r0, r3
 801192e:	f7ff fe9e 	bl	801166e <LL_UCPD_SetTxMode>
          break;
 8011932:	e020      	b.n	8011976 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8011934:	230f      	movs	r3, #15
 8011936:	18fb      	adds	r3, r7, r3
 8011938:	781a      	ldrb	r2, [r3, #0]
 801193a:	494f      	ldr	r1, [pc, #316]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801193c:	0013      	movs	r3, r2
 801193e:	011b      	lsls	r3, r3, #4
 8011940:	1a9b      	subs	r3, r3, r2
 8011942:	009b      	lsls	r3, r3, #2
 8011944:	585b      	ldr	r3, [r3, r1]
 8011946:	2101      	movs	r1, #1
 8011948:	0018      	movs	r0, r3
 801194a:	f7ff fe90 	bl	801166e <LL_UCPD_SetTxMode>
          break;
 801194e:	e012      	b.n	8011976 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8011950:	230f      	movs	r3, #15
 8011952:	18fb      	adds	r3, r7, r3
 8011954:	781a      	ldrb	r2, [r3, #0]
 8011956:	4948      	ldr	r1, [pc, #288]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011958:	0013      	movs	r3, r2
 801195a:	011b      	lsls	r3, r3, #4
 801195c:	1a9b      	subs	r3, r3, r2
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	585b      	ldr	r3, [r3, r1]
 8011962:	2102      	movs	r1, #2
 8011964:	0018      	movs	r0, r3
 8011966:	f7ff fe82 	bl	801166e <LL_UCPD_SetTxMode>
          break;
 801196a:	e004      	b.n	8011976 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 801196c:	2327      	movs	r3, #39	@ 0x27
 801196e:	18fb      	adds	r3, r7, r3
 8011970:	2202      	movs	r2, #2
 8011972:	701a      	strb	r2, [r3, #0]
          break;
 8011974:	46c0      	nop			@ (mov r8, r8)
      }

      if (USBPD_OK == _status)
 8011976:	2327      	movs	r3, #39	@ 0x27
 8011978:	18fb      	adds	r3, r7, r3
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d173      	bne.n	8011a68 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8011980:	200f      	movs	r0, #15
 8011982:	183b      	adds	r3, r7, r0
 8011984:	781a      	ldrb	r2, [r3, #0]
 8011986:	493c      	ldr	r1, [pc, #240]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011988:	0013      	movs	r3, r2
 801198a:	011b      	lsls	r3, r3, #4
 801198c:	1a9b      	subs	r3, r3, r2
 801198e:	009b      	lsls	r3, r3, #2
 8011990:	18cb      	adds	r3, r1, r3
 8011992:	3304      	adds	r3, #4
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	6819      	ldr	r1, [r3, #0]
 8011998:	183b      	adds	r3, r7, r0
 801199a:	781a      	ldrb	r2, [r3, #0]
 801199c:	4836      	ldr	r0, [pc, #216]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801199e:	0013      	movs	r3, r2
 80119a0:	011b      	lsls	r3, r3, #4
 80119a2:	1a9b      	subs	r3, r3, r2
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	18c3      	adds	r3, r0, r3
 80119a8:	3304      	adds	r3, #4
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2201      	movs	r2, #1
 80119ae:	4391      	bics	r1, r2
 80119b0:	000a      	movs	r2, r1
 80119b2:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80119b4:	46c0      	nop			@ (mov r8, r8)
 80119b6:	200f      	movs	r0, #15
 80119b8:	183b      	adds	r3, r7, r0
 80119ba:	781a      	ldrb	r2, [r3, #0]
 80119bc:	492e      	ldr	r1, [pc, #184]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80119be:	0013      	movs	r3, r2
 80119c0:	011b      	lsls	r3, r3, #4
 80119c2:	1a9b      	subs	r3, r3, r2
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	18cb      	adds	r3, r1, r3
 80119c8:	3304      	adds	r3, #4
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2201      	movs	r2, #1
 80119d0:	4013      	ands	r3, r2
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d0ef      	beq.n	80119b6 <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 80119d6:	0004      	movs	r4, r0
 80119d8:	193b      	adds	r3, r7, r4
 80119da:	781a      	ldrb	r2, [r3, #0]
 80119dc:	4926      	ldr	r1, [pc, #152]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80119de:	0013      	movs	r3, r2
 80119e0:	011b      	lsls	r3, r3, #4
 80119e2:	1a9b      	subs	r3, r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	18cb      	adds	r3, r1, r3
 80119e8:	3304      	adds	r3, #4
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 80119f0:	193b      	adds	r3, r7, r4
 80119f2:	781a      	ldrb	r2, [r3, #0]
 80119f4:	4920      	ldr	r1, [pc, #128]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80119f6:	0013      	movs	r3, r2
 80119f8:	011b      	lsls	r3, r3, #4
 80119fa:	1a9b      	subs	r3, r3, r2
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	18cb      	adds	r3, r1, r3
 8011a00:	3304      	adds	r3, #4
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8011a08:	193b      	adds	r3, r7, r4
 8011a0a:	781a      	ldrb	r2, [r3, #0]
 8011a0c:	491a      	ldr	r1, [pc, #104]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011a0e:	0013      	movs	r3, r2
 8011a10:	011b      	lsls	r3, r3, #4
 8011a12:	1a9b      	subs	r3, r3, r2
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	18cb      	adds	r3, r1, r3
 8011a18:	3304      	adds	r3, #4
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	6819      	ldr	r1, [r3, #0]
 8011a1e:	193b      	adds	r3, r7, r4
 8011a20:	781a      	ldrb	r2, [r3, #0]
 8011a22:	4815      	ldr	r0, [pc, #84]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011a24:	0013      	movs	r3, r2
 8011a26:	011b      	lsls	r3, r3, #4
 8011a28:	1a9b      	subs	r3, r3, r2
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	18c3      	adds	r3, r0, r3
 8011a2e:	3304      	adds	r3, #4
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2201      	movs	r2, #1
 8011a34:	430a      	orrs	r2, r1
 8011a36:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8011a38:	193b      	adds	r3, r7, r4
 8011a3a:	781a      	ldrb	r2, [r3, #0]
 8011a3c:	490e      	ldr	r1, [pc, #56]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011a3e:	0013      	movs	r3, r2
 8011a40:	011b      	lsls	r3, r3, #4
 8011a42:	1a9b      	subs	r3, r3, r2
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	585b      	ldr	r3, [r3, r1]
 8011a48:	687a      	ldr	r2, [r7, #4]
 8011a4a:	0011      	movs	r1, r2
 8011a4c:	0018      	movs	r0, r3
 8011a4e:	f7ff fe6b 	bl	8011728 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8011a52:	193b      	adds	r3, r7, r4
 8011a54:	781a      	ldrb	r2, [r3, #0]
 8011a56:	4908      	ldr	r1, [pc, #32]	@ (8011a78 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011a58:	0013      	movs	r3, r2
 8011a5a:	011b      	lsls	r3, r3, #4
 8011a5c:	1a9b      	subs	r3, r3, r2
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	585b      	ldr	r3, [r3, r1]
 8011a62:	0018      	movs	r0, r3
 8011a64:	f7ff fdf5 	bl	8011652 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8011a68:	2327      	movs	r3, #39	@ 0x27
 8011a6a:	18fb      	adds	r3, r7, r3
 8011a6c:	781b      	ldrb	r3, [r3, #0]
}
 8011a6e:	0018      	movs	r0, r3
 8011a70:	46bd      	mov	sp, r7
 8011a72:	b00b      	add	sp, #44	@ 0x2c
 8011a74:	bd90      	pop	{r4, r7, pc}
 8011a76:	46c0      	nop			@ (mov r8, r8)
 8011a78:	200003b8 	.word	0x200003b8
 8011a7c:	08019ad4 	.word	0x08019ad4
 8011a80:	0008e318 	.word	0x0008e318
 8011a84:	00031b18 	.word	0x00031b18
 8011a88:	000360d8 	.word	0x000360d8

08011a8c <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	0002      	movs	r2, r0
 8011a94:	1dfb      	adds	r3, r7, #7
 8011a96:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8011a98:	1dfb      	adds	r3, r7, #7
 8011a9a:	781a      	ldrb	r2, [r3, #0]
 8011a9c:	490c      	ldr	r1, [pc, #48]	@ (8011ad0 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8011a9e:	0013      	movs	r3, r2
 8011aa0:	011b      	lsls	r3, r3, #4
 8011aa2:	1a9b      	subs	r3, r3, r2
 8011aa4:	009b      	lsls	r3, r3, #2
 8011aa6:	585b      	ldr	r3, [r3, r1]
 8011aa8:	2102      	movs	r1, #2
 8011aaa:	0018      	movs	r0, r3
 8011aac:	f7ff fddf 	bl	801166e <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8011ab0:	1dfb      	adds	r3, r7, #7
 8011ab2:	781a      	ldrb	r2, [r3, #0]
 8011ab4:	4906      	ldr	r1, [pc, #24]	@ (8011ad0 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8011ab6:	0013      	movs	r3, r2
 8011ab8:	011b      	lsls	r3, r3, #4
 8011aba:	1a9b      	subs	r3, r3, r2
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	585b      	ldr	r3, [r3, r1]
 8011ac0:	0018      	movs	r0, r3
 8011ac2:	f7ff fdc6 	bl	8011652 <LL_UCPD_SendMessage>
}
 8011ac6:	46c0      	nop			@ (mov r8, r8)
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	b002      	add	sp, #8
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	46c0      	nop			@ (mov r8, r8)
 8011ad0:	200003b8 	.word	0x200003b8

08011ad4 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	0002      	movs	r2, r0
 8011adc:	1dfb      	adds	r3, r7, #7
 8011ade:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8011ae0:	2001      	movs	r0, #1
 8011ae2:	f7ff fc7d 	bl	80113e0 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 8011ae6:	1dfb      	adds	r3, r7, #7
 8011ae8:	781a      	ldrb	r2, [r3, #0]
 8011aea:	4953      	ldr	r1, [pc, #332]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011aec:	0013      	movs	r3, r2
 8011aee:	011b      	lsls	r3, r3, #4
 8011af0:	1a9b      	subs	r3, r3, r2
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	18cb      	adds	r3, r1, r3
 8011af6:	3310      	adds	r3, #16
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	789b      	ldrb	r3, [r3, #2]
 8011afc:	079b      	lsls	r3, r3, #30
 8011afe:	0f9b      	lsrs	r3, r3, #30
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2b02      	cmp	r3, #2
 8011b04:	d021      	beq.n	8011b4a <USBPDM1_AssertRp+0x76>
 8011b06:	dc2f      	bgt.n	8011b68 <USBPDM1_AssertRp+0x94>
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d002      	beq.n	8011b12 <USBPDM1_AssertRp+0x3e>
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d00d      	beq.n	8011b2c <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8011b10:	e02a      	b.n	8011b68 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8011b12:	1dfb      	adds	r3, r7, #7
 8011b14:	781a      	ldrb	r2, [r3, #0]
 8011b16:	4948      	ldr	r1, [pc, #288]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011b18:	0013      	movs	r3, r2
 8011b1a:	011b      	lsls	r3, r3, #4
 8011b1c:	1a9b      	subs	r3, r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	585b      	ldr	r3, [r3, r1]
 8011b22:	2180      	movs	r1, #128	@ 0x80
 8011b24:	0018      	movs	r0, r3
 8011b26:	f7ff fd31 	bl	801158c <LL_UCPD_SetRpResistor>
      break;
 8011b2a:	e01e      	b.n	8011b6a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8011b2c:	1dfb      	adds	r3, r7, #7
 8011b2e:	781a      	ldrb	r2, [r3, #0]
 8011b30:	4941      	ldr	r1, [pc, #260]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011b32:	0013      	movs	r3, r2
 8011b34:	011b      	lsls	r3, r3, #4
 8011b36:	1a9b      	subs	r3, r3, r2
 8011b38:	009b      	lsls	r3, r3, #2
 8011b3a:	585b      	ldr	r3, [r3, r1]
 8011b3c:	2280      	movs	r2, #128	@ 0x80
 8011b3e:	0052      	lsls	r2, r2, #1
 8011b40:	0011      	movs	r1, r2
 8011b42:	0018      	movs	r0, r3
 8011b44:	f7ff fd22 	bl	801158c <LL_UCPD_SetRpResistor>
      break;
 8011b48:	e00f      	b.n	8011b6a <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8011b4a:	1dfb      	adds	r3, r7, #7
 8011b4c:	781a      	ldrb	r2, [r3, #0]
 8011b4e:	493a      	ldr	r1, [pc, #232]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011b50:	0013      	movs	r3, r2
 8011b52:	011b      	lsls	r3, r3, #4
 8011b54:	1a9b      	subs	r3, r3, r2
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	585b      	ldr	r3, [r3, r1]
 8011b5a:	22c0      	movs	r2, #192	@ 0xc0
 8011b5c:	0052      	lsls	r2, r2, #1
 8011b5e:	0011      	movs	r1, r2
 8011b60:	0018      	movs	r0, r3
 8011b62:	f7ff fd13 	bl	801158c <LL_UCPD_SetRpResistor>
      break;
 8011b66:	e000      	b.n	8011b6a <USBPDM1_AssertRp+0x96>
      break;
 8011b68:	46c0      	nop			@ (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011b6a:	1dfb      	adds	r3, r7, #7
 8011b6c:	781a      	ldrb	r2, [r3, #0]
 8011b6e:	4932      	ldr	r1, [pc, #200]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011b70:	0013      	movs	r3, r2
 8011b72:	011b      	lsls	r3, r3, #4
 8011b74:	1a9b      	subs	r3, r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	585b      	ldr	r3, [r3, r1]
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	0018      	movs	r0, r3
 8011b7e:	f7ff fcd1 	bl	8011524 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8011b82:	1dfb      	adds	r3, r7, #7
 8011b84:	781a      	ldrb	r2, [r3, #0]
 8011b86:	492c      	ldr	r1, [pc, #176]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011b88:	0013      	movs	r3, r2
 8011b8a:	011b      	lsls	r3, r3, #4
 8011b8c:	1a9b      	subs	r3, r3, r2
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	585b      	ldr	r3, [r3, r1]
 8011b92:	0018      	movs	r0, r3
 8011b94:	f7ff fcea 	bl	801156c <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011b98:	1dfb      	adds	r3, r7, #7
 8011b9a:	781a      	ldrb	r2, [r3, #0]
 8011b9c:	4926      	ldr	r1, [pc, #152]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011b9e:	0013      	movs	r3, r2
 8011ba0:	011b      	lsls	r3, r3, #4
 8011ba2:	1a9b      	subs	r3, r3, r2
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	18cb      	adds	r3, r1, r3
 8011ba8:	3334      	adds	r3, #52	@ 0x34
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10e      	bne.n	8011bce <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011bb0:	1dfb      	adds	r3, r7, #7
 8011bb2:	781a      	ldrb	r2, [r3, #0]
 8011bb4:	4920      	ldr	r1, [pc, #128]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011bb6:	0013      	movs	r3, r2
 8011bb8:	011b      	lsls	r3, r3, #4
 8011bba:	1a9b      	subs	r3, r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	585b      	ldr	r3, [r3, r1]
 8011bc0:	22c0      	movs	r2, #192	@ 0xc0
 8011bc2:	0112      	lsls	r2, r2, #4
 8011bc4:	0011      	movs	r1, r2
 8011bc6:	0018      	movs	r0, r3
 8011bc8:	f7ff fcac 	bl	8011524 <LL_UCPD_SetccEnable>
 8011bcc:	e01b      	b.n	8011c06 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011bce:	1dfb      	adds	r3, r7, #7
 8011bd0:	781a      	ldrb	r2, [r3, #0]
 8011bd2:	4919      	ldr	r1, [pc, #100]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011bd4:	0013      	movs	r3, r2
 8011bd6:	011b      	lsls	r3, r3, #4
 8011bd8:	1a9b      	subs	r3, r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8011bde:	1dfb      	adds	r3, r7, #7
 8011be0:	781a      	ldrb	r2, [r3, #0]
 8011be2:	4915      	ldr	r1, [pc, #84]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011be4:	0013      	movs	r3, r2
 8011be6:	011b      	lsls	r3, r3, #4
 8011be8:	1a9b      	subs	r3, r3, r2
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	18cb      	adds	r3, r1, r3
 8011bee:	3334      	adds	r3, #52	@ 0x34
 8011bf0:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d102      	bne.n	8011bfc <USBPDM1_AssertRp+0x128>
 8011bf6:	2380      	movs	r3, #128	@ 0x80
 8011bf8:	00db      	lsls	r3, r3, #3
 8011bfa:	e001      	b.n	8011c00 <USBPDM1_AssertRp+0x12c>
 8011bfc:	2380      	movs	r3, #128	@ 0x80
 8011bfe:	011b      	lsls	r3, r3, #4
 8011c00:	0019      	movs	r1, r3
 8011c02:	f7ff fc8f 	bl	8011524 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8011c06:	4b0d      	ldr	r3, [pc, #52]	@ (8011c3c <USBPDM1_AssertRp+0x168>)
 8011c08:	6819      	ldr	r1, [r3, #0]
 8011c0a:	1dfb      	adds	r3, r7, #7
 8011c0c:	781a      	ldrb	r2, [r3, #0]
 8011c0e:	480a      	ldr	r0, [pc, #40]	@ (8011c38 <USBPDM1_AssertRp+0x164>)
 8011c10:	0013      	movs	r3, r2
 8011c12:	011b      	lsls	r3, r3, #4
 8011c14:	1a9b      	subs	r3, r3, r2
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	581b      	ldr	r3, [r3, r0]
 8011c1a:	4a09      	ldr	r2, [pc, #36]	@ (8011c40 <USBPDM1_AssertRp+0x16c>)
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d102      	bne.n	8011c26 <USBPDM1_AssertRp+0x152>
 8011c20:	2380      	movs	r3, #128	@ 0x80
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	e001      	b.n	8011c2a <USBPDM1_AssertRp+0x156>
 8011c26:	2380      	movs	r3, #128	@ 0x80
 8011c28:	00db      	lsls	r3, r3, #3
 8011c2a:	4a04      	ldr	r2, [pc, #16]	@ (8011c3c <USBPDM1_AssertRp+0x168>)
 8011c2c:	430b      	orrs	r3, r1
 8011c2e:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8011c30:	46c0      	nop			@ (mov r8, r8)
 8011c32:	46bd      	mov	sp, r7
 8011c34:	b002      	add	sp, #8
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	200003b8 	.word	0x200003b8
 8011c3c:	40010000 	.word	0x40010000
 8011c40:	4000a000 	.word	0x4000a000

08011c44 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	0002      	movs	r2, r0
 8011c4c:	1dfb      	adds	r3, r7, #7
 8011c4e:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8011c50:	46c0      	nop			@ (mov r8, r8)
 8011c52:	46bd      	mov	sp, r7
 8011c54:	b002      	add	sp, #8
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	0002      	movs	r2, r0
 8011c60:	1dfb      	adds	r3, r7, #7
 8011c62:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8011c64:	1dfb      	adds	r3, r7, #7
 8011c66:	781a      	ldrb	r2, [r3, #0]
 8011c68:	494b      	ldr	r1, [pc, #300]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011c6a:	0013      	movs	r3, r2
 8011c6c:	011b      	lsls	r3, r3, #4
 8011c6e:	1a9b      	subs	r3, r3, r2
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	585b      	ldr	r3, [r3, r1]
 8011c74:	0018      	movs	r0, r3
 8011c76:	f7ff fbf7 	bl	8011468 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8011c7a:	1dfb      	adds	r3, r7, #7
 8011c7c:	781a      	ldrb	r2, [r3, #0]
 8011c7e:	4946      	ldr	r1, [pc, #280]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011c80:	0013      	movs	r3, r2
 8011c82:	011b      	lsls	r3, r3, #4
 8011c84:	1a9b      	subs	r3, r3, r2
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	585b      	ldr	r3, [r3, r1]
 8011c8a:	0018      	movs	r0, r3
 8011c8c:	f7ff fc0c 	bl	80114a8 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8011c90:	2001      	movs	r0, #1
 8011c92:	f7ff fba5 	bl	80113e0 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011c96:	1dfb      	adds	r3, r7, #7
 8011c98:	781a      	ldrb	r2, [r3, #0]
 8011c9a:	493f      	ldr	r1, [pc, #252]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011c9c:	0013      	movs	r3, r2
 8011c9e:	011b      	lsls	r3, r3, #4
 8011ca0:	1a9b      	subs	r3, r3, r2
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	585b      	ldr	r3, [r3, r1]
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	0018      	movs	r0, r3
 8011caa:	f7ff fc3b 	bl	8011524 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8011cae:	1dfb      	adds	r3, r7, #7
 8011cb0:	781a      	ldrb	r2, [r3, #0]
 8011cb2:	4939      	ldr	r1, [pc, #228]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011cb4:	0013      	movs	r3, r2
 8011cb6:	011b      	lsls	r3, r3, #4
 8011cb8:	1a9b      	subs	r3, r3, r2
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	585b      	ldr	r3, [r3, r1]
 8011cbe:	0018      	movs	r0, r3
 8011cc0:	f7ff fc44 	bl	801154c <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8011cc4:	1dfb      	adds	r3, r7, #7
 8011cc6:	781a      	ldrb	r2, [r3, #0]
 8011cc8:	4933      	ldr	r1, [pc, #204]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011cca:	0013      	movs	r3, r2
 8011ccc:	011b      	lsls	r3, r3, #4
 8011cce:	1a9b      	subs	r3, r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	18cb      	adds	r3, r1, r3
 8011cd4:	3334      	adds	r3, #52	@ 0x34
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d10e      	bne.n	8011cfa <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8011cdc:	1dfb      	adds	r3, r7, #7
 8011cde:	781a      	ldrb	r2, [r3, #0]
 8011ce0:	492d      	ldr	r1, [pc, #180]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011ce2:	0013      	movs	r3, r2
 8011ce4:	011b      	lsls	r3, r3, #4
 8011ce6:	1a9b      	subs	r3, r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	585b      	ldr	r3, [r3, r1]
 8011cec:	22c0      	movs	r2, #192	@ 0xc0
 8011cee:	0112      	lsls	r2, r2, #4
 8011cf0:	0011      	movs	r1, r2
 8011cf2:	0018      	movs	r0, r3
 8011cf4:	f7ff fc16 	bl	8011524 <LL_UCPD_SetccEnable>
 8011cf8:	e01b      	b.n	8011d32 <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011cfa:	1dfb      	adds	r3, r7, #7
 8011cfc:	781a      	ldrb	r2, [r3, #0]
 8011cfe:	4926      	ldr	r1, [pc, #152]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011d00:	0013      	movs	r3, r2
 8011d02:	011b      	lsls	r3, r3, #4
 8011d04:	1a9b      	subs	r3, r3, r2
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8011d0a:	1dfb      	adds	r3, r7, #7
 8011d0c:	781a      	ldrb	r2, [r3, #0]
 8011d0e:	4922      	ldr	r1, [pc, #136]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011d10:	0013      	movs	r3, r2
 8011d12:	011b      	lsls	r3, r3, #4
 8011d14:	1a9b      	subs	r3, r3, r2
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	18cb      	adds	r3, r1, r3
 8011d1a:	3334      	adds	r3, #52	@ 0x34
 8011d1c:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d102      	bne.n	8011d28 <USBPDM1_AssertRd+0xd0>
 8011d22:	2380      	movs	r3, #128	@ 0x80
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	e001      	b.n	8011d2c <USBPDM1_AssertRd+0xd4>
 8011d28:	2380      	movs	r3, #128	@ 0x80
 8011d2a:	011b      	lsls	r3, r3, #4
 8011d2c:	0019      	movs	r1, r3
 8011d2e:	f7ff fbf9 	bl	8011524 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8011d32:	4b1a      	ldr	r3, [pc, #104]	@ (8011d9c <USBPDM1_AssertRd+0x144>)
 8011d34:	6819      	ldr	r1, [r3, #0]
 8011d36:	1dfb      	adds	r3, r7, #7
 8011d38:	781a      	ldrb	r2, [r3, #0]
 8011d3a:	4817      	ldr	r0, [pc, #92]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011d3c:	0013      	movs	r3, r2
 8011d3e:	011b      	lsls	r3, r3, #4
 8011d40:	1a9b      	subs	r3, r3, r2
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	581b      	ldr	r3, [r3, r0]
 8011d46:	4a16      	ldr	r2, [pc, #88]	@ (8011da0 <USBPDM1_AssertRd+0x148>)
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d102      	bne.n	8011d52 <USBPDM1_AssertRd+0xfa>
 8011d4c:	2380      	movs	r3, #128	@ 0x80
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	e001      	b.n	8011d56 <USBPDM1_AssertRd+0xfe>
 8011d52:	2380      	movs	r3, #128	@ 0x80
 8011d54:	00db      	lsls	r3, r3, #3
 8011d56:	4a11      	ldr	r2, [pc, #68]	@ (8011d9c <USBPDM1_AssertRd+0x144>)
 8011d58:	430b      	orrs	r3, r1
 8011d5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8011d5c:	2001      	movs	r0, #1
 8011d5e:	f7f6 fff3 	bl	8008d48 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8011d62:	1dfb      	adds	r3, r7, #7
 8011d64:	781a      	ldrb	r2, [r3, #0]
 8011d66:	490c      	ldr	r1, [pc, #48]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011d68:	0013      	movs	r3, r2
 8011d6a:	011b      	lsls	r3, r3, #4
 8011d6c:	1a9b      	subs	r3, r3, r2
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	585b      	ldr	r3, [r3, r1]
 8011d72:	0018      	movs	r0, r3
 8011d74:	f7ff fb68 	bl	8011448 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8011d78:	1dfb      	adds	r3, r7, #7
 8011d7a:	781a      	ldrb	r2, [r3, #0]
 8011d7c:	4906      	ldr	r1, [pc, #24]	@ (8011d98 <USBPDM1_AssertRd+0x140>)
 8011d7e:	0013      	movs	r3, r2
 8011d80:	011b      	lsls	r3, r3, #4
 8011d82:	1a9b      	subs	r3, r3, r2
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	585b      	ldr	r3, [r3, r1]
 8011d88:	0018      	movs	r0, r3
 8011d8a:	f7ff fb7d 	bl	8011488 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8011d8e:	46c0      	nop			@ (mov r8, r8)
 8011d90:	46bd      	mov	sp, r7
 8011d92:	b002      	add	sp, #8
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	46c0      	nop			@ (mov r8, r8)
 8011d98:	200003b8 	.word	0x200003b8
 8011d9c:	40010000 	.word	0x40010000
 8011da0:	4000a000 	.word	0x4000a000

08011da4 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	0002      	movs	r2, r0
 8011dac:	1dfb      	adds	r3, r7, #7
 8011dae:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8011db0:	46c0      	nop			@ (mov r8, r8)
 8011db2:	46bd      	mov	sp, r7
 8011db4:	b002      	add	sp, #8
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	0002      	movs	r2, r0
 8011dc0:	1dfb      	adds	r3, r7, #7
 8011dc2:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8011dc4:	2001      	movs	r0, #1
 8011dc6:	f7ff fb0b 	bl	80113e0 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8011dca:	1dfb      	adds	r3, r7, #7
 8011dcc:	781a      	ldrb	r2, [r3, #0]
 8011dce:	4930      	ldr	r1, [pc, #192]	@ (8011e90 <USBPDM1_EnterErrorRecovery+0xd8>)
 8011dd0:	0013      	movs	r3, r2
 8011dd2:	011b      	lsls	r3, r3, #4
 8011dd4:	1a9b      	subs	r3, r3, r2
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	585b      	ldr	r3, [r3, r1]
 8011dda:	0018      	movs	r0, r3
 8011ddc:	f7ff fbc6 	bl	801156c <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8011de0:	1dfb      	adds	r3, r7, #7
 8011de2:	781a      	ldrb	r2, [r3, #0]
 8011de4:	492a      	ldr	r1, [pc, #168]	@ (8011e90 <USBPDM1_EnterErrorRecovery+0xd8>)
 8011de6:	0013      	movs	r3, r2
 8011de8:	011b      	lsls	r3, r3, #4
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	585b      	ldr	r3, [r3, r1]
 8011df0:	2100      	movs	r1, #0
 8011df2:	0018      	movs	r0, r3
 8011df4:	f7ff fbca 	bl	801158c <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8011df8:	1dfb      	adds	r3, r7, #7
 8011dfa:	781a      	ldrb	r2, [r3, #0]
 8011dfc:	4924      	ldr	r1, [pc, #144]	@ (8011e90 <USBPDM1_EnterErrorRecovery+0xd8>)
 8011dfe:	0013      	movs	r3, r2
 8011e00:	011b      	lsls	r3, r3, #4
 8011e02:	1a9b      	subs	r3, r3, r2
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	585b      	ldr	r3, [r3, r1]
 8011e08:	2100      	movs	r1, #0
 8011e0a:	0018      	movs	r0, r3
 8011e0c:	f7ff fb8a 	bl	8011524 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8011e10:	4b20      	ldr	r3, [pc, #128]	@ (8011e94 <USBPDM1_EnterErrorRecovery+0xdc>)
 8011e12:	6819      	ldr	r1, [r3, #0]
 8011e14:	1dfb      	adds	r3, r7, #7
 8011e16:	781a      	ldrb	r2, [r3, #0]
 8011e18:	481d      	ldr	r0, [pc, #116]	@ (8011e90 <USBPDM1_EnterErrorRecovery+0xd8>)
 8011e1a:	0013      	movs	r3, r2
 8011e1c:	011b      	lsls	r3, r3, #4
 8011e1e:	1a9b      	subs	r3, r3, r2
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	581b      	ldr	r3, [r3, r0]
 8011e24:	4a1c      	ldr	r2, [pc, #112]	@ (8011e98 <USBPDM1_EnterErrorRecovery+0xe0>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d102      	bne.n	8011e30 <USBPDM1_EnterErrorRecovery+0x78>
 8011e2a:	2380      	movs	r3, #128	@ 0x80
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	e001      	b.n	8011e34 <USBPDM1_EnterErrorRecovery+0x7c>
 8011e30:	2380      	movs	r3, #128	@ 0x80
 8011e32:	00db      	lsls	r3, r3, #3
 8011e34:	4a17      	ldr	r2, [pc, #92]	@ (8011e94 <USBPDM1_EnterErrorRecovery+0xdc>)
 8011e36:	430b      	orrs	r3, r1
 8011e38:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011e3a:	1dfb      	adds	r3, r7, #7
 8011e3c:	781a      	ldrb	r2, [r3, #0]
 8011e3e:	4914      	ldr	r1, [pc, #80]	@ (8011e90 <USBPDM1_EnterErrorRecovery+0xd8>)
 8011e40:	0013      	movs	r3, r2
 8011e42:	011b      	lsls	r3, r3, #4
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	585b      	ldr	r3, [r3, r1]
 8011e4a:	0018      	movs	r0, r3
 8011e4c:	f7ff fbd2 	bl	80115f4 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8011e50:	1dfb      	adds	r3, r7, #7
 8011e52:	781a      	ldrb	r2, [r3, #0]
 8011e54:	490e      	ldr	r1, [pc, #56]	@ (8011e90 <USBPDM1_EnterErrorRecovery+0xd8>)
 8011e56:	0013      	movs	r3, r2
 8011e58:	011b      	lsls	r3, r3, #4
 8011e5a:	1a9b      	subs	r3, r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	18cb      	adds	r3, r1, r3
 8011e60:	330c      	adds	r3, #12
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	7a1b      	ldrb	r3, [r3, #8]
 8011e66:	2202      	movs	r2, #2
 8011e68:	4013      	ands	r3, r2
 8011e6a:	b2db      	uxtb	r3, r3
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00a      	beq.n	8011e86 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8011e70:	1dfb      	adds	r3, r7, #7
 8011e72:	781a      	ldrb	r2, [r3, #0]
 8011e74:	4906      	ldr	r1, [pc, #24]	@ (8011e90 <USBPDM1_EnterErrorRecovery+0xd8>)
 8011e76:	0013      	movs	r3, r2
 8011e78:	011b      	lsls	r3, r3, #4
 8011e7a:	1a9b      	subs	r3, r3, r2
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	585b      	ldr	r3, [r3, r1]
 8011e80:	0018      	movs	r0, r3
 8011e82:	f7ff fb3f 	bl	8011504 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 8011e86:	46c0      	nop			@ (mov r8, r8)
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	b002      	add	sp, #8
 8011e8c:	bd80      	pop	{r7, pc}
 8011e8e:	46c0      	nop			@ (mov r8, r8)
 8011e90:	200003b8 	.word	0x200003b8
 8011e94:	40010000 	.word	0x40010000
 8011e98:	4000a000 	.word	0x4000a000

08011e9c <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	0002      	movs	r2, r0
 8011ea4:	1dfb      	adds	r3, r7, #7
 8011ea6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8011ea8:	1dfb      	adds	r3, r7, #7
 8011eaa:	781a      	ldrb	r2, [r3, #0]
 8011eac:	4906      	ldr	r1, [pc, #24]	@ (8011ec8 <USBPD_HW_IF_EnableRX+0x2c>)
 8011eae:	0013      	movs	r3, r2
 8011eb0:	011b      	lsls	r3, r3, #4
 8011eb2:	1a9b      	subs	r3, r3, r2
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	585b      	ldr	r3, [r3, r1]
 8011eb8:	0018      	movs	r0, r3
 8011eba:	f7ff fb8d 	bl	80115d8 <LL_UCPD_RxEnable>
}
 8011ebe:	46c0      	nop			@ (mov r8, r8)
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	b002      	add	sp, #8
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	46c0      	nop			@ (mov r8, r8)
 8011ec8:	200003b8 	.word	0x200003b8

08011ecc <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	0002      	movs	r2, r0
 8011ed4:	1dfb      	adds	r3, r7, #7
 8011ed6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8011ed8:	1dfb      	adds	r3, r7, #7
 8011eda:	781a      	ldrb	r2, [r3, #0]
 8011edc:	4906      	ldr	r1, [pc, #24]	@ (8011ef8 <USBPD_HW_IF_DisableRX+0x2c>)
 8011ede:	0013      	movs	r3, r2
 8011ee0:	011b      	lsls	r3, r3, #4
 8011ee2:	1a9b      	subs	r3, r3, r2
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	585b      	ldr	r3, [r3, r1]
 8011ee8:	0018      	movs	r0, r3
 8011eea:	f7ff fb83 	bl	80115f4 <LL_UCPD_RxDisable>
}
 8011eee:	46c0      	nop			@ (mov r8, r8)
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	b002      	add	sp, #8
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	46c0      	nop			@ (mov r8, r8)
 8011ef8:	200003b8 	.word	0x200003b8

08011efc <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8011efc:	b590      	push	{r4, r7, lr}
 8011efe:	b085      	sub	sp, #20
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	0002      	movs	r2, r0
 8011f04:	6039      	str	r1, [r7, #0]
 8011f06:	1dfb      	adds	r3, r7, #7
 8011f08:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8011f0a:	f000 fc51 	bl	80127b0 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8011f0e:	1dfb      	adds	r3, r7, #7
 8011f10:	781c      	ldrb	r4, [r3, #0]
 8011f12:	1dfb      	adds	r3, r7, #7
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	0018      	movs	r0, r3
 8011f18:	f7fe fd32 	bl	8010980 <USBPD_HW_Init_DMATxInstance>
 8011f1c:	0001      	movs	r1, r0
 8011f1e:	4aa6      	ldr	r2, [pc, #664]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011f20:	0023      	movs	r3, r4
 8011f22:	011b      	lsls	r3, r3, #4
 8011f24:	1b1b      	subs	r3, r3, r4
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	18d3      	adds	r3, r2, r3
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8011f2e:	1dfb      	adds	r3, r7, #7
 8011f30:	781c      	ldrb	r4, [r3, #0]
 8011f32:	1dfb      	adds	r3, r7, #7
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	0018      	movs	r0, r3
 8011f38:	f7fe fcd2 	bl	80108e0 <USBPD_HW_Init_DMARxInstance>
 8011f3c:	0001      	movs	r1, r0
 8011f3e:	4a9e      	ldr	r2, [pc, #632]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011f40:	0023      	movs	r3, r4
 8011f42:	011b      	lsls	r3, r3, #4
 8011f44:	1b1b      	subs	r3, r3, r4
 8011f46:	009b      	lsls	r3, r3, #2
 8011f48:	18d3      	adds	r3, r2, r3
 8011f4a:	3308      	adds	r3, #8
 8011f4c:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8011f4e:	1dfb      	adds	r3, r7, #7
 8011f50:	781a      	ldrb	r2, [r3, #0]
 8011f52:	4999      	ldr	r1, [pc, #612]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011f54:	0013      	movs	r3, r2
 8011f56:	011b      	lsls	r3, r3, #4
 8011f58:	1a9b      	subs	r3, r3, r2
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	585b      	ldr	r3, [r3, r1]
 8011f5e:	3330      	adds	r3, #48	@ 0x30
 8011f60:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8011f62:	1dfb      	adds	r3, r7, #7
 8011f64:	781a      	ldrb	r2, [r3, #0]
 8011f66:	4994      	ldr	r1, [pc, #592]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011f68:	0013      	movs	r3, r2
 8011f6a:	011b      	lsls	r3, r3, #4
 8011f6c:	1a9b      	subs	r3, r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	18cb      	adds	r3, r1, r3
 8011f72:	3308      	adds	r3, #8
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8011f7a:	1dfb      	adds	r3, r7, #7
 8011f7c:	781a      	ldrb	r2, [r3, #0]
 8011f7e:	498e      	ldr	r1, [pc, #568]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011f80:	0013      	movs	r3, r2
 8011f82:	011b      	lsls	r3, r3, #4
 8011f84:	1a9b      	subs	r3, r3, r2
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	18cb      	adds	r3, r1, r3
 8011f8a:	3330      	adds	r3, #48	@ 0x30
 8011f8c:	6818      	ldr	r0, [r3, #0]
 8011f8e:	1dfb      	adds	r3, r7, #7
 8011f90:	781a      	ldrb	r2, [r3, #0]
 8011f92:	4989      	ldr	r1, [pc, #548]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011f94:	0013      	movs	r3, r2
 8011f96:	011b      	lsls	r3, r3, #4
 8011f98:	1a9b      	subs	r3, r3, r2
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	18cb      	adds	r3, r1, r3
 8011f9e:	3308      	adds	r3, #8
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	0002      	movs	r2, r0
 8011fa4:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8011fa6:	1dfb      	adds	r3, r7, #7
 8011fa8:	781a      	ldrb	r2, [r3, #0]
 8011faa:	4983      	ldr	r1, [pc, #524]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011fac:	0013      	movs	r3, r2
 8011fae:	011b      	lsls	r3, r3, #4
 8011fb0:	1a9b      	subs	r3, r3, r2
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	18cb      	adds	r3, r1, r3
 8011fb6:	3308      	adds	r3, #8
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2284      	movs	r2, #132	@ 0x84
 8011fbc:	0052      	lsls	r2, r2, #1
 8011fbe:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8011fc0:	1dfb      	adds	r3, r7, #7
 8011fc2:	781a      	ldrb	r2, [r3, #0]
 8011fc4:	497c      	ldr	r1, [pc, #496]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011fc6:	0013      	movs	r3, r2
 8011fc8:	011b      	lsls	r3, r3, #4
 8011fca:	1a9b      	subs	r3, r3, r2
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	18cb      	adds	r3, r1, r3
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	6819      	ldr	r1, [r3, #0]
 8011fd6:	1dfb      	adds	r3, r7, #7
 8011fd8:	781a      	ldrb	r2, [r3, #0]
 8011fda:	4877      	ldr	r0, [pc, #476]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011fdc:	0013      	movs	r3, r2
 8011fde:	011b      	lsls	r3, r3, #4
 8011fe0:	1a9b      	subs	r3, r3, r2
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	18c3      	adds	r3, r0, r3
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2201      	movs	r2, #1
 8011fec:	430a      	orrs	r2, r1
 8011fee:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8011ff0:	1dfb      	adds	r3, r7, #7
 8011ff2:	781a      	ldrb	r2, [r3, #0]
 8011ff4:	4970      	ldr	r1, [pc, #448]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8011ff6:	0013      	movs	r3, r2
 8011ff8:	011b      	lsls	r3, r3, #4
 8011ffa:	1a9b      	subs	r3, r3, r2
 8011ffc:	009b      	lsls	r3, r3, #2
 8011ffe:	585b      	ldr	r3, [r3, r1]
 8012000:	3324      	adds	r3, #36	@ 0x24
 8012002:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8012004:	1dfb      	adds	r3, r7, #7
 8012006:	781a      	ldrb	r2, [r3, #0]
 8012008:	496b      	ldr	r1, [pc, #428]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 801200a:	0013      	movs	r3, r2
 801200c:	011b      	lsls	r3, r3, #4
 801200e:	1a9b      	subs	r3, r3, r2
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	18cb      	adds	r3, r1, r3
 8012014:	3304      	adds	r3, #4
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 801201c:	1dfb      	adds	r3, r7, #7
 801201e:	781a      	ldrb	r2, [r3, #0]
 8012020:	4965      	ldr	r1, [pc, #404]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012022:	0013      	movs	r3, r2
 8012024:	011b      	lsls	r3, r3, #4
 8012026:	1a9b      	subs	r3, r3, r2
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	585b      	ldr	r3, [r3, r1]
 801202c:	6919      	ldr	r1, [r3, #16]
 801202e:	1dfb      	adds	r3, r7, #7
 8012030:	781a      	ldrb	r2, [r3, #0]
 8012032:	4861      	ldr	r0, [pc, #388]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012034:	0013      	movs	r3, r2
 8012036:	011b      	lsls	r3, r3, #4
 8012038:	1a9b      	subs	r3, r3, r2
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	581b      	ldr	r3, [r3, r0]
 801203e:	4a5f      	ldr	r2, [pc, #380]	@ (80121bc <HW_SignalAttachement+0x2c0>)
 8012040:	430a      	orrs	r2, r1
 8012042:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8012044:	1dfb      	adds	r3, r7, #7
 8012046:	781a      	ldrb	r2, [r3, #0]
 8012048:	495b      	ldr	r1, [pc, #364]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 801204a:	0013      	movs	r3, r2
 801204c:	011b      	lsls	r3, r3, #4
 801204e:	1a9b      	subs	r3, r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	18cb      	adds	r3, r1, r3
 8012054:	3334      	adds	r3, #52	@ 0x34
 8012056:	683a      	ldr	r2, [r7, #0]
 8012058:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 801205a:	1dfb      	adds	r3, r7, #7
 801205c:	781a      	ldrb	r2, [r3, #0]
 801205e:	4956      	ldr	r1, [pc, #344]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012060:	0013      	movs	r3, r2
 8012062:	011b      	lsls	r3, r3, #4
 8012064:	1a9b      	subs	r3, r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	5858      	ldr	r0, [r3, r1]
 801206a:	1dfb      	adds	r3, r7, #7
 801206c:	781a      	ldrb	r2, [r3, #0]
 801206e:	4952      	ldr	r1, [pc, #328]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012070:	0013      	movs	r3, r2
 8012072:	011b      	lsls	r3, r3, #4
 8012074:	1a9b      	subs	r3, r3, r2
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	18cb      	adds	r3, r1, r3
 801207a:	3334      	adds	r3, #52	@ 0x34
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b01      	cmp	r3, #1
 8012080:	d101      	bne.n	8012086 <HW_SignalAttachement+0x18a>
 8012082:	2300      	movs	r3, #0
 8012084:	e000      	b.n	8012088 <HW_SignalAttachement+0x18c>
 8012086:	2340      	movs	r3, #64	@ 0x40
 8012088:	0019      	movs	r1, r3
 801208a:	f7ff fa93 	bl	80115b4 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801208e:	1dfb      	adds	r3, r7, #7
 8012090:	781a      	ldrb	r2, [r3, #0]
 8012092:	4949      	ldr	r1, [pc, #292]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012094:	0013      	movs	r3, r2
 8012096:	011b      	lsls	r3, r3, #4
 8012098:	1a9b      	subs	r3, r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	18cb      	adds	r3, r1, r3
 801209e:	330c      	adds	r3, #12
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	7a1b      	ldrb	r3, [r3, #8]
 80120a4:	2202      	movs	r2, #2
 80120a6:	4013      	ands	r3, r2
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d034      	beq.n	8012118 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80120ae:	1dfb      	adds	r3, r7, #7
 80120b0:	781a      	ldrb	r2, [r3, #0]
 80120b2:	4941      	ldr	r1, [pc, #260]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 80120b4:	0013      	movs	r3, r2
 80120b6:	011b      	lsls	r3, r3, #4
 80120b8:	1a9b      	subs	r3, r3, r2
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	18cb      	adds	r3, r1, r3
 80120be:	3334      	adds	r3, #52	@ 0x34
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d101      	bne.n	80120ca <HW_SignalAttachement+0x1ce>
 80120c6:	2301      	movs	r3, #1
 80120c8:	e000      	b.n	80120cc <HW_SignalAttachement+0x1d0>
 80120ca:	2302      	movs	r3, #2
 80120cc:	1dfa      	adds	r2, r7, #7
 80120ce:	7812      	ldrb	r2, [r2, #0]
 80120d0:	0019      	movs	r1, r3
 80120d2:	0010      	movs	r0, r2
 80120d4:	f7fe fca4 	bl	8010a20 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 80120d8:	1dfb      	adds	r3, r7, #7
 80120da:	781a      	ldrb	r2, [r3, #0]
 80120dc:	4936      	ldr	r1, [pc, #216]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 80120de:	0013      	movs	r3, r2
 80120e0:	011b      	lsls	r3, r3, #4
 80120e2:	1a9b      	subs	r3, r3, r2
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	585b      	ldr	r3, [r3, r1]
 80120e8:	0018      	movs	r0, r3
 80120ea:	f7ff f9fb 	bl	80114e4 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 80120ee:	1dfb      	adds	r3, r7, #7
 80120f0:	781a      	ldrb	r2, [r3, #0]
 80120f2:	4931      	ldr	r1, [pc, #196]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 80120f4:	0013      	movs	r3, r2
 80120f6:	011b      	lsls	r3, r3, #4
 80120f8:	1a9b      	subs	r3, r3, r2
 80120fa:	009b      	lsls	r3, r3, #2
 80120fc:	585b      	ldr	r3, [r3, r1]
 80120fe:	6919      	ldr	r1, [r3, #16]
 8012100:	1dfb      	adds	r3, r7, #7
 8012102:	781a      	ldrb	r2, [r3, #0]
 8012104:	482c      	ldr	r0, [pc, #176]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012106:	0013      	movs	r3, r2
 8012108:	011b      	lsls	r3, r3, #4
 801210a:	1a9b      	subs	r3, r3, r2
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	581b      	ldr	r3, [r3, r0]
 8012110:	2280      	movs	r2, #128	@ 0x80
 8012112:	0352      	lsls	r2, r2, #13
 8012114:	430a      	orrs	r2, r1
 8012116:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8012118:	1dfb      	adds	r3, r7, #7
 801211a:	781a      	ldrb	r2, [r3, #0]
 801211c:	4926      	ldr	r1, [pc, #152]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 801211e:	0013      	movs	r3, r2
 8012120:	011b      	lsls	r3, r3, #4
 8012122:	1a9b      	subs	r3, r3, r2
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	18cb      	adds	r3, r1, r3
 8012128:	3334      	adds	r3, #52	@ 0x34
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d10e      	bne.n	801214e <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8012130:	1dfb      	adds	r3, r7, #7
 8012132:	781a      	ldrb	r2, [r3, #0]
 8012134:	4920      	ldr	r1, [pc, #128]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012136:	0013      	movs	r3, r2
 8012138:	011b      	lsls	r3, r3, #4
 801213a:	1a9b      	subs	r3, r3, r2
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	585b      	ldr	r3, [r3, r1]
 8012140:	2280      	movs	r2, #128	@ 0x80
 8012142:	00d2      	lsls	r2, r2, #3
 8012144:	0011      	movs	r1, r2
 8012146:	0018      	movs	r0, r3
 8012148:	f7ff f9ec 	bl	8011524 <LL_UCPD_SetccEnable>
 801214c:	e00d      	b.n	801216a <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801214e:	1dfb      	adds	r3, r7, #7
 8012150:	781a      	ldrb	r2, [r3, #0]
 8012152:	4919      	ldr	r1, [pc, #100]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012154:	0013      	movs	r3, r2
 8012156:	011b      	lsls	r3, r3, #4
 8012158:	1a9b      	subs	r3, r3, r2
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	585b      	ldr	r3, [r3, r1]
 801215e:	2280      	movs	r2, #128	@ 0x80
 8012160:	0112      	lsls	r2, r2, #4
 8012162:	0011      	movs	r1, r2
 8012164:	0018      	movs	r0, r3
 8012166:	f7ff f9dd 	bl	8011524 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 801216a:	1dfb      	adds	r3, r7, #7
 801216c:	781a      	ldrb	r2, [r3, #0]
 801216e:	4912      	ldr	r1, [pc, #72]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012170:	0013      	movs	r3, r2
 8012172:	011b      	lsls	r3, r3, #4
 8012174:	1a9b      	subs	r3, r3, r2
 8012176:	009b      	lsls	r3, r3, #2
 8012178:	585b      	ldr	r3, [r3, r1]
 801217a:	2100      	movs	r1, #0
 801217c:	0018      	movs	r0, r3
 801217e:	f7ff fa48 	bl	8011612 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8012182:	1dfb      	adds	r3, r7, #7
 8012184:	781a      	ldrb	r2, [r3, #0]
 8012186:	490c      	ldr	r1, [pc, #48]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 8012188:	0013      	movs	r3, r2
 801218a:	011b      	lsls	r3, r3, #4
 801218c:	1a9b      	subs	r3, r3, r2
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	585b      	ldr	r3, [r3, r1]
 8012192:	0018      	movs	r0, r3
 8012194:	f7ff fa7d 	bl	8011692 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8012198:	1dfb      	adds	r3, r7, #7
 801219a:	781a      	ldrb	r2, [r3, #0]
 801219c:	4906      	ldr	r1, [pc, #24]	@ (80121b8 <HW_SignalAttachement+0x2bc>)
 801219e:	0013      	movs	r3, r2
 80121a0:	011b      	lsls	r3, r3, #4
 80121a2:	1a9b      	subs	r3, r3, r2
 80121a4:	009b      	lsls	r3, r3, #2
 80121a6:	585b      	ldr	r3, [r3, r1]
 80121a8:	0018      	movs	r0, r3
 80121aa:	f7ff fa91 	bl	80116d0 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80121ae:	46c0      	nop			@ (mov r8, r8)
 80121b0:	46bd      	mov	sp, r7
 80121b2:	b005      	add	sp, #20
 80121b4:	bd90      	pop	{r4, r7, pc}
 80121b6:	46c0      	nop			@ (mov r8, r8)
 80121b8:	200003b8 	.word	0x200003b8
 80121bc:	00001e7e 	.word	0x00001e7e

080121c0 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	0002      	movs	r2, r0
 80121c8:	1dfb      	adds	r3, r7, #7
 80121ca:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80121cc:	1dfb      	adds	r3, r7, #7
 80121ce:	781a      	ldrb	r2, [r3, #0]
 80121d0:	4941      	ldr	r1, [pc, #260]	@ (80122d8 <HW_SignalDetachment+0x118>)
 80121d2:	0013      	movs	r3, r2
 80121d4:	011b      	lsls	r3, r3, #4
 80121d6:	1a9b      	subs	r3, r3, r2
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	585b      	ldr	r3, [r3, r1]
 80121dc:	0018      	movs	r0, r3
 80121de:	f7ff fa67 	bl	80116b0 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80121e2:	1dfb      	adds	r3, r7, #7
 80121e4:	781a      	ldrb	r2, [r3, #0]
 80121e6:	493c      	ldr	r1, [pc, #240]	@ (80122d8 <HW_SignalDetachment+0x118>)
 80121e8:	0013      	movs	r3, r2
 80121ea:	011b      	lsls	r3, r3, #4
 80121ec:	1a9b      	subs	r3, r3, r2
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	585b      	ldr	r3, [r3, r1]
 80121f2:	0018      	movs	r0, r3
 80121f4:	f7ff fa7c 	bl	80116f0 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80121f8:	1dfb      	adds	r3, r7, #7
 80121fa:	781a      	ldrb	r2, [r3, #0]
 80121fc:	4936      	ldr	r1, [pc, #216]	@ (80122d8 <HW_SignalDetachment+0x118>)
 80121fe:	0013      	movs	r3, r2
 8012200:	011b      	lsls	r3, r3, #4
 8012202:	1a9b      	subs	r3, r3, r2
 8012204:	009b      	lsls	r3, r3, #2
 8012206:	585b      	ldr	r3, [r3, r1]
 8012208:	0018      	movs	r0, r3
 801220a:	f7ff f9f3 	bl	80115f4 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 801220e:	1dfb      	adds	r3, r7, #7
 8012210:	781a      	ldrb	r2, [r3, #0]
 8012212:	4931      	ldr	r1, [pc, #196]	@ (80122d8 <HW_SignalDetachment+0x118>)
 8012214:	0013      	movs	r3, r2
 8012216:	011b      	lsls	r3, r3, #4
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	585b      	ldr	r3, [r3, r1]
 801221e:	22c0      	movs	r2, #192	@ 0xc0
 8012220:	0212      	lsls	r2, r2, #8
 8012222:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8012224:	1dfb      	adds	r3, r7, #7
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	0018      	movs	r0, r3
 801222a:	f7fe fbef 	bl	8010a0c <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 801222e:	1dfb      	adds	r3, r7, #7
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	0018      	movs	r0, r3
 8012234:	f7fe fb9a 	bl	801096c <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012238:	1dfb      	adds	r3, r7, #7
 801223a:	781a      	ldrb	r2, [r3, #0]
 801223c:	4926      	ldr	r1, [pc, #152]	@ (80122d8 <HW_SignalDetachment+0x118>)
 801223e:	0013      	movs	r3, r2
 8012240:	011b      	lsls	r3, r3, #4
 8012242:	1a9b      	subs	r3, r3, r2
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	585b      	ldr	r3, [r3, r1]
 8012248:	22c0      	movs	r2, #192	@ 0xc0
 801224a:	0112      	lsls	r2, r2, #4
 801224c:	0011      	movs	r1, r2
 801224e:	0018      	movs	r0, r3
 8012250:	f7ff f968 	bl	8011524 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8012254:	1dfb      	adds	r3, r7, #7
 8012256:	781a      	ldrb	r2, [r3, #0]
 8012258:	491f      	ldr	r1, [pc, #124]	@ (80122d8 <HW_SignalDetachment+0x118>)
 801225a:	0013      	movs	r3, r2
 801225c:	011b      	lsls	r3, r3, #4
 801225e:	1a9b      	subs	r3, r3, r2
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	18cb      	adds	r3, r1, r3
 8012264:	3310      	adds	r3, #16
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	2204      	movs	r2, #4
 801226c:	4013      	ands	r3, r2
 801226e:	b2db      	uxtb	r3, r3
 8012270:	2b00      	cmp	r3, #0
 8012272:	d104      	bne.n	801227e <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8012274:	1dfb      	adds	r3, r7, #7
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	0018      	movs	r0, r3
 801227a:	f006 fbbf 	bl	80189fc <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801227e:	1dfb      	adds	r3, r7, #7
 8012280:	781a      	ldrb	r2, [r3, #0]
 8012282:	4915      	ldr	r1, [pc, #84]	@ (80122d8 <HW_SignalDetachment+0x118>)
 8012284:	0013      	movs	r3, r2
 8012286:	011b      	lsls	r3, r3, #4
 8012288:	1a9b      	subs	r3, r3, r2
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	18cb      	adds	r3, r1, r3
 801228e:	330c      	adds	r3, #12
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	7a1b      	ldrb	r3, [r3, #8]
 8012294:	2202      	movs	r2, #2
 8012296:	4013      	ands	r3, r2
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00a      	beq.n	80122b4 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 801229e:	1dfb      	adds	r3, r7, #7
 80122a0:	781a      	ldrb	r2, [r3, #0]
 80122a2:	490d      	ldr	r1, [pc, #52]	@ (80122d8 <HW_SignalDetachment+0x118>)
 80122a4:	0013      	movs	r3, r2
 80122a6:	011b      	lsls	r3, r3, #4
 80122a8:	1a9b      	subs	r3, r3, r2
 80122aa:	009b      	lsls	r3, r3, #2
 80122ac:	585b      	ldr	r3, [r3, r1]
 80122ae:	0018      	movs	r0, r3
 80122b0:	f7ff f928 	bl	8011504 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80122b4:	1dfb      	adds	r3, r7, #7
 80122b6:	781a      	ldrb	r2, [r3, #0]
 80122b8:	4907      	ldr	r1, [pc, #28]	@ (80122d8 <HW_SignalDetachment+0x118>)
 80122ba:	0013      	movs	r3, r2
 80122bc:	011b      	lsls	r3, r3, #4
 80122be:	1a9b      	subs	r3, r3, r2
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	18cb      	adds	r3, r1, r3
 80122c4:	3334      	adds	r3, #52	@ 0x34
 80122c6:	2200      	movs	r2, #0
 80122c8:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80122ca:	f000 fb11 	bl	80128f0 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80122ce:	46c0      	nop			@ (mov r8, r8)
 80122d0:	46bd      	mov	sp, r7
 80122d2:	b002      	add	sp, #8
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	46c0      	nop			@ (mov r8, r8)
 80122d8:	200003b8 	.word	0x200003b8

080122dc <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	0002      	movs	r2, r0
 80122e4:	1dfb      	adds	r3, r7, #7
 80122e6:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80122e8:	1dfb      	adds	r3, r7, #7
 80122ea:	781a      	ldrb	r2, [r3, #0]
 80122ec:	4907      	ldr	r1, [pc, #28]	@ (801230c <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 80122ee:	0013      	movs	r3, r2
 80122f0:	011b      	lsls	r3, r3, #4
 80122f2:	1a9b      	subs	r3, r3, r2
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	585b      	ldr	r3, [r3, r1]
 80122f8:	2280      	movs	r2, #128	@ 0x80
 80122fa:	0052      	lsls	r2, r2, #1
 80122fc:	0011      	movs	r1, r2
 80122fe:	0018      	movs	r0, r3
 8012300:	f7ff f944 	bl	801158c <LL_UCPD_SetRpResistor>
}
 8012304:	46c0      	nop			@ (mov r8, r8)
 8012306:	46bd      	mov	sp, r7
 8012308:	b002      	add	sp, #8
 801230a:	bd80      	pop	{r7, pc}
 801230c:	200003b8 	.word	0x200003b8

08012310 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	0002      	movs	r2, r0
 8012318:	1dfb      	adds	r3, r7, #7
 801231a:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 801231c:	1dfb      	adds	r3, r7, #7
 801231e:	781a      	ldrb	r2, [r3, #0]
 8012320:	4907      	ldr	r1, [pc, #28]	@ (8012340 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 8012322:	0013      	movs	r3, r2
 8012324:	011b      	lsls	r3, r3, #4
 8012326:	1a9b      	subs	r3, r3, r2
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	585b      	ldr	r3, [r3, r1]
 801232c:	22c0      	movs	r2, #192	@ 0xc0
 801232e:	0052      	lsls	r2, r2, #1
 8012330:	0011      	movs	r1, r2
 8012332:	0018      	movs	r0, r3
 8012334:	f7ff f92a 	bl	801158c <LL_UCPD_SetRpResistor>
}
 8012338:	46c0      	nop			@ (mov r8, r8)
 801233a:	46bd      	mov	sp, r7
 801233c:	b002      	add	sp, #8
 801233e:	bd80      	pop	{r7, pc}
 8012340:	200003b8 	.word	0x200003b8

08012344 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	0002      	movs	r2, r0
 801234c:	1dfb      	adds	r3, r7, #7
 801234e:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8012350:	1dfb      	adds	r3, r7, #7
 8012352:	781a      	ldrb	r2, [r3, #0]
 8012354:	491c      	ldr	r1, [pc, #112]	@ (80123c8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8012356:	0013      	movs	r3, r2
 8012358:	011b      	lsls	r3, r3, #4
 801235a:	1a9b      	subs	r3, r3, r2
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	18cb      	adds	r3, r1, r3
 8012360:	3334      	adds	r3, #52	@ 0x34
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2b01      	cmp	r3, #1
 8012366:	d002      	beq.n	801236e <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 8012368:	2b02      	cmp	r3, #2
 801236a:	d012      	beq.n	8012392 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 801236c:	e026      	b.n	80123bc <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 801236e:	1dfb      	adds	r3, r7, #7
 8012370:	781a      	ldrb	r2, [r3, #0]
 8012372:	4915      	ldr	r1, [pc, #84]	@ (80123c8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8012374:	0013      	movs	r3, r2
 8012376:	011b      	lsls	r3, r3, #4
 8012378:	1a9b      	subs	r3, r3, r2
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	585b      	ldr	r3, [r3, r1]
 801237e:	695a      	ldr	r2, [r3, #20]
 8012380:	23c0      	movs	r3, #192	@ 0xc0
 8012382:	029b      	lsls	r3, r3, #10
 8012384:	401a      	ands	r2, r3
 8012386:	23c0      	movs	r3, #192	@ 0xc0
 8012388:	029b      	lsls	r3, r3, #10
 801238a:	429a      	cmp	r2, r3
 801238c:	d113      	bne.n	80123b6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 801238e:	2301      	movs	r3, #1
 8012390:	e015      	b.n	80123be <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8012392:	1dfb      	adds	r3, r7, #7
 8012394:	781a      	ldrb	r2, [r3, #0]
 8012396:	490c      	ldr	r1, [pc, #48]	@ (80123c8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8012398:	0013      	movs	r3, r2
 801239a:	011b      	lsls	r3, r3, #4
 801239c:	1a9b      	subs	r3, r3, r2
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	585b      	ldr	r3, [r3, r1]
 80123a2:	695a      	ldr	r2, [r3, #20]
 80123a4:	23c0      	movs	r3, #192	@ 0xc0
 80123a6:	031b      	lsls	r3, r3, #12
 80123a8:	401a      	ands	r2, r3
 80123aa:	23c0      	movs	r3, #192	@ 0xc0
 80123ac:	031b      	lsls	r3, r3, #12
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d103      	bne.n	80123ba <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 80123b2:	2301      	movs	r3, #1
 80123b4:	e003      	b.n	80123be <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 80123b6:	46c0      	nop			@ (mov r8, r8)
 80123b8:	e000      	b.n	80123bc <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 80123ba:	46c0      	nop			@ (mov r8, r8)
  }

  return USBPD_FALSE;
 80123bc:	2300      	movs	r3, #0
}
 80123be:	0018      	movs	r0, r3
 80123c0:	46bd      	mov	sp, r7
 80123c2:	b002      	add	sp, #8
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	46c0      	nop			@ (mov r8, r8)
 80123c8:	200003b8 	.word	0x200003b8

080123cc <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	0002      	movs	r2, r0
 80123d4:	1dfb      	adds	r3, r7, #7
 80123d6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 80123d8:	1dfb      	adds	r3, r7, #7
 80123da:	781a      	ldrb	r2, [r3, #0]
 80123dc:	4906      	ldr	r1, [pc, #24]	@ (80123f8 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 80123de:	0013      	movs	r3, r2
 80123e0:	011b      	lsls	r3, r3, #4
 80123e2:	1a9b      	subs	r3, r3, r2
 80123e4:	009b      	lsls	r3, r3, #2
 80123e6:	585b      	ldr	r3, [r3, r1]
 80123e8:	0018      	movs	r0, r3
 80123ea:	f7ff f86c 	bl	80114c6 <LL_UCPD_SignalFRSTX>
}
 80123ee:	46c0      	nop			@ (mov r8, r8)
 80123f0:	46bd      	mov	sp, r7
 80123f2:	b002      	add	sp, #8
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	46c0      	nop			@ (mov r8, r8)
 80123f8:	200003b8 	.word	0x200003b8

080123fc <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af00      	add	r7, sp, #0
 8012402:	0002      	movs	r2, r0
 8012404:	1dfb      	adds	r3, r7, #7
 8012406:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8012408:	1dfb      	adds	r3, r7, #7
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	220c      	movs	r2, #12
 801240e:	18ba      	adds	r2, r7, r2
 8012410:	0011      	movs	r1, r2
 8012412:	0018      	movs	r0, r3
 8012414:	f006 fb04 	bl	8018a20 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	b29b      	uxth	r3, r3
}
 801241c:	0018      	movs	r0, r3
 801241e:	46bd      	mov	sp, r7
 8012420:	b004      	add	sp, #16
 8012422:	bd80      	pop	{r7, pc}

08012424 <LL_APB2_GRP1_EnableClock>:
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b084      	sub	sp, #16
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 801242c:	4b07      	ldr	r3, [pc, #28]	@ (801244c <LL_APB2_GRP1_EnableClock+0x28>)
 801242e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8012430:	4b06      	ldr	r3, [pc, #24]	@ (801244c <LL_APB2_GRP1_EnableClock+0x28>)
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	430a      	orrs	r2, r1
 8012436:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8012438:	4b04      	ldr	r3, [pc, #16]	@ (801244c <LL_APB2_GRP1_EnableClock+0x28>)
 801243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	4013      	ands	r3, r2
 8012440:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012442:	68fb      	ldr	r3, [r7, #12]
}
 8012444:	46c0      	nop			@ (mov r8, r8)
 8012446:	46bd      	mov	sp, r7
 8012448:	b004      	add	sp, #16
 801244a:	bd80      	pop	{r7, pc}
 801244c:	40021000 	.word	0x40021000

08012450 <LL_APB2_GRP1_DisableClock>:
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 8012458:	4b05      	ldr	r3, [pc, #20]	@ (8012470 <LL_APB2_GRP1_DisableClock+0x20>)
 801245a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	43d9      	mvns	r1, r3
 8012460:	4b03      	ldr	r3, [pc, #12]	@ (8012470 <LL_APB2_GRP1_DisableClock+0x20>)
 8012462:	400a      	ands	r2, r1
 8012464:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8012466:	46c0      	nop			@ (mov r8, r8)
 8012468:	46bd      	mov	sp, r7
 801246a:	b002      	add	sp, #8
 801246c:	bd80      	pop	{r7, pc}
 801246e:	46c0      	nop			@ (mov r8, r8)
 8012470:	40021000 	.word	0x40021000

08012474 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2201      	movs	r2, #1
 8012482:	431a      	orrs	r2, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	601a      	str	r2, [r3, #0]
}
 8012488:	46c0      	nop			@ (mov r8, r8)
 801248a:	46bd      	mov	sp, r7
 801248c:	b002      	add	sp, #8
 801248e:	bd80      	pop	{r7, pc}

08012490 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2270      	movs	r2, #112	@ 0x70
 80124a0:	4393      	bics	r3, r2
 80124a2:	001a      	movs	r2, r3
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	431a      	orrs	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	601a      	str	r2, [r3, #0]
}
 80124ac:	46c0      	nop			@ (mov r8, r8)
 80124ae:	46bd      	mov	sp, r7
 80124b0:	b002      	add	sp, #8
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	683a      	ldr	r2, [r7, #0]
 80124c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80124c4:	46c0      	nop			@ (mov r8, r8)
 80124c6:	46bd      	mov	sp, r7
 80124c8:	b002      	add	sp, #8
 80124ca:	bd80      	pop	{r7, pc}

080124cc <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80124d8:	0018      	movs	r0, r3
 80124da:	46bd      	mov	sp, r7
 80124dc:	b002      	add	sp, #8
 80124de:	bd80      	pop	{r7, pc}

080124e0 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	683a      	ldr	r2, [r7, #0]
 80124ee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80124f0:	46c0      	nop			@ (mov r8, r8)
 80124f2:	46bd      	mov	sp, r7
 80124f4:	b002      	add	sp, #8
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b086      	sub	sp, #24
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	2b01      	cmp	r3, #1
 8012508:	d02c      	beq.n	8012564 <LL_TIM_OC_SetMode+0x6c>
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	2b04      	cmp	r3, #4
 801250e:	d027      	beq.n	8012560 <LL_TIM_OC_SetMode+0x68>
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	2b10      	cmp	r3, #16
 8012514:	d022      	beq.n	801255c <LL_TIM_OC_SetMode+0x64>
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	2b40      	cmp	r3, #64	@ 0x40
 801251a:	d01d      	beq.n	8012558 <LL_TIM_OC_SetMode+0x60>
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	2380      	movs	r3, #128	@ 0x80
 8012520:	005b      	lsls	r3, r3, #1
 8012522:	429a      	cmp	r2, r3
 8012524:	d016      	beq.n	8012554 <LL_TIM_OC_SetMode+0x5c>
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	2380      	movs	r3, #128	@ 0x80
 801252a:	00db      	lsls	r3, r3, #3
 801252c:	429a      	cmp	r2, r3
 801252e:	d00f      	beq.n	8012550 <LL_TIM_OC_SetMode+0x58>
 8012530:	68ba      	ldr	r2, [r7, #8]
 8012532:	2380      	movs	r3, #128	@ 0x80
 8012534:	015b      	lsls	r3, r3, #5
 8012536:	429a      	cmp	r2, r3
 8012538:	d008      	beq.n	801254c <LL_TIM_OC_SetMode+0x54>
 801253a:	68ba      	ldr	r2, [r7, #8]
 801253c:	2380      	movs	r3, #128	@ 0x80
 801253e:	025b      	lsls	r3, r3, #9
 8012540:	429a      	cmp	r2, r3
 8012542:	d101      	bne.n	8012548 <LL_TIM_OC_SetMode+0x50>
 8012544:	2307      	movs	r3, #7
 8012546:	e00e      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 8012548:	2308      	movs	r3, #8
 801254a:	e00c      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 801254c:	2306      	movs	r3, #6
 801254e:	e00a      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 8012550:	2305      	movs	r3, #5
 8012552:	e008      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 8012554:	2304      	movs	r3, #4
 8012556:	e006      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 8012558:	2303      	movs	r3, #3
 801255a:	e004      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 801255c:	2302      	movs	r3, #2
 801255e:	e002      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 8012560:	2301      	movs	r3, #1
 8012562:	e000      	b.n	8012566 <LL_TIM_OC_SetMode+0x6e>
 8012564:	2300      	movs	r3, #0
 8012566:	2017      	movs	r0, #23
 8012568:	183a      	adds	r2, r7, r0
 801256a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	3318      	adds	r3, #24
 8012570:	0019      	movs	r1, r3
 8012572:	183b      	adds	r3, r7, r0
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	4a0e      	ldr	r2, [pc, #56]	@ (80125b0 <LL_TIM_OC_SetMode+0xb8>)
 8012578:	5cd3      	ldrb	r3, [r2, r3]
 801257a:	18cb      	adds	r3, r1, r3
 801257c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	183a      	adds	r2, r7, r0
 8012584:	7812      	ldrb	r2, [r2, #0]
 8012586:	490b      	ldr	r1, [pc, #44]	@ (80125b4 <LL_TIM_OC_SetMode+0xbc>)
 8012588:	5c8a      	ldrb	r2, [r1, r2]
 801258a:	0011      	movs	r1, r2
 801258c:	4a0a      	ldr	r2, [pc, #40]	@ (80125b8 <LL_TIM_OC_SetMode+0xc0>)
 801258e:	408a      	lsls	r2, r1
 8012590:	43d2      	mvns	r2, r2
 8012592:	401a      	ands	r2, r3
 8012594:	183b      	adds	r3, r7, r0
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	4906      	ldr	r1, [pc, #24]	@ (80125b4 <LL_TIM_OC_SetMode+0xbc>)
 801259a:	5ccb      	ldrb	r3, [r1, r3]
 801259c:	0019      	movs	r1, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	408b      	lsls	r3, r1
 80125a2:	431a      	orrs	r2, r3
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	601a      	str	r2, [r3, #0]
}
 80125a8:	46c0      	nop			@ (mov r8, r8)
 80125aa:	46bd      	mov	sp, r7
 80125ac:	b006      	add	sp, #24
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	08019af4 	.word	0x08019af4
 80125b4:	08019b00 	.word	0x08019b00
 80125b8:	00010073 	.word	0x00010073

080125bc <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b086      	sub	sp, #24
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d02c      	beq.n	8012628 <LL_TIM_OC_SetPolarity+0x6c>
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	2b04      	cmp	r3, #4
 80125d2:	d027      	beq.n	8012624 <LL_TIM_OC_SetPolarity+0x68>
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	2b10      	cmp	r3, #16
 80125d8:	d022      	beq.n	8012620 <LL_TIM_OC_SetPolarity+0x64>
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	2b40      	cmp	r3, #64	@ 0x40
 80125de:	d01d      	beq.n	801261c <LL_TIM_OC_SetPolarity+0x60>
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	2380      	movs	r3, #128	@ 0x80
 80125e4:	005b      	lsls	r3, r3, #1
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d016      	beq.n	8012618 <LL_TIM_OC_SetPolarity+0x5c>
 80125ea:	68ba      	ldr	r2, [r7, #8]
 80125ec:	2380      	movs	r3, #128	@ 0x80
 80125ee:	00db      	lsls	r3, r3, #3
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d00f      	beq.n	8012614 <LL_TIM_OC_SetPolarity+0x58>
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	2380      	movs	r3, #128	@ 0x80
 80125f8:	015b      	lsls	r3, r3, #5
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d008      	beq.n	8012610 <LL_TIM_OC_SetPolarity+0x54>
 80125fe:	68ba      	ldr	r2, [r7, #8]
 8012600:	2380      	movs	r3, #128	@ 0x80
 8012602:	025b      	lsls	r3, r3, #9
 8012604:	429a      	cmp	r2, r3
 8012606:	d101      	bne.n	801260c <LL_TIM_OC_SetPolarity+0x50>
 8012608:	2307      	movs	r3, #7
 801260a:	e00e      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 801260c:	2308      	movs	r3, #8
 801260e:	e00c      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 8012610:	2306      	movs	r3, #6
 8012612:	e00a      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 8012614:	2305      	movs	r3, #5
 8012616:	e008      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 8012618:	2304      	movs	r3, #4
 801261a:	e006      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 801261c:	2303      	movs	r3, #3
 801261e:	e004      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 8012620:	2302      	movs	r3, #2
 8012622:	e002      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 8012624:	2301      	movs	r3, #1
 8012626:	e000      	b.n	801262a <LL_TIM_OC_SetPolarity+0x6e>
 8012628:	2300      	movs	r3, #0
 801262a:	2017      	movs	r0, #23
 801262c:	183a      	adds	r2, r7, r0
 801262e:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	6a1b      	ldr	r3, [r3, #32]
 8012634:	183a      	adds	r2, r7, r0
 8012636:	7812      	ldrb	r2, [r2, #0]
 8012638:	490a      	ldr	r1, [pc, #40]	@ (8012664 <LL_TIM_OC_SetPolarity+0xa8>)
 801263a:	5c8a      	ldrb	r2, [r1, r2]
 801263c:	0011      	movs	r1, r2
 801263e:	2202      	movs	r2, #2
 8012640:	408a      	lsls	r2, r1
 8012642:	43d2      	mvns	r2, r2
 8012644:	401a      	ands	r2, r3
 8012646:	183b      	adds	r3, r7, r0
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	4906      	ldr	r1, [pc, #24]	@ (8012664 <LL_TIM_OC_SetPolarity+0xa8>)
 801264c:	5ccb      	ldrb	r3, [r1, r3]
 801264e:	0019      	movs	r1, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	408b      	lsls	r3, r1
 8012654:	431a      	orrs	r2, r3
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	621a      	str	r2, [r3, #32]
}
 801265a:	46c0      	nop			@ (mov r8, r8)
 801265c:	46bd      	mov	sp, r7
 801265e:	b006      	add	sp, #24
 8012660:	bd80      	pop	{r7, pc}
 8012662:	46c0      	nop			@ (mov r8, r8)
 8012664:	08019b0c 	.word	0x08019b0c

08012668 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	683a      	ldr	r2, [r7, #0]
 8012676:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012678:	46c0      	nop			@ (mov r8, r8)
 801267a:	46bd      	mov	sp, r7
 801267c:	b002      	add	sp, #8
 801267e:	bd80      	pop	{r7, pc}

08012680 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	683a      	ldr	r2, [r7, #0]
 801268e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012690:	46c0      	nop			@ (mov r8, r8)
 8012692:	46bd      	mov	sp, r7
 8012694:	b002      	add	sp, #8
 8012696:	bd80      	pop	{r7, pc}

08012698 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80126a8:	46c0      	nop			@ (mov r8, r8)
 80126aa:	46bd      	mov	sp, r7
 80126ac:	b002      	add	sp, #8
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	683a      	ldr	r2, [r7, #0]
 80126be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80126c0:	46c0      	nop			@ (mov r8, r8)
 80126c2:	46bd      	mov	sp, r7
 80126c4:	b002      	add	sp, #8
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2203      	movs	r2, #3
 80126d4:	4252      	negs	r2, r2
 80126d6:	611a      	str	r2, [r3, #16]
}
 80126d8:	46c0      	nop			@ (mov r8, r8)
 80126da:	46bd      	mov	sp, r7
 80126dc:	b002      	add	sp, #8
 80126de:	bd80      	pop	{r7, pc}

080126e0 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	691b      	ldr	r3, [r3, #16]
 80126ec:	2202      	movs	r2, #2
 80126ee:	4013      	ands	r3, r2
 80126f0:	2b02      	cmp	r3, #2
 80126f2:	d101      	bne.n	80126f8 <LL_TIM_IsActiveFlag_CC1+0x18>
 80126f4:	2301      	movs	r3, #1
 80126f6:	e000      	b.n	80126fa <LL_TIM_IsActiveFlag_CC1+0x1a>
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	0018      	movs	r0, r3
 80126fc:	46bd      	mov	sp, r7
 80126fe:	b002      	add	sp, #8
 8012700:	bd80      	pop	{r7, pc}

08012702 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8012702:	b580      	push	{r7, lr}
 8012704:	b082      	sub	sp, #8
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2205      	movs	r2, #5
 801270e:	4252      	negs	r2, r2
 8012710:	611a      	str	r2, [r3, #16]
}
 8012712:	46c0      	nop			@ (mov r8, r8)
 8012714:	46bd      	mov	sp, r7
 8012716:	b002      	add	sp, #8
 8012718:	bd80      	pop	{r7, pc}

0801271a <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 801271a:	b580      	push	{r7, lr}
 801271c:	b082      	sub	sp, #8
 801271e:	af00      	add	r7, sp, #0
 8012720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	691b      	ldr	r3, [r3, #16]
 8012726:	2204      	movs	r2, #4
 8012728:	4013      	ands	r3, r2
 801272a:	2b04      	cmp	r3, #4
 801272c:	d101      	bne.n	8012732 <LL_TIM_IsActiveFlag_CC2+0x18>
 801272e:	2301      	movs	r3, #1
 8012730:	e000      	b.n	8012734 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8012732:	2300      	movs	r3, #0
}
 8012734:	0018      	movs	r0, r3
 8012736:	46bd      	mov	sp, r7
 8012738:	b002      	add	sp, #8
 801273a:	bd80      	pop	{r7, pc}

0801273c <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2209      	movs	r2, #9
 8012748:	4252      	negs	r2, r2
 801274a:	611a      	str	r2, [r3, #16]
}
 801274c:	46c0      	nop			@ (mov r8, r8)
 801274e:	46bd      	mov	sp, r7
 8012750:	b002      	add	sp, #8
 8012752:	bd80      	pop	{r7, pc}

08012754 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	2208      	movs	r2, #8
 8012762:	4013      	ands	r3, r2
 8012764:	2b08      	cmp	r3, #8
 8012766:	d101      	bne.n	801276c <LL_TIM_IsActiveFlag_CC3+0x18>
 8012768:	2301      	movs	r3, #1
 801276a:	e000      	b.n	801276e <LL_TIM_IsActiveFlag_CC3+0x1a>
 801276c:	2300      	movs	r3, #0
}
 801276e:	0018      	movs	r0, r3
 8012770:	46bd      	mov	sp, r7
 8012772:	b002      	add	sp, #8
 8012774:	bd80      	pop	{r7, pc}

08012776 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8012776:	b580      	push	{r7, lr}
 8012778:	b082      	sub	sp, #8
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2211      	movs	r2, #17
 8012782:	4252      	negs	r2, r2
 8012784:	611a      	str	r2, [r3, #16]
}
 8012786:	46c0      	nop			@ (mov r8, r8)
 8012788:	46bd      	mov	sp, r7
 801278a:	b002      	add	sp, #8
 801278c:	bd80      	pop	{r7, pc}

0801278e <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	691b      	ldr	r3, [r3, #16]
 801279a:	2210      	movs	r2, #16
 801279c:	4013      	ands	r3, r2
 801279e:	2b10      	cmp	r3, #16
 80127a0:	d101      	bne.n	80127a6 <LL_TIM_IsActiveFlag_CC4+0x18>
 80127a2:	2301      	movs	r3, #1
 80127a4:	e000      	b.n	80127a8 <LL_TIM_IsActiveFlag_CC4+0x1a>
 80127a6:	2300      	movs	r3, #0
}
 80127a8:	0018      	movs	r0, r3
 80127aa:	46bd      	mov	sp, r7
 80127ac:	b002      	add	sp, #8
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 80127b0:	b5b0      	push	{r4, r5, r7, lr}
 80127b2:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 80127b4:	4b48      	ldr	r3, [pc, #288]	@ (80128d8 <USBPD_TIM_Init+0x128>)
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	b25b      	sxtb	r3, r3
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d000      	beq.n	80127c0 <USBPD_TIM_Init+0x10>
 80127be:	e07e      	b.n	80128be <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 80127c0:	2380      	movs	r3, #128	@ 0x80
 80127c2:	011b      	lsls	r3, r3, #4
 80127c4:	0018      	movs	r0, r3
 80127c6:	f7ff fe2d 	bl	8012424 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 80127ca:	4b44      	ldr	r3, [pc, #272]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 80127cc:	2100      	movs	r1, #0
 80127ce:	0018      	movs	r0, r3
 80127d0:	f7ff fe5e 	bl	8012490 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 80127d4:	4b42      	ldr	r3, [pc, #264]	@ (80128e0 <USBPD_TIM_Init+0x130>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a42      	ldr	r2, [pc, #264]	@ (80128e4 <USBPD_TIM_Init+0x134>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d90b      	bls.n	80127f6 <USBPD_TIM_Init+0x46>
 80127de:	4b40      	ldr	r3, [pc, #256]	@ (80128e0 <USBPD_TIM_Init+0x130>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4a41      	ldr	r2, [pc, #260]	@ (80128e8 <USBPD_TIM_Init+0x138>)
 80127e4:	4694      	mov	ip, r2
 80127e6:	4463      	add	r3, ip
 80127e8:	4940      	ldr	r1, [pc, #256]	@ (80128ec <USBPD_TIM_Init+0x13c>)
 80127ea:	0018      	movs	r0, r3
 80127ec:	f7f3 fcee 	bl	80061cc <__udivsi3>
 80127f0:	0003      	movs	r3, r0
 80127f2:	3b01      	subs	r3, #1
 80127f4:	e000      	b.n	80127f8 <USBPD_TIM_Init+0x48>
 80127f6:	2300      	movs	r3, #0
 80127f8:	4a38      	ldr	r2, [pc, #224]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 80127fa:	0019      	movs	r1, r3
 80127fc:	0010      	movs	r0, r2
 80127fe:	f7ff fe59 	bl	80124b4 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8012802:	4b37      	ldr	r3, [pc, #220]	@ (80128e0 <USBPD_TIM_Init+0x130>)
 8012804:	681c      	ldr	r4, [r3, #0]
 8012806:	4b35      	ldr	r3, [pc, #212]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 8012808:	0018      	movs	r0, r3
 801280a:	f7ff fe5f 	bl	80124cc <LL_TIM_GetPrescaler>
 801280e:	0003      	movs	r3, r0
 8012810:	3301      	adds	r3, #1
 8012812:	0019      	movs	r1, r3
 8012814:	0020      	movs	r0, r4
 8012816:	f7f3 fcd9 	bl	80061cc <__udivsi3>
 801281a:	0003      	movs	r3, r0
 801281c:	2b63      	cmp	r3, #99	@ 0x63
 801281e:	d910      	bls.n	8012842 <USBPD_TIM_Init+0x92>
 8012820:	4b2f      	ldr	r3, [pc, #188]	@ (80128e0 <USBPD_TIM_Init+0x130>)
 8012822:	681c      	ldr	r4, [r3, #0]
 8012824:	4b2d      	ldr	r3, [pc, #180]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 8012826:	0018      	movs	r0, r3
 8012828:	f7ff fe50 	bl	80124cc <LL_TIM_GetPrescaler>
 801282c:	0003      	movs	r3, r0
 801282e:	3301      	adds	r3, #1
 8012830:	2264      	movs	r2, #100	@ 0x64
 8012832:	4353      	muls	r3, r2
 8012834:	0019      	movs	r1, r3
 8012836:	0020      	movs	r0, r4
 8012838:	f7f3 fcc8 	bl	80061cc <__udivsi3>
 801283c:	0003      	movs	r3, r0
 801283e:	3b01      	subs	r3, #1
 8012840:	e000      	b.n	8012844 <USBPD_TIM_Init+0x94>
 8012842:	2300      	movs	r3, #0
 8012844:	4a25      	ldr	r2, [pc, #148]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 8012846:	0019      	movs	r1, r3
 8012848:	0010      	movs	r0, r2
 801284a:	f7ff fe49 	bl	80124e0 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 801284e:	4b23      	ldr	r3, [pc, #140]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 8012850:	2230      	movs	r2, #48	@ 0x30
 8012852:	2101      	movs	r1, #1
 8012854:	0018      	movs	r0, r3
 8012856:	f7ff fe4f 	bl	80124f8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 801285a:	4b20      	ldr	r3, [pc, #128]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 801285c:	2230      	movs	r2, #48	@ 0x30
 801285e:	2110      	movs	r1, #16
 8012860:	0018      	movs	r0, r3
 8012862:	f7ff fe49 	bl	80124f8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8012866:	2380      	movs	r3, #128	@ 0x80
 8012868:	005b      	lsls	r3, r3, #1
 801286a:	481c      	ldr	r0, [pc, #112]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 801286c:	2230      	movs	r2, #48	@ 0x30
 801286e:	0019      	movs	r1, r3
 8012870:	f7ff fe42 	bl	80124f8 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8012874:	2380      	movs	r3, #128	@ 0x80
 8012876:	015b      	lsls	r3, r3, #5
 8012878:	4818      	ldr	r0, [pc, #96]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 801287a:	2230      	movs	r2, #48	@ 0x30
 801287c:	0019      	movs	r1, r3
 801287e:	f7ff fe3b 	bl	80124f8 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8012882:	4b16      	ldr	r3, [pc, #88]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 8012884:	2200      	movs	r2, #0
 8012886:	2101      	movs	r1, #1
 8012888:	0018      	movs	r0, r3
 801288a:	f7ff fe97 	bl	80125bc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 801288e:	4b13      	ldr	r3, [pc, #76]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 8012890:	2200      	movs	r2, #0
 8012892:	2110      	movs	r1, #16
 8012894:	0018      	movs	r0, r3
 8012896:	f7ff fe91 	bl	80125bc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 801289a:	2380      	movs	r3, #128	@ 0x80
 801289c:	005b      	lsls	r3, r3, #1
 801289e:	480f      	ldr	r0, [pc, #60]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 80128a0:	2200      	movs	r2, #0
 80128a2:	0019      	movs	r1, r3
 80128a4:	f7ff fe8a 	bl	80125bc <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 80128a8:	2380      	movs	r3, #128	@ 0x80
 80128aa:	015b      	lsls	r3, r3, #5
 80128ac:	480b      	ldr	r0, [pc, #44]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 80128ae:	2200      	movs	r2, #0
 80128b0:	0019      	movs	r1, r3
 80128b2:	f7ff fe83 	bl	80125bc <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 80128b6:	4b09      	ldr	r3, [pc, #36]	@ (80128dc <USBPD_TIM_Init+0x12c>)
 80128b8:	0018      	movs	r0, r3
 80128ba:	f7ff fddb 	bl	8012474 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80128be:	4b06      	ldr	r3, [pc, #24]	@ (80128d8 <USBPD_TIM_Init+0x128>)
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	b25b      	sxtb	r3, r3
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	3301      	adds	r3, #1
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	b25a      	sxtb	r2, r3
 80128cc:	4b02      	ldr	r3, [pc, #8]	@ (80128d8 <USBPD_TIM_Init+0x128>)
 80128ce:	701a      	strb	r2, [r3, #0]
}
 80128d0:	46c0      	nop			@ (mov r8, r8)
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bdb0      	pop	{r4, r5, r7, pc}
 80128d6:	46c0      	nop			@ (mov r8, r8)
 80128d8:	200003f4 	.word	0x200003f4
 80128dc:	40012c00 	.word	0x40012c00
 80128e0:	20000028 	.word	0x20000028
 80128e4:	000f423f 	.word	0x000f423f
 80128e8:	0007a120 	.word	0x0007a120
 80128ec:	000f4240 	.word	0x000f4240

080128f0 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	af00      	add	r7, sp, #0
  timer_initcounter--;
 80128f4:	4b0a      	ldr	r3, [pc, #40]	@ (8012920 <USBPD_TIM_DeInit+0x30>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	b25b      	sxtb	r3, r3
 80128fa:	b2db      	uxtb	r3, r3
 80128fc:	3b01      	subs	r3, #1
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	b25a      	sxtb	r2, r3
 8012902:	4b07      	ldr	r3, [pc, #28]	@ (8012920 <USBPD_TIM_DeInit+0x30>)
 8012904:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8012906:	4b06      	ldr	r3, [pc, #24]	@ (8012920 <USBPD_TIM_DeInit+0x30>)
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	b25b      	sxtb	r3, r3
 801290c:	2b00      	cmp	r3, #0
 801290e:	d104      	bne.n	801291a <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8012910:	2380      	movs	r3, #128	@ 0x80
 8012912:	011b      	lsls	r3, r3, #4
 8012914:	0018      	movs	r0, r3
 8012916:	f7ff fd9b 	bl	8012450 <LL_APB2_GRP1_DisableClock>
  }
}
 801291a:	46c0      	nop			@ (mov r8, r8)
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	200003f4 	.word	0x200003f4

08012924 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	0002      	movs	r2, r0
 801292c:	6039      	str	r1, [r7, #0]
 801292e:	1dfb      	adds	r3, r7, #7
 8012930:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8012932:	1dfb      	adds	r3, r7, #7
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	2b03      	cmp	r3, #3
 8012938:	d044      	beq.n	80129c4 <USBPD_TIM_Start+0xa0>
 801293a:	dc57      	bgt.n	80129ec <USBPD_TIM_Start+0xc8>
 801293c:	2b02      	cmp	r3, #2
 801293e:	d02d      	beq.n	801299c <USBPD_TIM_Start+0x78>
 8012940:	dc54      	bgt.n	80129ec <USBPD_TIM_Start+0xc8>
 8012942:	2b00      	cmp	r3, #0
 8012944:	d002      	beq.n	801294c <USBPD_TIM_Start+0x28>
 8012946:	2b01      	cmp	r3, #1
 8012948:	d014      	beq.n	8012974 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 801294a:	e04f      	b.n	80129ec <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 801294c:	4b2a      	ldr	r3, [pc, #168]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 801294e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	18d3      	adds	r3, r2, r3
 8012954:	4929      	ldr	r1, [pc, #164]	@ (80129fc <USBPD_TIM_Start+0xd8>)
 8012956:	0018      	movs	r0, r3
 8012958:	f7f3 fcbe 	bl	80062d8 <__aeabi_uidivmod>
 801295c:	000b      	movs	r3, r1
 801295e:	001a      	movs	r2, r3
 8012960:	4b25      	ldr	r3, [pc, #148]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 8012962:	0011      	movs	r1, r2
 8012964:	0018      	movs	r0, r3
 8012966:	f7ff fe7f 	bl	8012668 <LL_TIM_OC_SetCompareCH1>
 801296a:	4b23      	ldr	r3, [pc, #140]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 801296c:	0018      	movs	r0, r3
 801296e:	f7ff feab 	bl	80126c8 <LL_TIM_ClearFlag_CC1>
      break;
 8012972:	e03c      	b.n	80129ee <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 8012974:	4b20      	ldr	r3, [pc, #128]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 8012976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	18d3      	adds	r3, r2, r3
 801297c:	491f      	ldr	r1, [pc, #124]	@ (80129fc <USBPD_TIM_Start+0xd8>)
 801297e:	0018      	movs	r0, r3
 8012980:	f7f3 fcaa 	bl	80062d8 <__aeabi_uidivmod>
 8012984:	000b      	movs	r3, r1
 8012986:	001a      	movs	r2, r3
 8012988:	4b1b      	ldr	r3, [pc, #108]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 801298a:	0011      	movs	r1, r2
 801298c:	0018      	movs	r0, r3
 801298e:	f7ff fe77 	bl	8012680 <LL_TIM_OC_SetCompareCH2>
 8012992:	4b19      	ldr	r3, [pc, #100]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 8012994:	0018      	movs	r0, r3
 8012996:	f7ff feb4 	bl	8012702 <LL_TIM_ClearFlag_CC2>
      break;
 801299a:	e028      	b.n	80129ee <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 801299c:	4b16      	ldr	r3, [pc, #88]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 801299e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	18d3      	adds	r3, r2, r3
 80129a4:	4915      	ldr	r1, [pc, #84]	@ (80129fc <USBPD_TIM_Start+0xd8>)
 80129a6:	0018      	movs	r0, r3
 80129a8:	f7f3 fc96 	bl	80062d8 <__aeabi_uidivmod>
 80129ac:	000b      	movs	r3, r1
 80129ae:	001a      	movs	r2, r3
 80129b0:	4b11      	ldr	r3, [pc, #68]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 80129b2:	0011      	movs	r1, r2
 80129b4:	0018      	movs	r0, r3
 80129b6:	f7ff fe6f 	bl	8012698 <LL_TIM_OC_SetCompareCH3>
 80129ba:	4b0f      	ldr	r3, [pc, #60]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 80129bc:	0018      	movs	r0, r3
 80129be:	f7ff febd 	bl	801273c <LL_TIM_ClearFlag_CC3>
      break;
 80129c2:	e014      	b.n	80129ee <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 80129c4:	4b0c      	ldr	r3, [pc, #48]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 80129c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	18d3      	adds	r3, r2, r3
 80129cc:	490b      	ldr	r1, [pc, #44]	@ (80129fc <USBPD_TIM_Start+0xd8>)
 80129ce:	0018      	movs	r0, r3
 80129d0:	f7f3 fc82 	bl	80062d8 <__aeabi_uidivmod>
 80129d4:	000b      	movs	r3, r1
 80129d6:	001a      	movs	r2, r3
 80129d8:	4b07      	ldr	r3, [pc, #28]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 80129da:	0011      	movs	r1, r2
 80129dc:	0018      	movs	r0, r3
 80129de:	f7ff fe67 	bl	80126b0 <LL_TIM_OC_SetCompareCH4>
 80129e2:	4b05      	ldr	r3, [pc, #20]	@ (80129f8 <USBPD_TIM_Start+0xd4>)
 80129e4:	0018      	movs	r0, r3
 80129e6:	f7ff fec6 	bl	8012776 <LL_TIM_ClearFlag_CC4>
      break;
 80129ea:	e000      	b.n	80129ee <USBPD_TIM_Start+0xca>
      break;
 80129ec:	46c0      	nop			@ (mov r8, r8)
  }
}
 80129ee:	46c0      	nop			@ (mov r8, r8)
 80129f0:	46bd      	mov	sp, r7
 80129f2:	b002      	add	sp, #8
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	46c0      	nop			@ (mov r8, r8)
 80129f8:	40012c00 	.word	0x40012c00
 80129fc:	00002710 	.word	0x00002710

08012a00 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	0002      	movs	r2, r0
 8012a08:	1dfb      	adds	r3, r7, #7
 8012a0a:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8012a10:	1dfb      	adds	r3, r7, #7
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	2b03      	cmp	r3, #3
 8012a16:	d01d      	beq.n	8012a54 <USBPD_TIM_IsExpired+0x54>
 8012a18:	dc23      	bgt.n	8012a62 <USBPD_TIM_IsExpired+0x62>
 8012a1a:	2b02      	cmp	r3, #2
 8012a1c:	d013      	beq.n	8012a46 <USBPD_TIM_IsExpired+0x46>
 8012a1e:	dc20      	bgt.n	8012a62 <USBPD_TIM_IsExpired+0x62>
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d002      	beq.n	8012a2a <USBPD_TIM_IsExpired+0x2a>
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d007      	beq.n	8012a38 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8012a28:	e01b      	b.n	8012a62 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8012a2a:	4b11      	ldr	r3, [pc, #68]	@ (8012a70 <USBPD_TIM_IsExpired+0x70>)
 8012a2c:	0018      	movs	r0, r3
 8012a2e:	f7ff fe57 	bl	80126e0 <LL_TIM_IsActiveFlag_CC1>
 8012a32:	0003      	movs	r3, r0
 8012a34:	60fb      	str	r3, [r7, #12]
      break;
 8012a36:	e015      	b.n	8012a64 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8012a38:	4b0d      	ldr	r3, [pc, #52]	@ (8012a70 <USBPD_TIM_IsExpired+0x70>)
 8012a3a:	0018      	movs	r0, r3
 8012a3c:	f7ff fe6d 	bl	801271a <LL_TIM_IsActiveFlag_CC2>
 8012a40:	0003      	movs	r3, r0
 8012a42:	60fb      	str	r3, [r7, #12]
      break;
 8012a44:	e00e      	b.n	8012a64 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8012a46:	4b0a      	ldr	r3, [pc, #40]	@ (8012a70 <USBPD_TIM_IsExpired+0x70>)
 8012a48:	0018      	movs	r0, r3
 8012a4a:	f7ff fe83 	bl	8012754 <LL_TIM_IsActiveFlag_CC3>
 8012a4e:	0003      	movs	r3, r0
 8012a50:	60fb      	str	r3, [r7, #12]
      break;
 8012a52:	e007      	b.n	8012a64 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8012a54:	4b06      	ldr	r3, [pc, #24]	@ (8012a70 <USBPD_TIM_IsExpired+0x70>)
 8012a56:	0018      	movs	r0, r3
 8012a58:	f7ff fe99 	bl	801278e <LL_TIM_IsActiveFlag_CC4>
 8012a5c:	0003      	movs	r3, r0
 8012a5e:	60fb      	str	r3, [r7, #12]
      break;
 8012a60:	e000      	b.n	8012a64 <USBPD_TIM_IsExpired+0x64>
      break;
 8012a62:	46c0      	nop			@ (mov r8, r8)
  }
  return _expired;
 8012a64:	68fb      	ldr	r3, [r7, #12]
}
 8012a66:	0018      	movs	r0, r3
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	b004      	add	sp, #16
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	46c0      	nop			@ (mov r8, r8)
 8012a70:	40012c00 	.word	0x40012c00

08012a74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b084      	sub	sp, #16
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	000a      	movs	r2, r1
 8012a7e:	1cfb      	adds	r3, r7, #3
 8012a80:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012a82:	2387      	movs	r3, #135	@ 0x87
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	0018      	movs	r0, r3
 8012a88:	f006 fd96 	bl	80195b8 <USBD_static_malloc>
 8012a8c:	0003      	movs	r3, r0
 8012a8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d10a      	bne.n	8012aac <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	23b5      	movs	r3, #181	@ 0xb5
 8012a9a:	009b      	lsls	r3, r3, #2
 8012a9c:	58d2      	ldr	r2, [r2, r3]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	32b0      	adds	r2, #176	@ 0xb0
 8012aa2:	0092      	lsls	r2, r2, #2
 8012aa4:	2100      	movs	r1, #0
 8012aa6:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8012aa8:	2302      	movs	r3, #2
 8012aaa:	e0e9      	b.n	8012c80 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012aac:	2387      	movs	r3, #135	@ 0x87
 8012aae:	009a      	lsls	r2, r3, #2
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	0018      	movs	r0, r3
 8012ab6:	f006 fe8d 	bl	80197d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012aba:	687a      	ldr	r2, [r7, #4]
 8012abc:	23b5      	movs	r3, #181	@ 0xb5
 8012abe:	009b      	lsls	r3, r3, #2
 8012ac0:	58d2      	ldr	r2, [r2, r3]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	32b0      	adds	r2, #176	@ 0xb0
 8012ac6:	0092      	lsls	r2, r2, #2
 8012ac8:	68f9      	ldr	r1, [r7, #12]
 8012aca:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	23b5      	movs	r3, #181	@ 0xb5
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	58d2      	ldr	r2, [r2, r3]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	32b0      	adds	r2, #176	@ 0xb0
 8012ad8:	0092      	lsls	r2, r2, #2
 8012ada:	58d1      	ldr	r1, [r2, r3]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	23af      	movs	r3, #175	@ 0xaf
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	7c1b      	ldrb	r3, [r3, #16]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d13c      	bne.n	8012b66 <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012aec:	4b66      	ldr	r3, [pc, #408]	@ (8012c88 <USBD_CDC_Init+0x214>)
 8012aee:	7819      	ldrb	r1, [r3, #0]
 8012af0:	2380      	movs	r3, #128	@ 0x80
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	2202      	movs	r2, #2
 8012af8:	f006 fb9b 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012afc:	4b62      	ldr	r3, [pc, #392]	@ (8012c88 <USBD_CDC_Init+0x214>)
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	001a      	movs	r2, r3
 8012b02:	230f      	movs	r3, #15
 8012b04:	401a      	ands	r2, r3
 8012b06:	6879      	ldr	r1, [r7, #4]
 8012b08:	0013      	movs	r3, r2
 8012b0a:	009b      	lsls	r3, r3, #2
 8012b0c:	189b      	adds	r3, r3, r2
 8012b0e:	009b      	lsls	r3, r3, #2
 8012b10:	18cb      	adds	r3, r1, r3
 8012b12:	3324      	adds	r3, #36	@ 0x24
 8012b14:	2201      	movs	r2, #1
 8012b16:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012b18:	4b5c      	ldr	r3, [pc, #368]	@ (8012c8c <USBD_CDC_Init+0x218>)
 8012b1a:	7819      	ldrb	r1, [r3, #0]
 8012b1c:	2380      	movs	r3, #128	@ 0x80
 8012b1e:	009b      	lsls	r3, r3, #2
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	2202      	movs	r2, #2
 8012b24:	f006 fb85 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012b28:	4b58      	ldr	r3, [pc, #352]	@ (8012c8c <USBD_CDC_Init+0x218>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	001a      	movs	r2, r3
 8012b2e:	230f      	movs	r3, #15
 8012b30:	401a      	ands	r2, r3
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	23b2      	movs	r3, #178	@ 0xb2
 8012b36:	0059      	lsls	r1, r3, #1
 8012b38:	0013      	movs	r3, r2
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	189b      	adds	r3, r3, r2
 8012b3e:	009b      	lsls	r3, r3, #2
 8012b40:	18c3      	adds	r3, r0, r3
 8012b42:	185b      	adds	r3, r3, r1
 8012b44:	2201      	movs	r2, #1
 8012b46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012b48:	4b51      	ldr	r3, [pc, #324]	@ (8012c90 <USBD_CDC_Init+0x21c>)
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	001a      	movs	r2, r3
 8012b4e:	230f      	movs	r3, #15
 8012b50:	401a      	ands	r2, r3
 8012b52:	6879      	ldr	r1, [r7, #4]
 8012b54:	0013      	movs	r3, r2
 8012b56:	009b      	lsls	r3, r3, #2
 8012b58:	189b      	adds	r3, r3, r2
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	18cb      	adds	r3, r1, r3
 8012b5e:	3326      	adds	r3, #38	@ 0x26
 8012b60:	2210      	movs	r2, #16
 8012b62:	801a      	strh	r2, [r3, #0]
 8012b64:	e039      	b.n	8012bda <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012b66:	4b48      	ldr	r3, [pc, #288]	@ (8012c88 <USBD_CDC_Init+0x214>)
 8012b68:	7819      	ldrb	r1, [r3, #0]
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	2340      	movs	r3, #64	@ 0x40
 8012b6e:	2202      	movs	r2, #2
 8012b70:	f006 fb5f 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012b74:	4b44      	ldr	r3, [pc, #272]	@ (8012c88 <USBD_CDC_Init+0x214>)
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	001a      	movs	r2, r3
 8012b7a:	230f      	movs	r3, #15
 8012b7c:	401a      	ands	r2, r3
 8012b7e:	6879      	ldr	r1, [r7, #4]
 8012b80:	0013      	movs	r3, r2
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	189b      	adds	r3, r3, r2
 8012b86:	009b      	lsls	r3, r3, #2
 8012b88:	18cb      	adds	r3, r1, r3
 8012b8a:	3324      	adds	r3, #36	@ 0x24
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012b90:	4b3e      	ldr	r3, [pc, #248]	@ (8012c8c <USBD_CDC_Init+0x218>)
 8012b92:	7819      	ldrb	r1, [r3, #0]
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	2340      	movs	r3, #64	@ 0x40
 8012b98:	2202      	movs	r2, #2
 8012b9a:	f006 fb4a 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8012c8c <USBD_CDC_Init+0x218>)
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	001a      	movs	r2, r3
 8012ba4:	230f      	movs	r3, #15
 8012ba6:	401a      	ands	r2, r3
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	23b2      	movs	r3, #178	@ 0xb2
 8012bac:	0059      	lsls	r1, r3, #1
 8012bae:	0013      	movs	r3, r2
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	189b      	adds	r3, r3, r2
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	18c3      	adds	r3, r0, r3
 8012bb8:	185b      	adds	r3, r3, r1
 8012bba:	2201      	movs	r2, #1
 8012bbc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012bbe:	4b34      	ldr	r3, [pc, #208]	@ (8012c90 <USBD_CDC_Init+0x21c>)
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	001a      	movs	r2, r3
 8012bc4:	230f      	movs	r3, #15
 8012bc6:	401a      	ands	r2, r3
 8012bc8:	6879      	ldr	r1, [r7, #4]
 8012bca:	0013      	movs	r3, r2
 8012bcc:	009b      	lsls	r3, r3, #2
 8012bce:	189b      	adds	r3, r3, r2
 8012bd0:	009b      	lsls	r3, r3, #2
 8012bd2:	18cb      	adds	r3, r1, r3
 8012bd4:	3326      	adds	r3, #38	@ 0x26
 8012bd6:	2210      	movs	r2, #16
 8012bd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012bda:	4b2d      	ldr	r3, [pc, #180]	@ (8012c90 <USBD_CDC_Init+0x21c>)
 8012bdc:	7819      	ldrb	r1, [r3, #0]
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	2308      	movs	r3, #8
 8012be2:	2203      	movs	r2, #3
 8012be4:	f006 fb25 	bl	8019232 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012be8:	4b29      	ldr	r3, [pc, #164]	@ (8012c90 <USBD_CDC_Init+0x21c>)
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	001a      	movs	r2, r3
 8012bee:	230f      	movs	r3, #15
 8012bf0:	401a      	ands	r2, r3
 8012bf2:	6879      	ldr	r1, [r7, #4]
 8012bf4:	0013      	movs	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	189b      	adds	r3, r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	18cb      	adds	r3, r1, r3
 8012bfe:	3324      	adds	r3, #36	@ 0x24
 8012c00:	2201      	movs	r2, #1
 8012c02:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	2381      	movs	r3, #129	@ 0x81
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	23b5      	movs	r3, #181	@ 0xb5
 8012c12:	009b      	lsls	r3, r3, #2
 8012c14:	58d3      	ldr	r3, [r2, r3]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	33b0      	adds	r3, #176	@ 0xb0
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	18d3      	adds	r3, r2, r3
 8012c1e:	3304      	adds	r3, #4
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012c26:	68fa      	ldr	r2, [r7, #12]
 8012c28:	2385      	movs	r3, #133	@ 0x85
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	2100      	movs	r1, #0
 8012c2e:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8012c30:	68fa      	ldr	r2, [r7, #12]
 8012c32:	2386      	movs	r3, #134	@ 0x86
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	2100      	movs	r1, #0
 8012c38:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	2381      	movs	r3, #129	@ 0x81
 8012c3e:	009b      	lsls	r3, r3, #2
 8012c40:	58d3      	ldr	r3, [r2, r3]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d101      	bne.n	8012c4a <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8012c46:	2302      	movs	r3, #2
 8012c48:	e01a      	b.n	8012c80 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	7c1b      	ldrb	r3, [r3, #16]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d10b      	bne.n	8012c6a <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012c52:	4b0e      	ldr	r3, [pc, #56]	@ (8012c8c <USBD_CDC_Init+0x218>)
 8012c54:	7819      	ldrb	r1, [r3, #0]
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	2381      	movs	r3, #129	@ 0x81
 8012c5a:	009b      	lsls	r3, r3, #2
 8012c5c:	58d2      	ldr	r2, [r2, r3]
 8012c5e:	2380      	movs	r3, #128	@ 0x80
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f006 fc28 	bl	80194b8 <USBD_LL_PrepareReceive>
 8012c68:	e009      	b.n	8012c7e <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012c6a:	4b08      	ldr	r3, [pc, #32]	@ (8012c8c <USBD_CDC_Init+0x218>)
 8012c6c:	7819      	ldrb	r1, [r3, #0]
 8012c6e:	68fa      	ldr	r2, [r7, #12]
 8012c70:	2381      	movs	r3, #129	@ 0x81
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	58d2      	ldr	r2, [r2, r3]
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	2340      	movs	r3, #64	@ 0x40
 8012c7a:	f006 fc1d 	bl	80194b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012c7e:	2300      	movs	r3, #0
}
 8012c80:	0018      	movs	r0, r3
 8012c82:	46bd      	mov	sp, r7
 8012c84:	b004      	add	sp, #16
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	200000bb 	.word	0x200000bb
 8012c8c:	200000bc 	.word	0x200000bc
 8012c90:	200000bd 	.word	0x200000bd

08012c94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	000a      	movs	r2, r1
 8012c9e:	1cfb      	adds	r3, r7, #3
 8012ca0:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012ca2:	4b41      	ldr	r3, [pc, #260]	@ (8012da8 <USBD_CDC_DeInit+0x114>)
 8012ca4:	781a      	ldrb	r2, [r3, #0]
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	0011      	movs	r1, r2
 8012caa:	0018      	movs	r0, r3
 8012cac:	f006 faf8 	bl	80192a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8012da8 <USBD_CDC_DeInit+0x114>)
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	001a      	movs	r2, r3
 8012cb6:	230f      	movs	r3, #15
 8012cb8:	401a      	ands	r2, r3
 8012cba:	6879      	ldr	r1, [r7, #4]
 8012cbc:	0013      	movs	r3, r2
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	189b      	adds	r3, r3, r2
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	18cb      	adds	r3, r1, r3
 8012cc6:	3324      	adds	r3, #36	@ 0x24
 8012cc8:	2200      	movs	r2, #0
 8012cca:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012ccc:	4b37      	ldr	r3, [pc, #220]	@ (8012dac <USBD_CDC_DeInit+0x118>)
 8012cce:	781a      	ldrb	r2, [r3, #0]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	0011      	movs	r1, r2
 8012cd4:	0018      	movs	r0, r3
 8012cd6:	f006 fae3 	bl	80192a0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012cda:	4b34      	ldr	r3, [pc, #208]	@ (8012dac <USBD_CDC_DeInit+0x118>)
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	001a      	movs	r2, r3
 8012ce0:	230f      	movs	r3, #15
 8012ce2:	401a      	ands	r2, r3
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	23b2      	movs	r3, #178	@ 0xb2
 8012ce8:	0059      	lsls	r1, r3, #1
 8012cea:	0013      	movs	r3, r2
 8012cec:	009b      	lsls	r3, r3, #2
 8012cee:	189b      	adds	r3, r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	18c3      	adds	r3, r0, r3
 8012cf4:	185b      	adds	r3, r3, r1
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8012db0 <USBD_CDC_DeInit+0x11c>)
 8012cfc:	781a      	ldrb	r2, [r3, #0]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	0011      	movs	r1, r2
 8012d02:	0018      	movs	r0, r3
 8012d04:	f006 facc 	bl	80192a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012d08:	4b29      	ldr	r3, [pc, #164]	@ (8012db0 <USBD_CDC_DeInit+0x11c>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	001a      	movs	r2, r3
 8012d0e:	230f      	movs	r3, #15
 8012d10:	401a      	ands	r2, r3
 8012d12:	6879      	ldr	r1, [r7, #4]
 8012d14:	0013      	movs	r3, r2
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	189b      	adds	r3, r3, r2
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	18cb      	adds	r3, r1, r3
 8012d1e:	3324      	adds	r3, #36	@ 0x24
 8012d20:	2200      	movs	r2, #0
 8012d22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012d24:	4b22      	ldr	r3, [pc, #136]	@ (8012db0 <USBD_CDC_DeInit+0x11c>)
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	001a      	movs	r2, r3
 8012d2a:	230f      	movs	r3, #15
 8012d2c:	401a      	ands	r2, r3
 8012d2e:	6879      	ldr	r1, [r7, #4]
 8012d30:	0013      	movs	r3, r2
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	189b      	adds	r3, r3, r2
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	18cb      	adds	r3, r1, r3
 8012d3a:	3326      	adds	r3, #38	@ 0x26
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	23b5      	movs	r3, #181	@ 0xb5
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	58d2      	ldr	r2, [r2, r3]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	32b0      	adds	r2, #176	@ 0xb0
 8012d4c:	0092      	lsls	r2, r2, #2
 8012d4e:	58d3      	ldr	r3, [r2, r3]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d024      	beq.n	8012d9e <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	23b5      	movs	r3, #181	@ 0xb5
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	58d3      	ldr	r3, [r2, r3]
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	33b0      	adds	r3, #176	@ 0xb0
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	18d3      	adds	r3, r2, r3
 8012d64:	3304      	adds	r3, #4
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	23b5      	movs	r3, #181	@ 0xb5
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	58d2      	ldr	r2, [r2, r3]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	32b0      	adds	r2, #176	@ 0xb0
 8012d78:	0092      	lsls	r2, r2, #2
 8012d7a:	58d3      	ldr	r3, [r2, r3]
 8012d7c:	0018      	movs	r0, r3
 8012d7e:	f006 fc27 	bl	80195d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	23b5      	movs	r3, #181	@ 0xb5
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	58d2      	ldr	r2, [r2, r3]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	32b0      	adds	r2, #176	@ 0xb0
 8012d8e:	0092      	lsls	r2, r2, #2
 8012d90:	2100      	movs	r1, #0
 8012d92:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	23af      	movs	r3, #175	@ 0xaf
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8012d9e:	2300      	movs	r3, #0
}
 8012da0:	0018      	movs	r0, r3
 8012da2:	46bd      	mov	sp, r7
 8012da4:	b002      	add	sp, #8
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	200000bb 	.word	0x200000bb
 8012dac:	200000bc 	.word	0x200000bc
 8012db0:	200000bd 	.word	0x200000bd

08012db4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	23b5      	movs	r3, #181	@ 0xb5
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	58d2      	ldr	r2, [r2, r3]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	32b0      	adds	r2, #176	@ 0xb0
 8012dca:	0092      	lsls	r2, r2, #2
 8012dcc:	58d3      	ldr	r3, [r2, r3]
 8012dce:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012dd0:	230d      	movs	r3, #13
 8012dd2:	18fb      	adds	r3, r7, r3
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8012dd8:	230a      	movs	r3, #10
 8012dda:	18fb      	adds	r3, r7, r3
 8012ddc:	2200      	movs	r2, #0
 8012dde:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012de0:	2317      	movs	r3, #23
 8012de2:	18fb      	adds	r3, r7, r3
 8012de4:	2200      	movs	r2, #0
 8012de6:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d101      	bne.n	8012df2 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 8012dee:	2303      	movs	r3, #3
 8012df0:	e0d1      	b.n	8012f96 <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	001a      	movs	r2, r3
 8012df8:	2360      	movs	r3, #96	@ 0x60
 8012dfa:	4013      	ands	r3, r2
 8012dfc:	d05b      	beq.n	8012eb6 <USBD_CDC_Setup+0x102>
 8012dfe:	2b20      	cmp	r3, #32
 8012e00:	d000      	beq.n	8012e04 <USBD_CDC_Setup+0x50>
 8012e02:	e0ba      	b.n	8012f7a <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	88db      	ldrh	r3, [r3, #6]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d043      	beq.n	8012e94 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	b25b      	sxtb	r3, r3
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	da22      	bge.n	8012e5c <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	23b5      	movs	r3, #181	@ 0xb5
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	58d3      	ldr	r3, [r2, r3]
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	33b0      	adds	r3, #176	@ 0xb0
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	18d3      	adds	r3, r2, r3
 8012e26:	3304      	adds	r3, #4
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	689b      	ldr	r3, [r3, #8]
 8012e2c:	683a      	ldr	r2, [r7, #0]
 8012e2e:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012e30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e32:	683a      	ldr	r2, [r7, #0]
 8012e34:	88d2      	ldrh	r2, [r2, #6]
 8012e36:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	88db      	ldrh	r3, [r3, #6]
 8012e3c:	220e      	movs	r2, #14
 8012e3e:	18ba      	adds	r2, r7, r2
 8012e40:	b299      	uxth	r1, r3
 8012e42:	2907      	cmp	r1, #7
 8012e44:	d900      	bls.n	8012e48 <USBD_CDC_Setup+0x94>
 8012e46:	2307      	movs	r3, #7
 8012e48:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e4a:	6939      	ldr	r1, [r7, #16]
 8012e4c:	230e      	movs	r3, #14
 8012e4e:	18fb      	adds	r3, r7, r3
 8012e50:	881a      	ldrh	r2, [r3, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	0018      	movs	r0, r3
 8012e56:	f001 ff87 	bl	8014d68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012e5a:	e099      	b.n	8012f90 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	7859      	ldrb	r1, [r3, #1]
 8012e60:	693a      	ldr	r2, [r7, #16]
 8012e62:	2380      	movs	r3, #128	@ 0x80
 8012e64:	009b      	lsls	r3, r3, #2
 8012e66:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	88db      	ldrh	r3, [r3, #6]
 8012e6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8012e6e:	d803      	bhi.n	8012e78 <USBD_CDC_Setup+0xc4>
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	88db      	ldrh	r3, [r3, #6]
 8012e74:	b2da      	uxtb	r2, r3
 8012e76:	e000      	b.n	8012e7a <USBD_CDC_Setup+0xc6>
 8012e78:	2240      	movs	r2, #64	@ 0x40
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	4948      	ldr	r1, [pc, #288]	@ (8012fa0 <USBD_CDC_Setup+0x1ec>)
 8012e7e:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012e80:	6939      	ldr	r1, [r7, #16]
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	4a46      	ldr	r2, [pc, #280]	@ (8012fa0 <USBD_CDC_Setup+0x1ec>)
 8012e86:	5c9b      	ldrb	r3, [r3, r2]
 8012e88:	001a      	movs	r2, r3
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	0018      	movs	r0, r3
 8012e8e:	f001 ff98 	bl	8014dc2 <USBD_CtlPrepareRx>
      break;
 8012e92:	e07d      	b.n	8012f90 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	23b5      	movs	r3, #181	@ 0xb5
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	58d3      	ldr	r3, [r2, r3]
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	33b0      	adds	r3, #176	@ 0xb0
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	18d3      	adds	r3, r2, r3
 8012ea4:	3304      	adds	r3, #4
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	689b      	ldr	r3, [r3, #8]
 8012eaa:	683a      	ldr	r2, [r7, #0]
 8012eac:	7850      	ldrb	r0, [r2, #1]
 8012eae:	6839      	ldr	r1, [r7, #0]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	4798      	blx	r3
      break;
 8012eb4:	e06c      	b.n	8012f90 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	785b      	ldrb	r3, [r3, #1]
 8012eba:	2b0b      	cmp	r3, #11
 8012ebc:	d03c      	beq.n	8012f38 <USBD_CDC_Setup+0x184>
 8012ebe:	dc4d      	bgt.n	8012f5c <USBD_CDC_Setup+0x1a8>
 8012ec0:	2b0a      	cmp	r3, #10
 8012ec2:	d01f      	beq.n	8012f04 <USBD_CDC_Setup+0x150>
 8012ec4:	dc4a      	bgt.n	8012f5c <USBD_CDC_Setup+0x1a8>
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d002      	beq.n	8012ed0 <USBD_CDC_Setup+0x11c>
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	d051      	beq.n	8012f72 <USBD_CDC_Setup+0x1be>
 8012ece:	e045      	b.n	8012f5c <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	23a7      	movs	r3, #167	@ 0xa7
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	5cd3      	ldrb	r3, [r2, r3]
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	2b03      	cmp	r3, #3
 8012edc:	d107      	bne.n	8012eee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012ede:	230a      	movs	r3, #10
 8012ee0:	18f9      	adds	r1, r7, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2202      	movs	r2, #2
 8012ee6:	0018      	movs	r0, r3
 8012ee8:	f001 ff3e 	bl	8014d68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012eec:	e044      	b.n	8012f78 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8012eee:	683a      	ldr	r2, [r7, #0]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	0011      	movs	r1, r2
 8012ef4:	0018      	movs	r0, r3
 8012ef6:	f001 feaf 	bl	8014c58 <USBD_CtlError>
            ret = USBD_FAIL;
 8012efa:	2317      	movs	r3, #23
 8012efc:	18fb      	adds	r3, r7, r3
 8012efe:	2203      	movs	r2, #3
 8012f00:	701a      	strb	r2, [r3, #0]
          break;
 8012f02:	e039      	b.n	8012f78 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	23a7      	movs	r3, #167	@ 0xa7
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	5cd3      	ldrb	r3, [r2, r3]
 8012f0c:	b2db      	uxtb	r3, r3
 8012f0e:	2b03      	cmp	r3, #3
 8012f10:	d107      	bne.n	8012f22 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f12:	230d      	movs	r3, #13
 8012f14:	18f9      	adds	r1, r7, r3
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2201      	movs	r2, #1
 8012f1a:	0018      	movs	r0, r3
 8012f1c:	f001 ff24 	bl	8014d68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f20:	e02a      	b.n	8012f78 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8012f22:	683a      	ldr	r2, [r7, #0]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	0011      	movs	r1, r2
 8012f28:	0018      	movs	r0, r3
 8012f2a:	f001 fe95 	bl	8014c58 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f2e:	2317      	movs	r3, #23
 8012f30:	18fb      	adds	r3, r7, r3
 8012f32:	2203      	movs	r2, #3
 8012f34:	701a      	strb	r2, [r3, #0]
          break;
 8012f36:	e01f      	b.n	8012f78 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	23a7      	movs	r3, #167	@ 0xa7
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	5cd3      	ldrb	r3, [r2, r3]
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b03      	cmp	r3, #3
 8012f44:	d017      	beq.n	8012f76 <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 8012f46:	683a      	ldr	r2, [r7, #0]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	0011      	movs	r1, r2
 8012f4c:	0018      	movs	r0, r3
 8012f4e:	f001 fe83 	bl	8014c58 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f52:	2317      	movs	r3, #23
 8012f54:	18fb      	adds	r3, r7, r3
 8012f56:	2203      	movs	r2, #3
 8012f58:	701a      	strb	r2, [r3, #0]
          }
          break;
 8012f5a:	e00c      	b.n	8012f76 <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012f5c:	683a      	ldr	r2, [r7, #0]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	0011      	movs	r1, r2
 8012f62:	0018      	movs	r0, r3
 8012f64:	f001 fe78 	bl	8014c58 <USBD_CtlError>
          ret = USBD_FAIL;
 8012f68:	2317      	movs	r3, #23
 8012f6a:	18fb      	adds	r3, r7, r3
 8012f6c:	2203      	movs	r2, #3
 8012f6e:	701a      	strb	r2, [r3, #0]
          break;
 8012f70:	e002      	b.n	8012f78 <USBD_CDC_Setup+0x1c4>
          break;
 8012f72:	46c0      	nop			@ (mov r8, r8)
 8012f74:	e00c      	b.n	8012f90 <USBD_CDC_Setup+0x1dc>
          break;
 8012f76:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8012f78:	e00a      	b.n	8012f90 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 8012f7a:	683a      	ldr	r2, [r7, #0]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	0011      	movs	r1, r2
 8012f80:	0018      	movs	r0, r3
 8012f82:	f001 fe69 	bl	8014c58 <USBD_CtlError>
      ret = USBD_FAIL;
 8012f86:	2317      	movs	r3, #23
 8012f88:	18fb      	adds	r3, r7, r3
 8012f8a:	2203      	movs	r2, #3
 8012f8c:	701a      	strb	r2, [r3, #0]
      break;
 8012f8e:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 8012f90:	2317      	movs	r3, #23
 8012f92:	18fb      	adds	r3, r7, r3
 8012f94:	781b      	ldrb	r3, [r3, #0]
}
 8012f96:	0018      	movs	r0, r3
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	b006      	add	sp, #24
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	46c0      	nop			@ (mov r8, r8)
 8012fa0:	00000201 	.word	0x00000201

08012fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012fa4:	b590      	push	{r4, r7, lr}
 8012fa6:	b085      	sub	sp, #20
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	000a      	movs	r2, r1
 8012fae:	1cfb      	adds	r3, r7, #3
 8012fb0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012fb2:	687a      	ldr	r2, [r7, #4]
 8012fb4:	23b2      	movs	r3, #178	@ 0xb2
 8012fb6:	009b      	lsls	r3, r3, #2
 8012fb8:	58d3      	ldr	r3, [r2, r3]
 8012fba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	23b5      	movs	r3, #181	@ 0xb5
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	58d2      	ldr	r2, [r2, r3]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	32b0      	adds	r2, #176	@ 0xb0
 8012fc8:	0092      	lsls	r2, r2, #2
 8012fca:	58d3      	ldr	r3, [r2, r3]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d101      	bne.n	8012fd4 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012fd0:	2303      	movs	r3, #3
 8012fd2:	e072      	b.n	80130ba <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	23b5      	movs	r3, #181	@ 0xb5
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	58d2      	ldr	r2, [r2, r3]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	32b0      	adds	r2, #176	@ 0xb0
 8012fe0:	0092      	lsls	r2, r2, #2
 8012fe2:	58d3      	ldr	r3, [r2, r3]
 8012fe4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012fe6:	1cfb      	adds	r3, r7, #3
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	220f      	movs	r2, #15
 8012fec:	401a      	ands	r2, r3
 8012fee:	6879      	ldr	r1, [r7, #4]
 8012ff0:	0013      	movs	r3, r2
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	189b      	adds	r3, r3, r2
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	18cb      	adds	r3, r1, r3
 8012ffa:	3318      	adds	r3, #24
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d031      	beq.n	8013066 <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013002:	1cfb      	adds	r3, r7, #3
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	220f      	movs	r2, #15
 8013008:	401a      	ands	r2, r3
 801300a:	6879      	ldr	r1, [r7, #4]
 801300c:	0013      	movs	r3, r2
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	189b      	adds	r3, r3, r2
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	18cb      	adds	r3, r1, r3
 8013016:	3318      	adds	r3, #24
 8013018:	6818      	ldr	r0, [r3, #0]
 801301a:	1cfb      	adds	r3, r7, #3
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	220f      	movs	r2, #15
 8013020:	401a      	ands	r2, r3
 8013022:	68f9      	ldr	r1, [r7, #12]
 8013024:	0013      	movs	r3, r2
 8013026:	009b      	lsls	r3, r3, #2
 8013028:	189b      	adds	r3, r3, r2
 801302a:	00db      	lsls	r3, r3, #3
 801302c:	18cb      	adds	r3, r1, r3
 801302e:	3324      	adds	r3, #36	@ 0x24
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	0019      	movs	r1, r3
 8013034:	f7f3 f950 	bl	80062d8 <__aeabi_uidivmod>
 8013038:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801303a:	d114      	bne.n	8013066 <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801303c:	1cfb      	adds	r3, r7, #3
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	220f      	movs	r2, #15
 8013042:	401a      	ands	r2, r3
 8013044:	6879      	ldr	r1, [r7, #4]
 8013046:	0013      	movs	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	189b      	adds	r3, r3, r2
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	18cb      	adds	r3, r1, r3
 8013050:	3318      	adds	r3, #24
 8013052:	2200      	movs	r2, #0
 8013054:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013056:	1cfb      	adds	r3, r7, #3
 8013058:	7819      	ldrb	r1, [r3, #0]
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	2300      	movs	r3, #0
 801305e:	2200      	movs	r2, #0
 8013060:	f006 f9fa 	bl	8019458 <USBD_LL_Transmit>
 8013064:	e028      	b.n	80130b8 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 8013066:	68ba      	ldr	r2, [r7, #8]
 8013068:	2385      	movs	r3, #133	@ 0x85
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	2100      	movs	r1, #0
 801306e:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	23b5      	movs	r3, #181	@ 0xb5
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	58d3      	ldr	r3, [r2, r3]
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	33b0      	adds	r3, #176	@ 0xb0
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	18d3      	adds	r3, r2, r3
 8013080:	3304      	adds	r3, #4
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	691b      	ldr	r3, [r3, #16]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d016      	beq.n	80130b8 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	23b5      	movs	r3, #181	@ 0xb5
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	58d3      	ldr	r3, [r2, r3]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	33b0      	adds	r3, #176	@ 0xb0
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	18d3      	adds	r3, r2, r3
 801309a:	3304      	adds	r3, #4
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	691c      	ldr	r4, [r3, #16]
 80130a0:	68ba      	ldr	r2, [r7, #8]
 80130a2:	2382      	movs	r3, #130	@ 0x82
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	58d0      	ldr	r0, [r2, r3]
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	2284      	movs	r2, #132	@ 0x84
 80130ac:	0092      	lsls	r2, r2, #2
 80130ae:	1899      	adds	r1, r3, r2
 80130b0:	1cfb      	adds	r3, r7, #3
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	001a      	movs	r2, r3
 80130b6:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 80130b8:	2300      	movs	r3, #0
}
 80130ba:	0018      	movs	r0, r3
 80130bc:	46bd      	mov	sp, r7
 80130be:	b005      	add	sp, #20
 80130c0:	bd90      	pop	{r4, r7, pc}

080130c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80130c2:	b580      	push	{r7, lr}
 80130c4:	b084      	sub	sp, #16
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	6078      	str	r0, [r7, #4]
 80130ca:	000a      	movs	r2, r1
 80130cc:	1cfb      	adds	r3, r7, #3
 80130ce:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	23b5      	movs	r3, #181	@ 0xb5
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	58d2      	ldr	r2, [r2, r3]
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	32b0      	adds	r2, #176	@ 0xb0
 80130dc:	0092      	lsls	r2, r2, #2
 80130de:	58d3      	ldr	r3, [r2, r3]
 80130e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	23b5      	movs	r3, #181	@ 0xb5
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	58d2      	ldr	r2, [r2, r3]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	32b0      	adds	r2, #176	@ 0xb0
 80130ee:	0092      	lsls	r2, r2, #2
 80130f0:	58d3      	ldr	r3, [r2, r3]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d101      	bne.n	80130fa <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 80130f6:	2303      	movs	r3, #3
 80130f8:	e022      	b.n	8013140 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80130fa:	1cfb      	adds	r3, r7, #3
 80130fc:	781a      	ldrb	r2, [r3, #0]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	0011      	movs	r1, r2
 8013102:	0018      	movs	r0, r3
 8013104:	f006 fa08 	bl	8019518 <USBD_LL_GetRxDataSize>
 8013108:	0001      	movs	r1, r0
 801310a:	68fa      	ldr	r2, [r7, #12]
 801310c:	2383      	movs	r3, #131	@ 0x83
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	23b5      	movs	r3, #181	@ 0xb5
 8013116:	009b      	lsls	r3, r3, #2
 8013118:	58d3      	ldr	r3, [r2, r3]
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	33b0      	adds	r3, #176	@ 0xb0
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	18d3      	adds	r3, r2, r3
 8013122:	3304      	adds	r3, #4
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	68da      	ldr	r2, [r3, #12]
 8013128:	68f9      	ldr	r1, [r7, #12]
 801312a:	2381      	movs	r3, #129	@ 0x81
 801312c:	009b      	lsls	r3, r3, #2
 801312e:	58c8      	ldr	r0, [r1, r3]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2183      	movs	r1, #131	@ 0x83
 8013134:	0089      	lsls	r1, r1, #2
 8013136:	468c      	mov	ip, r1
 8013138:	4463      	add	r3, ip
 801313a:	0019      	movs	r1, r3
 801313c:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 801313e:	2300      	movs	r3, #0
}
 8013140:	0018      	movs	r0, r3
 8013142:	46bd      	mov	sp, r7
 8013144:	b004      	add	sp, #16
 8013146:	bd80      	pop	{r7, pc}

08013148 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013148:	b590      	push	{r4, r7, lr}
 801314a:	b085      	sub	sp, #20
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	23b5      	movs	r3, #181	@ 0xb5
 8013154:	009b      	lsls	r3, r3, #2
 8013156:	58d2      	ldr	r2, [r2, r3]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	32b0      	adds	r2, #176	@ 0xb0
 801315c:	0092      	lsls	r2, r2, #2
 801315e:	58d3      	ldr	r3, [r2, r3]
 8013160:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d101      	bne.n	801316c <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013168:	2303      	movs	r3, #3
 801316a:	e02b      	b.n	80131c4 <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801316c:	687a      	ldr	r2, [r7, #4]
 801316e:	23b5      	movs	r3, #181	@ 0xb5
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	58d3      	ldr	r3, [r2, r3]
 8013174:	687a      	ldr	r2, [r7, #4]
 8013176:	33b0      	adds	r3, #176	@ 0xb0
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	18d3      	adds	r3, r2, r3
 801317c:	3304      	adds	r3, #4
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d01e      	beq.n	80131c2 <USBD_CDC_EP0_RxReady+0x7a>
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	2380      	movs	r3, #128	@ 0x80
 8013188:	009b      	lsls	r3, r3, #2
 801318a:	5cd3      	ldrb	r3, [r2, r3]
 801318c:	2bff      	cmp	r3, #255	@ 0xff
 801318e:	d018      	beq.n	80131c2 <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013190:	687a      	ldr	r2, [r7, #4]
 8013192:	23b5      	movs	r3, #181	@ 0xb5
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	58d3      	ldr	r3, [r2, r3]
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	33b0      	adds	r3, #176	@ 0xb0
 801319c:	009b      	lsls	r3, r3, #2
 801319e:	18d3      	adds	r3, r2, r3
 80131a0:	3304      	adds	r3, #4
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	689b      	ldr	r3, [r3, #8]
 80131a6:	68f9      	ldr	r1, [r7, #12]
 80131a8:	2280      	movs	r2, #128	@ 0x80
 80131aa:	0092      	lsls	r2, r2, #2
 80131ac:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 80131ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	4c06      	ldr	r4, [pc, #24]	@ (80131cc <USBD_CDC_EP0_RxReady+0x84>)
 80131b4:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80131b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	2380      	movs	r3, #128	@ 0x80
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	21ff      	movs	r1, #255	@ 0xff
 80131c0:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 80131c2:	2300      	movs	r3, #0
}
 80131c4:	0018      	movs	r0, r3
 80131c6:	46bd      	mov	sp, r7
 80131c8:	b005      	add	sp, #20
 80131ca:	bd90      	pop	{r4, r7, pc}
 80131cc:	00000201 	.word	0x00000201

080131d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80131d8:	4b20      	ldr	r3, [pc, #128]	@ (801325c <USBD_CDC_GetFSCfgDesc+0x8c>)
 80131da:	2182      	movs	r1, #130	@ 0x82
 80131dc:	0018      	movs	r0, r3
 80131de:	f000 fd9c 	bl	8013d1a <USBD_GetEpDesc>
 80131e2:	0003      	movs	r3, r0
 80131e4:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80131e6:	4b1d      	ldr	r3, [pc, #116]	@ (801325c <USBD_CDC_GetFSCfgDesc+0x8c>)
 80131e8:	2101      	movs	r1, #1
 80131ea:	0018      	movs	r0, r3
 80131ec:	f000 fd95 	bl	8013d1a <USBD_GetEpDesc>
 80131f0:	0003      	movs	r3, r0
 80131f2:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80131f4:	4b19      	ldr	r3, [pc, #100]	@ (801325c <USBD_CDC_GetFSCfgDesc+0x8c>)
 80131f6:	2181      	movs	r1, #129	@ 0x81
 80131f8:	0018      	movs	r0, r3
 80131fa:	f000 fd8e 	bl	8013d1a <USBD_GetEpDesc>
 80131fe:	0003      	movs	r3, r0
 8013200:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d002      	beq.n	801320e <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	2210      	movs	r2, #16
 801320c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00b      	beq.n	801322c <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	791a      	ldrb	r2, [r3, #4]
 8013218:	2100      	movs	r1, #0
 801321a:	400a      	ands	r2, r1
 801321c:	1c11      	adds	r1, r2, #0
 801321e:	2240      	movs	r2, #64	@ 0x40
 8013220:	430a      	orrs	r2, r1
 8013222:	711a      	strb	r2, [r3, #4]
 8013224:	795a      	ldrb	r2, [r3, #5]
 8013226:	2100      	movs	r1, #0
 8013228:	400a      	ands	r2, r1
 801322a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d00b      	beq.n	801324a <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	791a      	ldrb	r2, [r3, #4]
 8013236:	2100      	movs	r1, #0
 8013238:	400a      	ands	r2, r1
 801323a:	1c11      	adds	r1, r2, #0
 801323c:	2240      	movs	r2, #64	@ 0x40
 801323e:	430a      	orrs	r2, r1
 8013240:	711a      	strb	r2, [r3, #4]
 8013242:	795a      	ldrb	r2, [r3, #5]
 8013244:	2100      	movs	r1, #0
 8013246:	400a      	ands	r2, r1
 8013248:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2243      	movs	r2, #67	@ 0x43
 801324e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013250:	4b02      	ldr	r3, [pc, #8]	@ (801325c <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 8013252:	0018      	movs	r0, r3
 8013254:	46bd      	mov	sp, r7
 8013256:	b006      	add	sp, #24
 8013258:	bd80      	pop	{r7, pc}
 801325a:	46c0      	nop			@ (mov r8, r8)
 801325c:	20000078 	.word	0x20000078

08013260 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b086      	sub	sp, #24
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013268:	4b20      	ldr	r3, [pc, #128]	@ (80132ec <USBD_CDC_GetHSCfgDesc+0x8c>)
 801326a:	2182      	movs	r1, #130	@ 0x82
 801326c:	0018      	movs	r0, r3
 801326e:	f000 fd54 	bl	8013d1a <USBD_GetEpDesc>
 8013272:	0003      	movs	r3, r0
 8013274:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013276:	4b1d      	ldr	r3, [pc, #116]	@ (80132ec <USBD_CDC_GetHSCfgDesc+0x8c>)
 8013278:	2101      	movs	r1, #1
 801327a:	0018      	movs	r0, r3
 801327c:	f000 fd4d 	bl	8013d1a <USBD_GetEpDesc>
 8013280:	0003      	movs	r3, r0
 8013282:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013284:	4b19      	ldr	r3, [pc, #100]	@ (80132ec <USBD_CDC_GetHSCfgDesc+0x8c>)
 8013286:	2181      	movs	r1, #129	@ 0x81
 8013288:	0018      	movs	r0, r3
 801328a:	f000 fd46 	bl	8013d1a <USBD_GetEpDesc>
 801328e:	0003      	movs	r3, r0
 8013290:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	2210      	movs	r2, #16
 801329c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d00b      	beq.n	80132bc <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	791a      	ldrb	r2, [r3, #4]
 80132a8:	2100      	movs	r1, #0
 80132aa:	400a      	ands	r2, r1
 80132ac:	711a      	strb	r2, [r3, #4]
 80132ae:	795a      	ldrb	r2, [r3, #5]
 80132b0:	2100      	movs	r1, #0
 80132b2:	400a      	ands	r2, r1
 80132b4:	1c11      	adds	r1, r2, #0
 80132b6:	2202      	movs	r2, #2
 80132b8:	430a      	orrs	r2, r1
 80132ba:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d00b      	beq.n	80132da <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	791a      	ldrb	r2, [r3, #4]
 80132c6:	2100      	movs	r1, #0
 80132c8:	400a      	ands	r2, r1
 80132ca:	711a      	strb	r2, [r3, #4]
 80132cc:	795a      	ldrb	r2, [r3, #5]
 80132ce:	2100      	movs	r1, #0
 80132d0:	400a      	ands	r2, r1
 80132d2:	1c11      	adds	r1, r2, #0
 80132d4:	2202      	movs	r2, #2
 80132d6:	430a      	orrs	r2, r1
 80132d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2243      	movs	r2, #67	@ 0x43
 80132de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80132e0:	4b02      	ldr	r3, [pc, #8]	@ (80132ec <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 80132e2:	0018      	movs	r0, r3
 80132e4:	46bd      	mov	sp, r7
 80132e6:	b006      	add	sp, #24
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	46c0      	nop			@ (mov r8, r8)
 80132ec:	20000078 	.word	0x20000078

080132f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b086      	sub	sp, #24
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80132f8:	4b20      	ldr	r3, [pc, #128]	@ (801337c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80132fa:	2182      	movs	r1, #130	@ 0x82
 80132fc:	0018      	movs	r0, r3
 80132fe:	f000 fd0c 	bl	8013d1a <USBD_GetEpDesc>
 8013302:	0003      	movs	r3, r0
 8013304:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013306:	4b1d      	ldr	r3, [pc, #116]	@ (801337c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8013308:	2101      	movs	r1, #1
 801330a:	0018      	movs	r0, r3
 801330c:	f000 fd05 	bl	8013d1a <USBD_GetEpDesc>
 8013310:	0003      	movs	r3, r0
 8013312:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013314:	4b19      	ldr	r3, [pc, #100]	@ (801337c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 8013316:	2181      	movs	r1, #129	@ 0x81
 8013318:	0018      	movs	r0, r3
 801331a:	f000 fcfe 	bl	8013d1a <USBD_GetEpDesc>
 801331e:	0003      	movs	r3, r0
 8013320:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d002      	beq.n	801332e <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	2210      	movs	r2, #16
 801332c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801332e:	693b      	ldr	r3, [r7, #16]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00b      	beq.n	801334c <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	791a      	ldrb	r2, [r3, #4]
 8013338:	2100      	movs	r1, #0
 801333a:	400a      	ands	r2, r1
 801333c:	1c11      	adds	r1, r2, #0
 801333e:	2240      	movs	r2, #64	@ 0x40
 8013340:	430a      	orrs	r2, r1
 8013342:	711a      	strb	r2, [r3, #4]
 8013344:	795a      	ldrb	r2, [r3, #5]
 8013346:	2100      	movs	r1, #0
 8013348:	400a      	ands	r2, r1
 801334a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00b      	beq.n	801336a <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	791a      	ldrb	r2, [r3, #4]
 8013356:	2100      	movs	r1, #0
 8013358:	400a      	ands	r2, r1
 801335a:	1c11      	adds	r1, r2, #0
 801335c:	2240      	movs	r2, #64	@ 0x40
 801335e:	430a      	orrs	r2, r1
 8013360:	711a      	strb	r2, [r3, #4]
 8013362:	795a      	ldrb	r2, [r3, #5]
 8013364:	2100      	movs	r1, #0
 8013366:	400a      	ands	r2, r1
 8013368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2243      	movs	r2, #67	@ 0x43
 801336e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013370:	4b02      	ldr	r3, [pc, #8]	@ (801337c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 8013372:	0018      	movs	r0, r3
 8013374:	46bd      	mov	sp, r7
 8013376:	b006      	add	sp, #24
 8013378:	bd80      	pop	{r7, pc}
 801337a:	46c0      	nop			@ (mov r8, r8)
 801337c:	20000078 	.word	0x20000078

08013380 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b082      	sub	sp, #8
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	220a      	movs	r2, #10
 801338c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801338e:	4b02      	ldr	r3, [pc, #8]	@ (8013398 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013390:	0018      	movs	r0, r3
 8013392:	46bd      	mov	sp, r7
 8013394:	b002      	add	sp, #8
 8013396:	bd80      	pop	{r7, pc}
 8013398:	20000034 	.word	0x20000034

0801339c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d101      	bne.n	80133b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80133ac:	2303      	movs	r3, #3
 80133ae:	e00b      	b.n	80133c8 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	23b5      	movs	r3, #181	@ 0xb5
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	58d3      	ldr	r3, [r2, r3]
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	33b0      	adds	r3, #176	@ 0xb0
 80133bc:	009b      	lsls	r3, r3, #2
 80133be:	18d3      	adds	r3, r2, r3
 80133c0:	3304      	adds	r3, #4
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 80133c6:	2300      	movs	r3, #0
}
 80133c8:	0018      	movs	r0, r3
 80133ca:	46bd      	mov	sp, r7
 80133cc:	b002      	add	sp, #8
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b086      	sub	sp, #24
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	60f8      	str	r0, [r7, #12]
 80133d8:	60b9      	str	r1, [r7, #8]
 80133da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	23b5      	movs	r3, #181	@ 0xb5
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	58d2      	ldr	r2, [r2, r3]
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	32b0      	adds	r2, #176	@ 0xb0
 80133e8:	0092      	lsls	r2, r2, #2
 80133ea:	58d3      	ldr	r3, [r2, r3]
 80133ec:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d101      	bne.n	80133f8 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80133f4:	2303      	movs	r3, #3
 80133f6:	e00a      	b.n	801340e <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 80133f8:	697a      	ldr	r2, [r7, #20]
 80133fa:	2382      	movs	r3, #130	@ 0x82
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	68b9      	ldr	r1, [r7, #8]
 8013400:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013402:	697a      	ldr	r2, [r7, #20]
 8013404:	2384      	movs	r3, #132	@ 0x84
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	6879      	ldr	r1, [r7, #4]
 801340a:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 801340c:	2300      	movs	r3, #0
}
 801340e:	0018      	movs	r0, r3
 8013410:	46bd      	mov	sp, r7
 8013412:	b006      	add	sp, #24
 8013414:	bd80      	pop	{r7, pc}

08013416 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013416:	b580      	push	{r7, lr}
 8013418:	b084      	sub	sp, #16
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
 801341e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	23b5      	movs	r3, #181	@ 0xb5
 8013424:	009b      	lsls	r3, r3, #2
 8013426:	58d2      	ldr	r2, [r2, r3]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	32b0      	adds	r2, #176	@ 0xb0
 801342c:	0092      	lsls	r2, r2, #2
 801342e:	58d3      	ldr	r3, [r2, r3]
 8013430:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d101      	bne.n	801343c <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013438:	2303      	movs	r3, #3
 801343a:	e005      	b.n	8013448 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	2381      	movs	r3, #129	@ 0x81
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	6839      	ldr	r1, [r7, #0]
 8013444:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8013446:	2300      	movs	r3, #0
}
 8013448:	0018      	movs	r0, r3
 801344a:	46bd      	mov	sp, r7
 801344c:	b004      	add	sp, #16
 801344e:	bd80      	pop	{r7, pc}

08013450 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013450:	b590      	push	{r4, r7, lr}
 8013452:	b085      	sub	sp, #20
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	23b5      	movs	r3, #181	@ 0xb5
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	58d2      	ldr	r2, [r2, r3]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	32b0      	adds	r2, #176	@ 0xb0
 8013464:	0092      	lsls	r2, r2, #2
 8013466:	58d3      	ldr	r3, [r2, r3]
 8013468:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801346a:	230f      	movs	r3, #15
 801346c:	18fb      	adds	r3, r7, r3
 801346e:	2201      	movs	r2, #1
 8013470:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d101      	bne.n	801347c <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013478:	2303      	movs	r3, #3
 801347a:	e030      	b.n	80134de <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	2385      	movs	r3, #133	@ 0x85
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	58d3      	ldr	r3, [r2, r3]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d127      	bne.n	80134d8 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013488:	68ba      	ldr	r2, [r7, #8]
 801348a:	2385      	movs	r3, #133	@ 0x85
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	2101      	movs	r1, #1
 8013490:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013492:	4b15      	ldr	r3, [pc, #84]	@ (80134e8 <USBD_CDC_TransmitPacket+0x98>)
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	001a      	movs	r2, r3
 8013498:	230f      	movs	r3, #15
 801349a:	401a      	ands	r2, r3
 801349c:	68b9      	ldr	r1, [r7, #8]
 801349e:	2384      	movs	r3, #132	@ 0x84
 80134a0:	009b      	lsls	r3, r3, #2
 80134a2:	58c9      	ldr	r1, [r1, r3]
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	0013      	movs	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	189b      	adds	r3, r3, r2
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	18c3      	adds	r3, r0, r3
 80134b0:	3318      	adds	r3, #24
 80134b2:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80134b4:	4b0c      	ldr	r3, [pc, #48]	@ (80134e8 <USBD_CDC_TransmitPacket+0x98>)
 80134b6:	7819      	ldrb	r1, [r3, #0]
 80134b8:	68ba      	ldr	r2, [r7, #8]
 80134ba:	2382      	movs	r3, #130	@ 0x82
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	58d4      	ldr	r4, [r2, r3]
 80134c0:	68ba      	ldr	r2, [r7, #8]
 80134c2:	2384      	movs	r3, #132	@ 0x84
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	58d3      	ldr	r3, [r2, r3]
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	0022      	movs	r2, r4
 80134cc:	f005 ffc4 	bl	8019458 <USBD_LL_Transmit>

    ret = USBD_OK;
 80134d0:	230f      	movs	r3, #15
 80134d2:	18fb      	adds	r3, r7, r3
 80134d4:	2200      	movs	r2, #0
 80134d6:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 80134d8:	230f      	movs	r3, #15
 80134da:	18fb      	adds	r3, r7, r3
 80134dc:	781b      	ldrb	r3, [r3, #0]
}
 80134de:	0018      	movs	r0, r3
 80134e0:	46bd      	mov	sp, r7
 80134e2:	b005      	add	sp, #20
 80134e4:	bd90      	pop	{r4, r7, pc}
 80134e6:	46c0      	nop			@ (mov r8, r8)
 80134e8:	200000bb 	.word	0x200000bb

080134ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	23b5      	movs	r3, #181	@ 0xb5
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	58d2      	ldr	r2, [r2, r3]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	32b0      	adds	r2, #176	@ 0xb0
 8013500:	0092      	lsls	r2, r2, #2
 8013502:	58d3      	ldr	r3, [r2, r3]
 8013504:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	23b5      	movs	r3, #181	@ 0xb5
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	58d2      	ldr	r2, [r2, r3]
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	32b0      	adds	r2, #176	@ 0xb0
 8013512:	0092      	lsls	r2, r2, #2
 8013514:	58d3      	ldr	r3, [r2, r3]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d101      	bne.n	801351e <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801351a:	2303      	movs	r3, #3
 801351c:	e01a      	b.n	8013554 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	7c1b      	ldrb	r3, [r3, #16]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d10b      	bne.n	801353e <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013526:	4b0d      	ldr	r3, [pc, #52]	@ (801355c <USBD_CDC_ReceivePacket+0x70>)
 8013528:	7819      	ldrb	r1, [r3, #0]
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	2381      	movs	r3, #129	@ 0x81
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	58d2      	ldr	r2, [r2, r3]
 8013532:	2380      	movs	r3, #128	@ 0x80
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f005 ffbe 	bl	80194b8 <USBD_LL_PrepareReceive>
 801353c:	e009      	b.n	8013552 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801353e:	4b07      	ldr	r3, [pc, #28]	@ (801355c <USBD_CDC_ReceivePacket+0x70>)
 8013540:	7819      	ldrb	r1, [r3, #0]
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	2381      	movs	r3, #129	@ 0x81
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	58d2      	ldr	r2, [r2, r3]
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	2340      	movs	r3, #64	@ 0x40
 801354e:	f005 ffb3 	bl	80194b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013552:	2300      	movs	r3, #0
}
 8013554:	0018      	movs	r0, r3
 8013556:	46bd      	mov	sp, r7
 8013558:	b004      	add	sp, #16
 801355a:	bd80      	pop	{r7, pc}
 801355c:	200000bc 	.word	0x200000bc

08013560 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013560:	b5b0      	push	{r4, r5, r7, lr}
 8013562:	b086      	sub	sp, #24
 8013564:	af00      	add	r7, sp, #0
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	1dfb      	adds	r3, r7, #7
 801356c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d101      	bne.n	8013578 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013574:	2303      	movs	r3, #3
 8013576:	e029      	b.n	80135cc <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013578:	68fa      	ldr	r2, [r7, #12]
 801357a:	23ae      	movs	r3, #174	@ 0xae
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	2100      	movs	r1, #0
 8013580:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8013582:	68fa      	ldr	r2, [r7, #12]
 8013584:	23b1      	movs	r3, #177	@ 0xb1
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	2100      	movs	r1, #0
 801358a:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801358c:	68fa      	ldr	r2, [r7, #12]
 801358e:	23b4      	movs	r3, #180	@ 0xb4
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	2100      	movs	r1, #0
 8013594:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d004      	beq.n	80135a6 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 801359c:	68fa      	ldr	r2, [r7, #12]
 801359e:	23ad      	movs	r3, #173	@ 0xad
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	68b9      	ldr	r1, [r7, #8]
 80135a4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80135a6:	68fa      	ldr	r2, [r7, #12]
 80135a8:	23a7      	movs	r3, #167	@ 0xa7
 80135aa:	009b      	lsls	r3, r3, #2
 80135ac:	2101      	movs	r1, #1
 80135ae:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	1dfa      	adds	r2, r7, #7
 80135b4:	7812      	ldrb	r2, [r2, #0]
 80135b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80135b8:	2517      	movs	r5, #23
 80135ba:	197c      	adds	r4, r7, r5
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	0018      	movs	r0, r3
 80135c0:	f005 fda0 	bl	8019104 <USBD_LL_Init>
 80135c4:	0003      	movs	r3, r0
 80135c6:	7023      	strb	r3, [r4, #0]

  return ret;
 80135c8:	197b      	adds	r3, r7, r5
 80135ca:	781b      	ldrb	r3, [r3, #0]
}
 80135cc:	0018      	movs	r0, r3
 80135ce:	46bd      	mov	sp, r7
 80135d0:	b006      	add	sp, #24
 80135d2:	bdb0      	pop	{r4, r5, r7, pc}

080135d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80135de:	230e      	movs	r3, #14
 80135e0:	18fb      	adds	r3, r7, r3
 80135e2:	2200      	movs	r2, #0
 80135e4:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d101      	bne.n	80135f0 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80135ec:	2303      	movs	r3, #3
 80135ee:	e02b      	b.n	8013648 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	23ae      	movs	r3, #174	@ 0xae
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	6839      	ldr	r1, [r7, #0]
 80135f8:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	23b5      	movs	r3, #181	@ 0xb5
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	58d2      	ldr	r2, [r2, r3]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	32ae      	adds	r2, #174	@ 0xae
 8013606:	0092      	lsls	r2, r2, #2
 8013608:	58d3      	ldr	r3, [r2, r3]
 801360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801360c:	2b00      	cmp	r3, #0
 801360e:	d011      	beq.n	8013634 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	23b5      	movs	r3, #181	@ 0xb5
 8013614:	009b      	lsls	r3, r3, #2
 8013616:	58d2      	ldr	r2, [r2, r3]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	32ae      	adds	r2, #174	@ 0xae
 801361c:	0092      	lsls	r2, r2, #2
 801361e:	58d3      	ldr	r3, [r2, r3]
 8013620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013622:	220e      	movs	r2, #14
 8013624:	18ba      	adds	r2, r7, r2
 8013626:	0010      	movs	r0, r2
 8013628:	4798      	blx	r3
 801362a:	0001      	movs	r1, r0
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	23b4      	movs	r3, #180	@ 0xb4
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	23b6      	movs	r3, #182	@ 0xb6
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	58d3      	ldr	r3, [r2, r3]
 801363c:	1c59      	adds	r1, r3, #1
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	23b6      	movs	r3, #182	@ 0xb6
 8013642:	009b      	lsls	r3, r3, #2
 8013644:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013646:	2300      	movs	r3, #0
}
 8013648:	0018      	movs	r0, r3
 801364a:	46bd      	mov	sp, r7
 801364c:	b004      	add	sp, #16
 801364e:	bd80      	pop	{r7, pc}

08013650 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	0018      	movs	r0, r3
 801365c:	f005 fdc4 	bl	80191e8 <USBD_LL_Start>
 8013660:	0003      	movs	r3, r0
}
 8013662:	0018      	movs	r0, r3
 8013664:	46bd      	mov	sp, r7
 8013666:	b002      	add	sp, #8
 8013668:	bd80      	pop	{r7, pc}

0801366a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801366a:	b580      	push	{r7, lr}
 801366c:	b082      	sub	sp, #8
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013672:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013674:	0018      	movs	r0, r3
 8013676:	46bd      	mov	sp, r7
 8013678:	b002      	add	sp, #8
 801367a:	bd80      	pop	{r7, pc}

0801367c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801367c:	b590      	push	{r4, r7, lr}
 801367e:	b085      	sub	sp, #20
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	000a      	movs	r2, r1
 8013686:	1cfb      	adds	r3, r7, #3
 8013688:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801368a:	210f      	movs	r1, #15
 801368c:	187b      	adds	r3, r7, r1
 801368e:	2200      	movs	r2, #0
 8013690:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013692:	687a      	ldr	r2, [r7, #4]
 8013694:	23ae      	movs	r3, #174	@ 0xae
 8013696:	009b      	lsls	r3, r3, #2
 8013698:	58d3      	ldr	r3, [r2, r3]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d00c      	beq.n	80136b8 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	23ae      	movs	r3, #174	@ 0xae
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	58d3      	ldr	r3, [r2, r3]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	187c      	adds	r4, r7, r1
 80136aa:	1cfa      	adds	r2, r7, #3
 80136ac:	7811      	ldrb	r1, [r2, #0]
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	0010      	movs	r0, r2
 80136b2:	4798      	blx	r3
 80136b4:	0003      	movs	r3, r0
 80136b6:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80136b8:	230f      	movs	r3, #15
 80136ba:	18fb      	adds	r3, r7, r3
 80136bc:	781b      	ldrb	r3, [r3, #0]
}
 80136be:	0018      	movs	r0, r3
 80136c0:	46bd      	mov	sp, r7
 80136c2:	b005      	add	sp, #20
 80136c4:	bd90      	pop	{r4, r7, pc}

080136c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136c6:	b590      	push	{r4, r7, lr}
 80136c8:	b085      	sub	sp, #20
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	6078      	str	r0, [r7, #4]
 80136ce:	000a      	movs	r2, r1
 80136d0:	1cfb      	adds	r3, r7, #3
 80136d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80136d4:	240f      	movs	r4, #15
 80136d6:	193b      	adds	r3, r7, r4
 80136d8:	2200      	movs	r2, #0
 80136da:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	23ae      	movs	r3, #174	@ 0xae
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	58d3      	ldr	r3, [r2, r3]
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	1cfa      	adds	r2, r7, #3
 80136e8:	7811      	ldrb	r1, [r2, #0]
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	0010      	movs	r0, r2
 80136ee:	4798      	blx	r3
 80136f0:	1e03      	subs	r3, r0, #0
 80136f2:	d002      	beq.n	80136fa <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 80136f4:	193b      	adds	r3, r7, r4
 80136f6:	2203      	movs	r2, #3
 80136f8:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80136fa:	230f      	movs	r3, #15
 80136fc:	18fb      	adds	r3, r7, r3
 80136fe:	781b      	ldrb	r3, [r3, #0]
}
 8013700:	0018      	movs	r0, r3
 8013702:	46bd      	mov	sp, r7
 8013704:	b005      	add	sp, #20
 8013706:	bd90      	pop	{r4, r7, pc}

08013708 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013708:	b590      	push	{r4, r7, lr}
 801370a:	b085      	sub	sp, #20
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	4a30      	ldr	r2, [pc, #192]	@ (80137d8 <USBD_LL_SetupStage+0xd0>)
 8013716:	4694      	mov	ip, r2
 8013718:	4463      	add	r3, ip
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	0011      	movs	r1, r2
 801371e:	0018      	movs	r0, r3
 8013720:	f001 fa5d 	bl	8014bde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013724:	687a      	ldr	r2, [r7, #4]
 8013726:	23a5      	movs	r3, #165	@ 0xa5
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	2101      	movs	r1, #1
 801372c:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	23ac      	movs	r3, #172	@ 0xac
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	5ad3      	ldrh	r3, [r2, r3]
 8013736:	0019      	movs	r1, r3
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	23a6      	movs	r3, #166	@ 0xa6
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	4a25      	ldr	r2, [pc, #148]	@ (80137d8 <USBD_LL_SetupStage+0xd0>)
 8013744:	5c9b      	ldrb	r3, [r3, r2]
 8013746:	001a      	movs	r2, r3
 8013748:	231f      	movs	r3, #31
 801374a:	4013      	ands	r3, r2
 801374c:	2b02      	cmp	r3, #2
 801374e:	d01f      	beq.n	8013790 <USBD_LL_SetupStage+0x88>
 8013750:	d82b      	bhi.n	80137aa <USBD_LL_SetupStage+0xa2>
 8013752:	2b00      	cmp	r3, #0
 8013754:	d002      	beq.n	801375c <USBD_LL_SetupStage+0x54>
 8013756:	2b01      	cmp	r3, #1
 8013758:	d00d      	beq.n	8013776 <USBD_LL_SetupStage+0x6e>
 801375a:	e026      	b.n	80137aa <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	4a1e      	ldr	r2, [pc, #120]	@ (80137d8 <USBD_LL_SetupStage+0xd0>)
 8013760:	189a      	adds	r2, r3, r2
 8013762:	230f      	movs	r3, #15
 8013764:	18fc      	adds	r4, r7, r3
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	0011      	movs	r1, r2
 801376a:	0018      	movs	r0, r3
 801376c:	f000 fb5c 	bl	8013e28 <USBD_StdDevReq>
 8013770:	0003      	movs	r3, r0
 8013772:	7023      	strb	r3, [r4, #0]
      break;
 8013774:	e029      	b.n	80137ca <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	4a17      	ldr	r2, [pc, #92]	@ (80137d8 <USBD_LL_SetupStage+0xd0>)
 801377a:	189a      	adds	r2, r3, r2
 801377c:	230f      	movs	r3, #15
 801377e:	18fc      	adds	r4, r7, r3
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	0011      	movs	r1, r2
 8013784:	0018      	movs	r0, r3
 8013786:	f000 fbcd 	bl	8013f24 <USBD_StdItfReq>
 801378a:	0003      	movs	r3, r0
 801378c:	7023      	strb	r3, [r4, #0]
      break;
 801378e:	e01c      	b.n	80137ca <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	4a11      	ldr	r2, [pc, #68]	@ (80137d8 <USBD_LL_SetupStage+0xd0>)
 8013794:	189a      	adds	r2, r3, r2
 8013796:	230f      	movs	r3, #15
 8013798:	18fc      	adds	r4, r7, r3
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	0011      	movs	r1, r2
 801379e:	0018      	movs	r0, r3
 80137a0:	f000 fc4d 	bl	801403e <USBD_StdEPReq>
 80137a4:	0003      	movs	r3, r0
 80137a6:	7023      	strb	r3, [r4, #0]
      break;
 80137a8:	e00f      	b.n	80137ca <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4a0a      	ldr	r2, [pc, #40]	@ (80137d8 <USBD_LL_SetupStage+0xd0>)
 80137ae:	5c9b      	ldrb	r3, [r3, r2]
 80137b0:	227f      	movs	r2, #127	@ 0x7f
 80137b2:	4393      	bics	r3, r2
 80137b4:	b2da      	uxtb	r2, r3
 80137b6:	230f      	movs	r3, #15
 80137b8:	18fc      	adds	r4, r7, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	0011      	movs	r1, r2
 80137be:	0018      	movs	r0, r3
 80137c0:	f005 fd99 	bl	80192f6 <USBD_LL_StallEP>
 80137c4:	0003      	movs	r3, r0
 80137c6:	7023      	strb	r3, [r4, #0]
      break;
 80137c8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80137ca:	230f      	movs	r3, #15
 80137cc:	18fb      	adds	r3, r7, r3
 80137ce:	781b      	ldrb	r3, [r3, #0]
}
 80137d0:	0018      	movs	r0, r3
 80137d2:	46bd      	mov	sp, r7
 80137d4:	b005      	add	sp, #20
 80137d6:	bd90      	pop	{r4, r7, pc}
 80137d8:	000002aa 	.word	0x000002aa

080137dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80137dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137de:	b087      	sub	sp, #28
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	607a      	str	r2, [r7, #4]
 80137e6:	200b      	movs	r0, #11
 80137e8:	183b      	adds	r3, r7, r0
 80137ea:	1c0a      	adds	r2, r1, #0
 80137ec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80137ee:	2317      	movs	r3, #23
 80137f0:	18fb      	adds	r3, r7, r3
 80137f2:	2200      	movs	r2, #0
 80137f4:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 80137f6:	183b      	adds	r3, r7, r0
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d000      	beq.n	8013800 <USBD_LL_DataOutStage+0x24>
 80137fe:	e084      	b.n	801390a <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	3355      	adds	r3, #85	@ 0x55
 8013804:	33ff      	adds	r3, #255	@ 0xff
 8013806:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013808:	68fa      	ldr	r2, [r7, #12]
 801380a:	23a5      	movs	r3, #165	@ 0xa5
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	58d3      	ldr	r3, [r2, r3]
 8013810:	2b03      	cmp	r3, #3
 8013812:	d000      	beq.n	8013816 <USBD_LL_DataOutStage+0x3a>
 8013814:	e0c0      	b.n	8013998 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	689a      	ldr	r2, [r3, #8]
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	68db      	ldr	r3, [r3, #12]
 801381e:	429a      	cmp	r2, r3
 8013820:	d914      	bls.n	801384c <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	689a      	ldr	r2, [r3, #8]
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	1ad2      	subs	r2, r2, r3
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	68d9      	ldr	r1, [r3, #12]
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	689a      	ldr	r2, [r3, #8]
 8013838:	000b      	movs	r3, r1
 801383a:	4293      	cmp	r3, r2
 801383c:	d900      	bls.n	8013840 <USBD_LL_DataOutStage+0x64>
 801383e:	0013      	movs	r3, r2
 8013840:	6879      	ldr	r1, [r7, #4]
 8013842:	68f8      	ldr	r0, [r7, #12]
 8013844:	001a      	movs	r2, r3
 8013846:	f001 fadc 	bl	8014e02 <USBD_CtlContinueRx>
 801384a:	e0a5      	b.n	8013998 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	4a55      	ldr	r2, [pc, #340]	@ (80139a4 <USBD_LL_DataOutStage+0x1c8>)
 8013850:	5c9b      	ldrb	r3, [r3, r2]
 8013852:	001a      	movs	r2, r3
 8013854:	231f      	movs	r3, #31
 8013856:	4013      	ands	r3, r2
 8013858:	2b02      	cmp	r3, #2
 801385a:	d018      	beq.n	801388e <USBD_LL_DataOutStage+0xb2>
 801385c:	d825      	bhi.n	80138aa <USBD_LL_DataOutStage+0xce>
 801385e:	2b00      	cmp	r3, #0
 8013860:	d002      	beq.n	8013868 <USBD_LL_DataOutStage+0x8c>
 8013862:	2b01      	cmp	r3, #1
 8013864:	d005      	beq.n	8013872 <USBD_LL_DataOutStage+0x96>
 8013866:	e020      	b.n	80138aa <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013868:	2316      	movs	r3, #22
 801386a:	18fb      	adds	r3, r7, r3
 801386c:	2200      	movs	r2, #0
 801386e:	701a      	strb	r2, [r3, #0]
            break;
 8013870:	e020      	b.n	80138b4 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	4a4c      	ldr	r2, [pc, #304]	@ (80139a8 <USBD_LL_DataOutStage+0x1cc>)
 8013876:	5a9b      	ldrh	r3, [r3, r2]
 8013878:	b2da      	uxtb	r2, r3
 801387a:	2316      	movs	r3, #22
 801387c:	18fc      	adds	r4, r7, r3
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	0011      	movs	r1, r2
 8013882:	0018      	movs	r0, r3
 8013884:	f000 fa31 	bl	8013cea <USBD_CoreFindIF>
 8013888:	0003      	movs	r3, r0
 801388a:	7023      	strb	r3, [r4, #0]
            break;
 801388c:	e012      	b.n	80138b4 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	4a45      	ldr	r2, [pc, #276]	@ (80139a8 <USBD_LL_DataOutStage+0x1cc>)
 8013892:	5a9b      	ldrh	r3, [r3, r2]
 8013894:	b2da      	uxtb	r2, r3
 8013896:	2316      	movs	r3, #22
 8013898:	18fc      	adds	r4, r7, r3
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	0011      	movs	r1, r2
 801389e:	0018      	movs	r0, r3
 80138a0:	f000 fa2f 	bl	8013d02 <USBD_CoreFindEP>
 80138a4:	0003      	movs	r3, r0
 80138a6:	7023      	strb	r3, [r4, #0]
            break;
 80138a8:	e004      	b.n	80138b4 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80138aa:	2316      	movs	r3, #22
 80138ac:	18fb      	adds	r3, r7, r3
 80138ae:	2200      	movs	r2, #0
 80138b0:	701a      	strb	r2, [r3, #0]
            break;
 80138b2:	46c0      	nop			@ (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80138b4:	2116      	movs	r1, #22
 80138b6:	187b      	adds	r3, r7, r1
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d120      	bne.n	8013900 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	23a7      	movs	r3, #167	@ 0xa7
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	5cd3      	ldrb	r3, [r2, r3]
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	2b03      	cmp	r3, #3
 80138ca:	d119      	bne.n	8013900 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80138cc:	187b      	adds	r3, r7, r1
 80138ce:	781a      	ldrb	r2, [r3, #0]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	32ae      	adds	r2, #174	@ 0xae
 80138d4:	0092      	lsls	r2, r2, #2
 80138d6:	58d3      	ldr	r3, [r2, r3]
 80138d8:	691b      	ldr	r3, [r3, #16]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d010      	beq.n	8013900 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 80138de:	0008      	movs	r0, r1
 80138e0:	187b      	adds	r3, r7, r1
 80138e2:	7819      	ldrb	r1, [r3, #0]
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	23b5      	movs	r3, #181	@ 0xb5
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80138ec:	183b      	adds	r3, r7, r0
 80138ee:	781a      	ldrb	r2, [r3, #0]
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	32ae      	adds	r2, #174	@ 0xae
 80138f4:	0092      	lsls	r2, r2, #2
 80138f6:	58d3      	ldr	r3, [r2, r3]
 80138f8:	691b      	ldr	r3, [r3, #16]
 80138fa:	68fa      	ldr	r2, [r7, #12]
 80138fc:	0010      	movs	r0, r2
 80138fe:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	0018      	movs	r0, r3
 8013904:	f001 fa8e 	bl	8014e24 <USBD_CtlSendStatus>
 8013908:	e046      	b.n	8013998 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801390a:	260b      	movs	r6, #11
 801390c:	19bb      	adds	r3, r7, r6
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	227f      	movs	r2, #127	@ 0x7f
 8013912:	4013      	ands	r3, r2
 8013914:	b2da      	uxtb	r2, r3
 8013916:	2516      	movs	r5, #22
 8013918:	197c      	adds	r4, r7, r5
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	0011      	movs	r1, r2
 801391e:	0018      	movs	r0, r3
 8013920:	f000 f9ef 	bl	8013d02 <USBD_CoreFindEP>
 8013924:	0003      	movs	r3, r0
 8013926:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013928:	0029      	movs	r1, r5
 801392a:	187b      	adds	r3, r7, r1
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	2bff      	cmp	r3, #255	@ 0xff
 8013930:	d032      	beq.n	8013998 <USBD_LL_DataOutStage+0x1bc>
 8013932:	187b      	adds	r3, r7, r1
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d12e      	bne.n	8013998 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801393a:	68fa      	ldr	r2, [r7, #12]
 801393c:	23a7      	movs	r3, #167	@ 0xa7
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	5cd3      	ldrb	r3, [r2, r3]
 8013942:	b2db      	uxtb	r3, r3
 8013944:	2b03      	cmp	r3, #3
 8013946:	d11f      	bne.n	8013988 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013948:	187b      	adds	r3, r7, r1
 801394a:	781a      	ldrb	r2, [r3, #0]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	32ae      	adds	r2, #174	@ 0xae
 8013950:	0092      	lsls	r2, r2, #2
 8013952:	58d3      	ldr	r3, [r2, r3]
 8013954:	699b      	ldr	r3, [r3, #24]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d016      	beq.n	8013988 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 801395a:	0008      	movs	r0, r1
 801395c:	187b      	adds	r3, r7, r1
 801395e:	7819      	ldrb	r1, [r3, #0]
 8013960:	68fa      	ldr	r2, [r7, #12]
 8013962:	23b5      	movs	r3, #181	@ 0xb5
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013968:	183b      	adds	r3, r7, r0
 801396a:	781a      	ldrb	r2, [r3, #0]
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	32ae      	adds	r2, #174	@ 0xae
 8013970:	0092      	lsls	r2, r2, #2
 8013972:	58d3      	ldr	r3, [r2, r3]
 8013974:	699b      	ldr	r3, [r3, #24]
 8013976:	2217      	movs	r2, #23
 8013978:	18bc      	adds	r4, r7, r2
 801397a:	19ba      	adds	r2, r7, r6
 801397c:	7811      	ldrb	r1, [r2, #0]
 801397e:	68fa      	ldr	r2, [r7, #12]
 8013980:	0010      	movs	r0, r2
 8013982:	4798      	blx	r3
 8013984:	0003      	movs	r3, r0
 8013986:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8013988:	2217      	movs	r2, #23
 801398a:	18bb      	adds	r3, r7, r2
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d002      	beq.n	8013998 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 8013992:	18bb      	adds	r3, r7, r2
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	e000      	b.n	801399a <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8013998:	2300      	movs	r3, #0
}
 801399a:	0018      	movs	r0, r3
 801399c:	46bd      	mov	sp, r7
 801399e:	b007      	add	sp, #28
 80139a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139a2:	46c0      	nop			@ (mov r8, r8)
 80139a4:	000002aa 	.word	0x000002aa
 80139a8:	000002ae 	.word	0x000002ae

080139ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80139ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ae:	b087      	sub	sp, #28
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	607a      	str	r2, [r7, #4]
 80139b6:	200b      	movs	r0, #11
 80139b8:	183b      	adds	r3, r7, r0
 80139ba:	1c0a      	adds	r2, r1, #0
 80139bc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80139be:	183b      	adds	r3, r7, r0
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d000      	beq.n	80139c8 <USBD_LL_DataInStage+0x1c>
 80139c6:	e07d      	b.n	8013ac4 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	3314      	adds	r3, #20
 80139cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80139ce:	68fa      	ldr	r2, [r7, #12]
 80139d0:	23a5      	movs	r3, #165	@ 0xa5
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	58d3      	ldr	r3, [r2, r3]
 80139d6:	2b02      	cmp	r3, #2
 80139d8:	d164      	bne.n	8013aa4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	689a      	ldr	r2, [r3, #8]
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	68db      	ldr	r3, [r3, #12]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d914      	bls.n	8013a10 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	689a      	ldr	r2, [r3, #8]
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	68db      	ldr	r3, [r3, #12]
 80139ee:	1ad2      	subs	r2, r2, r3
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	689a      	ldr	r2, [r3, #8]
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	0018      	movs	r0, r3
 80139fe:	f001 f9cf 	bl	8014da0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a02:	68f8      	ldr	r0, [r7, #12]
 8013a04:	2300      	movs	r3, #0
 8013a06:	2200      	movs	r2, #0
 8013a08:	2100      	movs	r1, #0
 8013a0a:	f005 fd55 	bl	80194b8 <USBD_LL_PrepareReceive>
 8013a0e:	e049      	b.n	8013aa4 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	68da      	ldr	r2, [r3, #12]
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	689b      	ldr	r3, [r3, #8]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d11f      	bne.n	8013a5c <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	685a      	ldr	r2, [r3, #4]
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d319      	bcc.n	8013a5c <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	685a      	ldr	r2, [r3, #4]
 8013a2c:	68f9      	ldr	r1, [r7, #12]
 8013a2e:	23a6      	movs	r3, #166	@ 0xa6
 8013a30:	009b      	lsls	r3, r3, #2
 8013a32:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d211      	bcs.n	8013a5c <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	0018      	movs	r0, r3
 8013a40:	f001 f9ae 	bl	8014da0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013a44:	68fa      	ldr	r2, [r7, #12]
 8013a46:	23a6      	movs	r3, #166	@ 0xa6
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a4e:	68f8      	ldr	r0, [r7, #12]
 8013a50:	2300      	movs	r3, #0
 8013a52:	2200      	movs	r2, #0
 8013a54:	2100      	movs	r1, #0
 8013a56:	f005 fd2f 	bl	80194b8 <USBD_LL_PrepareReceive>
 8013a5a:	e023      	b.n	8013aa4 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a5c:	68fa      	ldr	r2, [r7, #12]
 8013a5e:	23a7      	movs	r3, #167	@ 0xa7
 8013a60:	009b      	lsls	r3, r3, #2
 8013a62:	5cd3      	ldrb	r3, [r2, r3]
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	2b03      	cmp	r3, #3
 8013a68:	d113      	bne.n	8013a92 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013a6a:	68fa      	ldr	r2, [r7, #12]
 8013a6c:	23ae      	movs	r3, #174	@ 0xae
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	58d3      	ldr	r3, [r2, r3]
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00c      	beq.n	8013a92 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8013a78:	68fa      	ldr	r2, [r7, #12]
 8013a7a:	23b5      	movs	r3, #181	@ 0xb5
 8013a7c:	009b      	lsls	r3, r3, #2
 8013a7e:	2100      	movs	r1, #0
 8013a80:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013a82:	68fa      	ldr	r2, [r7, #12]
 8013a84:	23ae      	movs	r3, #174	@ 0xae
 8013a86:	009b      	lsls	r3, r3, #2
 8013a88:	58d3      	ldr	r3, [r2, r3]
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	0010      	movs	r0, r2
 8013a90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2180      	movs	r1, #128	@ 0x80
 8013a96:	0018      	movs	r0, r3
 8013a98:	f005 fc2d 	bl	80192f6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	0018      	movs	r0, r3
 8013aa0:	f001 f9d4 	bl	8014e4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013aa4:	68fa      	ldr	r2, [r7, #12]
 8013aa6:	23a8      	movs	r3, #168	@ 0xa8
 8013aa8:	009b      	lsls	r3, r3, #2
 8013aaa:	5cd3      	ldrb	r3, [r2, r3]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d050      	beq.n	8013b52 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	0018      	movs	r0, r3
 8013ab4:	f7ff fdd9 	bl	801366a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	23a8      	movs	r3, #168	@ 0xa8
 8013abc:	009b      	lsls	r3, r3, #2
 8013abe:	2100      	movs	r1, #0
 8013ac0:	54d1      	strb	r1, [r2, r3]
 8013ac2:	e046      	b.n	8013b52 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013ac4:	260b      	movs	r6, #11
 8013ac6:	19bb      	adds	r3, r7, r6
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	2280      	movs	r2, #128	@ 0x80
 8013acc:	4252      	negs	r2, r2
 8013ace:	4313      	orrs	r3, r2
 8013ad0:	b2da      	uxtb	r2, r3
 8013ad2:	2517      	movs	r5, #23
 8013ad4:	197c      	adds	r4, r7, r5
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	0011      	movs	r1, r2
 8013ada:	0018      	movs	r0, r3
 8013adc:	f000 f911 	bl	8013d02 <USBD_CoreFindEP>
 8013ae0:	0003      	movs	r3, r0
 8013ae2:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ae4:	0029      	movs	r1, r5
 8013ae6:	187b      	adds	r3, r7, r1
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	2bff      	cmp	r3, #255	@ 0xff
 8013aec:	d031      	beq.n	8013b52 <USBD_LL_DataInStage+0x1a6>
 8013aee:	187b      	adds	r3, r7, r1
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d12d      	bne.n	8013b52 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	23a7      	movs	r3, #167	@ 0xa7
 8013afa:	009b      	lsls	r3, r3, #2
 8013afc:	5cd3      	ldrb	r3, [r2, r3]
 8013afe:	b2db      	uxtb	r3, r3
 8013b00:	2b03      	cmp	r3, #3
 8013b02:	d126      	bne.n	8013b52 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013b04:	187b      	adds	r3, r7, r1
 8013b06:	781a      	ldrb	r2, [r3, #0]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	32ae      	adds	r2, #174	@ 0xae
 8013b0c:	0092      	lsls	r2, r2, #2
 8013b0e:	58d3      	ldr	r3, [r2, r3]
 8013b10:	695b      	ldr	r3, [r3, #20]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d01d      	beq.n	8013b52 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 8013b16:	0008      	movs	r0, r1
 8013b18:	187b      	adds	r3, r7, r1
 8013b1a:	7819      	ldrb	r1, [r3, #0]
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	23b5      	movs	r3, #181	@ 0xb5
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013b24:	183b      	adds	r3, r7, r0
 8013b26:	781a      	ldrb	r2, [r3, #0]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	32ae      	adds	r2, #174	@ 0xae
 8013b2c:	0092      	lsls	r2, r2, #2
 8013b2e:	58d3      	ldr	r3, [r2, r3]
 8013b30:	695b      	ldr	r3, [r3, #20]
 8013b32:	2516      	movs	r5, #22
 8013b34:	197c      	adds	r4, r7, r5
 8013b36:	19ba      	adds	r2, r7, r6
 8013b38:	7811      	ldrb	r1, [r2, #0]
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	0010      	movs	r0, r2
 8013b3e:	4798      	blx	r3
 8013b40:	0003      	movs	r3, r0
 8013b42:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 8013b44:	197b      	adds	r3, r7, r5
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8013b4c:	197b      	adds	r3, r7, r5
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	e000      	b.n	8013b54 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 8013b52:	2300      	movs	r3, #0
}
 8013b54:	0018      	movs	r0, r3
 8013b56:	46bd      	mov	sp, r7
 8013b58:	b007      	add	sp, #28
 8013b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013b5c:	b590      	push	{r4, r7, lr}
 8013b5e:	b085      	sub	sp, #20
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b64:	240f      	movs	r4, #15
 8013b66:	193b      	adds	r3, r7, r4
 8013b68:	2200      	movs	r2, #0
 8013b6a:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	23a7      	movs	r3, #167	@ 0xa7
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	2101      	movs	r1, #1
 8013b74:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	23a5      	movs	r3, #165	@ 0xa5
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	2100      	movs	r1, #0
 8013b7e:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2200      	movs	r2, #0
 8013b84:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	23a9      	movs	r3, #169	@ 0xa9
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	23a8      	movs	r3, #168	@ 0xa8
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	2100      	movs	r1, #0
 8013b98:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013b9a:	687a      	ldr	r2, [r7, #4]
 8013b9c:	23ae      	movs	r3, #174	@ 0xae
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	58d3      	ldr	r3, [r2, r3]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d016      	beq.n	8013bd4 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	23ae      	movs	r3, #174	@ 0xae
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	58d3      	ldr	r3, [r2, r3]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00f      	beq.n	8013bd4 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	23ae      	movs	r3, #174	@ 0xae
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	58d3      	ldr	r3, [r2, r3]
 8013bbc:	685a      	ldr	r2, [r3, #4]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	b2d9      	uxtb	r1, r3
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	0018      	movs	r0, r3
 8013bc8:	4790      	blx	r2
 8013bca:	1e03      	subs	r3, r0, #0
 8013bcc:	d002      	beq.n	8013bd4 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8013bce:	193b      	adds	r3, r7, r4
 8013bd0:	2203      	movs	r2, #3
 8013bd2:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	2340      	movs	r3, #64	@ 0x40
 8013bd8:	2200      	movs	r2, #0
 8013bda:	2100      	movs	r1, #0
 8013bdc:	f005 fb29 	bl	8019232 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	23b2      	movs	r3, #178	@ 0xb2
 8013be4:	005b      	lsls	r3, r3, #1
 8013be6:	2101      	movs	r1, #1
 8013be8:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	23b0      	movs	r3, #176	@ 0xb0
 8013bee:	005b      	lsls	r3, r3, #1
 8013bf0:	2140      	movs	r1, #64	@ 0x40
 8013bf2:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	2340      	movs	r3, #64	@ 0x40
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	2180      	movs	r1, #128	@ 0x80
 8013bfc:	f005 fb19 	bl	8019232 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2201      	movs	r2, #1
 8013c04:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2240      	movs	r2, #64	@ 0x40
 8013c0a:	621a      	str	r2, [r3, #32]

  return ret;
 8013c0c:	230f      	movs	r3, #15
 8013c0e:	18fb      	adds	r3, r7, r3
 8013c10:	781b      	ldrb	r3, [r3, #0]
}
 8013c12:	0018      	movs	r0, r3
 8013c14:	46bd      	mov	sp, r7
 8013c16:	b005      	add	sp, #20
 8013c18:	bd90      	pop	{r4, r7, pc}

08013c1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013c1a:	b580      	push	{r7, lr}
 8013c1c:	b082      	sub	sp, #8
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	6078      	str	r0, [r7, #4]
 8013c22:	000a      	movs	r2, r1
 8013c24:	1cfb      	adds	r3, r7, #3
 8013c26:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	1cfa      	adds	r2, r7, #3
 8013c2c:	7812      	ldrb	r2, [r2, #0]
 8013c2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013c30:	2300      	movs	r3, #0
}
 8013c32:	0018      	movs	r0, r3
 8013c34:	46bd      	mov	sp, r7
 8013c36:	b002      	add	sp, #8
 8013c38:	bd80      	pop	{r7, pc}
	...

08013c3c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	23a7      	movs	r3, #167	@ 0xa7
 8013c48:	009b      	lsls	r3, r3, #2
 8013c4a:	5cd3      	ldrb	r3, [r2, r3]
 8013c4c:	b2d9      	uxtb	r1, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	4a05      	ldr	r2, [pc, #20]	@ (8013c68 <USBD_LL_Suspend+0x2c>)
 8013c52:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	23a7      	movs	r3, #167	@ 0xa7
 8013c58:	009b      	lsls	r3, r3, #2
 8013c5a:	2104      	movs	r1, #4
 8013c5c:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8013c5e:	2300      	movs	r3, #0
}
 8013c60:	0018      	movs	r0, r3
 8013c62:	46bd      	mov	sp, r7
 8013c64:	b002      	add	sp, #8
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	0000029d 	.word	0x0000029d

08013c6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	23a7      	movs	r3, #167	@ 0xa7
 8013c78:	009b      	lsls	r3, r3, #2
 8013c7a:	5cd3      	ldrb	r3, [r2, r3]
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	2b04      	cmp	r3, #4
 8013c80:	d107      	bne.n	8013c92 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	4a05      	ldr	r2, [pc, #20]	@ (8013c9c <USBD_LL_Resume+0x30>)
 8013c86:	5c9b      	ldrb	r3, [r3, r2]
 8013c88:	b2d9      	uxtb	r1, r3
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	23a7      	movs	r3, #167	@ 0xa7
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8013c92:	2300      	movs	r3, #0
}
 8013c94:	0018      	movs	r0, r3
 8013c96:	46bd      	mov	sp, r7
 8013c98:	b002      	add	sp, #8
 8013c9a:	bd80      	pop	{r7, pc}
 8013c9c:	0000029d 	.word	0x0000029d

08013ca0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ca8:	687a      	ldr	r2, [r7, #4]
 8013caa:	23a7      	movs	r3, #167	@ 0xa7
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	5cd3      	ldrb	r3, [r2, r3]
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	2b03      	cmp	r3, #3
 8013cb4:	d114      	bne.n	8013ce0 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	23ae      	movs	r3, #174	@ 0xae
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	58d3      	ldr	r3, [r2, r3]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00e      	beq.n	8013ce0 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	23ae      	movs	r3, #174	@ 0xae
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	58d3      	ldr	r3, [r2, r3]
 8013cca:	69db      	ldr	r3, [r3, #28]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d007      	beq.n	8013ce0 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	23ae      	movs	r3, #174	@ 0xae
 8013cd4:	009b      	lsls	r3, r3, #2
 8013cd6:	58d3      	ldr	r3, [r2, r3]
 8013cd8:	69db      	ldr	r3, [r3, #28]
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	0010      	movs	r0, r2
 8013cde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013ce0:	2300      	movs	r3, #0
}
 8013ce2:	0018      	movs	r0, r3
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	b002      	add	sp, #8
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b082      	sub	sp, #8
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	000a      	movs	r2, r1
 8013cf4:	1cfb      	adds	r3, r7, #3
 8013cf6:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013cf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013cfa:	0018      	movs	r0, r3
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	b002      	add	sp, #8
 8013d00:	bd80      	pop	{r7, pc}

08013d02 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013d02:	b580      	push	{r7, lr}
 8013d04:	b082      	sub	sp, #8
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
 8013d0a:	000a      	movs	r2, r1
 8013d0c:	1cfb      	adds	r3, r7, #3
 8013d0e:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013d10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013d12:	0018      	movs	r0, r3
 8013d14:	46bd      	mov	sp, r7
 8013d16:	b002      	add	sp, #8
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013d1a:	b580      	push	{r7, lr}
 8013d1c:	b086      	sub	sp, #24
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
 8013d22:	000a      	movs	r2, r1
 8013d24:	1cfb      	adds	r3, r7, #3
 8013d26:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013d30:	2300      	movs	r3, #0
 8013d32:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	789a      	ldrb	r2, [r3, #2]
 8013d38:	78db      	ldrb	r3, [r3, #3]
 8013d3a:	021b      	lsls	r3, r3, #8
 8013d3c:	4313      	orrs	r3, r2
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	68fa      	ldr	r2, [r7, #12]
 8013d42:	7812      	ldrb	r2, [r2, #0]
 8013d44:	4293      	cmp	r3, r2
 8013d46:	d92a      	bls.n	8013d9e <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	001a      	movs	r2, r3
 8013d4e:	230a      	movs	r3, #10
 8013d50:	18fb      	adds	r3, r7, r3
 8013d52:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 8013d54:	e016      	b.n	8013d84 <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013d56:	230a      	movs	r3, #10
 8013d58:	18fa      	adds	r2, r7, r3
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	0011      	movs	r1, r2
 8013d5e:	0018      	movs	r0, r3
 8013d60:	f000 f822 	bl	8013da8 <USBD_GetNextDesc>
 8013d64:	0003      	movs	r3, r0
 8013d66:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013d68:	697b      	ldr	r3, [r7, #20]
 8013d6a:	785b      	ldrb	r3, [r3, #1]
 8013d6c:	2b05      	cmp	r3, #5
 8013d6e:	d109      	bne.n	8013d84 <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	789b      	ldrb	r3, [r3, #2]
 8013d78:	1cfa      	adds	r2, r7, #3
 8013d7a:	7812      	ldrb	r2, [r2, #0]
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d00d      	beq.n	8013d9c <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013d80:	2300      	movs	r3, #0
 8013d82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	789a      	ldrb	r2, [r3, #2]
 8013d88:	78db      	ldrb	r3, [r3, #3]
 8013d8a:	021b      	lsls	r3, r3, #8
 8013d8c:	4313      	orrs	r3, r2
 8013d8e:	b29a      	uxth	r2, r3
 8013d90:	230a      	movs	r3, #10
 8013d92:	18fb      	adds	r3, r7, r3
 8013d94:	881b      	ldrh	r3, [r3, #0]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d8dd      	bhi.n	8013d56 <USBD_GetEpDesc+0x3c>
 8013d9a:	e000      	b.n	8013d9e <USBD_GetEpDesc+0x84>
          break;
 8013d9c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013d9e:	693b      	ldr	r3, [r7, #16]
}
 8013da0:	0018      	movs	r0, r3
 8013da2:	46bd      	mov	sp, r7
 8013da4:	b006      	add	sp, #24
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b084      	sub	sp, #16
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	881b      	ldrh	r3, [r3, #0]
 8013dba:	68fa      	ldr	r2, [r7, #12]
 8013dbc:	7812      	ldrb	r2, [r2, #0]
 8013dbe:	189b      	adds	r3, r3, r2
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	781b      	ldrb	r3, [r3, #0]
 8013dca:	001a      	movs	r2, r3
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	189b      	adds	r3, r3, r2
 8013dd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013dd2:	68fb      	ldr	r3, [r7, #12]
}
 8013dd4:	0018      	movs	r0, r3
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	b004      	add	sp, #16
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b086      	sub	sp, #24
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	781a      	ldrb	r2, [r3, #0]
 8013dec:	2112      	movs	r1, #18
 8013dee:	187b      	adds	r3, r7, r1
 8013df0:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	3301      	adds	r3, #1
 8013df6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	781a      	ldrb	r2, [r3, #0]
 8013dfc:	2010      	movs	r0, #16
 8013dfe:	183b      	adds	r3, r7, r0
 8013e00:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013e02:	183b      	adds	r3, r7, r0
 8013e04:	2200      	movs	r2, #0
 8013e06:	5e9b      	ldrsh	r3, [r3, r2]
 8013e08:	021b      	lsls	r3, r3, #8
 8013e0a:	b21a      	sxth	r2, r3
 8013e0c:	187b      	adds	r3, r7, r1
 8013e0e:	2100      	movs	r1, #0
 8013e10:	5e5b      	ldrsh	r3, [r3, r1]
 8013e12:	4313      	orrs	r3, r2
 8013e14:	b21a      	sxth	r2, r3
 8013e16:	210e      	movs	r1, #14
 8013e18:	187b      	adds	r3, r7, r1
 8013e1a:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 8013e1c:	187b      	adds	r3, r7, r1
 8013e1e:	881b      	ldrh	r3, [r3, #0]
}
 8013e20:	0018      	movs	r0, r3
 8013e22:	46bd      	mov	sp, r7
 8013e24:	b006      	add	sp, #24
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e28:	b590      	push	{r4, r7, lr}
 8013e2a:	b085      	sub	sp, #20
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e32:	230f      	movs	r3, #15
 8013e34:	18fb      	adds	r3, r7, r3
 8013e36:	2200      	movs	r2, #0
 8013e38:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	781b      	ldrb	r3, [r3, #0]
 8013e3e:	001a      	movs	r2, r3
 8013e40:	2360      	movs	r3, #96	@ 0x60
 8013e42:	4013      	ands	r3, r2
 8013e44:	2b40      	cmp	r3, #64	@ 0x40
 8013e46:	d004      	beq.n	8013e52 <USBD_StdDevReq+0x2a>
 8013e48:	d85b      	bhi.n	8013f02 <USBD_StdDevReq+0xda>
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d013      	beq.n	8013e76 <USBD_StdDevReq+0x4e>
 8013e4e:	2b20      	cmp	r3, #32
 8013e50:	d157      	bne.n	8013f02 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	23b5      	movs	r3, #181	@ 0xb5
 8013e56:	009b      	lsls	r3, r3, #2
 8013e58:	58d2      	ldr	r2, [r2, r3]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	32ae      	adds	r2, #174	@ 0xae
 8013e5e:	0092      	lsls	r2, r2, #2
 8013e60:	58d3      	ldr	r3, [r2, r3]
 8013e62:	689b      	ldr	r3, [r3, #8]
 8013e64:	220f      	movs	r2, #15
 8013e66:	18bc      	adds	r4, r7, r2
 8013e68:	6839      	ldr	r1, [r7, #0]
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	0010      	movs	r0, r2
 8013e6e:	4798      	blx	r3
 8013e70:	0003      	movs	r3, r0
 8013e72:	7023      	strb	r3, [r4, #0]
      break;
 8013e74:	e04c      	b.n	8013f10 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	785b      	ldrb	r3, [r3, #1]
 8013e7a:	2b09      	cmp	r3, #9
 8013e7c:	d839      	bhi.n	8013ef2 <USBD_StdDevReq+0xca>
 8013e7e:	009a      	lsls	r2, r3, #2
 8013e80:	4b27      	ldr	r3, [pc, #156]	@ (8013f20 <USBD_StdDevReq+0xf8>)
 8013e82:	18d3      	adds	r3, r2, r3
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013e88:	683a      	ldr	r2, [r7, #0]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	0011      	movs	r1, r2
 8013e8e:	0018      	movs	r0, r3
 8013e90:	f000 fada 	bl	8014448 <USBD_GetDescriptor>
          break;
 8013e94:	e034      	b.n	8013f00 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013e96:	683a      	ldr	r2, [r7, #0]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	0011      	movs	r1, r2
 8013e9c:	0018      	movs	r0, r3
 8013e9e:	f000 fcad 	bl	80147fc <USBD_SetAddress>
          break;
 8013ea2:	e02d      	b.n	8013f00 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013ea4:	230f      	movs	r3, #15
 8013ea6:	18fc      	adds	r4, r7, r3
 8013ea8:	683a      	ldr	r2, [r7, #0]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	0011      	movs	r1, r2
 8013eae:	0018      	movs	r0, r3
 8013eb0:	f000 fcfa 	bl	80148a8 <USBD_SetConfig>
 8013eb4:	0003      	movs	r3, r0
 8013eb6:	7023      	strb	r3, [r4, #0]
          break;
 8013eb8:	e022      	b.n	8013f00 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013eba:	683a      	ldr	r2, [r7, #0]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	0011      	movs	r1, r2
 8013ec0:	0018      	movs	r0, r3
 8013ec2:	f000 fdbf 	bl	8014a44 <USBD_GetConfig>
          break;
 8013ec6:	e01b      	b.n	8013f00 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013ec8:	683a      	ldr	r2, [r7, #0]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	0011      	movs	r1, r2
 8013ece:	0018      	movs	r0, r3
 8013ed0:	f000 fdf4 	bl	8014abc <USBD_GetStatus>
          break;
 8013ed4:	e014      	b.n	8013f00 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013ed6:	683a      	ldr	r2, [r7, #0]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	0011      	movs	r1, r2
 8013edc:	0018      	movs	r0, r3
 8013ede:	f000 fe28 	bl	8014b32 <USBD_SetFeature>
          break;
 8013ee2:	e00d      	b.n	8013f00 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013ee4:	683a      	ldr	r2, [r7, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	0011      	movs	r1, r2
 8013eea:	0018      	movs	r0, r3
 8013eec:	f000 fe50 	bl	8014b90 <USBD_ClrFeature>
          break;
 8013ef0:	e006      	b.n	8013f00 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8013ef2:	683a      	ldr	r2, [r7, #0]
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	0011      	movs	r1, r2
 8013ef8:	0018      	movs	r0, r3
 8013efa:	f000 fead 	bl	8014c58 <USBD_CtlError>
          break;
 8013efe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013f00:	e006      	b.n	8013f10 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 8013f02:	683a      	ldr	r2, [r7, #0]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	0011      	movs	r1, r2
 8013f08:	0018      	movs	r0, r3
 8013f0a:	f000 fea5 	bl	8014c58 <USBD_CtlError>
      break;
 8013f0e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013f10:	230f      	movs	r3, #15
 8013f12:	18fb      	adds	r3, r7, r3
 8013f14:	781b      	ldrb	r3, [r3, #0]
}
 8013f16:	0018      	movs	r0, r3
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	b005      	add	sp, #20
 8013f1c:	bd90      	pop	{r4, r7, pc}
 8013f1e:	46c0      	nop			@ (mov r8, r8)
 8013f20:	08019b18 	.word	0x08019b18

08013f24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f24:	b5b0      	push	{r4, r5, r7, lr}
 8013f26:	b084      	sub	sp, #16
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
 8013f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f2e:	230f      	movs	r3, #15
 8013f30:	18fb      	adds	r3, r7, r3
 8013f32:	2200      	movs	r2, #0
 8013f34:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	001a      	movs	r2, r3
 8013f3c:	2360      	movs	r3, #96	@ 0x60
 8013f3e:	4013      	ands	r3, r2
 8013f40:	2b40      	cmp	r3, #64	@ 0x40
 8013f42:	d005      	beq.n	8013f50 <USBD_StdItfReq+0x2c>
 8013f44:	d900      	bls.n	8013f48 <USBD_StdItfReq+0x24>
 8013f46:	e06c      	b.n	8014022 <USBD_StdItfReq+0xfe>
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d001      	beq.n	8013f50 <USBD_StdItfReq+0x2c>
 8013f4c:	2b20      	cmp	r3, #32
 8013f4e:	d168      	bne.n	8014022 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	23a7      	movs	r3, #167	@ 0xa7
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	5cd3      	ldrb	r3, [r2, r3]
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	3b01      	subs	r3, #1
 8013f5c:	2b02      	cmp	r3, #2
 8013f5e:	d857      	bhi.n	8014010 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	889b      	ldrh	r3, [r3, #4]
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d84b      	bhi.n	8014002 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	889b      	ldrh	r3, [r3, #4]
 8013f6e:	b2da      	uxtb	r2, r3
 8013f70:	250e      	movs	r5, #14
 8013f72:	197c      	adds	r4, r7, r5
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	0011      	movs	r1, r2
 8013f78:	0018      	movs	r0, r3
 8013f7a:	f7ff feb6 	bl	8013cea <USBD_CoreFindIF>
 8013f7e:	0003      	movs	r3, r0
 8013f80:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f82:	0029      	movs	r1, r5
 8013f84:	187b      	adds	r3, r7, r1
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	2bff      	cmp	r3, #255	@ 0xff
 8013f8a:	d028      	beq.n	8013fde <USBD_StdItfReq+0xba>
 8013f8c:	187b      	adds	r3, r7, r1
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d124      	bne.n	8013fde <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013f94:	187b      	adds	r3, r7, r1
 8013f96:	781a      	ldrb	r2, [r3, #0]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	32ae      	adds	r2, #174	@ 0xae
 8013f9c:	0092      	lsls	r2, r2, #2
 8013f9e:	58d3      	ldr	r3, [r2, r3]
 8013fa0:	689b      	ldr	r3, [r3, #8]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d016      	beq.n	8013fd4 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8013fa6:	0008      	movs	r0, r1
 8013fa8:	187b      	adds	r3, r7, r1
 8013faa:	7819      	ldrb	r1, [r3, #0]
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	23b5      	movs	r3, #181	@ 0xb5
 8013fb0:	009b      	lsls	r3, r3, #2
 8013fb2:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013fb4:	183b      	adds	r3, r7, r0
 8013fb6:	781a      	ldrb	r2, [r3, #0]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	32ae      	adds	r2, #174	@ 0xae
 8013fbc:	0092      	lsls	r2, r2, #2
 8013fbe:	58d3      	ldr	r3, [r2, r3]
 8013fc0:	689b      	ldr	r3, [r3, #8]
 8013fc2:	220f      	movs	r2, #15
 8013fc4:	18bc      	adds	r4, r7, r2
 8013fc6:	6839      	ldr	r1, [r7, #0]
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	0010      	movs	r0, r2
 8013fcc:	4798      	blx	r3
 8013fce:	0003      	movs	r3, r0
 8013fd0:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8013fd2:	e008      	b.n	8013fe6 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013fd4:	230f      	movs	r3, #15
 8013fd6:	18fb      	adds	r3, r7, r3
 8013fd8:	2203      	movs	r2, #3
 8013fda:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8013fdc:	e003      	b.n	8013fe6 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013fde:	230f      	movs	r3, #15
 8013fe0:	18fb      	adds	r3, r7, r3
 8013fe2:	2203      	movs	r2, #3
 8013fe4:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	88db      	ldrh	r3, [r3, #6]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d117      	bne.n	801401e <USBD_StdItfReq+0xfa>
 8013fee:	230f      	movs	r3, #15
 8013ff0:	18fb      	adds	r3, r7, r3
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d112      	bne.n	801401e <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	0018      	movs	r0, r3
 8013ffc:	f000 ff12 	bl	8014e24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014000:	e00d      	b.n	801401e <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 8014002:	683a      	ldr	r2, [r7, #0]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	0011      	movs	r1, r2
 8014008:	0018      	movs	r0, r3
 801400a:	f000 fe25 	bl	8014c58 <USBD_CtlError>
          break;
 801400e:	e006      	b.n	801401e <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 8014010:	683a      	ldr	r2, [r7, #0]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	0011      	movs	r1, r2
 8014016:	0018      	movs	r0, r3
 8014018:	f000 fe1e 	bl	8014c58 <USBD_CtlError>
          break;
 801401c:	e000      	b.n	8014020 <USBD_StdItfReq+0xfc>
          break;
 801401e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014020:	e006      	b.n	8014030 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	0011      	movs	r1, r2
 8014028:	0018      	movs	r0, r3
 801402a:	f000 fe15 	bl	8014c58 <USBD_CtlError>
      break;
 801402e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014030:	230f      	movs	r3, #15
 8014032:	18fb      	adds	r3, r7, r3
 8014034:	781b      	ldrb	r3, [r3, #0]
}
 8014036:	0018      	movs	r0, r3
 8014038:	46bd      	mov	sp, r7
 801403a:	b004      	add	sp, #16
 801403c:	bdb0      	pop	{r4, r5, r7, pc}

0801403e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801403e:	b5b0      	push	{r4, r5, r7, lr}
 8014040:	b084      	sub	sp, #16
 8014042:	af00      	add	r7, sp, #0
 8014044:	6078      	str	r0, [r7, #4]
 8014046:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014048:	230f      	movs	r3, #15
 801404a:	18fb      	adds	r3, r7, r3
 801404c:	2200      	movs	r2, #0
 801404e:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	889a      	ldrh	r2, [r3, #4]
 8014054:	230e      	movs	r3, #14
 8014056:	18fb      	adds	r3, r7, r3
 8014058:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	001a      	movs	r2, r3
 8014060:	2360      	movs	r3, #96	@ 0x60
 8014062:	4013      	ands	r3, r2
 8014064:	2b40      	cmp	r3, #64	@ 0x40
 8014066:	d006      	beq.n	8014076 <USBD_StdEPReq+0x38>
 8014068:	d900      	bls.n	801406c <USBD_StdEPReq+0x2e>
 801406a:	e1de      	b.n	801442a <USBD_StdEPReq+0x3ec>
 801406c:	2b00      	cmp	r3, #0
 801406e:	d039      	beq.n	80140e4 <USBD_StdEPReq+0xa6>
 8014070:	2b20      	cmp	r3, #32
 8014072:	d000      	beq.n	8014076 <USBD_StdEPReq+0x38>
 8014074:	e1d9      	b.n	801442a <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014076:	250d      	movs	r5, #13
 8014078:	197c      	adds	r4, r7, r5
 801407a:	230e      	movs	r3, #14
 801407c:	18fb      	adds	r3, r7, r3
 801407e:	781a      	ldrb	r2, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	0011      	movs	r1, r2
 8014084:	0018      	movs	r0, r3
 8014086:	f7ff fe3c 	bl	8013d02 <USBD_CoreFindEP>
 801408a:	0003      	movs	r3, r0
 801408c:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801408e:	197b      	adds	r3, r7, r5
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	2bff      	cmp	r3, #255	@ 0xff
 8014094:	d100      	bne.n	8014098 <USBD_StdEPReq+0x5a>
 8014096:	e1cf      	b.n	8014438 <USBD_StdEPReq+0x3fa>
 8014098:	197b      	adds	r3, r7, r5
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d000      	beq.n	80140a2 <USBD_StdEPReq+0x64>
 80140a0:	e1ca      	b.n	8014438 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 80140a2:	197b      	adds	r3, r7, r5
 80140a4:	7819      	ldrb	r1, [r3, #0]
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	23b5      	movs	r3, #181	@ 0xb5
 80140aa:	009b      	lsls	r3, r3, #2
 80140ac:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80140ae:	0029      	movs	r1, r5
 80140b0:	187b      	adds	r3, r7, r1
 80140b2:	781a      	ldrb	r2, [r3, #0]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	32ae      	adds	r2, #174	@ 0xae
 80140b8:	0092      	lsls	r2, r2, #2
 80140ba:	58d3      	ldr	r3, [r2, r3]
 80140bc:	689b      	ldr	r3, [r3, #8]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d100      	bne.n	80140c4 <USBD_StdEPReq+0x86>
 80140c2:	e1b9      	b.n	8014438 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80140c4:	187b      	adds	r3, r7, r1
 80140c6:	781a      	ldrb	r2, [r3, #0]
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	32ae      	adds	r2, #174	@ 0xae
 80140cc:	0092      	lsls	r2, r2, #2
 80140ce:	58d3      	ldr	r3, [r2, r3]
 80140d0:	689b      	ldr	r3, [r3, #8]
 80140d2:	220f      	movs	r2, #15
 80140d4:	18bc      	adds	r4, r7, r2
 80140d6:	6839      	ldr	r1, [r7, #0]
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	0010      	movs	r0, r2
 80140dc:	4798      	blx	r3
 80140de:	0003      	movs	r3, r0
 80140e0:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 80140e2:	e1a9      	b.n	8014438 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	785b      	ldrb	r3, [r3, #1]
 80140e8:	2b03      	cmp	r3, #3
 80140ea:	d007      	beq.n	80140fc <USBD_StdEPReq+0xbe>
 80140ec:	dd00      	ble.n	80140f0 <USBD_StdEPReq+0xb2>
 80140ee:	e194      	b.n	801441a <USBD_StdEPReq+0x3dc>
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d100      	bne.n	80140f6 <USBD_StdEPReq+0xb8>
 80140f4:	e0c9      	b.n	801428a <USBD_StdEPReq+0x24c>
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	d04d      	beq.n	8014196 <USBD_StdEPReq+0x158>
 80140fa:	e18e      	b.n	801441a <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80140fc:	687a      	ldr	r2, [r7, #4]
 80140fe:	23a7      	movs	r3, #167	@ 0xa7
 8014100:	009b      	lsls	r3, r3, #2
 8014102:	5cd3      	ldrb	r3, [r2, r3]
 8014104:	b2db      	uxtb	r3, r3
 8014106:	2b02      	cmp	r3, #2
 8014108:	d002      	beq.n	8014110 <USBD_StdEPReq+0xd2>
 801410a:	2b03      	cmp	r3, #3
 801410c:	d01e      	beq.n	801414c <USBD_StdEPReq+0x10e>
 801410e:	e03a      	b.n	8014186 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014110:	220e      	movs	r2, #14
 8014112:	18bb      	adds	r3, r7, r2
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d011      	beq.n	801413e <USBD_StdEPReq+0x100>
 801411a:	18bb      	adds	r3, r7, r2
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	2b80      	cmp	r3, #128	@ 0x80
 8014120:	d00d      	beq.n	801413e <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014122:	18bb      	adds	r3, r7, r2
 8014124:	781a      	ldrb	r2, [r3, #0]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	0011      	movs	r1, r2
 801412a:	0018      	movs	r0, r3
 801412c:	f005 f8e3 	bl	80192f6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2180      	movs	r1, #128	@ 0x80
 8014134:	0018      	movs	r0, r3
 8014136:	f005 f8de 	bl	80192f6 <USBD_LL_StallEP>
 801413a:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801413c:	e02a      	b.n	8014194 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 801413e:	683a      	ldr	r2, [r7, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	0011      	movs	r1, r2
 8014144:	0018      	movs	r0, r3
 8014146:	f000 fd87 	bl	8014c58 <USBD_CtlError>
              break;
 801414a:	e023      	b.n	8014194 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	885b      	ldrh	r3, [r3, #2]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d113      	bne.n	801417c <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014154:	220e      	movs	r2, #14
 8014156:	18bb      	adds	r3, r7, r2
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d00e      	beq.n	801417c <USBD_StdEPReq+0x13e>
 801415e:	18bb      	adds	r3, r7, r2
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	2b80      	cmp	r3, #128	@ 0x80
 8014164:	d00a      	beq.n	801417c <USBD_StdEPReq+0x13e>
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	88db      	ldrh	r3, [r3, #6]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d106      	bne.n	801417c <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801416e:	18bb      	adds	r3, r7, r2
 8014170:	781a      	ldrb	r2, [r3, #0]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	0011      	movs	r1, r2
 8014176:	0018      	movs	r0, r3
 8014178:	f005 f8bd 	bl	80192f6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	0018      	movs	r0, r3
 8014180:	f000 fe50 	bl	8014e24 <USBD_CtlSendStatus>

              break;
 8014184:	e006      	b.n	8014194 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8014186:	683a      	ldr	r2, [r7, #0]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	0011      	movs	r1, r2
 801418c:	0018      	movs	r0, r3
 801418e:	f000 fd63 	bl	8014c58 <USBD_CtlError>
              break;
 8014192:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014194:	e148      	b.n	8014428 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	23a7      	movs	r3, #167	@ 0xa7
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	5cd3      	ldrb	r3, [r2, r3]
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d002      	beq.n	80141aa <USBD_StdEPReq+0x16c>
 80141a4:	2b03      	cmp	r3, #3
 80141a6:	d01e      	beq.n	80141e6 <USBD_StdEPReq+0x1a8>
 80141a8:	e066      	b.n	8014278 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141aa:	220e      	movs	r2, #14
 80141ac:	18bb      	adds	r3, r7, r2
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d011      	beq.n	80141d8 <USBD_StdEPReq+0x19a>
 80141b4:	18bb      	adds	r3, r7, r2
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	2b80      	cmp	r3, #128	@ 0x80
 80141ba:	d00d      	beq.n	80141d8 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80141bc:	18bb      	adds	r3, r7, r2
 80141be:	781a      	ldrb	r2, [r3, #0]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	0011      	movs	r1, r2
 80141c4:	0018      	movs	r0, r3
 80141c6:	f005 f896 	bl	80192f6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2180      	movs	r1, #128	@ 0x80
 80141ce:	0018      	movs	r0, r3
 80141d0:	f005 f891 	bl	80192f6 <USBD_LL_StallEP>
 80141d4:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80141d6:	e057      	b.n	8014288 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	0011      	movs	r1, r2
 80141de:	0018      	movs	r0, r3
 80141e0:	f000 fd3a 	bl	8014c58 <USBD_CtlError>
              break;
 80141e4:	e050      	b.n	8014288 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	885b      	ldrh	r3, [r3, #2]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d14b      	bne.n	8014286 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80141ee:	210e      	movs	r1, #14
 80141f0:	187b      	adds	r3, r7, r1
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	227f      	movs	r2, #127	@ 0x7f
 80141f6:	4013      	ands	r3, r2
 80141f8:	d006      	beq.n	8014208 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80141fa:	187b      	adds	r3, r7, r1
 80141fc:	781a      	ldrb	r2, [r3, #0]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	0011      	movs	r1, r2
 8014202:	0018      	movs	r0, r3
 8014204:	f005 f8a2 	bl	801934c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	0018      	movs	r0, r3
 801420c:	f000 fe0a 	bl	8014e24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014210:	250d      	movs	r5, #13
 8014212:	197c      	adds	r4, r7, r5
 8014214:	230e      	movs	r3, #14
 8014216:	18fb      	adds	r3, r7, r3
 8014218:	781a      	ldrb	r2, [r3, #0]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	0011      	movs	r1, r2
 801421e:	0018      	movs	r0, r3
 8014220:	f7ff fd6f 	bl	8013d02 <USBD_CoreFindEP>
 8014224:	0003      	movs	r3, r0
 8014226:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014228:	197b      	adds	r3, r7, r5
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	2bff      	cmp	r3, #255	@ 0xff
 801422e:	d02a      	beq.n	8014286 <USBD_StdEPReq+0x248>
 8014230:	197b      	adds	r3, r7, r5
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d126      	bne.n	8014286 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8014238:	197b      	adds	r3, r7, r5
 801423a:	7819      	ldrb	r1, [r3, #0]
 801423c:	687a      	ldr	r2, [r7, #4]
 801423e:	23b5      	movs	r3, #181	@ 0xb5
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014244:	0029      	movs	r1, r5
 8014246:	187b      	adds	r3, r7, r1
 8014248:	781a      	ldrb	r2, [r3, #0]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	32ae      	adds	r2, #174	@ 0xae
 801424e:	0092      	lsls	r2, r2, #2
 8014250:	58d3      	ldr	r3, [r2, r3]
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d016      	beq.n	8014286 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014258:	187b      	adds	r3, r7, r1
 801425a:	781a      	ldrb	r2, [r3, #0]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	32ae      	adds	r2, #174	@ 0xae
 8014260:	0092      	lsls	r2, r2, #2
 8014262:	58d3      	ldr	r3, [r2, r3]
 8014264:	689b      	ldr	r3, [r3, #8]
 8014266:	220f      	movs	r2, #15
 8014268:	18bc      	adds	r4, r7, r2
 801426a:	6839      	ldr	r1, [r7, #0]
 801426c:	687a      	ldr	r2, [r7, #4]
 801426e:	0010      	movs	r0, r2
 8014270:	4798      	blx	r3
 8014272:	0003      	movs	r3, r0
 8014274:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 8014276:	e006      	b.n	8014286 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 8014278:	683a      	ldr	r2, [r7, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	0011      	movs	r1, r2
 801427e:	0018      	movs	r0, r3
 8014280:	f000 fcea 	bl	8014c58 <USBD_CtlError>
              break;
 8014284:	e000      	b.n	8014288 <USBD_StdEPReq+0x24a>
              break;
 8014286:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014288:	e0ce      	b.n	8014428 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	23a7      	movs	r3, #167	@ 0xa7
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	5cd3      	ldrb	r3, [r2, r3]
 8014292:	b2db      	uxtb	r3, r3
 8014294:	2b02      	cmp	r3, #2
 8014296:	d002      	beq.n	801429e <USBD_StdEPReq+0x260>
 8014298:	2b03      	cmp	r3, #3
 801429a:	d03c      	beq.n	8014316 <USBD_StdEPReq+0x2d8>
 801429c:	e0b5      	b.n	801440a <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801429e:	220e      	movs	r2, #14
 80142a0:	18bb      	adds	r3, r7, r2
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d00a      	beq.n	80142be <USBD_StdEPReq+0x280>
 80142a8:	18bb      	adds	r3, r7, r2
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	2b80      	cmp	r3, #128	@ 0x80
 80142ae:	d006      	beq.n	80142be <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 80142b0:	683a      	ldr	r2, [r7, #0]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	0011      	movs	r1, r2
 80142b6:	0018      	movs	r0, r3
 80142b8:	f000 fcce 	bl	8014c58 <USBD_CtlError>
                break;
 80142bc:	e0ac      	b.n	8014418 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142be:	220e      	movs	r2, #14
 80142c0:	18bb      	adds	r3, r7, r2
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	b25b      	sxtb	r3, r3
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	da0c      	bge.n	80142e4 <USBD_StdEPReq+0x2a6>
 80142ca:	18bb      	adds	r3, r7, r2
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	227f      	movs	r2, #127	@ 0x7f
 80142d0:	401a      	ands	r2, r3
 80142d2:	0013      	movs	r3, r2
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	189b      	adds	r3, r3, r2
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	3310      	adds	r3, #16
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	18d3      	adds	r3, r2, r3
 80142e0:	3304      	adds	r3, #4
 80142e2:	e00d      	b.n	8014300 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80142e4:	230e      	movs	r3, #14
 80142e6:	18fb      	adds	r3, r7, r3
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	227f      	movs	r2, #127	@ 0x7f
 80142ec:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142ee:	0013      	movs	r3, r2
 80142f0:	009b      	lsls	r3, r3, #2
 80142f2:	189b      	adds	r3, r3, r2
 80142f4:	009b      	lsls	r3, r3, #2
 80142f6:	3351      	adds	r3, #81	@ 0x51
 80142f8:	33ff      	adds	r3, #255	@ 0xff
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	18d3      	adds	r3, r2, r3
 80142fe:	3304      	adds	r3, #4
 8014300:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014308:	68b9      	ldr	r1, [r7, #8]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2202      	movs	r2, #2
 801430e:	0018      	movs	r0, r3
 8014310:	f000 fd2a 	bl	8014d68 <USBD_CtlSendData>
              break;
 8014314:	e080      	b.n	8014418 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014316:	220e      	movs	r2, #14
 8014318:	18bb      	adds	r3, r7, r2
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	b25b      	sxtb	r3, r3
 801431e:	2b00      	cmp	r3, #0
 8014320:	da14      	bge.n	801434c <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014322:	18bb      	adds	r3, r7, r2
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	220f      	movs	r2, #15
 8014328:	401a      	ands	r2, r3
 801432a:	6879      	ldr	r1, [r7, #4]
 801432c:	0013      	movs	r3, r2
 801432e:	009b      	lsls	r3, r3, #2
 8014330:	189b      	adds	r3, r3, r2
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	18cb      	adds	r3, r1, r3
 8014336:	3324      	adds	r3, #36	@ 0x24
 8014338:	881b      	ldrh	r3, [r3, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d11e      	bne.n	801437c <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 801433e:	683a      	ldr	r2, [r7, #0]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	0011      	movs	r1, r2
 8014344:	0018      	movs	r0, r3
 8014346:	f000 fc87 	bl	8014c58 <USBD_CtlError>
                  break;
 801434a:	e065      	b.n	8014418 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801434c:	230e      	movs	r3, #14
 801434e:	18fb      	adds	r3, r7, r3
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	220f      	movs	r2, #15
 8014354:	401a      	ands	r2, r3
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	23b2      	movs	r3, #178	@ 0xb2
 801435a:	0059      	lsls	r1, r3, #1
 801435c:	0013      	movs	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	189b      	adds	r3, r3, r2
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	18c3      	adds	r3, r0, r3
 8014366:	185b      	adds	r3, r3, r1
 8014368:	881b      	ldrh	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d106      	bne.n	801437c <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 801436e:	683a      	ldr	r2, [r7, #0]
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	0011      	movs	r1, r2
 8014374:	0018      	movs	r0, r3
 8014376:	f000 fc6f 	bl	8014c58 <USBD_CtlError>
                  break;
 801437a:	e04d      	b.n	8014418 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801437c:	220e      	movs	r2, #14
 801437e:	18bb      	adds	r3, r7, r2
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	b25b      	sxtb	r3, r3
 8014384:	2b00      	cmp	r3, #0
 8014386:	da0c      	bge.n	80143a2 <USBD_StdEPReq+0x364>
 8014388:	18bb      	adds	r3, r7, r2
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	227f      	movs	r2, #127	@ 0x7f
 801438e:	401a      	ands	r2, r3
 8014390:	0013      	movs	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	189b      	adds	r3, r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	3310      	adds	r3, #16
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	18d3      	adds	r3, r2, r3
 801439e:	3304      	adds	r3, #4
 80143a0:	e00d      	b.n	80143be <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80143a2:	230e      	movs	r3, #14
 80143a4:	18fb      	adds	r3, r7, r3
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	227f      	movs	r2, #127	@ 0x7f
 80143aa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80143ac:	0013      	movs	r3, r2
 80143ae:	009b      	lsls	r3, r3, #2
 80143b0:	189b      	adds	r3, r3, r2
 80143b2:	009b      	lsls	r3, r3, #2
 80143b4:	3351      	adds	r3, #81	@ 0x51
 80143b6:	33ff      	adds	r3, #255	@ 0xff
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	18d3      	adds	r3, r2, r3
 80143bc:	3304      	adds	r3, #4
 80143be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80143c0:	220e      	movs	r2, #14
 80143c2:	18bb      	adds	r3, r7, r2
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d003      	beq.n	80143d2 <USBD_StdEPReq+0x394>
 80143ca:	18bb      	adds	r3, r7, r2
 80143cc:	781b      	ldrb	r3, [r3, #0]
 80143ce:	2b80      	cmp	r3, #128	@ 0x80
 80143d0:	d103      	bne.n	80143da <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	2200      	movs	r2, #0
 80143d6:	601a      	str	r2, [r3, #0]
 80143d8:	e010      	b.n	80143fc <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80143da:	230e      	movs	r3, #14
 80143dc:	18fb      	adds	r3, r7, r3
 80143de:	781a      	ldrb	r2, [r3, #0]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	0011      	movs	r1, r2
 80143e4:	0018      	movs	r0, r3
 80143e6:	f004 ffdc 	bl	80193a2 <USBD_LL_IsStallEP>
 80143ea:	1e03      	subs	r3, r0, #0
 80143ec:	d003      	beq.n	80143f6 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	2201      	movs	r2, #1
 80143f2:	601a      	str	r2, [r3, #0]
 80143f4:	e002      	b.n	80143fc <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	2200      	movs	r2, #0
 80143fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80143fc:	68b9      	ldr	r1, [r7, #8]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2202      	movs	r2, #2
 8014402:	0018      	movs	r0, r3
 8014404:	f000 fcb0 	bl	8014d68 <USBD_CtlSendData>
              break;
 8014408:	e006      	b.n	8014418 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 801440a:	683a      	ldr	r2, [r7, #0]
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	0011      	movs	r1, r2
 8014410:	0018      	movs	r0, r3
 8014412:	f000 fc21 	bl	8014c58 <USBD_CtlError>
              break;
 8014416:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014418:	e006      	b.n	8014428 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 801441a:	683a      	ldr	r2, [r7, #0]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	0011      	movs	r1, r2
 8014420:	0018      	movs	r0, r3
 8014422:	f000 fc19 	bl	8014c58 <USBD_CtlError>
          break;
 8014426:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014428:	e007      	b.n	801443a <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 801442a:	683a      	ldr	r2, [r7, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	0011      	movs	r1, r2
 8014430:	0018      	movs	r0, r3
 8014432:	f000 fc11 	bl	8014c58 <USBD_CtlError>
      break;
 8014436:	e000      	b.n	801443a <USBD_StdEPReq+0x3fc>
      break;
 8014438:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801443a:	230f      	movs	r3, #15
 801443c:	18fb      	adds	r3, r7, r3
 801443e:	781b      	ldrb	r3, [r3, #0]
}
 8014440:	0018      	movs	r0, r3
 8014442:	46bd      	mov	sp, r7
 8014444:	b004      	add	sp, #16
 8014446:	bdb0      	pop	{r4, r5, r7, pc}

08014448 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b084      	sub	sp, #16
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014452:	2308      	movs	r3, #8
 8014454:	18fb      	adds	r3, r7, r3
 8014456:	2200      	movs	r2, #0
 8014458:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801445a:	2300      	movs	r3, #0
 801445c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801445e:	230b      	movs	r3, #11
 8014460:	18fb      	adds	r3, r7, r3
 8014462:	2200      	movs	r2, #0
 8014464:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	885b      	ldrh	r3, [r3, #2]
 801446a:	0a1b      	lsrs	r3, r3, #8
 801446c:	b29b      	uxth	r3, r3
 801446e:	2b0f      	cmp	r3, #15
 8014470:	d900      	bls.n	8014474 <USBD_GetDescriptor+0x2c>
 8014472:	e17b      	b.n	801476c <USBD_GetDescriptor+0x324>
 8014474:	009a      	lsls	r2, r3, #2
 8014476:	4bdd      	ldr	r3, [pc, #884]	@ (80147ec <USBD_GetDescriptor+0x3a4>)
 8014478:	18d3      	adds	r3, r2, r3
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	23ad      	movs	r3, #173	@ 0xad
 8014482:	009b      	lsls	r3, r3, #2
 8014484:	58d3      	ldr	r3, [r2, r3]
 8014486:	69db      	ldr	r3, [r3, #28]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d00d      	beq.n	80144a8 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	23ad      	movs	r3, #173	@ 0xad
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	58d3      	ldr	r3, [r2, r3]
 8014494:	69db      	ldr	r3, [r3, #28]
 8014496:	687a      	ldr	r2, [r7, #4]
 8014498:	7c12      	ldrb	r2, [r2, #16]
 801449a:	2108      	movs	r1, #8
 801449c:	1879      	adds	r1, r7, r1
 801449e:	0010      	movs	r0, r2
 80144a0:	4798      	blx	r3
 80144a2:	0003      	movs	r3, r0
 80144a4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80144a6:	e16e      	b.n	8014786 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80144a8:	683a      	ldr	r2, [r7, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	0011      	movs	r1, r2
 80144ae:	0018      	movs	r0, r3
 80144b0:	f000 fbd2 	bl	8014c58 <USBD_CtlError>
        err++;
 80144b4:	210b      	movs	r1, #11
 80144b6:	187b      	adds	r3, r7, r1
 80144b8:	781a      	ldrb	r2, [r3, #0]
 80144ba:	187b      	adds	r3, r7, r1
 80144bc:	3201      	adds	r2, #1
 80144be:	701a      	strb	r2, [r3, #0]
      break;
 80144c0:	e161      	b.n	8014786 <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80144c2:	687a      	ldr	r2, [r7, #4]
 80144c4:	23ad      	movs	r3, #173	@ 0xad
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	58d3      	ldr	r3, [r2, r3]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	687a      	ldr	r2, [r7, #4]
 80144ce:	7c12      	ldrb	r2, [r2, #16]
 80144d0:	2108      	movs	r1, #8
 80144d2:	1879      	adds	r1, r7, r1
 80144d4:	0010      	movs	r0, r2
 80144d6:	4798      	blx	r3
 80144d8:	0003      	movs	r3, r0
 80144da:	60fb      	str	r3, [r7, #12]
      break;
 80144dc:	e153      	b.n	8014786 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	7c1b      	ldrb	r3, [r3, #16]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d10f      	bne.n	8014506 <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	23ae      	movs	r3, #174	@ 0xae
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	58d3      	ldr	r3, [r2, r3]
 80144ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144f0:	2208      	movs	r2, #8
 80144f2:	18ba      	adds	r2, r7, r2
 80144f4:	0010      	movs	r0, r2
 80144f6:	4798      	blx	r3
 80144f8:	0003      	movs	r3, r0
 80144fa:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	3301      	adds	r3, #1
 8014500:	2202      	movs	r2, #2
 8014502:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014504:	e13f      	b.n	8014786 <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	23ae      	movs	r3, #174	@ 0xae
 801450a:	009b      	lsls	r3, r3, #2
 801450c:	58d3      	ldr	r3, [r2, r3]
 801450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014510:	2208      	movs	r2, #8
 8014512:	18ba      	adds	r2, r7, r2
 8014514:	0010      	movs	r0, r2
 8014516:	4798      	blx	r3
 8014518:	0003      	movs	r3, r0
 801451a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	3301      	adds	r3, #1
 8014520:	2202      	movs	r2, #2
 8014522:	701a      	strb	r2, [r3, #0]
      break;
 8014524:	e12f      	b.n	8014786 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	885b      	ldrh	r3, [r3, #2]
 801452a:	b2db      	uxtb	r3, r3
 801452c:	2b05      	cmp	r3, #5
 801452e:	d900      	bls.n	8014532 <USBD_GetDescriptor+0xea>
 8014530:	e0d0      	b.n	80146d4 <USBD_GetDescriptor+0x28c>
 8014532:	009a      	lsls	r2, r3, #2
 8014534:	4bae      	ldr	r3, [pc, #696]	@ (80147f0 <USBD_GetDescriptor+0x3a8>)
 8014536:	18d3      	adds	r3, r2, r3
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	23ad      	movs	r3, #173	@ 0xad
 8014540:	009b      	lsls	r3, r3, #2
 8014542:	58d3      	ldr	r3, [r2, r3]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d00d      	beq.n	8014566 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	23ad      	movs	r3, #173	@ 0xad
 801454e:	009b      	lsls	r3, r3, #2
 8014550:	58d3      	ldr	r3, [r2, r3]
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	7c12      	ldrb	r2, [r2, #16]
 8014558:	2108      	movs	r1, #8
 801455a:	1879      	adds	r1, r7, r1
 801455c:	0010      	movs	r0, r2
 801455e:	4798      	blx	r3
 8014560:	0003      	movs	r3, r0
 8014562:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014564:	e0c3      	b.n	80146ee <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014566:	683a      	ldr	r2, [r7, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	0011      	movs	r1, r2
 801456c:	0018      	movs	r0, r3
 801456e:	f000 fb73 	bl	8014c58 <USBD_CtlError>
            err++;
 8014572:	210b      	movs	r1, #11
 8014574:	187b      	adds	r3, r7, r1
 8014576:	781a      	ldrb	r2, [r3, #0]
 8014578:	187b      	adds	r3, r7, r1
 801457a:	3201      	adds	r2, #1
 801457c:	701a      	strb	r2, [r3, #0]
          break;
 801457e:	e0b6      	b.n	80146ee <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014580:	687a      	ldr	r2, [r7, #4]
 8014582:	23ad      	movs	r3, #173	@ 0xad
 8014584:	009b      	lsls	r3, r3, #2
 8014586:	58d3      	ldr	r3, [r2, r3]
 8014588:	689b      	ldr	r3, [r3, #8]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d00d      	beq.n	80145aa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	23ad      	movs	r3, #173	@ 0xad
 8014592:	009b      	lsls	r3, r3, #2
 8014594:	58d3      	ldr	r3, [r2, r3]
 8014596:	689b      	ldr	r3, [r3, #8]
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	7c12      	ldrb	r2, [r2, #16]
 801459c:	2108      	movs	r1, #8
 801459e:	1879      	adds	r1, r7, r1
 80145a0:	0010      	movs	r0, r2
 80145a2:	4798      	blx	r3
 80145a4:	0003      	movs	r3, r0
 80145a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145a8:	e0a1      	b.n	80146ee <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80145aa:	683a      	ldr	r2, [r7, #0]
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	0011      	movs	r1, r2
 80145b0:	0018      	movs	r0, r3
 80145b2:	f000 fb51 	bl	8014c58 <USBD_CtlError>
            err++;
 80145b6:	210b      	movs	r1, #11
 80145b8:	187b      	adds	r3, r7, r1
 80145ba:	781a      	ldrb	r2, [r3, #0]
 80145bc:	187b      	adds	r3, r7, r1
 80145be:	3201      	adds	r2, #1
 80145c0:	701a      	strb	r2, [r3, #0]
          break;
 80145c2:	e094      	b.n	80146ee <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	23ad      	movs	r3, #173	@ 0xad
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	58d3      	ldr	r3, [r2, r3]
 80145cc:	68db      	ldr	r3, [r3, #12]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00d      	beq.n	80145ee <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	23ad      	movs	r3, #173	@ 0xad
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	58d3      	ldr	r3, [r2, r3]
 80145da:	68db      	ldr	r3, [r3, #12]
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	7c12      	ldrb	r2, [r2, #16]
 80145e0:	2108      	movs	r1, #8
 80145e2:	1879      	adds	r1, r7, r1
 80145e4:	0010      	movs	r0, r2
 80145e6:	4798      	blx	r3
 80145e8:	0003      	movs	r3, r0
 80145ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145ec:	e07f      	b.n	80146ee <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80145ee:	683a      	ldr	r2, [r7, #0]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	0011      	movs	r1, r2
 80145f4:	0018      	movs	r0, r3
 80145f6:	f000 fb2f 	bl	8014c58 <USBD_CtlError>
            err++;
 80145fa:	210b      	movs	r1, #11
 80145fc:	187b      	adds	r3, r7, r1
 80145fe:	781a      	ldrb	r2, [r3, #0]
 8014600:	187b      	adds	r3, r7, r1
 8014602:	3201      	adds	r2, #1
 8014604:	701a      	strb	r2, [r3, #0]
          break;
 8014606:	e072      	b.n	80146ee <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014608:	687a      	ldr	r2, [r7, #4]
 801460a:	23ad      	movs	r3, #173	@ 0xad
 801460c:	009b      	lsls	r3, r3, #2
 801460e:	58d3      	ldr	r3, [r2, r3]
 8014610:	691b      	ldr	r3, [r3, #16]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00d      	beq.n	8014632 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	23ad      	movs	r3, #173	@ 0xad
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	58d3      	ldr	r3, [r2, r3]
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	7c12      	ldrb	r2, [r2, #16]
 8014624:	2108      	movs	r1, #8
 8014626:	1879      	adds	r1, r7, r1
 8014628:	0010      	movs	r0, r2
 801462a:	4798      	blx	r3
 801462c:	0003      	movs	r3, r0
 801462e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014630:	e05d      	b.n	80146ee <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014632:	683a      	ldr	r2, [r7, #0]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	0011      	movs	r1, r2
 8014638:	0018      	movs	r0, r3
 801463a:	f000 fb0d 	bl	8014c58 <USBD_CtlError>
            err++;
 801463e:	210b      	movs	r1, #11
 8014640:	187b      	adds	r3, r7, r1
 8014642:	781a      	ldrb	r2, [r3, #0]
 8014644:	187b      	adds	r3, r7, r1
 8014646:	3201      	adds	r2, #1
 8014648:	701a      	strb	r2, [r3, #0]
          break;
 801464a:	e050      	b.n	80146ee <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801464c:	687a      	ldr	r2, [r7, #4]
 801464e:	23ad      	movs	r3, #173	@ 0xad
 8014650:	009b      	lsls	r3, r3, #2
 8014652:	58d3      	ldr	r3, [r2, r3]
 8014654:	695b      	ldr	r3, [r3, #20]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00d      	beq.n	8014676 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	23ad      	movs	r3, #173	@ 0xad
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	58d3      	ldr	r3, [r2, r3]
 8014662:	695b      	ldr	r3, [r3, #20]
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	7c12      	ldrb	r2, [r2, #16]
 8014668:	2108      	movs	r1, #8
 801466a:	1879      	adds	r1, r7, r1
 801466c:	0010      	movs	r0, r2
 801466e:	4798      	blx	r3
 8014670:	0003      	movs	r3, r0
 8014672:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014674:	e03b      	b.n	80146ee <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014676:	683a      	ldr	r2, [r7, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	0011      	movs	r1, r2
 801467c:	0018      	movs	r0, r3
 801467e:	f000 faeb 	bl	8014c58 <USBD_CtlError>
            err++;
 8014682:	210b      	movs	r1, #11
 8014684:	187b      	adds	r3, r7, r1
 8014686:	781a      	ldrb	r2, [r3, #0]
 8014688:	187b      	adds	r3, r7, r1
 801468a:	3201      	adds	r2, #1
 801468c:	701a      	strb	r2, [r3, #0]
          break;
 801468e:	e02e      	b.n	80146ee <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	23ad      	movs	r3, #173	@ 0xad
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	58d3      	ldr	r3, [r2, r3]
 8014698:	699b      	ldr	r3, [r3, #24]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00d      	beq.n	80146ba <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	23ad      	movs	r3, #173	@ 0xad
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	58d3      	ldr	r3, [r2, r3]
 80146a6:	699b      	ldr	r3, [r3, #24]
 80146a8:	687a      	ldr	r2, [r7, #4]
 80146aa:	7c12      	ldrb	r2, [r2, #16]
 80146ac:	2108      	movs	r1, #8
 80146ae:	1879      	adds	r1, r7, r1
 80146b0:	0010      	movs	r0, r2
 80146b2:	4798      	blx	r3
 80146b4:	0003      	movs	r3, r0
 80146b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146b8:	e019      	b.n	80146ee <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80146ba:	683a      	ldr	r2, [r7, #0]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	0011      	movs	r1, r2
 80146c0:	0018      	movs	r0, r3
 80146c2:	f000 fac9 	bl	8014c58 <USBD_CtlError>
            err++;
 80146c6:	210b      	movs	r1, #11
 80146c8:	187b      	adds	r3, r7, r1
 80146ca:	781a      	ldrb	r2, [r3, #0]
 80146cc:	187b      	adds	r3, r7, r1
 80146ce:	3201      	adds	r2, #1
 80146d0:	701a      	strb	r2, [r3, #0]
          break;
 80146d2:	e00c      	b.n	80146ee <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80146d4:	683a      	ldr	r2, [r7, #0]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	0011      	movs	r1, r2
 80146da:	0018      	movs	r0, r3
 80146dc:	f000 fabc 	bl	8014c58 <USBD_CtlError>
          err++;
 80146e0:	210b      	movs	r1, #11
 80146e2:	187b      	adds	r3, r7, r1
 80146e4:	781a      	ldrb	r2, [r3, #0]
 80146e6:	187b      	adds	r3, r7, r1
 80146e8:	3201      	adds	r2, #1
 80146ea:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80146ec:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80146ee:	e04a      	b.n	8014786 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	7c1b      	ldrb	r3, [r3, #16]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d10b      	bne.n	8014710 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	23ae      	movs	r3, #174	@ 0xae
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	58d3      	ldr	r3, [r2, r3]
 8014700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014702:	2208      	movs	r2, #8
 8014704:	18ba      	adds	r2, r7, r2
 8014706:	0010      	movs	r0, r2
 8014708:	4798      	blx	r3
 801470a:	0003      	movs	r3, r0
 801470c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801470e:	e03a      	b.n	8014786 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8014710:	683a      	ldr	r2, [r7, #0]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	0011      	movs	r1, r2
 8014716:	0018      	movs	r0, r3
 8014718:	f000 fa9e 	bl	8014c58 <USBD_CtlError>
        err++;
 801471c:	210b      	movs	r1, #11
 801471e:	187b      	adds	r3, r7, r1
 8014720:	781a      	ldrb	r2, [r3, #0]
 8014722:	187b      	adds	r3, r7, r1
 8014724:	3201      	adds	r2, #1
 8014726:	701a      	strb	r2, [r3, #0]
      break;
 8014728:	e02d      	b.n	8014786 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	7c1b      	ldrb	r3, [r3, #16]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d10f      	bne.n	8014752 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	23ae      	movs	r3, #174	@ 0xae
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	58d3      	ldr	r3, [r2, r3]
 801473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801473c:	2208      	movs	r2, #8
 801473e:	18ba      	adds	r2, r7, r2
 8014740:	0010      	movs	r0, r2
 8014742:	4798      	blx	r3
 8014744:	0003      	movs	r3, r0
 8014746:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	3301      	adds	r3, #1
 801474c:	2207      	movs	r2, #7
 801474e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014750:	e019      	b.n	8014786 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8014752:	683a      	ldr	r2, [r7, #0]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	0011      	movs	r1, r2
 8014758:	0018      	movs	r0, r3
 801475a:	f000 fa7d 	bl	8014c58 <USBD_CtlError>
        err++;
 801475e:	210b      	movs	r1, #11
 8014760:	187b      	adds	r3, r7, r1
 8014762:	781a      	ldrb	r2, [r3, #0]
 8014764:	187b      	adds	r3, r7, r1
 8014766:	3201      	adds	r2, #1
 8014768:	701a      	strb	r2, [r3, #0]
      break;
 801476a:	e00c      	b.n	8014786 <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 801476c:	683a      	ldr	r2, [r7, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	0011      	movs	r1, r2
 8014772:	0018      	movs	r0, r3
 8014774:	f000 fa70 	bl	8014c58 <USBD_CtlError>
      err++;
 8014778:	210b      	movs	r1, #11
 801477a:	187b      	adds	r3, r7, r1
 801477c:	781a      	ldrb	r2, [r3, #0]
 801477e:	187b      	adds	r3, r7, r1
 8014780:	3201      	adds	r2, #1
 8014782:	701a      	strb	r2, [r3, #0]
      break;
 8014784:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014786:	230b      	movs	r3, #11
 8014788:	18fb      	adds	r3, r7, r3
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d131      	bne.n	80147f4 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	88db      	ldrh	r3, [r3, #6]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d023      	beq.n	80147e0 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 8014798:	2108      	movs	r1, #8
 801479a:	187b      	adds	r3, r7, r1
 801479c:	881b      	ldrh	r3, [r3, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d017      	beq.n	80147d2 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	88da      	ldrh	r2, [r3, #6]
 80147a6:	187b      	adds	r3, r7, r1
 80147a8:	881b      	ldrh	r3, [r3, #0]
 80147aa:	1c18      	adds	r0, r3, #0
 80147ac:	1c11      	adds	r1, r2, #0
 80147ae:	b28a      	uxth	r2, r1
 80147b0:	b283      	uxth	r3, r0
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d900      	bls.n	80147b8 <USBD_GetDescriptor+0x370>
 80147b6:	1c01      	adds	r1, r0, #0
 80147b8:	b28a      	uxth	r2, r1
 80147ba:	2108      	movs	r1, #8
 80147bc:	187b      	adds	r3, r7, r1
 80147be:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80147c0:	187b      	adds	r3, r7, r1
 80147c2:	881b      	ldrh	r3, [r3, #0]
 80147c4:	001a      	movs	r2, r3
 80147c6:	68f9      	ldr	r1, [r7, #12]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	0018      	movs	r0, r3
 80147cc:	f000 facc 	bl	8014d68 <USBD_CtlSendData>
 80147d0:	e011      	b.n	80147f6 <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	0011      	movs	r1, r2
 80147d8:	0018      	movs	r0, r3
 80147da:	f000 fa3d 	bl	8014c58 <USBD_CtlError>
 80147de:	e00a      	b.n	80147f6 <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	0018      	movs	r0, r3
 80147e4:	f000 fb1e 	bl	8014e24 <USBD_CtlSendStatus>
 80147e8:	e005      	b.n	80147f6 <USBD_GetDescriptor+0x3ae>
 80147ea:	46c0      	nop			@ (mov r8, r8)
 80147ec:	08019b40 	.word	0x08019b40
 80147f0:	08019b80 	.word	0x08019b80
    return;
 80147f4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80147f6:	46bd      	mov	sp, r7
 80147f8:	b004      	add	sp, #16
 80147fa:	bd80      	pop	{r7, pc}

080147fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147fc:	b590      	push	{r4, r7, lr}
 80147fe:	b085      	sub	sp, #20
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
 8014804:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	889b      	ldrh	r3, [r3, #4]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d13e      	bne.n	801488c <USBD_SetAddress+0x90>
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	88db      	ldrh	r3, [r3, #6]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d13a      	bne.n	801488c <USBD_SetAddress+0x90>
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	885b      	ldrh	r3, [r3, #2]
 801481a:	2b7f      	cmp	r3, #127	@ 0x7f
 801481c:	d836      	bhi.n	801488c <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	885b      	ldrh	r3, [r3, #2]
 8014822:	b2da      	uxtb	r2, r3
 8014824:	230f      	movs	r3, #15
 8014826:	18fb      	adds	r3, r7, r3
 8014828:	217f      	movs	r1, #127	@ 0x7f
 801482a:	400a      	ands	r2, r1
 801482c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	23a7      	movs	r3, #167	@ 0xa7
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	5cd3      	ldrb	r3, [r2, r3]
 8014836:	b2db      	uxtb	r3, r3
 8014838:	2b03      	cmp	r3, #3
 801483a:	d106      	bne.n	801484a <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 801483c:	683a      	ldr	r2, [r7, #0]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	0011      	movs	r1, r2
 8014842:	0018      	movs	r0, r3
 8014844:	f000 fa08 	bl	8014c58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014848:	e027      	b.n	801489a <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	240f      	movs	r4, #15
 801484e:	193a      	adds	r2, r7, r4
 8014850:	4914      	ldr	r1, [pc, #80]	@ (80148a4 <USBD_SetAddress+0xa8>)
 8014852:	7812      	ldrb	r2, [r2, #0]
 8014854:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014856:	193b      	adds	r3, r7, r4
 8014858:	781a      	ldrb	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	0011      	movs	r1, r2
 801485e:	0018      	movs	r0, r3
 8014860:	f004 fdcf 	bl	8019402 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	0018      	movs	r0, r3
 8014868:	f000 fadc 	bl	8014e24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801486c:	193b      	adds	r3, r7, r4
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d005      	beq.n	8014880 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	23a7      	movs	r3, #167	@ 0xa7
 8014878:	009b      	lsls	r3, r3, #2
 801487a:	2102      	movs	r1, #2
 801487c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801487e:	e00c      	b.n	801489a <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	23a7      	movs	r3, #167	@ 0xa7
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	2101      	movs	r1, #1
 8014888:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801488a:	e006      	b.n	801489a <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801488c:	683a      	ldr	r2, [r7, #0]
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	0011      	movs	r1, r2
 8014892:	0018      	movs	r0, r3
 8014894:	f000 f9e0 	bl	8014c58 <USBD_CtlError>
  }
}
 8014898:	46c0      	nop			@ (mov r8, r8)
 801489a:	46c0      	nop			@ (mov r8, r8)
 801489c:	46bd      	mov	sp, r7
 801489e:	b005      	add	sp, #20
 80148a0:	bd90      	pop	{r4, r7, pc}
 80148a2:	46c0      	nop			@ (mov r8, r8)
 80148a4:	0000029e 	.word	0x0000029e

080148a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148a8:	b5b0      	push	{r4, r5, r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148b2:	230f      	movs	r3, #15
 80148b4:	18fb      	adds	r3, r7, r3
 80148b6:	2200      	movs	r2, #0
 80148b8:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	885b      	ldrh	r3, [r3, #2]
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	4b5f      	ldr	r3, [pc, #380]	@ (8014a40 <USBD_SetConfig+0x198>)
 80148c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148c4:	4b5e      	ldr	r3, [pc, #376]	@ (8014a40 <USBD_SetConfig+0x198>)
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d907      	bls.n	80148dc <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 80148cc:	683a      	ldr	r2, [r7, #0]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	0011      	movs	r1, r2
 80148d2:	0018      	movs	r0, r3
 80148d4:	f000 f9c0 	bl	8014c58 <USBD_CtlError>
    return USBD_FAIL;
 80148d8:	2303      	movs	r3, #3
 80148da:	e0ac      	b.n	8014a36 <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 80148dc:	687a      	ldr	r2, [r7, #4]
 80148de:	23a7      	movs	r3, #167	@ 0xa7
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	5cd3      	ldrb	r3, [r2, r3]
 80148e4:	b2db      	uxtb	r3, r3
 80148e6:	2b02      	cmp	r3, #2
 80148e8:	d002      	beq.n	80148f0 <USBD_SetConfig+0x48>
 80148ea:	2b03      	cmp	r3, #3
 80148ec:	d033      	beq.n	8014956 <USBD_SetConfig+0xae>
 80148ee:	e08d      	b.n	8014a0c <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80148f0:	4b53      	ldr	r3, [pc, #332]	@ (8014a40 <USBD_SetConfig+0x198>)
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d029      	beq.n	801494c <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 80148f8:	4b51      	ldr	r3, [pc, #324]	@ (8014a40 <USBD_SetConfig+0x198>)
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	001a      	movs	r2, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014902:	4b4f      	ldr	r3, [pc, #316]	@ (8014a40 <USBD_SetConfig+0x198>)
 8014904:	781a      	ldrb	r2, [r3, #0]
 8014906:	250f      	movs	r5, #15
 8014908:	197c      	adds	r4, r7, r5
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	0011      	movs	r1, r2
 801490e:	0018      	movs	r0, r3
 8014910:	f7fe feb4 	bl	801367c <USBD_SetClassConfig>
 8014914:	0003      	movs	r3, r0
 8014916:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8014918:	197b      	adds	r3, r7, r5
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d00b      	beq.n	8014938 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8014920:	683a      	ldr	r2, [r7, #0]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	0011      	movs	r1, r2
 8014926:	0018      	movs	r0, r3
 8014928:	f000 f996 	bl	8014c58 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	23a7      	movs	r3, #167	@ 0xa7
 8014930:	009b      	lsls	r3, r3, #2
 8014932:	2102      	movs	r1, #2
 8014934:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014936:	e07b      	b.n	8014a30 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	0018      	movs	r0, r3
 801493c:	f000 fa72 	bl	8014e24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	23a7      	movs	r3, #167	@ 0xa7
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	2103      	movs	r1, #3
 8014948:	54d1      	strb	r1, [r2, r3]
      break;
 801494a:	e071      	b.n	8014a30 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	0018      	movs	r0, r3
 8014950:	f000 fa68 	bl	8014e24 <USBD_CtlSendStatus>
      break;
 8014954:	e06c      	b.n	8014a30 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014956:	4b3a      	ldr	r3, [pc, #232]	@ (8014a40 <USBD_SetConfig+0x198>)
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d115      	bne.n	801498a <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	23a7      	movs	r3, #167	@ 0xa7
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	2102      	movs	r1, #2
 8014966:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8014968:	4b35      	ldr	r3, [pc, #212]	@ (8014a40 <USBD_SetConfig+0x198>)
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	001a      	movs	r2, r3
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014972:	4b33      	ldr	r3, [pc, #204]	@ (8014a40 <USBD_SetConfig+0x198>)
 8014974:	781a      	ldrb	r2, [r3, #0]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	0011      	movs	r1, r2
 801497a:	0018      	movs	r0, r3
 801497c:	f7fe fea3 	bl	80136c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	0018      	movs	r0, r3
 8014984:	f000 fa4e 	bl	8014e24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014988:	e052      	b.n	8014a30 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 801498a:	4b2d      	ldr	r3, [pc, #180]	@ (8014a40 <USBD_SetConfig+0x198>)
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	001a      	movs	r2, r3
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	429a      	cmp	r2, r3
 8014996:	d034      	beq.n	8014a02 <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	b2da      	uxtb	r2, r3
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	0011      	movs	r1, r2
 80149a2:	0018      	movs	r0, r3
 80149a4:	f7fe fe8f 	bl	80136c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80149a8:	4b25      	ldr	r3, [pc, #148]	@ (8014a40 <USBD_SetConfig+0x198>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	001a      	movs	r2, r3
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80149b2:	4b23      	ldr	r3, [pc, #140]	@ (8014a40 <USBD_SetConfig+0x198>)
 80149b4:	781a      	ldrb	r2, [r3, #0]
 80149b6:	250f      	movs	r5, #15
 80149b8:	197c      	adds	r4, r7, r5
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	0011      	movs	r1, r2
 80149be:	0018      	movs	r0, r3
 80149c0:	f7fe fe5c 	bl	801367c <USBD_SetClassConfig>
 80149c4:	0003      	movs	r3, r0
 80149c6:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 80149c8:	197b      	adds	r3, r7, r5
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d013      	beq.n	80149f8 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 80149d0:	683a      	ldr	r2, [r7, #0]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	0011      	movs	r1, r2
 80149d6:	0018      	movs	r0, r3
 80149d8:	f000 f93e 	bl	8014c58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	b2da      	uxtb	r2, r3
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	0011      	movs	r1, r2
 80149e6:	0018      	movs	r0, r3
 80149e8:	f7fe fe6d 	bl	80136c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	23a7      	movs	r3, #167	@ 0xa7
 80149f0:	009b      	lsls	r3, r3, #2
 80149f2:	2102      	movs	r1, #2
 80149f4:	54d1      	strb	r1, [r2, r3]
      break;
 80149f6:	e01b      	b.n	8014a30 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	0018      	movs	r0, r3
 80149fc:	f000 fa12 	bl	8014e24 <USBD_CtlSendStatus>
      break;
 8014a00:	e016      	b.n	8014a30 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	0018      	movs	r0, r3
 8014a06:	f000 fa0d 	bl	8014e24 <USBD_CtlSendStatus>
      break;
 8014a0a:	e011      	b.n	8014a30 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 8014a0c:	683a      	ldr	r2, [r7, #0]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	0011      	movs	r1, r2
 8014a12:	0018      	movs	r0, r3
 8014a14:	f000 f920 	bl	8014c58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a18:	4b09      	ldr	r3, [pc, #36]	@ (8014a40 <USBD_SetConfig+0x198>)
 8014a1a:	781a      	ldrb	r2, [r3, #0]
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	0011      	movs	r1, r2
 8014a20:	0018      	movs	r0, r3
 8014a22:	f7fe fe50 	bl	80136c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014a26:	230f      	movs	r3, #15
 8014a28:	18fb      	adds	r3, r7, r3
 8014a2a:	2203      	movs	r2, #3
 8014a2c:	701a      	strb	r2, [r3, #0]
      break;
 8014a2e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014a30:	230f      	movs	r3, #15
 8014a32:	18fb      	adds	r3, r7, r3
 8014a34:	781b      	ldrb	r3, [r3, #0]
}
 8014a36:	0018      	movs	r0, r3
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	b004      	add	sp, #16
 8014a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014a3e:	46c0      	nop			@ (mov r8, r8)
 8014a40:	200003f5 	.word	0x200003f5

08014a44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	88db      	ldrh	r3, [r3, #6]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d006      	beq.n	8014a64 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8014a56:	683a      	ldr	r2, [r7, #0]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	0011      	movs	r1, r2
 8014a5c:	0018      	movs	r0, r3
 8014a5e:	f000 f8fb 	bl	8014c58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a62:	e027      	b.n	8014ab4 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 8014a64:	687a      	ldr	r2, [r7, #4]
 8014a66:	23a7      	movs	r3, #167	@ 0xa7
 8014a68:	009b      	lsls	r3, r3, #2
 8014a6a:	5cd3      	ldrb	r3, [r2, r3]
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	2b02      	cmp	r3, #2
 8014a70:	dc02      	bgt.n	8014a78 <USBD_GetConfig+0x34>
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	dc03      	bgt.n	8014a7e <USBD_GetConfig+0x3a>
 8014a76:	e016      	b.n	8014aa6 <USBD_GetConfig+0x62>
 8014a78:	2b03      	cmp	r3, #3
 8014a7a:	d00c      	beq.n	8014a96 <USBD_GetConfig+0x52>
 8014a7c:	e013      	b.n	8014aa6 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	2200      	movs	r2, #0
 8014a82:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	3308      	adds	r3, #8
 8014a88:	0019      	movs	r1, r3
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	2201      	movs	r2, #1
 8014a8e:	0018      	movs	r0, r3
 8014a90:	f000 f96a 	bl	8014d68 <USBD_CtlSendData>
        break;
 8014a94:	e00e      	b.n	8014ab4 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	1d19      	adds	r1, r3, #4
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	0018      	movs	r0, r3
 8014aa0:	f000 f962 	bl	8014d68 <USBD_CtlSendData>
        break;
 8014aa4:	e006      	b.n	8014ab4 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 8014aa6:	683a      	ldr	r2, [r7, #0]
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	0011      	movs	r1, r2
 8014aac:	0018      	movs	r0, r3
 8014aae:	f000 f8d3 	bl	8014c58 <USBD_CtlError>
        break;
 8014ab2:	46c0      	nop			@ (mov r8, r8)
}
 8014ab4:	46c0      	nop			@ (mov r8, r8)
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	b002      	add	sp, #8
 8014aba:	bd80      	pop	{r7, pc}

08014abc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b082      	sub	sp, #8
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	23a7      	movs	r3, #167	@ 0xa7
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	5cd3      	ldrb	r3, [r2, r3]
 8014ace:	b2db      	uxtb	r3, r3
 8014ad0:	3b01      	subs	r3, #1
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	d822      	bhi.n	8014b1c <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	88db      	ldrh	r3, [r3, #6]
 8014ada:	2b02      	cmp	r3, #2
 8014adc:	d006      	beq.n	8014aec <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8014ade:	683a      	ldr	r2, [r7, #0]
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	0011      	movs	r1, r2
 8014ae4:	0018      	movs	r0, r3
 8014ae6:	f000 f8b7 	bl	8014c58 <USBD_CtlError>
        break;
 8014aea:	e01e      	b.n	8014b2a <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2201      	movs	r2, #1
 8014af0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	23a9      	movs	r3, #169	@ 0xa9
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	58d3      	ldr	r3, [r2, r3]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d005      	beq.n	8014b0a <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	68db      	ldr	r3, [r3, #12]
 8014b02:	2202      	movs	r2, #2
 8014b04:	431a      	orrs	r2, r3
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	330c      	adds	r3, #12
 8014b0e:	0019      	movs	r1, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2202      	movs	r2, #2
 8014b14:	0018      	movs	r0, r3
 8014b16:	f000 f927 	bl	8014d68 <USBD_CtlSendData>
      break;
 8014b1a:	e006      	b.n	8014b2a <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 8014b1c:	683a      	ldr	r2, [r7, #0]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	0011      	movs	r1, r2
 8014b22:	0018      	movs	r0, r3
 8014b24:	f000 f898 	bl	8014c58 <USBD_CtlError>
      break;
 8014b28:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014b2a:	46c0      	nop			@ (mov r8, r8)
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	b002      	add	sp, #8
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b082      	sub	sp, #8
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
 8014b3a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	885b      	ldrh	r3, [r3, #2]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d109      	bne.n	8014b58 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 8014b44:	687a      	ldr	r2, [r7, #4]
 8014b46:	23a9      	movs	r3, #169	@ 0xa9
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	2101      	movs	r1, #1
 8014b4c:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	0018      	movs	r0, r3
 8014b52:	f000 f967 	bl	8014e24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014b56:	e017      	b.n	8014b88 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	885b      	ldrh	r3, [r3, #2]
 8014b5c:	2b02      	cmp	r3, #2
 8014b5e:	d10d      	bne.n	8014b7c <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	889b      	ldrh	r3, [r3, #4]
 8014b64:	0a1b      	lsrs	r3, r3, #8
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	b2d9      	uxtb	r1, r3
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	23a8      	movs	r3, #168	@ 0xa8
 8014b6e:	009b      	lsls	r3, r3, #2
 8014b70:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	0018      	movs	r0, r3
 8014b76:	f000 f955 	bl	8014e24 <USBD_CtlSendStatus>
}
 8014b7a:	e005      	b.n	8014b88 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 8014b7c:	683a      	ldr	r2, [r7, #0]
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	0011      	movs	r1, r2
 8014b82:	0018      	movs	r0, r3
 8014b84:	f000 f868 	bl	8014c58 <USBD_CtlError>
}
 8014b88:	46c0      	nop			@ (mov r8, r8)
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	b002      	add	sp, #8
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	23a7      	movs	r3, #167	@ 0xa7
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	5cd3      	ldrb	r3, [r2, r3]
 8014ba2:	b2db      	uxtb	r3, r3
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	2b02      	cmp	r3, #2
 8014ba8:	d80d      	bhi.n	8014bc6 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	885b      	ldrh	r3, [r3, #2]
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	d110      	bne.n	8014bd4 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	23a9      	movs	r3, #169	@ 0xa9
 8014bb6:	009b      	lsls	r3, r3, #2
 8014bb8:	2100      	movs	r1, #0
 8014bba:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	0018      	movs	r0, r3
 8014bc0:	f000 f930 	bl	8014e24 <USBD_CtlSendStatus>
      }
      break;
 8014bc4:	e006      	b.n	8014bd4 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 8014bc6:	683a      	ldr	r2, [r7, #0]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	0011      	movs	r1, r2
 8014bcc:	0018      	movs	r0, r3
 8014bce:	f000 f843 	bl	8014c58 <USBD_CtlError>
      break;
 8014bd2:	e000      	b.n	8014bd6 <USBD_ClrFeature+0x46>
      break;
 8014bd4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014bd6:	46c0      	nop			@ (mov r8, r8)
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	b002      	add	sp, #8
 8014bdc:	bd80      	pop	{r7, pc}

08014bde <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014bde:	b580      	push	{r7, lr}
 8014be0:	b084      	sub	sp, #16
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
 8014be6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	781a      	ldrb	r2, [r3, #0]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	781a      	ldrb	r2, [r3, #0]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	3301      	adds	r3, #1
 8014c06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	0018      	movs	r0, r3
 8014c0c:	f7ff f8e6 	bl	8013ddc <SWAPBYTE>
 8014c10:	0003      	movs	r3, r0
 8014c12:	001a      	movs	r2, r3
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	3301      	adds	r3, #1
 8014c22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	0018      	movs	r0, r3
 8014c28:	f7ff f8d8 	bl	8013ddc <SWAPBYTE>
 8014c2c:	0003      	movs	r3, r0
 8014c2e:	001a      	movs	r2, r3
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	3301      	adds	r3, #1
 8014c38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	0018      	movs	r0, r3
 8014c44:	f7ff f8ca 	bl	8013ddc <SWAPBYTE>
 8014c48:	0003      	movs	r3, r0
 8014c4a:	001a      	movs	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	80da      	strh	r2, [r3, #6]
}
 8014c50:	46c0      	nop			@ (mov r8, r8)
 8014c52:	46bd      	mov	sp, r7
 8014c54:	b004      	add	sp, #16
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2180      	movs	r1, #128	@ 0x80
 8014c66:	0018      	movs	r0, r3
 8014c68:	f004 fb45 	bl	80192f6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2100      	movs	r1, #0
 8014c70:	0018      	movs	r0, r3
 8014c72:	f004 fb40 	bl	80192f6 <USBD_LL_StallEP>
}
 8014c76:	46c0      	nop			@ (mov r8, r8)
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	b002      	add	sp, #8
 8014c7c:	bd80      	pop	{r7, pc}

08014c7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014c7e:	b590      	push	{r4, r7, lr}
 8014c80:	b087      	sub	sp, #28
 8014c82:	af00      	add	r7, sp, #0
 8014c84:	60f8      	str	r0, [r7, #12]
 8014c86:	60b9      	str	r1, [r7, #8]
 8014c88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014c8a:	2417      	movs	r4, #23
 8014c8c:	193b      	adds	r3, r7, r4
 8014c8e:	2200      	movs	r2, #0
 8014c90:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d044      	beq.n	8014d22 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	0018      	movs	r0, r3
 8014ca0:	f000 f843 	bl	8014d2a <USBD_GetLen>
 8014ca4:	0003      	movs	r3, r0
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	18db      	adds	r3, r3, r3
 8014cac:	b29a      	uxth	r2, r3
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014cb2:	193b      	adds	r3, r7, r4
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	68ba      	ldr	r2, [r7, #8]
 8014cb8:	18d3      	adds	r3, r2, r3
 8014cba:	687a      	ldr	r2, [r7, #4]
 8014cbc:	7812      	ldrb	r2, [r2, #0]
 8014cbe:	701a      	strb	r2, [r3, #0]
  idx++;
 8014cc0:	193b      	adds	r3, r7, r4
 8014cc2:	781a      	ldrb	r2, [r3, #0]
 8014cc4:	193b      	adds	r3, r7, r4
 8014cc6:	3201      	adds	r2, #1
 8014cc8:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014cca:	193b      	adds	r3, r7, r4
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	68ba      	ldr	r2, [r7, #8]
 8014cd0:	18d3      	adds	r3, r2, r3
 8014cd2:	2203      	movs	r2, #3
 8014cd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014cd6:	193b      	adds	r3, r7, r4
 8014cd8:	781a      	ldrb	r2, [r3, #0]
 8014cda:	193b      	adds	r3, r7, r4
 8014cdc:	3201      	adds	r2, #1
 8014cde:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8014ce0:	e01a      	b.n	8014d18 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8014ce2:	2117      	movs	r1, #23
 8014ce4:	187b      	adds	r3, r7, r1
 8014ce6:	781b      	ldrb	r3, [r3, #0]
 8014ce8:	68ba      	ldr	r2, [r7, #8]
 8014cea:	18d3      	adds	r3, r2, r3
 8014cec:	693a      	ldr	r2, [r7, #16]
 8014cee:	7812      	ldrb	r2, [r2, #0]
 8014cf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	613b      	str	r3, [r7, #16]
    idx++;
 8014cf8:	187b      	adds	r3, r7, r1
 8014cfa:	781a      	ldrb	r2, [r3, #0]
 8014cfc:	187b      	adds	r3, r7, r1
 8014cfe:	3201      	adds	r2, #1
 8014d00:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8014d02:	187b      	adds	r3, r7, r1
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	68ba      	ldr	r2, [r7, #8]
 8014d08:	18d3      	adds	r3, r2, r3
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d0e:	187b      	adds	r3, r7, r1
 8014d10:	781a      	ldrb	r2, [r3, #0]
 8014d12:	187b      	adds	r3, r7, r1
 8014d14:	3201      	adds	r2, #1
 8014d16:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d1e0      	bne.n	8014ce2 <USBD_GetString+0x64>
 8014d20:	e000      	b.n	8014d24 <USBD_GetString+0xa6>
    return;
 8014d22:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014d24:	46bd      	mov	sp, r7
 8014d26:	b007      	add	sp, #28
 8014d28:	bd90      	pop	{r4, r7, pc}

08014d2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b084      	sub	sp, #16
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d32:	230f      	movs	r3, #15
 8014d34:	18fb      	adds	r3, r7, r3
 8014d36:	2200      	movs	r2, #0
 8014d38:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d3e:	e008      	b.n	8014d52 <USBD_GetLen+0x28>
  {
    len++;
 8014d40:	210f      	movs	r1, #15
 8014d42:	187b      	adds	r3, r7, r1
 8014d44:	781a      	ldrb	r2, [r3, #0]
 8014d46:	187b      	adds	r3, r7, r1
 8014d48:	3201      	adds	r2, #1
 8014d4a:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	781b      	ldrb	r3, [r3, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d1f2      	bne.n	8014d40 <USBD_GetLen+0x16>
  }

  return len;
 8014d5a:	230f      	movs	r3, #15
 8014d5c:	18fb      	adds	r3, r7, r3
 8014d5e:	781b      	ldrb	r3, [r3, #0]
}
 8014d60:	0018      	movs	r0, r3
 8014d62:	46bd      	mov	sp, r7
 8014d64:	b004      	add	sp, #16
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b084      	sub	sp, #16
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d74:	68fa      	ldr	r2, [r7, #12]
 8014d76:	23a5      	movs	r3, #165	@ 0xa5
 8014d78:	009b      	lsls	r3, r3, #2
 8014d7a:	2102      	movs	r1, #2
 8014d7c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	687a      	ldr	r2, [r7, #4]
 8014d82:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	68ba      	ldr	r2, [r7, #8]
 8014d8e:	68f8      	ldr	r0, [r7, #12]
 8014d90:	2100      	movs	r1, #0
 8014d92:	f004 fb61 	bl	8019458 <USBD_LL_Transmit>

  return USBD_OK;
 8014d96:	2300      	movs	r3, #0
}
 8014d98:	0018      	movs	r0, r3
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	b004      	add	sp, #16
 8014d9e:	bd80      	pop	{r7, pc}

08014da0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	60f8      	str	r0, [r7, #12]
 8014da8:	60b9      	str	r1, [r7, #8]
 8014daa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	2100      	movs	r1, #0
 8014db4:	f004 fb50 	bl	8019458 <USBD_LL_Transmit>

  return USBD_OK;
 8014db8:	2300      	movs	r3, #0
}
 8014dba:	0018      	movs	r0, r3
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	b004      	add	sp, #16
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b084      	sub	sp, #16
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	60f8      	str	r0, [r7, #12]
 8014dca:	60b9      	str	r1, [r7, #8]
 8014dcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014dce:	68fa      	ldr	r2, [r7, #12]
 8014dd0:	23a5      	movs	r3, #165	@ 0xa5
 8014dd2:	009b      	lsls	r3, r3, #2
 8014dd4:	2103      	movs	r1, #3
 8014dd6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8014dd8:	68fa      	ldr	r2, [r7, #12]
 8014dda:	23ac      	movs	r3, #172	@ 0xac
 8014ddc:	005b      	lsls	r3, r3, #1
 8014dde:	6879      	ldr	r1, [r7, #4]
 8014de0:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014de2:	68fa      	ldr	r2, [r7, #12]
 8014de4:	23ae      	movs	r3, #174	@ 0xae
 8014de6:	005b      	lsls	r3, r3, #1
 8014de8:	6879      	ldr	r1, [r7, #4]
 8014dea:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	68ba      	ldr	r2, [r7, #8]
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	2100      	movs	r1, #0
 8014df4:	f004 fb60 	bl	80194b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014df8:	2300      	movs	r3, #0
}
 8014dfa:	0018      	movs	r0, r3
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	b004      	add	sp, #16
 8014e00:	bd80      	pop	{r7, pc}

08014e02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014e02:	b580      	push	{r7, lr}
 8014e04:	b084      	sub	sp, #16
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	60f8      	str	r0, [r7, #12]
 8014e0a:	60b9      	str	r1, [r7, #8]
 8014e0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	68ba      	ldr	r2, [r7, #8]
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	2100      	movs	r1, #0
 8014e16:	f004 fb4f 	bl	80194b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e1a:	2300      	movs	r3, #0
}
 8014e1c:	0018      	movs	r0, r3
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	b004      	add	sp, #16
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	23a5      	movs	r3, #165	@ 0xa5
 8014e30:	009b      	lsls	r3, r3, #2
 8014e32:	2104      	movs	r1, #4
 8014e34:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	2300      	movs	r3, #0
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	f004 fb0b 	bl	8019458 <USBD_LL_Transmit>

  return USBD_OK;
 8014e42:	2300      	movs	r3, #0
}
 8014e44:	0018      	movs	r0, r3
 8014e46:	46bd      	mov	sp, r7
 8014e48:	b002      	add	sp, #8
 8014e4a:	bd80      	pop	{r7, pc}

08014e4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b082      	sub	sp, #8
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	23a5      	movs	r3, #165	@ 0xa5
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	2105      	movs	r1, #5
 8014e5c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	2300      	movs	r3, #0
 8014e62:	2200      	movs	r2, #0
 8014e64:	2100      	movs	r1, #0
 8014e66:	f004 fb27 	bl	80194b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e6a:	2300      	movs	r3, #0
}
 8014e6c:	0018      	movs	r0, r3
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	b002      	add	sp, #8
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b084      	sub	sp, #16
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	0002      	movs	r2, r0
 8014e7c:	1dbb      	adds	r3, r7, #6
 8014e7e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014e80:	2300      	movs	r3, #0
 8014e82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014e84:	1dbb      	adds	r3, r7, #6
 8014e86:	2200      	movs	r2, #0
 8014e88:	5e9b      	ldrsh	r3, [r3, r2]
 8014e8a:	2b84      	cmp	r3, #132	@ 0x84
 8014e8c:	d006      	beq.n	8014e9c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8014e8e:	1dbb      	adds	r3, r7, #6
 8014e90:	2200      	movs	r2, #0
 8014e92:	5e9a      	ldrsh	r2, [r3, r2]
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	18d3      	adds	r3, r2, r3
 8014e98:	3303      	adds	r3, #3
 8014e9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
}
 8014e9e:	0018      	movs	r0, r3
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	b004      	add	sp, #16
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b082      	sub	sp, #8
 8014eaa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014eac:	f3ef 8305 	mrs	r3, IPSR
 8014eb0:	607b      	str	r3, [r7, #4]
  return(result);
 8014eb2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014eb4:	1e5a      	subs	r2, r3, #1
 8014eb6:	4193      	sbcs	r3, r2
 8014eb8:	b2db      	uxtb	r3, r3
}
 8014eba:	0018      	movs	r0, r3
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	b002      	add	sp, #8
 8014ec0:	bd80      	pop	{r7, pc}

08014ec2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014ec6:	f001 f8f9 	bl	80160bc <vTaskStartScheduler>
  
  return osOK;
 8014eca:	2300      	movs	r3, #0
}
 8014ecc:	0018      	movs	r0, r3
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ed4:	b087      	sub	sp, #28
 8014ed6:	af02      	add	r7, sp, #8
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	685c      	ldr	r4, [r3, #4]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ee8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2208      	movs	r2, #8
 8014eee:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ef0:	0018      	movs	r0, r3
 8014ef2:	f7ff ffbf 	bl	8014e74 <makeFreeRtosPriority>
 8014ef6:	0001      	movs	r1, r0
 8014ef8:	683a      	ldr	r2, [r7, #0]
 8014efa:	230c      	movs	r3, #12
 8014efc:	18fb      	adds	r3, r7, r3
 8014efe:	9301      	str	r3, [sp, #4]
 8014f00:	9100      	str	r1, [sp, #0]
 8014f02:	0013      	movs	r3, r2
 8014f04:	0032      	movs	r2, r6
 8014f06:	0029      	movs	r1, r5
 8014f08:	0020      	movs	r0, r4
 8014f0a:	f000 fddb 	bl	8015ac4 <xTaskCreate>
 8014f0e:	0003      	movs	r3, r0
 8014f10:	2b01      	cmp	r3, #1
 8014f12:	d001      	beq.n	8014f18 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8014f14:	2300      	movs	r3, #0
 8014f16:	e000      	b.n	8014f1a <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8014f18:	68fb      	ldr	r3, [r7, #12]
}
 8014f1a:	0018      	movs	r0, r3
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	b005      	add	sp, #20
 8014f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f22 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8014f22:	b580      	push	{r7, lr}
 8014f24:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8014f26:	f001 fc39 	bl	801679c <xTaskGetCurrentTaskHandle>
 8014f2a:	0003      	movs	r3, r0
#else
	return NULL;
#endif
}
 8014f2c:	0018      	movs	r0, r3
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014f32:	b580      	push	{r7, lr}
 8014f34:	b084      	sub	sp, #16
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d001      	beq.n	8014f48 <osDelay+0x16>
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	e000      	b.n	8014f4a <osDelay+0x18>
 8014f48:	2301      	movs	r3, #1
 8014f4a:	0018      	movs	r0, r3
 8014f4c:	f000 fee8 	bl	8015d20 <vTaskDelay>
  
  return osOK;
 8014f50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014f52:	0018      	movs	r0, r3
 8014f54:	46bd      	mov	sp, r7
 8014f56:	b004      	add	sp, #16
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b082      	sub	sp, #8
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	6078      	str	r0, [r7, #4]
 8014f62:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	6818      	ldr	r0, [r3, #0]
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	685b      	ldr	r3, [r3, #4]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	0019      	movs	r1, r3
 8014f70:	f000 f9de 	bl	8015330 <xQueueGenericCreate>
 8014f74:	0003      	movs	r3, r0
#endif
}
 8014f76:	0018      	movs	r0, r3
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	b002      	add	sp, #8
 8014f7c:	bd80      	pop	{r7, pc}
	...

08014f80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d101      	bne.n	8014f9e <osMessagePut+0x1e>
    ticks = 1;
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014f9e:	f7ff ff82 	bl	8014ea6 <inHandlerMode>
 8014fa2:	1e03      	subs	r3, r0, #0
 8014fa4:	d014      	beq.n	8014fd0 <osMessagePut+0x50>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014fa6:	2310      	movs	r3, #16
 8014fa8:	18fa      	adds	r2, r7, r3
 8014faa:	2308      	movs	r3, #8
 8014fac:	18f9      	adds	r1, r7, r3
 8014fae:	68f8      	ldr	r0, [r7, #12]
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	f000 fad6 	bl	8015562 <xQueueGenericSendFromISR>
 8014fb6:	0003      	movs	r3, r0
 8014fb8:	2b01      	cmp	r3, #1
 8014fba:	d001      	beq.n	8014fc0 <osMessagePut+0x40>
      return osErrorOS;
 8014fbc:	23ff      	movs	r3, #255	@ 0xff
 8014fbe:	e014      	b.n	8014fea <osMessagePut+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d010      	beq.n	8014fe8 <osMessagePut+0x68>
 8014fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8014ff4 <osMessagePut+0x74>)
 8014fc8:	2280      	movs	r2, #128	@ 0x80
 8014fca:	0552      	lsls	r2, r2, #21
 8014fcc:	601a      	str	r2, [r3, #0]
 8014fce:	e00b      	b.n	8014fe8 <osMessagePut+0x68>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014fd0:	697a      	ldr	r2, [r7, #20]
 8014fd2:	2308      	movs	r3, #8
 8014fd4:	18f9      	adds	r1, r7, r3
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	2300      	movs	r3, #0
 8014fda:	f000 f9fa 	bl	80153d2 <xQueueGenericSend>
 8014fde:	0003      	movs	r3, r0
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d001      	beq.n	8014fe8 <osMessagePut+0x68>
      return osErrorOS;
 8014fe4:	23ff      	movs	r3, #255	@ 0xff
 8014fe6:	e000      	b.n	8014fea <osMessagePut+0x6a>
    }
  }
  
  return osOK;
 8014fe8:	2300      	movs	r3, #0
}
 8014fea:	0018      	movs	r0, r3
 8014fec:	46bd      	mov	sp, r7
 8014fee:	b006      	add	sp, #24
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	46c0      	nop			@ (mov r8, r8)
 8014ff4:	e000ed04 	.word	0xe000ed04

08014ff8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014ff8:	b590      	push	{r4, r7, lr}
 8014ffa:	b08b      	sub	sp, #44	@ 0x2c
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	60b9      	str	r1, [r7, #8]
 8015002:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015004:	2114      	movs	r1, #20
 8015006:	187b      	adds	r3, r7, r1
 8015008:	68ba      	ldr	r2, [r7, #8]
 801500a:	609a      	str	r2, [r3, #8]
  event.value.v = 0;
 801500c:	187b      	adds	r3, r7, r1
 801500e:	2200      	movs	r2, #0
 8015010:	605a      	str	r2, [r3, #4]
  
  if (queue_id == NULL) {
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d107      	bne.n	8015028 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8015018:	187b      	adds	r3, r7, r1
 801501a:	2280      	movs	r2, #128	@ 0x80
 801501c:	601a      	str	r2, [r3, #0]
    return event;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	187a      	adds	r2, r7, r1
 8015022:	ca13      	ldmia	r2!, {r0, r1, r4}
 8015024:	c313      	stmia	r3!, {r0, r1, r4}
 8015026:	e051      	b.n	80150cc <osMessageGet+0xd4>
  }
  
  taskWoken = pdFALSE;
 8015028:	2300      	movs	r3, #0
 801502a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801502c:	2300      	movs	r3, #0
 801502e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	3301      	adds	r3, #1
 8015034:	d103      	bne.n	801503e <osMessageGet+0x46>
    ticks = portMAX_DELAY;
 8015036:	2301      	movs	r3, #1
 8015038:	425b      	negs	r3, r3
 801503a:	627b      	str	r3, [r7, #36]	@ 0x24
 801503c:	e009      	b.n	8015052 <osMessageGet+0x5a>
  }
  else if (millisec != 0) {
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d006      	beq.n	8015052 <osMessageGet+0x5a>
    ticks = millisec / portTICK_PERIOD_MS;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8015048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801504a:	2b00      	cmp	r3, #0
 801504c:	d101      	bne.n	8015052 <osMessageGet+0x5a>
      ticks = 1;
 801504e:	2301      	movs	r3, #1
 8015050:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015052:	f7ff ff28 	bl	8014ea6 <inHandlerMode>
 8015056:	1e03      	subs	r3, r0, #0
 8015058:	d01b      	beq.n	8015092 <osMessageGet+0x9a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801505a:	2320      	movs	r3, #32
 801505c:	18fa      	adds	r2, r7, r3
 801505e:	2414      	movs	r4, #20
 8015060:	193b      	adds	r3, r7, r4
 8015062:	1d19      	adds	r1, r3, #4
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	0018      	movs	r0, r3
 8015068:	f000 fbaa 	bl	80157c0 <xQueueReceiveFromISR>
 801506c:	0003      	movs	r3, r0
 801506e:	2b01      	cmp	r3, #1
 8015070:	d103      	bne.n	801507a <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
 8015072:	193b      	adds	r3, r7, r4
 8015074:	2210      	movs	r2, #16
 8015076:	601a      	str	r2, [r3, #0]
 8015078:	e003      	b.n	8015082 <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 801507a:	2314      	movs	r3, #20
 801507c:	18fb      	adds	r3, r7, r3
 801507e:	2200      	movs	r2, #0
 8015080:	601a      	str	r2, [r3, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015082:	6a3b      	ldr	r3, [r7, #32]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d01c      	beq.n	80150c2 <osMessageGet+0xca>
 8015088:	4b12      	ldr	r3, [pc, #72]	@ (80150d4 <osMessageGet+0xdc>)
 801508a:	2280      	movs	r2, #128	@ 0x80
 801508c:	0552      	lsls	r2, r2, #21
 801508e:	601a      	str	r2, [r3, #0]
 8015090:	e017      	b.n	80150c2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8015092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015094:	2414      	movs	r4, #20
 8015096:	193b      	adds	r3, r7, r4
 8015098:	1d19      	adds	r1, r3, #4
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	0018      	movs	r0, r3
 801509e:	f000 fad7 	bl	8015650 <xQueueReceive>
 80150a2:	0003      	movs	r3, r0
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	d103      	bne.n	80150b0 <osMessageGet+0xb8>
      /* We have mail */
      event.status = osEventMessage;
 80150a8:	193b      	adds	r3, r7, r4
 80150aa:	2210      	movs	r2, #16
 80150ac:	601a      	str	r2, [r3, #0]
 80150ae:	e008      	b.n	80150c2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80150b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d101      	bne.n	80150ba <osMessageGet+0xc2>
 80150b6:	2200      	movs	r2, #0
 80150b8:	e000      	b.n	80150bc <osMessageGet+0xc4>
 80150ba:	2240      	movs	r2, #64	@ 0x40
 80150bc:	2314      	movs	r3, #20
 80150be:	18fb      	adds	r3, r7, r3
 80150c0:	601a      	str	r2, [r3, #0]
    }
  }
  
  return event;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2214      	movs	r2, #20
 80150c6:	18ba      	adds	r2, r7, r2
 80150c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80150ca:	c313      	stmia	r3!, {r0, r1, r4}
}
 80150cc:	68f8      	ldr	r0, [r7, #12]
 80150ce:	46bd      	mov	sp, r7
 80150d0:	b00b      	add	sp, #44	@ 0x2c
 80150d2:	bd90      	pop	{r4, r7, pc}
 80150d4:	e000ed04 	.word	0xe000ed04

080150d8 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	0018      	movs	r0, r3
 80150e4:	f000 feb0 	bl	8015e48 <vTaskSuspend>
  
  return osOK;
 80150e8:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80150ea:	0018      	movs	r0, r3
 80150ec:	46bd      	mov	sp, r7
 80150ee:	b002      	add	sp, #8
 80150f0:	bd80      	pop	{r7, pc}
	...

080150f4 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80150fc:	f7ff fed3 	bl	8014ea6 <inHandlerMode>
 8015100:	1e03      	subs	r3, r0, #0
 8015102:	d00b      	beq.n	801511c <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	0018      	movs	r0, r3
 8015108:	f000 ff7a 	bl	8016000 <xTaskResumeFromISR>
 801510c:	0003      	movs	r3, r0
 801510e:	2b01      	cmp	r3, #1
 8015110:	d108      	bne.n	8015124 <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8015112:	4b07      	ldr	r3, [pc, #28]	@ (8015130 <osThreadResume+0x3c>)
 8015114:	2280      	movs	r2, #128	@ 0x80
 8015116:	0552      	lsls	r2, r2, #21
 8015118:	601a      	str	r2, [r3, #0]
 801511a:	e003      	b.n	8015124 <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	0018      	movs	r0, r3
 8015120:	f000 ff20 	bl	8015f64 <vTaskResume>
  }
  return osOK;
 8015124:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8015126:	0018      	movs	r0, r3
 8015128:	46bd      	mov	sp, r7
 801512a:	b002      	add	sp, #8
 801512c:	bd80      	pop	{r7, pc}
 801512e:	46c0      	nop			@ (mov r8, r8)
 8015130:	e000ed04 	.word	0xe000ed04

08015134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	3308      	adds	r3, #8
 8015140:	001a      	movs	r2, r3
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	2201      	movs	r2, #1
 801514a:	4252      	negs	r2, r2
 801514c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	3308      	adds	r3, #8
 8015152:	001a      	movs	r2, r3
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	3308      	adds	r3, #8
 801515c:	001a      	movs	r2, r3
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2200      	movs	r2, #0
 8015166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015168:	46c0      	nop			@ (mov r8, r8)
 801516a:	46bd      	mov	sp, r7
 801516c:	b002      	add	sp, #8
 801516e:	bd80      	pop	{r7, pc}

08015170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b082      	sub	sp, #8
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	2200      	movs	r2, #0
 801517c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801517e:	46c0      	nop			@ (mov r8, r8)
 8015180:	46bd      	mov	sp, r7
 8015182:	b002      	add	sp, #8
 8015184:	bd80      	pop	{r7, pc}

08015186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015186:	b580      	push	{r7, lr}
 8015188:	b084      	sub	sp, #16
 801518a:	af00      	add	r7, sp, #0
 801518c:	6078      	str	r0, [r7, #4]
 801518e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	685b      	ldr	r3, [r3, #4]
 8015194:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	68fa      	ldr	r2, [r7, #12]
 801519a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	689a      	ldr	r2, [r3, #8]
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	689b      	ldr	r3, [r3, #8]
 80151a8:	683a      	ldr	r2, [r7, #0]
 80151aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	683a      	ldr	r2, [r7, #0]
 80151b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	687a      	ldr	r2, [r7, #4]
 80151b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	1c5a      	adds	r2, r3, #1
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	601a      	str	r2, [r3, #0]
}
 80151c2:	46c0      	nop			@ (mov r8, r8)
 80151c4:	46bd      	mov	sp, r7
 80151c6:	b004      	add	sp, #16
 80151c8:	bd80      	pop	{r7, pc}

080151ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b084      	sub	sp, #16
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
 80151d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	3301      	adds	r3, #1
 80151de:	d103      	bne.n	80151e8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	691b      	ldr	r3, [r3, #16]
 80151e4:	60fb      	str	r3, [r7, #12]
 80151e6:	e00c      	b.n	8015202 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	3308      	adds	r3, #8
 80151ec:	60fb      	str	r3, [r7, #12]
 80151ee:	e002      	b.n	80151f6 <vListInsert+0x2c>
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	60fb      	str	r3, [r7, #12]
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	685b      	ldr	r3, [r3, #4]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	68ba      	ldr	r2, [r7, #8]
 80151fe:	429a      	cmp	r2, r3
 8015200:	d2f6      	bcs.n	80151f0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	685a      	ldr	r2, [r3, #4]
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	683a      	ldr	r2, [r7, #0]
 8015210:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	68fa      	ldr	r2, [r7, #12]
 8015216:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	683a      	ldr	r2, [r7, #0]
 801521c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	687a      	ldr	r2, [r7, #4]
 8015222:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	1c5a      	adds	r2, r3, #1
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	601a      	str	r2, [r3, #0]
}
 801522e:	46c0      	nop			@ (mov r8, r8)
 8015230:	46bd      	mov	sp, r7
 8015232:	b004      	add	sp, #16
 8015234:	bd80      	pop	{r7, pc}

08015236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015236:	b580      	push	{r7, lr}
 8015238:	b084      	sub	sp, #16
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	691b      	ldr	r3, [r3, #16]
 8015242:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	6892      	ldr	r2, [r2, #8]
 801524c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	689b      	ldr	r3, [r3, #8]
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	6852      	ldr	r2, [r2, #4]
 8015256:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	687a      	ldr	r2, [r7, #4]
 801525e:	429a      	cmp	r2, r3
 8015260:	d103      	bne.n	801526a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	689a      	ldr	r2, [r3, #8]
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2200      	movs	r2, #0
 801526e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	1e5a      	subs	r2, r3, #1
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	681b      	ldr	r3, [r3, #0]
}
 801527e:	0018      	movs	r0, r3
 8015280:	46bd      	mov	sp, r7
 8015282:	b004      	add	sp, #16
 8015284:	bd80      	pop	{r7, pc}

08015286 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015286:	b580      	push	{r7, lr}
 8015288:	b084      	sub	sp, #16
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
 801528e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d102      	bne.n	80152a0 <xQueueGenericReset+0x1a>
 801529a:	b672      	cpsid	i
 801529c:	46c0      	nop			@ (mov r8, r8)
 801529e:	e7fd      	b.n	801529c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80152a0:	f001 fbf6 	bl	8016a90 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	681a      	ldr	r2, [r3, #0]
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152b0:	434b      	muls	r3, r1
 80152b2:	18d2      	adds	r2, r2, r3
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2200      	movs	r2, #0
 80152bc:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	681a      	ldr	r2, [r3, #0]
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152ce:	1e59      	subs	r1, r3, #1
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152d4:	434b      	muls	r3, r1
 80152d6:	18d2      	adds	r2, r2, r3
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	2244      	movs	r2, #68	@ 0x44
 80152e0:	21ff      	movs	r1, #255	@ 0xff
 80152e2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	2245      	movs	r2, #69	@ 0x45
 80152e8:	21ff      	movs	r1, #255	@ 0xff
 80152ea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d10d      	bne.n	801530e <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	691b      	ldr	r3, [r3, #16]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d013      	beq.n	8015322 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	3310      	adds	r3, #16
 80152fe:	0018      	movs	r0, r3
 8015300:	f001 f8cc 	bl	801649c <xTaskRemoveFromEventList>
 8015304:	1e03      	subs	r3, r0, #0
 8015306:	d00c      	beq.n	8015322 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015308:	f001 fbb2 	bl	8016a70 <vPortYield>
 801530c:	e009      	b.n	8015322 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	3310      	adds	r3, #16
 8015312:	0018      	movs	r0, r3
 8015314:	f7ff ff0e 	bl	8015134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	3324      	adds	r3, #36	@ 0x24
 801531c:	0018      	movs	r0, r3
 801531e:	f7ff ff09 	bl	8015134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015322:	f001 fbc7 	bl	8016ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015326:	2301      	movs	r3, #1
}
 8015328:	0018      	movs	r0, r3
 801532a:	46bd      	mov	sp, r7
 801532c:	b004      	add	sp, #16
 801532e:	bd80      	pop	{r7, pc}

08015330 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015330:	b590      	push	{r4, r7, lr}
 8015332:	b08b      	sub	sp, #44	@ 0x2c
 8015334:	af02      	add	r7, sp, #8
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	1dfb      	adds	r3, r7, #7
 801533c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d102      	bne.n	801534a <xQueueGenericCreate+0x1a>
 8015344:	b672      	cpsid	i
 8015346:	46c0      	nop			@ (mov r8, r8)
 8015348:	e7fd      	b.n	8015346 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	68ba      	ldr	r2, [r7, #8]
 801534e:	4353      	muls	r3, r2
 8015350:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	3348      	adds	r3, #72	@ 0x48
 8015356:	0018      	movs	r0, r3
 8015358:	f001 fc32 	bl	8016bc0 <pvPortMalloc>
 801535c:	0003      	movs	r3, r0
 801535e:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8015360:	69bb      	ldr	r3, [r7, #24]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d00e      	beq.n	8015384 <xQueueGenericCreate+0x54>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015366:	69bb      	ldr	r3, [r7, #24]
 8015368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	3348      	adds	r3, #72	@ 0x48
 801536e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015370:	1dfb      	adds	r3, r7, #7
 8015372:	781c      	ldrb	r4, [r3, #0]
 8015374:	697a      	ldr	r2, [r7, #20]
 8015376:	68b9      	ldr	r1, [r7, #8]
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	9300      	str	r3, [sp, #0]
 801537e:	0023      	movs	r3, r4
 8015380:	f000 f805 	bl	801538e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015384:	69bb      	ldr	r3, [r7, #24]
	}
 8015386:	0018      	movs	r0, r3
 8015388:	46bd      	mov	sp, r7
 801538a:	b009      	add	sp, #36	@ 0x24
 801538c:	bd90      	pop	{r4, r7, pc}

0801538e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801538e:	b580      	push	{r7, lr}
 8015390:	b084      	sub	sp, #16
 8015392:	af00      	add	r7, sp, #0
 8015394:	60f8      	str	r0, [r7, #12]
 8015396:	60b9      	str	r1, [r7, #8]
 8015398:	607a      	str	r2, [r7, #4]
 801539a:	001a      	movs	r2, r3
 801539c:	1cfb      	adds	r3, r7, #3
 801539e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d103      	bne.n	80153ae <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80153a6:	69bb      	ldr	r3, [r7, #24]
 80153a8:	69ba      	ldr	r2, [r7, #24]
 80153aa:	601a      	str	r2, [r3, #0]
 80153ac:	e002      	b.n	80153b4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80153ae:	69bb      	ldr	r3, [r7, #24]
 80153b0:	687a      	ldr	r2, [r7, #4]
 80153b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80153b4:	69bb      	ldr	r3, [r7, #24]
 80153b6:	68fa      	ldr	r2, [r7, #12]
 80153b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	68ba      	ldr	r2, [r7, #8]
 80153be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80153c0:	69bb      	ldr	r3, [r7, #24]
 80153c2:	2101      	movs	r1, #1
 80153c4:	0018      	movs	r0, r3
 80153c6:	f7ff ff5e 	bl	8015286 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80153ca:	46c0      	nop			@ (mov r8, r8)
 80153cc:	46bd      	mov	sp, r7
 80153ce:	b004      	add	sp, #16
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80153d2:	b580      	push	{r7, lr}
 80153d4:	b08a      	sub	sp, #40	@ 0x28
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	60f8      	str	r0, [r7, #12]
 80153da:	60b9      	str	r1, [r7, #8]
 80153dc:	607a      	str	r2, [r7, #4]
 80153de:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80153e0:	2300      	movs	r3, #0
 80153e2:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80153e8:	6a3b      	ldr	r3, [r7, #32]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d102      	bne.n	80153f4 <xQueueGenericSend+0x22>
 80153ee:	b672      	cpsid	i
 80153f0:	46c0      	nop			@ (mov r8, r8)
 80153f2:	e7fd      	b.n	80153f0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d103      	bne.n	8015402 <xQueueGenericSend+0x30>
 80153fa:	6a3b      	ldr	r3, [r7, #32]
 80153fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d101      	bne.n	8015406 <xQueueGenericSend+0x34>
 8015402:	2301      	movs	r3, #1
 8015404:	e000      	b.n	8015408 <xQueueGenericSend+0x36>
 8015406:	2300      	movs	r3, #0
 8015408:	2b00      	cmp	r3, #0
 801540a:	d102      	bne.n	8015412 <xQueueGenericSend+0x40>
 801540c:	b672      	cpsid	i
 801540e:	46c0      	nop			@ (mov r8, r8)
 8015410:	e7fd      	b.n	801540e <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	2b02      	cmp	r3, #2
 8015416:	d103      	bne.n	8015420 <xQueueGenericSend+0x4e>
 8015418:	6a3b      	ldr	r3, [r7, #32]
 801541a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801541c:	2b01      	cmp	r3, #1
 801541e:	d101      	bne.n	8015424 <xQueueGenericSend+0x52>
 8015420:	2301      	movs	r3, #1
 8015422:	e000      	b.n	8015426 <xQueueGenericSend+0x54>
 8015424:	2300      	movs	r3, #0
 8015426:	2b00      	cmp	r3, #0
 8015428:	d102      	bne.n	8015430 <xQueueGenericSend+0x5e>
 801542a:	b672      	cpsid	i
 801542c:	46c0      	nop			@ (mov r8, r8)
 801542e:	e7fd      	b.n	801542c <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015430:	f001 f9c2 	bl	80167b8 <xTaskGetSchedulerState>
 8015434:	1e03      	subs	r3, r0, #0
 8015436:	d102      	bne.n	801543e <xQueueGenericSend+0x6c>
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d101      	bne.n	8015442 <xQueueGenericSend+0x70>
 801543e:	2301      	movs	r3, #1
 8015440:	e000      	b.n	8015444 <xQueueGenericSend+0x72>
 8015442:	2300      	movs	r3, #0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d102      	bne.n	801544e <xQueueGenericSend+0x7c>
 8015448:	b672      	cpsid	i
 801544a:	46c0      	nop			@ (mov r8, r8)
 801544c:	e7fd      	b.n	801544a <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801544e:	f001 fb1f 	bl	8016a90 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015452:	6a3b      	ldr	r3, [r7, #32]
 8015454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015456:	6a3b      	ldr	r3, [r7, #32]
 8015458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801545a:	429a      	cmp	r2, r3
 801545c:	d302      	bcc.n	8015464 <xQueueGenericSend+0x92>
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	2b02      	cmp	r3, #2
 8015462:	d11e      	bne.n	80154a2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	68b9      	ldr	r1, [r7, #8]
 8015468:	6a3b      	ldr	r3, [r7, #32]
 801546a:	0018      	movs	r0, r3
 801546c:	f000 fa0d 	bl	801588a <prvCopyDataToQueue>
 8015470:	0003      	movs	r3, r0
 8015472:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015474:	6a3b      	ldr	r3, [r7, #32]
 8015476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015478:	2b00      	cmp	r3, #0
 801547a:	d009      	beq.n	8015490 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801547c:	6a3b      	ldr	r3, [r7, #32]
 801547e:	3324      	adds	r3, #36	@ 0x24
 8015480:	0018      	movs	r0, r3
 8015482:	f001 f80b 	bl	801649c <xTaskRemoveFromEventList>
 8015486:	1e03      	subs	r3, r0, #0
 8015488:	d007      	beq.n	801549a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801548a:	f001 faf1 	bl	8016a70 <vPortYield>
 801548e:	e004      	b.n	801549a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d001      	beq.n	801549a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015496:	f001 faeb 	bl	8016a70 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801549a:	f001 fb0b 	bl	8016ab4 <vPortExitCritical>
				return pdPASS;
 801549e:	2301      	movs	r3, #1
 80154a0:	e05b      	b.n	801555a <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d103      	bne.n	80154b0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80154a8:	f001 fb04 	bl	8016ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80154ac:	2300      	movs	r3, #0
 80154ae:	e054      	b.n	801555a <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 80154b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d106      	bne.n	80154c4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80154b6:	2314      	movs	r3, #20
 80154b8:	18fb      	adds	r3, r7, r3
 80154ba:	0018      	movs	r0, r3
 80154bc:	f001 f84c 	bl	8016558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80154c0:	2301      	movs	r3, #1
 80154c2:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80154c4:	f001 faf6 	bl	8016ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80154c8:	f000 fe2e 	bl	8016128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80154cc:	f001 fae0 	bl	8016a90 <vPortEnterCritical>
 80154d0:	6a3b      	ldr	r3, [r7, #32]
 80154d2:	2244      	movs	r2, #68	@ 0x44
 80154d4:	5c9b      	ldrb	r3, [r3, r2]
 80154d6:	b25b      	sxtb	r3, r3
 80154d8:	3301      	adds	r3, #1
 80154da:	d103      	bne.n	80154e4 <xQueueGenericSend+0x112>
 80154dc:	6a3b      	ldr	r3, [r7, #32]
 80154de:	2244      	movs	r2, #68	@ 0x44
 80154e0:	2100      	movs	r1, #0
 80154e2:	5499      	strb	r1, [r3, r2]
 80154e4:	6a3b      	ldr	r3, [r7, #32]
 80154e6:	2245      	movs	r2, #69	@ 0x45
 80154e8:	5c9b      	ldrb	r3, [r3, r2]
 80154ea:	b25b      	sxtb	r3, r3
 80154ec:	3301      	adds	r3, #1
 80154ee:	d103      	bne.n	80154f8 <xQueueGenericSend+0x126>
 80154f0:	6a3b      	ldr	r3, [r7, #32]
 80154f2:	2245      	movs	r2, #69	@ 0x45
 80154f4:	2100      	movs	r1, #0
 80154f6:	5499      	strb	r1, [r3, r2]
 80154f8:	f001 fadc 	bl	8016ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80154fc:	1d3a      	adds	r2, r7, #4
 80154fe:	2314      	movs	r3, #20
 8015500:	18fb      	adds	r3, r7, r3
 8015502:	0011      	movs	r1, r2
 8015504:	0018      	movs	r0, r3
 8015506:	f001 f83b 	bl	8016580 <xTaskCheckForTimeOut>
 801550a:	1e03      	subs	r3, r0, #0
 801550c:	d11e      	bne.n	801554c <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801550e:	6a3b      	ldr	r3, [r7, #32]
 8015510:	0018      	movs	r0, r3
 8015512:	f000 fabf 	bl	8015a94 <prvIsQueueFull>
 8015516:	1e03      	subs	r3, r0, #0
 8015518:	d011      	beq.n	801553e <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801551a:	6a3b      	ldr	r3, [r7, #32]
 801551c:	3310      	adds	r3, #16
 801551e:	687a      	ldr	r2, [r7, #4]
 8015520:	0011      	movs	r1, r2
 8015522:	0018      	movs	r0, r3
 8015524:	f000 ff9a 	bl	801645c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015528:	6a3b      	ldr	r3, [r7, #32]
 801552a:	0018      	movs	r0, r3
 801552c:	f000 fa3e 	bl	80159ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015530:	f000 fe06 	bl	8016140 <xTaskResumeAll>
 8015534:	1e03      	subs	r3, r0, #0
 8015536:	d18a      	bne.n	801544e <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8015538:	f001 fa9a 	bl	8016a70 <vPortYield>
 801553c:	e787      	b.n	801544e <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801553e:	6a3b      	ldr	r3, [r7, #32]
 8015540:	0018      	movs	r0, r3
 8015542:	f000 fa33 	bl	80159ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015546:	f000 fdfb 	bl	8016140 <xTaskResumeAll>
 801554a:	e780      	b.n	801544e <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801554c:	6a3b      	ldr	r3, [r7, #32]
 801554e:	0018      	movs	r0, r3
 8015550:	f000 fa2c 	bl	80159ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015554:	f000 fdf4 	bl	8016140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015558:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801555a:	0018      	movs	r0, r3
 801555c:	46bd      	mov	sp, r7
 801555e:	b00a      	add	sp, #40	@ 0x28
 8015560:	bd80      	pop	{r7, pc}

08015562 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015562:	b590      	push	{r4, r7, lr}
 8015564:	b08b      	sub	sp, #44	@ 0x2c
 8015566:	af00      	add	r7, sp, #0
 8015568:	60f8      	str	r0, [r7, #12]
 801556a:	60b9      	str	r1, [r7, #8]
 801556c:	607a      	str	r2, [r7, #4]
 801556e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8015574:	6a3b      	ldr	r3, [r7, #32]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d102      	bne.n	8015580 <xQueueGenericSendFromISR+0x1e>
 801557a:	b672      	cpsid	i
 801557c:	46c0      	nop			@ (mov r8, r8)
 801557e:	e7fd      	b.n	801557c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d103      	bne.n	801558e <xQueueGenericSendFromISR+0x2c>
 8015586:	6a3b      	ldr	r3, [r7, #32]
 8015588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801558a:	2b00      	cmp	r3, #0
 801558c:	d101      	bne.n	8015592 <xQueueGenericSendFromISR+0x30>
 801558e:	2301      	movs	r3, #1
 8015590:	e000      	b.n	8015594 <xQueueGenericSendFromISR+0x32>
 8015592:	2300      	movs	r3, #0
 8015594:	2b00      	cmp	r3, #0
 8015596:	d102      	bne.n	801559e <xQueueGenericSendFromISR+0x3c>
 8015598:	b672      	cpsid	i
 801559a:	46c0      	nop			@ (mov r8, r8)
 801559c:	e7fd      	b.n	801559a <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	2b02      	cmp	r3, #2
 80155a2:	d103      	bne.n	80155ac <xQueueGenericSendFromISR+0x4a>
 80155a4:	6a3b      	ldr	r3, [r7, #32]
 80155a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155a8:	2b01      	cmp	r3, #1
 80155aa:	d101      	bne.n	80155b0 <xQueueGenericSendFromISR+0x4e>
 80155ac:	2301      	movs	r3, #1
 80155ae:	e000      	b.n	80155b2 <xQueueGenericSendFromISR+0x50>
 80155b0:	2300      	movs	r3, #0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d102      	bne.n	80155bc <xQueueGenericSendFromISR+0x5a>
 80155b6:	b672      	cpsid	i
 80155b8:	46c0      	nop			@ (mov r8, r8)
 80155ba:	e7fd      	b.n	80155b8 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80155bc:	f001 fa92 	bl	8016ae4 <ulSetInterruptMaskFromISR>
 80155c0:	0003      	movs	r3, r0
 80155c2:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155c4:	6a3b      	ldr	r3, [r7, #32]
 80155c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80155c8:	6a3b      	ldr	r3, [r7, #32]
 80155ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d302      	bcc.n	80155d6 <xQueueGenericSendFromISR+0x74>
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	2b02      	cmp	r3, #2
 80155d4:	d131      	bne.n	801563a <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80155d6:	241b      	movs	r4, #27
 80155d8:	193b      	adds	r3, r7, r4
 80155da:	6a3a      	ldr	r2, [r7, #32]
 80155dc:	2145      	movs	r1, #69	@ 0x45
 80155de:	5c52      	ldrb	r2, [r2, r1]
 80155e0:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80155e2:	6a3b      	ldr	r3, [r7, #32]
 80155e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155e6:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80155e8:	683a      	ldr	r2, [r7, #0]
 80155ea:	68b9      	ldr	r1, [r7, #8]
 80155ec:	6a3b      	ldr	r3, [r7, #32]
 80155ee:	0018      	movs	r0, r3
 80155f0:	f000 f94b 	bl	801588a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80155f4:	193b      	adds	r3, r7, r4
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	b25b      	sxtb	r3, r3
 80155fa:	3301      	adds	r3, #1
 80155fc:	d111      	bne.n	8015622 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80155fe:	6a3b      	ldr	r3, [r7, #32]
 8015600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015602:	2b00      	cmp	r3, #0
 8015604:	d016      	beq.n	8015634 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015606:	6a3b      	ldr	r3, [r7, #32]
 8015608:	3324      	adds	r3, #36	@ 0x24
 801560a:	0018      	movs	r0, r3
 801560c:	f000 ff46 	bl	801649c <xTaskRemoveFromEventList>
 8015610:	1e03      	subs	r3, r0, #0
 8015612:	d00f      	beq.n	8015634 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d00c      	beq.n	8015634 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2201      	movs	r2, #1
 801561e:	601a      	str	r2, [r3, #0]
 8015620:	e008      	b.n	8015634 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015622:	231b      	movs	r3, #27
 8015624:	18fb      	adds	r3, r7, r3
 8015626:	781b      	ldrb	r3, [r3, #0]
 8015628:	3301      	adds	r3, #1
 801562a:	b2db      	uxtb	r3, r3
 801562c:	b259      	sxtb	r1, r3
 801562e:	6a3b      	ldr	r3, [r7, #32]
 8015630:	2245      	movs	r2, #69	@ 0x45
 8015632:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8015634:	2301      	movs	r3, #1
 8015636:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 8015638:	e001      	b.n	801563e <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801563a:	2300      	movs	r3, #0
 801563c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801563e:	69fb      	ldr	r3, [r7, #28]
 8015640:	0018      	movs	r0, r3
 8015642:	f001 fa55 	bl	8016af0 <vClearInterruptMaskFromISR>

	return xReturn;
 8015646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015648:	0018      	movs	r0, r3
 801564a:	46bd      	mov	sp, r7
 801564c:	b00b      	add	sp, #44	@ 0x2c
 801564e:	bd90      	pop	{r4, r7, pc}

08015650 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b08a      	sub	sp, #40	@ 0x28
 8015654:	af00      	add	r7, sp, #0
 8015656:	60f8      	str	r0, [r7, #12]
 8015658:	60b9      	str	r1, [r7, #8]
 801565a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801565c:	2300      	movs	r3, #0
 801565e:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015664:	6a3b      	ldr	r3, [r7, #32]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d102      	bne.n	8015670 <xQueueReceive+0x20>
 801566a:	b672      	cpsid	i
 801566c:	46c0      	nop			@ (mov r8, r8)
 801566e:	e7fd      	b.n	801566c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d103      	bne.n	801567e <xQueueReceive+0x2e>
 8015676:	6a3b      	ldr	r3, [r7, #32]
 8015678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801567a:	2b00      	cmp	r3, #0
 801567c:	d101      	bne.n	8015682 <xQueueReceive+0x32>
 801567e:	2301      	movs	r3, #1
 8015680:	e000      	b.n	8015684 <xQueueReceive+0x34>
 8015682:	2300      	movs	r3, #0
 8015684:	2b00      	cmp	r3, #0
 8015686:	d102      	bne.n	801568e <xQueueReceive+0x3e>
 8015688:	b672      	cpsid	i
 801568a:	46c0      	nop			@ (mov r8, r8)
 801568c:	e7fd      	b.n	801568a <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801568e:	f001 f893 	bl	80167b8 <xTaskGetSchedulerState>
 8015692:	1e03      	subs	r3, r0, #0
 8015694:	d102      	bne.n	801569c <xQueueReceive+0x4c>
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d101      	bne.n	80156a0 <xQueueReceive+0x50>
 801569c:	2301      	movs	r3, #1
 801569e:	e000      	b.n	80156a2 <xQueueReceive+0x52>
 80156a0:	2300      	movs	r3, #0
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d102      	bne.n	80156ac <xQueueReceive+0x5c>
 80156a6:	b672      	cpsid	i
 80156a8:	46c0      	nop			@ (mov r8, r8)
 80156aa:	e7fd      	b.n	80156a8 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80156ac:	f001 f9f0 	bl	8016a90 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80156b0:	6a3b      	ldr	r3, [r7, #32]
 80156b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156b4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80156b6:	69fb      	ldr	r3, [r7, #28]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d01a      	beq.n	80156f2 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80156bc:	68ba      	ldr	r2, [r7, #8]
 80156be:	6a3b      	ldr	r3, [r7, #32]
 80156c0:	0011      	movs	r1, r2
 80156c2:	0018      	movs	r0, r3
 80156c4:	f000 f94c 	bl	8015960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	1e5a      	subs	r2, r3, #1
 80156cc:	6a3b      	ldr	r3, [r7, #32]
 80156ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80156d0:	6a3b      	ldr	r3, [r7, #32]
 80156d2:	691b      	ldr	r3, [r3, #16]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d008      	beq.n	80156ea <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80156d8:	6a3b      	ldr	r3, [r7, #32]
 80156da:	3310      	adds	r3, #16
 80156dc:	0018      	movs	r0, r3
 80156de:	f000 fedd 	bl	801649c <xTaskRemoveFromEventList>
 80156e2:	1e03      	subs	r3, r0, #0
 80156e4:	d001      	beq.n	80156ea <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80156e6:	f001 f9c3 	bl	8016a70 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80156ea:	f001 f9e3 	bl	8016ab4 <vPortExitCritical>
				return pdPASS;
 80156ee:	2301      	movs	r3, #1
 80156f0:	e062      	b.n	80157b8 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d103      	bne.n	8015700 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80156f8:	f001 f9dc 	bl	8016ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80156fc:	2300      	movs	r3, #0
 80156fe:	e05b      	b.n	80157b8 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015702:	2b00      	cmp	r3, #0
 8015704:	d106      	bne.n	8015714 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015706:	2314      	movs	r3, #20
 8015708:	18fb      	adds	r3, r7, r3
 801570a:	0018      	movs	r0, r3
 801570c:	f000 ff24 	bl	8016558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015710:	2301      	movs	r3, #1
 8015712:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015714:	f001 f9ce 	bl	8016ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015718:	f000 fd06 	bl	8016128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801571c:	f001 f9b8 	bl	8016a90 <vPortEnterCritical>
 8015720:	6a3b      	ldr	r3, [r7, #32]
 8015722:	2244      	movs	r2, #68	@ 0x44
 8015724:	5c9b      	ldrb	r3, [r3, r2]
 8015726:	b25b      	sxtb	r3, r3
 8015728:	3301      	adds	r3, #1
 801572a:	d103      	bne.n	8015734 <xQueueReceive+0xe4>
 801572c:	6a3b      	ldr	r3, [r7, #32]
 801572e:	2244      	movs	r2, #68	@ 0x44
 8015730:	2100      	movs	r1, #0
 8015732:	5499      	strb	r1, [r3, r2]
 8015734:	6a3b      	ldr	r3, [r7, #32]
 8015736:	2245      	movs	r2, #69	@ 0x45
 8015738:	5c9b      	ldrb	r3, [r3, r2]
 801573a:	b25b      	sxtb	r3, r3
 801573c:	3301      	adds	r3, #1
 801573e:	d103      	bne.n	8015748 <xQueueReceive+0xf8>
 8015740:	6a3b      	ldr	r3, [r7, #32]
 8015742:	2245      	movs	r2, #69	@ 0x45
 8015744:	2100      	movs	r1, #0
 8015746:	5499      	strb	r1, [r3, r2]
 8015748:	f001 f9b4 	bl	8016ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801574c:	1d3a      	adds	r2, r7, #4
 801574e:	2314      	movs	r3, #20
 8015750:	18fb      	adds	r3, r7, r3
 8015752:	0011      	movs	r1, r2
 8015754:	0018      	movs	r0, r3
 8015756:	f000 ff13 	bl	8016580 <xTaskCheckForTimeOut>
 801575a:	1e03      	subs	r3, r0, #0
 801575c:	d11e      	bne.n	801579c <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801575e:	6a3b      	ldr	r3, [r7, #32]
 8015760:	0018      	movs	r0, r3
 8015762:	f000 f981 	bl	8015a68 <prvIsQueueEmpty>
 8015766:	1e03      	subs	r3, r0, #0
 8015768:	d011      	beq.n	801578e <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801576a:	6a3b      	ldr	r3, [r7, #32]
 801576c:	3324      	adds	r3, #36	@ 0x24
 801576e:	687a      	ldr	r2, [r7, #4]
 8015770:	0011      	movs	r1, r2
 8015772:	0018      	movs	r0, r3
 8015774:	f000 fe72 	bl	801645c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015778:	6a3b      	ldr	r3, [r7, #32]
 801577a:	0018      	movs	r0, r3
 801577c:	f000 f916 	bl	80159ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015780:	f000 fcde 	bl	8016140 <xTaskResumeAll>
 8015784:	1e03      	subs	r3, r0, #0
 8015786:	d191      	bne.n	80156ac <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8015788:	f001 f972 	bl	8016a70 <vPortYield>
 801578c:	e78e      	b.n	80156ac <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801578e:	6a3b      	ldr	r3, [r7, #32]
 8015790:	0018      	movs	r0, r3
 8015792:	f000 f90b 	bl	80159ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015796:	f000 fcd3 	bl	8016140 <xTaskResumeAll>
 801579a:	e787      	b.n	80156ac <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801579c:	6a3b      	ldr	r3, [r7, #32]
 801579e:	0018      	movs	r0, r3
 80157a0:	f000 f904 	bl	80159ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80157a4:	f000 fccc 	bl	8016140 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80157a8:	6a3b      	ldr	r3, [r7, #32]
 80157aa:	0018      	movs	r0, r3
 80157ac:	f000 f95c 	bl	8015a68 <prvIsQueueEmpty>
 80157b0:	1e03      	subs	r3, r0, #0
 80157b2:	d100      	bne.n	80157b6 <xQueueReceive+0x166>
 80157b4:	e77a      	b.n	80156ac <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80157b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80157b8:	0018      	movs	r0, r3
 80157ba:	46bd      	mov	sp, r7
 80157bc:	b00a      	add	sp, #40	@ 0x28
 80157be:	bd80      	pop	{r7, pc}

080157c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80157c0:	b590      	push	{r4, r7, lr}
 80157c2:	b08b      	sub	sp, #44	@ 0x2c
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80157d0:	6a3b      	ldr	r3, [r7, #32]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d102      	bne.n	80157dc <xQueueReceiveFromISR+0x1c>
 80157d6:	b672      	cpsid	i
 80157d8:	46c0      	nop			@ (mov r8, r8)
 80157da:	e7fd      	b.n	80157d8 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d103      	bne.n	80157ea <xQueueReceiveFromISR+0x2a>
 80157e2:	6a3b      	ldr	r3, [r7, #32]
 80157e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d101      	bne.n	80157ee <xQueueReceiveFromISR+0x2e>
 80157ea:	2301      	movs	r3, #1
 80157ec:	e000      	b.n	80157f0 <xQueueReceiveFromISR+0x30>
 80157ee:	2300      	movs	r3, #0
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d102      	bne.n	80157fa <xQueueReceiveFromISR+0x3a>
 80157f4:	b672      	cpsid	i
 80157f6:	46c0      	nop			@ (mov r8, r8)
 80157f8:	e7fd      	b.n	80157f6 <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80157fa:	f001 f973 	bl	8016ae4 <ulSetInterruptMaskFromISR>
 80157fe:	0003      	movs	r3, r0
 8015800:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015802:	6a3b      	ldr	r3, [r7, #32]
 8015804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015806:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015808:	69bb      	ldr	r3, [r7, #24]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d032      	beq.n	8015874 <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801580e:	2417      	movs	r4, #23
 8015810:	193b      	adds	r3, r7, r4
 8015812:	6a3a      	ldr	r2, [r7, #32]
 8015814:	2144      	movs	r1, #68	@ 0x44
 8015816:	5c52      	ldrb	r2, [r2, r1]
 8015818:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801581a:	68ba      	ldr	r2, [r7, #8]
 801581c:	6a3b      	ldr	r3, [r7, #32]
 801581e:	0011      	movs	r1, r2
 8015820:	0018      	movs	r0, r3
 8015822:	f000 f89d 	bl	8015960 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015826:	69bb      	ldr	r3, [r7, #24]
 8015828:	1e5a      	subs	r2, r3, #1
 801582a:	6a3b      	ldr	r3, [r7, #32]
 801582c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801582e:	193b      	adds	r3, r7, r4
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	b25b      	sxtb	r3, r3
 8015834:	3301      	adds	r3, #1
 8015836:	d111      	bne.n	801585c <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015838:	6a3b      	ldr	r3, [r7, #32]
 801583a:	691b      	ldr	r3, [r3, #16]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d016      	beq.n	801586e <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015840:	6a3b      	ldr	r3, [r7, #32]
 8015842:	3310      	adds	r3, #16
 8015844:	0018      	movs	r0, r3
 8015846:	f000 fe29 	bl	801649c <xTaskRemoveFromEventList>
 801584a:	1e03      	subs	r3, r0, #0
 801584c:	d00f      	beq.n	801586e <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d00c      	beq.n	801586e <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2201      	movs	r2, #1
 8015858:	601a      	str	r2, [r3, #0]
 801585a:	e008      	b.n	801586e <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801585c:	2317      	movs	r3, #23
 801585e:	18fb      	adds	r3, r7, r3
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	3301      	adds	r3, #1
 8015864:	b2db      	uxtb	r3, r3
 8015866:	b259      	sxtb	r1, r3
 8015868:	6a3b      	ldr	r3, [r7, #32]
 801586a:	2244      	movs	r2, #68	@ 0x44
 801586c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 801586e:	2301      	movs	r3, #1
 8015870:	627b      	str	r3, [r7, #36]	@ 0x24
 8015872:	e001      	b.n	8015878 <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 8015874:	2300      	movs	r3, #0
 8015876:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	0018      	movs	r0, r3
 801587c:	f001 f938 	bl	8016af0 <vClearInterruptMaskFromISR>

	return xReturn;
 8015880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015882:	0018      	movs	r0, r3
 8015884:	46bd      	mov	sp, r7
 8015886:	b00b      	add	sp, #44	@ 0x2c
 8015888:	bd90      	pop	{r4, r7, pc}

0801588a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801588a:	b580      	push	{r7, lr}
 801588c:	b086      	sub	sp, #24
 801588e:	af00      	add	r7, sp, #0
 8015890:	60f8      	str	r0, [r7, #12]
 8015892:	60b9      	str	r1, [r7, #8]
 8015894:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015896:	2300      	movs	r3, #0
 8015898:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801589e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d10e      	bne.n	80158c6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d14e      	bne.n	801594e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	689b      	ldr	r3, [r3, #8]
 80158b4:	0018      	movs	r0, r3
 80158b6:	f000 ff9b 	bl	80167f0 <xTaskPriorityDisinherit>
 80158ba:	0003      	movs	r3, r0
 80158bc:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2200      	movs	r2, #0
 80158c2:	609a      	str	r2, [r3, #8]
 80158c4:	e043      	b.n	801594e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d119      	bne.n	8015900 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	6858      	ldr	r0, [r3, #4]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80158d4:	68bb      	ldr	r3, [r7, #8]
 80158d6:	0019      	movs	r1, r3
 80158d8:	f003 ffd2 	bl	8019880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	685a      	ldr	r2, [r3, #4]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158e4:	18d2      	adds	r2, r2, r3
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	685a      	ldr	r2, [r3, #4]
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	689b      	ldr	r3, [r3, #8]
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d32b      	bcc.n	801594e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	605a      	str	r2, [r3, #4]
 80158fe:	e026      	b.n	801594e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	68d8      	ldr	r0, [r3, #12]
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	0019      	movs	r1, r3
 801590c:	f003 ffb8 	bl	8019880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	68da      	ldr	r2, [r3, #12]
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015918:	425b      	negs	r3, r3
 801591a:	18d2      	adds	r2, r2, r3
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	68da      	ldr	r2, [r3, #12]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	429a      	cmp	r2, r3
 801592a:	d207      	bcs.n	801593c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	689a      	ldr	r2, [r3, #8]
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015934:	425b      	negs	r3, r3
 8015936:	18d2      	adds	r2, r2, r3
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2b02      	cmp	r3, #2
 8015940:	d105      	bne.n	801594e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015942:	693b      	ldr	r3, [r7, #16]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d002      	beq.n	801594e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	3b01      	subs	r3, #1
 801594c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	1c5a      	adds	r2, r3, #1
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015956:	697b      	ldr	r3, [r7, #20]
}
 8015958:	0018      	movs	r0, r3
 801595a:	46bd      	mov	sp, r7
 801595c:	b006      	add	sp, #24
 801595e:	bd80      	pop	{r7, pc}

08015960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801596e:	2b00      	cmp	r3, #0
 8015970:	d018      	beq.n	80159a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	68da      	ldr	r2, [r3, #12]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801597a:	18d2      	adds	r2, r2, r3
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	68da      	ldr	r2, [r3, #12]
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	689b      	ldr	r3, [r3, #8]
 8015988:	429a      	cmp	r2, r3
 801598a:	d303      	bcc.n	8015994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681a      	ldr	r2, [r3, #0]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	68d9      	ldr	r1, [r3, #12]
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	0018      	movs	r0, r3
 80159a0:	f003 ff6e 	bl	8019880 <memcpy>
	}
}
 80159a4:	46c0      	nop			@ (mov r8, r8)
 80159a6:	46bd      	mov	sp, r7
 80159a8:	b002      	add	sp, #8
 80159aa:	bd80      	pop	{r7, pc}

080159ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80159b4:	f001 f86c 	bl	8016a90 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80159b8:	230f      	movs	r3, #15
 80159ba:	18fb      	adds	r3, r7, r3
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	2145      	movs	r1, #69	@ 0x45
 80159c0:	5c52      	ldrb	r2, [r2, r1]
 80159c2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80159c4:	e013      	b.n	80159ee <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d016      	beq.n	80159fc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	3324      	adds	r3, #36	@ 0x24
 80159d2:	0018      	movs	r0, r3
 80159d4:	f000 fd62 	bl	801649c <xTaskRemoveFromEventList>
 80159d8:	1e03      	subs	r3, r0, #0
 80159da:	d001      	beq.n	80159e0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80159dc:	f000 fe22 	bl	8016624 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80159e0:	210f      	movs	r1, #15
 80159e2:	187b      	adds	r3, r7, r1
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	3b01      	subs	r3, #1
 80159e8:	b2da      	uxtb	r2, r3
 80159ea:	187b      	adds	r3, r7, r1
 80159ec:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80159ee:	230f      	movs	r3, #15
 80159f0:	18fb      	adds	r3, r7, r3
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	b25b      	sxtb	r3, r3
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	dce5      	bgt.n	80159c6 <prvUnlockQueue+0x1a>
 80159fa:	e000      	b.n	80159fe <prvUnlockQueue+0x52>
					break;
 80159fc:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2245      	movs	r2, #69	@ 0x45
 8015a02:	21ff      	movs	r1, #255	@ 0xff
 8015a04:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8015a06:	f001 f855 	bl	8016ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015a0a:	f001 f841 	bl	8016a90 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015a0e:	230e      	movs	r3, #14
 8015a10:	18fb      	adds	r3, r7, r3
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	2144      	movs	r1, #68	@ 0x44
 8015a16:	5c52      	ldrb	r2, [r2, r1]
 8015a18:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015a1a:	e013      	b.n	8015a44 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	691b      	ldr	r3, [r3, #16]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d016      	beq.n	8015a52 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	3310      	adds	r3, #16
 8015a28:	0018      	movs	r0, r3
 8015a2a:	f000 fd37 	bl	801649c <xTaskRemoveFromEventList>
 8015a2e:	1e03      	subs	r3, r0, #0
 8015a30:	d001      	beq.n	8015a36 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8015a32:	f000 fdf7 	bl	8016624 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015a36:	210e      	movs	r1, #14
 8015a38:	187b      	adds	r3, r7, r1
 8015a3a:	781b      	ldrb	r3, [r3, #0]
 8015a3c:	3b01      	subs	r3, #1
 8015a3e:	b2da      	uxtb	r2, r3
 8015a40:	187b      	adds	r3, r7, r1
 8015a42:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015a44:	230e      	movs	r3, #14
 8015a46:	18fb      	adds	r3, r7, r3
 8015a48:	781b      	ldrb	r3, [r3, #0]
 8015a4a:	b25b      	sxtb	r3, r3
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	dce5      	bgt.n	8015a1c <prvUnlockQueue+0x70>
 8015a50:	e000      	b.n	8015a54 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8015a52:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2244      	movs	r2, #68	@ 0x44
 8015a58:	21ff      	movs	r1, #255	@ 0xff
 8015a5a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8015a5c:	f001 f82a 	bl	8016ab4 <vPortExitCritical>
}
 8015a60:	46c0      	nop			@ (mov r8, r8)
 8015a62:	46bd      	mov	sp, r7
 8015a64:	b004      	add	sp, #16
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015a70:	f001 f80e 	bl	8016a90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d102      	bne.n	8015a82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	60fb      	str	r3, [r7, #12]
 8015a80:	e001      	b.n	8015a86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015a82:	2300      	movs	r3, #0
 8015a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015a86:	f001 f815 	bl	8016ab4 <vPortExitCritical>

	return xReturn;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
}
 8015a8c:	0018      	movs	r0, r3
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	b004      	add	sp, #16
 8015a92:	bd80      	pop	{r7, pc}

08015a94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b084      	sub	sp, #16
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015a9c:	f000 fff8 	bl	8016a90 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d102      	bne.n	8015ab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015aac:	2301      	movs	r3, #1
 8015aae:	60fb      	str	r3, [r7, #12]
 8015ab0:	e001      	b.n	8015ab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015ab6:	f000 fffd 	bl	8016ab4 <vPortExitCritical>

	return xReturn;
 8015aba:	68fb      	ldr	r3, [r7, #12]
}
 8015abc:	0018      	movs	r0, r3
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	b004      	add	sp, #16
 8015ac2:	bd80      	pop	{r7, pc}

08015ac4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015ac4:	b590      	push	{r4, r7, lr}
 8015ac6:	b08d      	sub	sp, #52	@ 0x34
 8015ac8:	af04      	add	r7, sp, #16
 8015aca:	60f8      	str	r0, [r7, #12]
 8015acc:	60b9      	str	r1, [r7, #8]
 8015ace:	603b      	str	r3, [r7, #0]
 8015ad0:	1dbb      	adds	r3, r7, #6
 8015ad2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015ad4:	1dbb      	adds	r3, r7, #6
 8015ad6:	881b      	ldrh	r3, [r3, #0]
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	0018      	movs	r0, r3
 8015adc:	f001 f870 	bl	8016bc0 <pvPortMalloc>
 8015ae0:	0003      	movs	r3, r0
 8015ae2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d010      	beq.n	8015b0c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015aea:	2054      	movs	r0, #84	@ 0x54
 8015aec:	f001 f868 	bl	8016bc0 <pvPortMalloc>
 8015af0:	0003      	movs	r3, r0
 8015af2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8015af4:	69fb      	ldr	r3, [r7, #28]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d003      	beq.n	8015b02 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	697a      	ldr	r2, [r7, #20]
 8015afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8015b00:	e006      	b.n	8015b10 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	0018      	movs	r0, r3
 8015b06:	f001 f90b 	bl	8016d20 <vPortFree>
 8015b0a:	e001      	b.n	8015b10 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015b10:	69fb      	ldr	r3, [r7, #28]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d016      	beq.n	8015b44 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015b16:	1dbb      	adds	r3, r7, #6
 8015b18:	881a      	ldrh	r2, [r3, #0]
 8015b1a:	683c      	ldr	r4, [r7, #0]
 8015b1c:	68b9      	ldr	r1, [r7, #8]
 8015b1e:	68f8      	ldr	r0, [r7, #12]
 8015b20:	2300      	movs	r3, #0
 8015b22:	9303      	str	r3, [sp, #12]
 8015b24:	69fb      	ldr	r3, [r7, #28]
 8015b26:	9302      	str	r3, [sp, #8]
 8015b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b2a:	9301      	str	r3, [sp, #4]
 8015b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b2e:	9300      	str	r3, [sp, #0]
 8015b30:	0023      	movs	r3, r4
 8015b32:	f000 f80f 	bl	8015b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015b36:	69fb      	ldr	r3, [r7, #28]
 8015b38:	0018      	movs	r0, r3
 8015b3a:	f000 f88d 	bl	8015c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015b3e:	2301      	movs	r3, #1
 8015b40:	61bb      	str	r3, [r7, #24]
 8015b42:	e002      	b.n	8015b4a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015b44:	2301      	movs	r3, #1
 8015b46:	425b      	negs	r3, r3
 8015b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8015b4c:	0018      	movs	r0, r3
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	b009      	add	sp, #36	@ 0x24
 8015b52:	bd90      	pop	{r4, r7, pc}

08015b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b086      	sub	sp, #24
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	60f8      	str	r0, [r7, #12]
 8015b5c:	60b9      	str	r1, [r7, #8]
 8015b5e:	607a      	str	r2, [r7, #4]
 8015b60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	493a      	ldr	r1, [pc, #232]	@ (8015c54 <prvInitialiseNewTask+0x100>)
 8015b6a:	468c      	mov	ip, r1
 8015b6c:	4463      	add	r3, ip
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	18d3      	adds	r3, r2, r3
 8015b72:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	2207      	movs	r2, #7
 8015b78:	4393      	bics	r3, r2
 8015b7a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	2207      	movs	r2, #7
 8015b80:	4013      	ands	r3, r2
 8015b82:	d002      	beq.n	8015b8a <prvInitialiseNewTask+0x36>
 8015b84:	b672      	cpsid	i
 8015b86:	46c0      	nop			@ (mov r8, r8)
 8015b88:	e7fd      	b.n	8015b86 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d020      	beq.n	8015bd2 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015b90:	2300      	movs	r3, #0
 8015b92:	617b      	str	r3, [r7, #20]
 8015b94:	e013      	b.n	8015bbe <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015b96:	68ba      	ldr	r2, [r7, #8]
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	18d3      	adds	r3, r2, r3
 8015b9c:	7818      	ldrb	r0, [r3, #0]
 8015b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ba0:	2134      	movs	r1, #52	@ 0x34
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	18d3      	adds	r3, r2, r3
 8015ba6:	185b      	adds	r3, r3, r1
 8015ba8:	1c02      	adds	r2, r0, #0
 8015baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015bac:	68ba      	ldr	r2, [r7, #8]
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	18d3      	adds	r3, r2, r3
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d006      	beq.n	8015bc6 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	3301      	adds	r3, #1
 8015bbc:	617b      	str	r3, [r7, #20]
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	2b0f      	cmp	r3, #15
 8015bc2:	d9e8      	bls.n	8015b96 <prvInitialiseNewTask+0x42>
 8015bc4:	e000      	b.n	8015bc8 <prvInitialiseNewTask+0x74>
			{
				break;
 8015bc6:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bca:	2243      	movs	r2, #67	@ 0x43
 8015bcc:	2100      	movs	r1, #0
 8015bce:	5499      	strb	r1, [r3, r2]
 8015bd0:	e003      	b.n	8015bda <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bd4:	2234      	movs	r2, #52	@ 0x34
 8015bd6:	2100      	movs	r1, #0
 8015bd8:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015bda:	6a3b      	ldr	r3, [r7, #32]
 8015bdc:	2b06      	cmp	r3, #6
 8015bde:	d901      	bls.n	8015be4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015be0:	2306      	movs	r3, #6
 8015be2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015be6:	6a3a      	ldr	r2, [r7, #32]
 8015be8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bec:	6a3a      	ldr	r2, [r7, #32]
 8015bee:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf8:	3304      	adds	r3, #4
 8015bfa:	0018      	movs	r0, r3
 8015bfc:	f7ff fab8 	bl	8015170 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c02:	3318      	adds	r3, #24
 8015c04:	0018      	movs	r0, r3
 8015c06:	f7ff fab3 	bl	8015170 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c10:	6a3b      	ldr	r3, [r7, #32]
 8015c12:	2207      	movs	r2, #7
 8015c14:	1ad2      	subs	r2, r2, r3
 8015c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015c1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c22:	2200      	movs	r2, #0
 8015c24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c28:	2250      	movs	r2, #80	@ 0x50
 8015c2a:	2100      	movs	r1, #0
 8015c2c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015c2e:	683a      	ldr	r2, [r7, #0]
 8015c30:	68f9      	ldr	r1, [r7, #12]
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	0018      	movs	r0, r3
 8015c36:	f000 fe8d 	bl	8016954 <pxPortInitialiseStack>
 8015c3a:	0002      	movs	r2, r0
 8015c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d002      	beq.n	8015c4c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015c4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015c4c:	46c0      	nop			@ (mov r8, r8)
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	b006      	add	sp, #24
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	3fffffff 	.word	0x3fffffff

08015c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b082      	sub	sp, #8
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015c60:	f000 ff16 	bl	8016a90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015c64:	4b28      	ldr	r3, [pc, #160]	@ (8015d08 <prvAddNewTaskToReadyList+0xb0>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	1c5a      	adds	r2, r3, #1
 8015c6a:	4b27      	ldr	r3, [pc, #156]	@ (8015d08 <prvAddNewTaskToReadyList+0xb0>)
 8015c6c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8015c6e:	4b27      	ldr	r3, [pc, #156]	@ (8015d0c <prvAddNewTaskToReadyList+0xb4>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d109      	bne.n	8015c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015c76:	4b25      	ldr	r3, [pc, #148]	@ (8015d0c <prvAddNewTaskToReadyList+0xb4>)
 8015c78:	687a      	ldr	r2, [r7, #4]
 8015c7a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015c7c:	4b22      	ldr	r3, [pc, #136]	@ (8015d08 <prvAddNewTaskToReadyList+0xb0>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2b01      	cmp	r3, #1
 8015c82:	d110      	bne.n	8015ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015c84:	f000 fce8 	bl	8016658 <prvInitialiseTaskLists>
 8015c88:	e00d      	b.n	8015ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015c8a:	4b21      	ldr	r3, [pc, #132]	@ (8015d10 <prvAddNewTaskToReadyList+0xb8>)
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d109      	bne.n	8015ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015c92:	4b1e      	ldr	r3, [pc, #120]	@ (8015d0c <prvAddNewTaskToReadyList+0xb4>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	d802      	bhi.n	8015ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8015d0c <prvAddNewTaskToReadyList+0xb4>)
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8015d14 <prvAddNewTaskToReadyList+0xbc>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	1c5a      	adds	r2, r3, #1
 8015cac:	4b19      	ldr	r3, [pc, #100]	@ (8015d14 <prvAddNewTaskToReadyList+0xbc>)
 8015cae:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cb4:	4b18      	ldr	r3, [pc, #96]	@ (8015d18 <prvAddNewTaskToReadyList+0xc0>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d903      	bls.n	8015cc4 <prvAddNewTaskToReadyList+0x6c>
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cc0:	4b15      	ldr	r3, [pc, #84]	@ (8015d18 <prvAddNewTaskToReadyList+0xc0>)
 8015cc2:	601a      	str	r2, [r3, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cc8:	0013      	movs	r3, r2
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	189b      	adds	r3, r3, r2
 8015cce:	009b      	lsls	r3, r3, #2
 8015cd0:	4a12      	ldr	r2, [pc, #72]	@ (8015d1c <prvAddNewTaskToReadyList+0xc4>)
 8015cd2:	189a      	adds	r2, r3, r2
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	3304      	adds	r3, #4
 8015cd8:	0019      	movs	r1, r3
 8015cda:	0010      	movs	r0, r2
 8015cdc:	f7ff fa53 	bl	8015186 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015ce0:	f000 fee8 	bl	8016ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8015d10 <prvAddNewTaskToReadyList+0xb8>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d008      	beq.n	8015cfe <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015cec:	4b07      	ldr	r3, [pc, #28]	@ (8015d0c <prvAddNewTaskToReadyList+0xb4>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d201      	bcs.n	8015cfe <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015cfa:	f000 feb9 	bl	8016a70 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015cfe:	46c0      	nop			@ (mov r8, r8)
 8015d00:	46bd      	mov	sp, r7
 8015d02:	b002      	add	sp, #8
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	46c0      	nop			@ (mov r8, r8)
 8015d08:	200004f8 	.word	0x200004f8
 8015d0c:	200003f8 	.word	0x200003f8
 8015d10:	20000504 	.word	0x20000504
 8015d14:	20000514 	.word	0x20000514
 8015d18:	20000500 	.word	0x20000500
 8015d1c:	200003fc 	.word	0x200003fc

08015d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b084      	sub	sp, #16
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d011      	beq.n	8015d56 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015d32:	4b0d      	ldr	r3, [pc, #52]	@ (8015d68 <vTaskDelay+0x48>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d002      	beq.n	8015d40 <vTaskDelay+0x20>
 8015d3a:	b672      	cpsid	i
 8015d3c:	46c0      	nop			@ (mov r8, r8)
 8015d3e:	e7fd      	b.n	8015d3c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8015d40:	f000 f9f2 	bl	8016128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2100      	movs	r1, #0
 8015d48:	0018      	movs	r0, r3
 8015d4a:	f000 fdaf 	bl	80168ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015d4e:	f000 f9f7 	bl	8016140 <xTaskResumeAll>
 8015d52:	0003      	movs	r3, r0
 8015d54:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d101      	bne.n	8015d60 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8015d5c:	f000 fe88 	bl	8016a70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015d60:	46c0      	nop			@ (mov r8, r8)
 8015d62:	46bd      	mov	sp, r7
 8015d64:	b004      	add	sp, #16
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	20000520 	.word	0x20000520

08015d6c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b088      	sub	sp, #32
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8015d78:	69bb      	ldr	r3, [r7, #24]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d102      	bne.n	8015d84 <eTaskGetState+0x18>
 8015d7e:	b672      	cpsid	i
 8015d80:	46c0      	nop			@ (mov r8, r8)
 8015d82:	e7fd      	b.n	8015d80 <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 8015d84:	4b2b      	ldr	r3, [pc, #172]	@ (8015e34 <eTaskGetState+0xc8>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	69ba      	ldr	r2, [r7, #24]
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d104      	bne.n	8015d98 <eTaskGetState+0x2c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8015d8e:	231f      	movs	r3, #31
 8015d90:	18fb      	adds	r3, r7, r3
 8015d92:	2200      	movs	r2, #0
 8015d94:	701a      	strb	r2, [r3, #0]
 8015d96:	e046      	b.n	8015e26 <eTaskGetState+0xba>
		}
		else
		{
			taskENTER_CRITICAL();
 8015d98:	f000 fe7a 	bl	8016a90 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	695b      	ldr	r3, [r3, #20]
 8015da0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8015da2:	4b25      	ldr	r3, [pc, #148]	@ (8015e38 <eTaskGetState+0xcc>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8015da8:	4b24      	ldr	r3, [pc, #144]	@ (8015e3c <eTaskGetState+0xd0>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8015dae:	f000 fe81 	bl	8016ab4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8015db2:	697a      	ldr	r2, [r7, #20]
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d003      	beq.n	8015dc2 <eTaskGetState+0x56>
 8015dba:	697a      	ldr	r2, [r7, #20]
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d104      	bne.n	8015dcc <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8015dc2:	231f      	movs	r3, #31
 8015dc4:	18fb      	adds	r3, r7, r3
 8015dc6:	2202      	movs	r2, #2
 8015dc8:	701a      	strb	r2, [r3, #0]
 8015dca:	e02c      	b.n	8015e26 <eTaskGetState+0xba>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8015dcc:	697a      	ldr	r2, [r7, #20]
 8015dce:	4b1c      	ldr	r3, [pc, #112]	@ (8015e40 <eTaskGetState+0xd4>)
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d118      	bne.n	8015e06 <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8015dd4:	69bb      	ldr	r3, [r7, #24]
 8015dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d10f      	bne.n	8015dfc <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8015ddc:	69bb      	ldr	r3, [r7, #24]
 8015dde:	2250      	movs	r2, #80	@ 0x50
 8015de0:	5c9b      	ldrb	r3, [r3, r2]
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	2b01      	cmp	r3, #1
 8015de6:	d104      	bne.n	8015df2 <eTaskGetState+0x86>
							{
								eReturn = eBlocked;
 8015de8:	231f      	movs	r3, #31
 8015dea:	18fb      	adds	r3, r7, r3
 8015dec:	2202      	movs	r2, #2
 8015dee:	701a      	strb	r2, [r3, #0]
 8015df0:	e019      	b.n	8015e26 <eTaskGetState+0xba>
							}
							else
							{
								eReturn = eSuspended;
 8015df2:	231f      	movs	r3, #31
 8015df4:	18fb      	adds	r3, r7, r3
 8015df6:	2203      	movs	r2, #3
 8015df8:	701a      	strb	r2, [r3, #0]
 8015dfa:	e014      	b.n	8015e26 <eTaskGetState+0xba>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8015dfc:	231f      	movs	r3, #31
 8015dfe:	18fb      	adds	r3, r7, r3
 8015e00:	2202      	movs	r2, #2
 8015e02:	701a      	strb	r2, [r3, #0]
 8015e04:	e00f      	b.n	8015e26 <eTaskGetState+0xba>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8015e06:	697a      	ldr	r2, [r7, #20]
 8015e08:	4b0e      	ldr	r3, [pc, #56]	@ (8015e44 <eTaskGetState+0xd8>)
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	d002      	beq.n	8015e14 <eTaskGetState+0xa8>
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d104      	bne.n	8015e1e <eTaskGetState+0xb2>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8015e14:	231f      	movs	r3, #31
 8015e16:	18fb      	adds	r3, r7, r3
 8015e18:	2204      	movs	r2, #4
 8015e1a:	701a      	strb	r2, [r3, #0]
 8015e1c:	e003      	b.n	8015e26 <eTaskGetState+0xba>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8015e1e:	231f      	movs	r3, #31
 8015e20:	18fb      	adds	r3, r7, r3
 8015e22:	2201      	movs	r2, #1
 8015e24:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 8015e26:	231f      	movs	r3, #31
 8015e28:	18fb      	adds	r3, r7, r3
 8015e2a:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015e2c:	0018      	movs	r0, r3
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	b008      	add	sp, #32
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	200003f8 	.word	0x200003f8
 8015e38:	200004b0 	.word	0x200004b0
 8015e3c:	200004b4 	.word	0x200004b4
 8015e40:	200004e4 	.word	0x200004e4
 8015e44:	200004cc 	.word	0x200004cc

08015e48 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015e50:	f000 fe1e 	bl	8016a90 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d102      	bne.n	8015e60 <vTaskSuspend+0x18>
 8015e5a:	4b29      	ldr	r3, [pc, #164]	@ (8015f00 <vTaskSuspend+0xb8>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	e000      	b.n	8015e62 <vTaskSuspend+0x1a>
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	3304      	adds	r3, #4
 8015e68:	0018      	movs	r0, r3
 8015e6a:	f7ff f9e4 	bl	8015236 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d004      	beq.n	8015e80 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	3318      	adds	r3, #24
 8015e7a:	0018      	movs	r0, r3
 8015e7c:	f7ff f9db 	bl	8015236 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	1d1a      	adds	r2, r3, #4
 8015e84:	4b1f      	ldr	r3, [pc, #124]	@ (8015f04 <vTaskSuspend+0xbc>)
 8015e86:	0011      	movs	r1, r2
 8015e88:	0018      	movs	r0, r3
 8015e8a:	f7ff f97c 	bl	8015186 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2250      	movs	r2, #80	@ 0x50
 8015e92:	5c9b      	ldrb	r3, [r3, r2]
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	2b01      	cmp	r3, #1
 8015e98:	d103      	bne.n	8015ea2 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2250      	movs	r2, #80	@ 0x50
 8015e9e:	2100      	movs	r1, #0
 8015ea0:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8015ea2:	f000 fe07 	bl	8016ab4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8015ea6:	4b18      	ldr	r3, [pc, #96]	@ (8015f08 <vTaskSuspend+0xc0>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d005      	beq.n	8015eba <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8015eae:	f000 fdef 	bl	8016a90 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8015eb2:	f000 fc55 	bl	8016760 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8015eb6:	f000 fdfd 	bl	8016ab4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8015eba:	4b11      	ldr	r3, [pc, #68]	@ (8015f00 <vTaskSuspend+0xb8>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	68fa      	ldr	r2, [r7, #12]
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d119      	bne.n	8015ef8 <vTaskSuspend+0xb0>
		{
			if( xSchedulerRunning != pdFALSE )
 8015ec4:	4b10      	ldr	r3, [pc, #64]	@ (8015f08 <vTaskSuspend+0xc0>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d009      	beq.n	8015ee0 <vTaskSuspend+0x98>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8015ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8015f0c <vTaskSuspend+0xc4>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d002      	beq.n	8015eda <vTaskSuspend+0x92>
 8015ed4:	b672      	cpsid	i
 8015ed6:	46c0      	nop			@ (mov r8, r8)
 8015ed8:	e7fd      	b.n	8015ed6 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8015eda:	f000 fdc9 	bl	8016a70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015ede:	e00b      	b.n	8015ef8 <vTaskSuspend+0xb0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8015ee0:	4b08      	ldr	r3, [pc, #32]	@ (8015f04 <vTaskSuspend+0xbc>)
 8015ee2:	681a      	ldr	r2, [r3, #0]
 8015ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8015f10 <vTaskSuspend+0xc8>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d103      	bne.n	8015ef4 <vTaskSuspend+0xac>
					pxCurrentTCB = NULL;
 8015eec:	4b04      	ldr	r3, [pc, #16]	@ (8015f00 <vTaskSuspend+0xb8>)
 8015eee:	2200      	movs	r2, #0
 8015ef0:	601a      	str	r2, [r3, #0]
	}
 8015ef2:	e001      	b.n	8015ef8 <vTaskSuspend+0xb0>
					vTaskSwitchContext();
 8015ef4:	f000 fa60 	bl	80163b8 <vTaskSwitchContext>
	}
 8015ef8:	46c0      	nop			@ (mov r8, r8)
 8015efa:	46bd      	mov	sp, r7
 8015efc:	b004      	add	sp, #16
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	200003f8 	.word	0x200003f8
 8015f04:	200004e4 	.word	0x200004e4
 8015f08:	20000504 	.word	0x20000504
 8015f0c:	20000520 	.word	0x20000520
 8015f10:	200004f8 	.word	0x200004f8

08015f14 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d102      	bne.n	8015f30 <prvTaskIsTaskSuspended+0x1c>
 8015f2a:	b672      	cpsid	i
 8015f2c:	46c0      	nop			@ (mov r8, r8)
 8015f2e:	e7fd      	b.n	8015f2c <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	695a      	ldr	r2, [r3, #20]
 8015f34:	4b09      	ldr	r3, [pc, #36]	@ (8015f5c <prvTaskIsTaskSuspended+0x48>)
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d10a      	bne.n	8015f50 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015f3e:	4b08      	ldr	r3, [pc, #32]	@ (8015f60 <prvTaskIsTaskSuspended+0x4c>)
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d005      	beq.n	8015f50 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d101      	bne.n	8015f50 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015f50:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015f52:	0018      	movs	r0, r3
 8015f54:	46bd      	mov	sp, r7
 8015f56:	b004      	add	sp, #16
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	46c0      	nop			@ (mov r8, r8)
 8015f5c:	200004e4 	.word	0x200004e4
 8015f60:	200004b8 	.word	0x200004b8

08015f64 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d102      	bne.n	8015f7c <vTaskResume+0x18>
 8015f76:	b672      	cpsid	i
 8015f78:	46c0      	nop			@ (mov r8, r8)
 8015f7a:	e7fd      	b.n	8015f78 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8015f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8015ff4 <vTaskResume+0x90>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	68fa      	ldr	r2, [r7, #12]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d032      	beq.n	8015fec <vTaskResume+0x88>
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d02f      	beq.n	8015fec <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8015f8c:	f000 fd80 	bl	8016a90 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	0018      	movs	r0, r3
 8015f94:	f7ff ffbe 	bl	8015f14 <prvTaskIsTaskSuspended>
 8015f98:	1e03      	subs	r3, r0, #0
 8015f9a:	d025      	beq.n	8015fe8 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	3304      	adds	r3, #4
 8015fa0:	0018      	movs	r0, r3
 8015fa2:	f7ff f948 	bl	8015236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015faa:	4b13      	ldr	r3, [pc, #76]	@ (8015ff8 <vTaskResume+0x94>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d903      	bls.n	8015fba <vTaskResume+0x56>
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fb6:	4b10      	ldr	r3, [pc, #64]	@ (8015ff8 <vTaskResume+0x94>)
 8015fb8:	601a      	str	r2, [r3, #0]
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fbe:	0013      	movs	r3, r2
 8015fc0:	009b      	lsls	r3, r3, #2
 8015fc2:	189b      	adds	r3, r3, r2
 8015fc4:	009b      	lsls	r3, r3, #2
 8015fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8015ffc <vTaskResume+0x98>)
 8015fc8:	189a      	adds	r2, r3, r2
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	3304      	adds	r3, #4
 8015fce:	0019      	movs	r1, r3
 8015fd0:	0010      	movs	r0, r2
 8015fd2:	f7ff f8d8 	bl	8015186 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015fda:	4b06      	ldr	r3, [pc, #24]	@ (8015ff4 <vTaskResume+0x90>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d301      	bcc.n	8015fe8 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8015fe4:	f000 fd44 	bl	8016a70 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8015fe8:	f000 fd64 	bl	8016ab4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015fec:	46c0      	nop			@ (mov r8, r8)
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	b004      	add	sp, #16
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	200003f8 	.word	0x200003f8
 8015ff8:	20000500 	.word	0x20000500
 8015ffc:	200003fc 	.word	0x200003fc

08016000 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8016000:	b580      	push	{r7, lr}
 8016002:	b086      	sub	sp, #24
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8016008:	2300      	movs	r3, #0
 801600a:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = xTaskToResume;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d102      	bne.n	801601c <xTaskResumeFromISR+0x1c>
 8016016:	b672      	cpsid	i
 8016018:	46c0      	nop			@ (mov r8, r8)
 801601a:	e7fd      	b.n	8016018 <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801601c:	f000 fd62 	bl	8016ae4 <ulSetInterruptMaskFromISR>
 8016020:	0003      	movs	r3, r0
 8016022:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	0018      	movs	r0, r3
 8016028:	f7ff ff74 	bl	8015f14 <prvTaskIsTaskSuspended>
 801602c:	1e03      	subs	r3, r0, #0
 801602e:	d032      	beq.n	8016096 <xTaskResumeFromISR+0x96>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016030:	4b1d      	ldr	r3, [pc, #116]	@ (80160a8 <xTaskResumeFromISR+0xa8>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d126      	bne.n	8016086 <xTaskResumeFromISR+0x86>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801603c:	4b1b      	ldr	r3, [pc, #108]	@ (80160ac <xTaskResumeFromISR+0xac>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016042:	429a      	cmp	r2, r3
 8016044:	d301      	bcc.n	801604a <xTaskResumeFromISR+0x4a>
					{
						xYieldRequired = pdTRUE;
 8016046:	2301      	movs	r3, #1
 8016048:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	3304      	adds	r3, #4
 801604e:	0018      	movs	r0, r3
 8016050:	f7ff f8f1 	bl	8015236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016058:	4b15      	ldr	r3, [pc, #84]	@ (80160b0 <xTaskResumeFromISR+0xb0>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	429a      	cmp	r2, r3
 801605e:	d903      	bls.n	8016068 <xTaskResumeFromISR+0x68>
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016064:	4b12      	ldr	r3, [pc, #72]	@ (80160b0 <xTaskResumeFromISR+0xb0>)
 8016066:	601a      	str	r2, [r3, #0]
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801606c:	0013      	movs	r3, r2
 801606e:	009b      	lsls	r3, r3, #2
 8016070:	189b      	adds	r3, r3, r2
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	4a0f      	ldr	r2, [pc, #60]	@ (80160b4 <xTaskResumeFromISR+0xb4>)
 8016076:	189a      	adds	r2, r3, r2
 8016078:	693b      	ldr	r3, [r7, #16]
 801607a:	3304      	adds	r3, #4
 801607c:	0019      	movs	r1, r3
 801607e:	0010      	movs	r0, r2
 8016080:	f7ff f881 	bl	8015186 <vListInsertEnd>
 8016084:	e007      	b.n	8016096 <xTaskResumeFromISR+0x96>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	3318      	adds	r3, #24
 801608a:	001a      	movs	r2, r3
 801608c:	4b0a      	ldr	r3, [pc, #40]	@ (80160b8 <xTaskResumeFromISR+0xb8>)
 801608e:	0011      	movs	r1, r2
 8016090:	0018      	movs	r0, r3
 8016092:	f7ff f878 	bl	8015186 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	0018      	movs	r0, r3
 801609a:	f000 fd29 	bl	8016af0 <vClearInterruptMaskFromISR>

		return xYieldRequired;
 801609e:	697b      	ldr	r3, [r7, #20]
	}
 80160a0:	0018      	movs	r0, r3
 80160a2:	46bd      	mov	sp, r7
 80160a4:	b006      	add	sp, #24
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	20000520 	.word	0x20000520
 80160ac:	200003f8 	.word	0x200003f8
 80160b0:	20000500 	.word	0x20000500
 80160b4:	200003fc 	.word	0x200003fc
 80160b8:	200004b8 	.word	0x200004b8

080160bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b084      	sub	sp, #16
 80160c0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80160c2:	4913      	ldr	r1, [pc, #76]	@ (8016110 <vTaskStartScheduler+0x54>)
 80160c4:	4813      	ldr	r0, [pc, #76]	@ (8016114 <vTaskStartScheduler+0x58>)
 80160c6:	4b14      	ldr	r3, [pc, #80]	@ (8016118 <vTaskStartScheduler+0x5c>)
 80160c8:	9301      	str	r3, [sp, #4]
 80160ca:	2300      	movs	r3, #0
 80160cc:	9300      	str	r3, [sp, #0]
 80160ce:	2300      	movs	r3, #0
 80160d0:	2280      	movs	r2, #128	@ 0x80
 80160d2:	f7ff fcf7 	bl	8015ac4 <xTaskCreate>
 80160d6:	0003      	movs	r3, r0
 80160d8:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	2b01      	cmp	r3, #1
 80160de:	d10d      	bne.n	80160fc <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80160e0:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80160e2:	4b0e      	ldr	r3, [pc, #56]	@ (801611c <vTaskStartScheduler+0x60>)
 80160e4:	2201      	movs	r2, #1
 80160e6:	4252      	negs	r2, r2
 80160e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80160ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016120 <vTaskStartScheduler+0x64>)
 80160ec:	2201      	movs	r2, #1
 80160ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80160f0:	4b0c      	ldr	r3, [pc, #48]	@ (8016124 <vTaskStartScheduler+0x68>)
 80160f2:	2200      	movs	r2, #0
 80160f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80160f6:	f000 fc97 	bl	8016a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80160fa:	e005      	b.n	8016108 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	3301      	adds	r3, #1
 8016100:	d102      	bne.n	8016108 <vTaskStartScheduler+0x4c>
 8016102:	b672      	cpsid	i
 8016104:	46c0      	nop			@ (mov r8, r8)
 8016106:	e7fd      	b.n	8016104 <vTaskStartScheduler+0x48>
}
 8016108:	46c0      	nop			@ (mov r8, r8)
 801610a:	46bd      	mov	sp, r7
 801610c:	b002      	add	sp, #8
 801610e:	bd80      	pop	{r7, pc}
 8016110:	080198f4 	.word	0x080198f4
 8016114:	08016639 	.word	0x08016639
 8016118:	2000051c 	.word	0x2000051c
 801611c:	20000518 	.word	0x20000518
 8016120:	20000504 	.word	0x20000504
 8016124:	200004fc 	.word	0x200004fc

08016128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016128:	b580      	push	{r7, lr}
 801612a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801612c:	4b03      	ldr	r3, [pc, #12]	@ (801613c <vTaskSuspendAll+0x14>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	1c5a      	adds	r2, r3, #1
 8016132:	4b02      	ldr	r3, [pc, #8]	@ (801613c <vTaskSuspendAll+0x14>)
 8016134:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016136:	46c0      	nop			@ (mov r8, r8)
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	20000520 	.word	0x20000520

08016140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016146:	2300      	movs	r3, #0
 8016148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801614a:	2300      	movs	r3, #0
 801614c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801614e:	4b3a      	ldr	r3, [pc, #232]	@ (8016238 <xTaskResumeAll+0xf8>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d102      	bne.n	801615c <xTaskResumeAll+0x1c>
 8016156:	b672      	cpsid	i
 8016158:	46c0      	nop			@ (mov r8, r8)
 801615a:	e7fd      	b.n	8016158 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801615c:	f000 fc98 	bl	8016a90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016160:	4b35      	ldr	r3, [pc, #212]	@ (8016238 <xTaskResumeAll+0xf8>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	1e5a      	subs	r2, r3, #1
 8016166:	4b34      	ldr	r3, [pc, #208]	@ (8016238 <xTaskResumeAll+0xf8>)
 8016168:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801616a:	4b33      	ldr	r3, [pc, #204]	@ (8016238 <xTaskResumeAll+0xf8>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d15b      	bne.n	801622a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016172:	4b32      	ldr	r3, [pc, #200]	@ (801623c <xTaskResumeAll+0xfc>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d057      	beq.n	801622a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801617a:	e02f      	b.n	80161dc <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801617c:	4b30      	ldr	r3, [pc, #192]	@ (8016240 <xTaskResumeAll+0x100>)
 801617e:	68db      	ldr	r3, [r3, #12]
 8016180:	68db      	ldr	r3, [r3, #12]
 8016182:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	3318      	adds	r3, #24
 8016188:	0018      	movs	r0, r3
 801618a:	f7ff f854 	bl	8015236 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	3304      	adds	r3, #4
 8016192:	0018      	movs	r0, r3
 8016194:	f7ff f84f 	bl	8015236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801619c:	4b29      	ldr	r3, [pc, #164]	@ (8016244 <xTaskResumeAll+0x104>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d903      	bls.n	80161ac <xTaskResumeAll+0x6c>
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161a8:	4b26      	ldr	r3, [pc, #152]	@ (8016244 <xTaskResumeAll+0x104>)
 80161aa:	601a      	str	r2, [r3, #0]
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161b0:	0013      	movs	r3, r2
 80161b2:	009b      	lsls	r3, r3, #2
 80161b4:	189b      	adds	r3, r3, r2
 80161b6:	009b      	lsls	r3, r3, #2
 80161b8:	4a23      	ldr	r2, [pc, #140]	@ (8016248 <xTaskResumeAll+0x108>)
 80161ba:	189a      	adds	r2, r3, r2
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	3304      	adds	r3, #4
 80161c0:	0019      	movs	r1, r3
 80161c2:	0010      	movs	r0, r2
 80161c4:	f7fe ffdf 	bl	8015186 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161cc:	4b1f      	ldr	r3, [pc, #124]	@ (801624c <xTaskResumeAll+0x10c>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d302      	bcc.n	80161dc <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80161d6:	4b1e      	ldr	r3, [pc, #120]	@ (8016250 <xTaskResumeAll+0x110>)
 80161d8:	2201      	movs	r2, #1
 80161da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80161dc:	4b18      	ldr	r3, [pc, #96]	@ (8016240 <xTaskResumeAll+0x100>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d1cb      	bne.n	801617c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d001      	beq.n	80161ee <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80161ea:	f000 fab9 	bl	8016760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80161ee:	4b19      	ldr	r3, [pc, #100]	@ (8016254 <xTaskResumeAll+0x114>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d00f      	beq.n	801621a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80161fa:	f000 f82d 	bl	8016258 <xTaskIncrementTick>
 80161fe:	1e03      	subs	r3, r0, #0
 8016200:	d002      	beq.n	8016208 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8016202:	4b13      	ldr	r3, [pc, #76]	@ (8016250 <xTaskResumeAll+0x110>)
 8016204:	2201      	movs	r2, #1
 8016206:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	3b01      	subs	r3, #1
 801620c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d1f2      	bne.n	80161fa <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8016214:	4b0f      	ldr	r3, [pc, #60]	@ (8016254 <xTaskResumeAll+0x114>)
 8016216:	2200      	movs	r2, #0
 8016218:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801621a:	4b0d      	ldr	r3, [pc, #52]	@ (8016250 <xTaskResumeAll+0x110>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d003      	beq.n	801622a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016222:	2301      	movs	r3, #1
 8016224:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016226:	f000 fc23 	bl	8016a70 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801622a:	f000 fc43 	bl	8016ab4 <vPortExitCritical>

	return xAlreadyYielded;
 801622e:	68bb      	ldr	r3, [r7, #8]
}
 8016230:	0018      	movs	r0, r3
 8016232:	46bd      	mov	sp, r7
 8016234:	b004      	add	sp, #16
 8016236:	bd80      	pop	{r7, pc}
 8016238:	20000520 	.word	0x20000520
 801623c:	200004f8 	.word	0x200004f8
 8016240:	200004b8 	.word	0x200004b8
 8016244:	20000500 	.word	0x20000500
 8016248:	200003fc 	.word	0x200003fc
 801624c:	200003f8 	.word	0x200003f8
 8016250:	2000050c 	.word	0x2000050c
 8016254:	20000508 	.word	0x20000508

08016258 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b086      	sub	sp, #24
 801625c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801625e:	2300      	movs	r3, #0
 8016260:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016262:	4b4a      	ldr	r3, [pc, #296]	@ (801638c <xTaskIncrementTick+0x134>)
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d000      	beq.n	801626c <xTaskIncrementTick+0x14>
 801626a:	e085      	b.n	8016378 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801626c:	4b48      	ldr	r3, [pc, #288]	@ (8016390 <xTaskIncrementTick+0x138>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	3301      	adds	r3, #1
 8016272:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016274:	4b46      	ldr	r3, [pc, #280]	@ (8016390 <xTaskIncrementTick+0x138>)
 8016276:	693a      	ldr	r2, [r7, #16]
 8016278:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801627a:	693b      	ldr	r3, [r7, #16]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d118      	bne.n	80162b2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016280:	4b44      	ldr	r3, [pc, #272]	@ (8016394 <xTaskIncrementTick+0x13c>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d002      	beq.n	8016290 <xTaskIncrementTick+0x38>
 801628a:	b672      	cpsid	i
 801628c:	46c0      	nop			@ (mov r8, r8)
 801628e:	e7fd      	b.n	801628c <xTaskIncrementTick+0x34>
 8016290:	4b40      	ldr	r3, [pc, #256]	@ (8016394 <xTaskIncrementTick+0x13c>)
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	60fb      	str	r3, [r7, #12]
 8016296:	4b40      	ldr	r3, [pc, #256]	@ (8016398 <xTaskIncrementTick+0x140>)
 8016298:	681a      	ldr	r2, [r3, #0]
 801629a:	4b3e      	ldr	r3, [pc, #248]	@ (8016394 <xTaskIncrementTick+0x13c>)
 801629c:	601a      	str	r2, [r3, #0]
 801629e:	4b3e      	ldr	r3, [pc, #248]	@ (8016398 <xTaskIncrementTick+0x140>)
 80162a0:	68fa      	ldr	r2, [r7, #12]
 80162a2:	601a      	str	r2, [r3, #0]
 80162a4:	4b3d      	ldr	r3, [pc, #244]	@ (801639c <xTaskIncrementTick+0x144>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	1c5a      	adds	r2, r3, #1
 80162aa:	4b3c      	ldr	r3, [pc, #240]	@ (801639c <xTaskIncrementTick+0x144>)
 80162ac:	601a      	str	r2, [r3, #0]
 80162ae:	f000 fa57 	bl	8016760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80162b2:	4b3b      	ldr	r3, [pc, #236]	@ (80163a0 <xTaskIncrementTick+0x148>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	693a      	ldr	r2, [r7, #16]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d349      	bcc.n	8016350 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80162bc:	4b35      	ldr	r3, [pc, #212]	@ (8016394 <xTaskIncrementTick+0x13c>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d104      	bne.n	80162d0 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162c6:	4b36      	ldr	r3, [pc, #216]	@ (80163a0 <xTaskIncrementTick+0x148>)
 80162c8:	2201      	movs	r2, #1
 80162ca:	4252      	negs	r2, r2
 80162cc:	601a      	str	r2, [r3, #0]
					break;
 80162ce:	e03f      	b.n	8016350 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162d0:	4b30      	ldr	r3, [pc, #192]	@ (8016394 <xTaskIncrementTick+0x13c>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	685b      	ldr	r3, [r3, #4]
 80162de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80162e0:	693a      	ldr	r2, [r7, #16]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d203      	bcs.n	80162f0 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80162e8:	4b2d      	ldr	r3, [pc, #180]	@ (80163a0 <xTaskIncrementTick+0x148>)
 80162ea:	687a      	ldr	r2, [r7, #4]
 80162ec:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80162ee:	e02f      	b.n	8016350 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	3304      	adds	r3, #4
 80162f4:	0018      	movs	r0, r3
 80162f6:	f7fe ff9e 	bl	8015236 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d004      	beq.n	801630c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	3318      	adds	r3, #24
 8016306:	0018      	movs	r0, r3
 8016308:	f7fe ff95 	bl	8015236 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016310:	4b24      	ldr	r3, [pc, #144]	@ (80163a4 <xTaskIncrementTick+0x14c>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	429a      	cmp	r2, r3
 8016316:	d903      	bls.n	8016320 <xTaskIncrementTick+0xc8>
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801631c:	4b21      	ldr	r3, [pc, #132]	@ (80163a4 <xTaskIncrementTick+0x14c>)
 801631e:	601a      	str	r2, [r3, #0]
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016324:	0013      	movs	r3, r2
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	189b      	adds	r3, r3, r2
 801632a:	009b      	lsls	r3, r3, #2
 801632c:	4a1e      	ldr	r2, [pc, #120]	@ (80163a8 <xTaskIncrementTick+0x150>)
 801632e:	189a      	adds	r2, r3, r2
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	3304      	adds	r3, #4
 8016334:	0019      	movs	r1, r3
 8016336:	0010      	movs	r0, r2
 8016338:	f7fe ff25 	bl	8015186 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016340:	4b1a      	ldr	r3, [pc, #104]	@ (80163ac <xTaskIncrementTick+0x154>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016346:	429a      	cmp	r2, r3
 8016348:	d3b8      	bcc.n	80162bc <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801634a:	2301      	movs	r3, #1
 801634c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801634e:	e7b5      	b.n	80162bc <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016350:	4b16      	ldr	r3, [pc, #88]	@ (80163ac <xTaskIncrementTick+0x154>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016356:	4914      	ldr	r1, [pc, #80]	@ (80163a8 <xTaskIncrementTick+0x150>)
 8016358:	0013      	movs	r3, r2
 801635a:	009b      	lsls	r3, r3, #2
 801635c:	189b      	adds	r3, r3, r2
 801635e:	009b      	lsls	r3, r3, #2
 8016360:	585b      	ldr	r3, [r3, r1]
 8016362:	2b01      	cmp	r3, #1
 8016364:	d901      	bls.n	801636a <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8016366:	2301      	movs	r3, #1
 8016368:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801636a:	4b11      	ldr	r3, [pc, #68]	@ (80163b0 <xTaskIncrementTick+0x158>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d007      	beq.n	8016382 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8016372:	2301      	movs	r3, #1
 8016374:	617b      	str	r3, [r7, #20]
 8016376:	e004      	b.n	8016382 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016378:	4b0e      	ldr	r3, [pc, #56]	@ (80163b4 <xTaskIncrementTick+0x15c>)
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	1c5a      	adds	r2, r3, #1
 801637e:	4b0d      	ldr	r3, [pc, #52]	@ (80163b4 <xTaskIncrementTick+0x15c>)
 8016380:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016382:	697b      	ldr	r3, [r7, #20]
}
 8016384:	0018      	movs	r0, r3
 8016386:	46bd      	mov	sp, r7
 8016388:	b006      	add	sp, #24
 801638a:	bd80      	pop	{r7, pc}
 801638c:	20000520 	.word	0x20000520
 8016390:	200004fc 	.word	0x200004fc
 8016394:	200004b0 	.word	0x200004b0
 8016398:	200004b4 	.word	0x200004b4
 801639c:	20000510 	.word	0x20000510
 80163a0:	20000518 	.word	0x20000518
 80163a4:	20000500 	.word	0x20000500
 80163a8:	200003fc 	.word	0x200003fc
 80163ac:	200003f8 	.word	0x200003f8
 80163b0:	2000050c 	.word	0x2000050c
 80163b4:	20000508 	.word	0x20000508

080163b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80163be:	4b22      	ldr	r3, [pc, #136]	@ (8016448 <vTaskSwitchContext+0x90>)
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d003      	beq.n	80163ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80163c6:	4b21      	ldr	r3, [pc, #132]	@ (801644c <vTaskSwitchContext+0x94>)
 80163c8:	2201      	movs	r2, #1
 80163ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80163cc:	e038      	b.n	8016440 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80163ce:	4b1f      	ldr	r3, [pc, #124]	@ (801644c <vTaskSwitchContext+0x94>)
 80163d0:	2200      	movs	r2, #0
 80163d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163d4:	4b1e      	ldr	r3, [pc, #120]	@ (8016450 <vTaskSwitchContext+0x98>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	607b      	str	r3, [r7, #4]
 80163da:	e008      	b.n	80163ee <vTaskSwitchContext+0x36>
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d102      	bne.n	80163e8 <vTaskSwitchContext+0x30>
 80163e2:	b672      	cpsid	i
 80163e4:	46c0      	nop			@ (mov r8, r8)
 80163e6:	e7fd      	b.n	80163e4 <vTaskSwitchContext+0x2c>
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	3b01      	subs	r3, #1
 80163ec:	607b      	str	r3, [r7, #4]
 80163ee:	4919      	ldr	r1, [pc, #100]	@ (8016454 <vTaskSwitchContext+0x9c>)
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	0013      	movs	r3, r2
 80163f4:	009b      	lsls	r3, r3, #2
 80163f6:	189b      	adds	r3, r3, r2
 80163f8:	009b      	lsls	r3, r3, #2
 80163fa:	585b      	ldr	r3, [r3, r1]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d0ed      	beq.n	80163dc <vTaskSwitchContext+0x24>
 8016400:	687a      	ldr	r2, [r7, #4]
 8016402:	0013      	movs	r3, r2
 8016404:	009b      	lsls	r3, r3, #2
 8016406:	189b      	adds	r3, r3, r2
 8016408:	009b      	lsls	r3, r3, #2
 801640a:	4a12      	ldr	r2, [pc, #72]	@ (8016454 <vTaskSwitchContext+0x9c>)
 801640c:	189b      	adds	r3, r3, r2
 801640e:	603b      	str	r3, [r7, #0]
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	685a      	ldr	r2, [r3, #4]
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	605a      	str	r2, [r3, #4]
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	685a      	ldr	r2, [r3, #4]
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	3308      	adds	r3, #8
 8016422:	429a      	cmp	r2, r3
 8016424:	d104      	bne.n	8016430 <vTaskSwitchContext+0x78>
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	685b      	ldr	r3, [r3, #4]
 801642a:	685a      	ldr	r2, [r3, #4]
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	605a      	str	r2, [r3, #4]
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	68da      	ldr	r2, [r3, #12]
 8016436:	4b08      	ldr	r3, [pc, #32]	@ (8016458 <vTaskSwitchContext+0xa0>)
 8016438:	601a      	str	r2, [r3, #0]
 801643a:	4b05      	ldr	r3, [pc, #20]	@ (8016450 <vTaskSwitchContext+0x98>)
 801643c:	687a      	ldr	r2, [r7, #4]
 801643e:	601a      	str	r2, [r3, #0]
}
 8016440:	46c0      	nop			@ (mov r8, r8)
 8016442:	46bd      	mov	sp, r7
 8016444:	b002      	add	sp, #8
 8016446:	bd80      	pop	{r7, pc}
 8016448:	20000520 	.word	0x20000520
 801644c:	2000050c 	.word	0x2000050c
 8016450:	20000500 	.word	0x20000500
 8016454:	200003fc 	.word	0x200003fc
 8016458:	200003f8 	.word	0x200003f8

0801645c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b082      	sub	sp, #8
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
 8016464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d102      	bne.n	8016472 <vTaskPlaceOnEventList+0x16>
 801646c:	b672      	cpsid	i
 801646e:	46c0      	nop			@ (mov r8, r8)
 8016470:	e7fd      	b.n	801646e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016472:	4b09      	ldr	r3, [pc, #36]	@ (8016498 <vTaskPlaceOnEventList+0x3c>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	3318      	adds	r3, #24
 8016478:	001a      	movs	r2, r3
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	0011      	movs	r1, r2
 801647e:	0018      	movs	r0, r3
 8016480:	f7fe fea3 	bl	80151ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	2101      	movs	r1, #1
 8016488:	0018      	movs	r0, r3
 801648a:	f000 fa0f 	bl	80168ac <prvAddCurrentTaskToDelayedList>
}
 801648e:	46c0      	nop			@ (mov r8, r8)
 8016490:	46bd      	mov	sp, r7
 8016492:	b002      	add	sp, #8
 8016494:	bd80      	pop	{r7, pc}
 8016496:	46c0      	nop			@ (mov r8, r8)
 8016498:	200003f8 	.word	0x200003f8

0801649c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b084      	sub	sp, #16
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	68db      	ldr	r3, [r3, #12]
 80164aa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d102      	bne.n	80164b8 <xTaskRemoveFromEventList+0x1c>
 80164b2:	b672      	cpsid	i
 80164b4:	46c0      	nop			@ (mov r8, r8)
 80164b6:	e7fd      	b.n	80164b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	3318      	adds	r3, #24
 80164bc:	0018      	movs	r0, r3
 80164be:	f7fe feba 	bl	8015236 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164c2:	4b1f      	ldr	r3, [pc, #124]	@ (8016540 <xTaskRemoveFromEventList+0xa4>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d11d      	bne.n	8016506 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	3304      	adds	r3, #4
 80164ce:	0018      	movs	r0, r3
 80164d0:	f7fe feb1 	bl	8015236 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164d8:	4b1a      	ldr	r3, [pc, #104]	@ (8016544 <xTaskRemoveFromEventList+0xa8>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d903      	bls.n	80164e8 <xTaskRemoveFromEventList+0x4c>
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164e4:	4b17      	ldr	r3, [pc, #92]	@ (8016544 <xTaskRemoveFromEventList+0xa8>)
 80164e6:	601a      	str	r2, [r3, #0]
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164ec:	0013      	movs	r3, r2
 80164ee:	009b      	lsls	r3, r3, #2
 80164f0:	189b      	adds	r3, r3, r2
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	4a14      	ldr	r2, [pc, #80]	@ (8016548 <xTaskRemoveFromEventList+0xac>)
 80164f6:	189a      	adds	r2, r3, r2
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	3304      	adds	r3, #4
 80164fc:	0019      	movs	r1, r3
 80164fe:	0010      	movs	r0, r2
 8016500:	f7fe fe41 	bl	8015186 <vListInsertEnd>
 8016504:	e007      	b.n	8016516 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016506:	68bb      	ldr	r3, [r7, #8]
 8016508:	3318      	adds	r3, #24
 801650a:	001a      	movs	r2, r3
 801650c:	4b0f      	ldr	r3, [pc, #60]	@ (801654c <xTaskRemoveFromEventList+0xb0>)
 801650e:	0011      	movs	r1, r2
 8016510:	0018      	movs	r0, r3
 8016512:	f7fe fe38 	bl	8015186 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801651a:	4b0d      	ldr	r3, [pc, #52]	@ (8016550 <xTaskRemoveFromEventList+0xb4>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016520:	429a      	cmp	r2, r3
 8016522:	d905      	bls.n	8016530 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016524:	2301      	movs	r3, #1
 8016526:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016528:	4b0a      	ldr	r3, [pc, #40]	@ (8016554 <xTaskRemoveFromEventList+0xb8>)
 801652a:	2201      	movs	r2, #1
 801652c:	601a      	str	r2, [r3, #0]
 801652e:	e001      	b.n	8016534 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8016530:	2300      	movs	r3, #0
 8016532:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8016534:	68fb      	ldr	r3, [r7, #12]
}
 8016536:	0018      	movs	r0, r3
 8016538:	46bd      	mov	sp, r7
 801653a:	b004      	add	sp, #16
 801653c:	bd80      	pop	{r7, pc}
 801653e:	46c0      	nop			@ (mov r8, r8)
 8016540:	20000520 	.word	0x20000520
 8016544:	20000500 	.word	0x20000500
 8016548:	200003fc 	.word	0x200003fc
 801654c:	200004b8 	.word	0x200004b8
 8016550:	200003f8 	.word	0x200003f8
 8016554:	2000050c 	.word	0x2000050c

08016558 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016560:	4b05      	ldr	r3, [pc, #20]	@ (8016578 <vTaskInternalSetTimeOutState+0x20>)
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016568:	4b04      	ldr	r3, [pc, #16]	@ (801657c <vTaskInternalSetTimeOutState+0x24>)
 801656a:	681a      	ldr	r2, [r3, #0]
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	605a      	str	r2, [r3, #4]
}
 8016570:	46c0      	nop			@ (mov r8, r8)
 8016572:	46bd      	mov	sp, r7
 8016574:	b002      	add	sp, #8
 8016576:	bd80      	pop	{r7, pc}
 8016578:	20000510 	.word	0x20000510
 801657c:	200004fc 	.word	0x200004fc

08016580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d102      	bne.n	8016596 <xTaskCheckForTimeOut+0x16>
 8016590:	b672      	cpsid	i
 8016592:	46c0      	nop			@ (mov r8, r8)
 8016594:	e7fd      	b.n	8016592 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d102      	bne.n	80165a2 <xTaskCheckForTimeOut+0x22>
 801659c:	b672      	cpsid	i
 801659e:	46c0      	nop			@ (mov r8, r8)
 80165a0:	e7fd      	b.n	801659e <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 80165a2:	f000 fa75 	bl	8016a90 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80165a6:	4b1d      	ldr	r3, [pc, #116]	@ (801661c <xTaskCheckForTimeOut+0x9c>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	693a      	ldr	r2, [r7, #16]
 80165b2:	1ad3      	subs	r3, r2, r3
 80165b4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	3301      	adds	r3, #1
 80165bc:	d102      	bne.n	80165c4 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80165be:	2300      	movs	r3, #0
 80165c0:	617b      	str	r3, [r7, #20]
 80165c2:	e024      	b.n	801660e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681a      	ldr	r2, [r3, #0]
 80165c8:	4b15      	ldr	r3, [pc, #84]	@ (8016620 <xTaskCheckForTimeOut+0xa0>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	429a      	cmp	r2, r3
 80165ce:	d007      	beq.n	80165e0 <xTaskCheckForTimeOut+0x60>
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	693a      	ldr	r2, [r7, #16]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d302      	bcc.n	80165e0 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80165da:	2301      	movs	r3, #1
 80165dc:	617b      	str	r3, [r7, #20]
 80165de:	e016      	b.n	801660e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	68fa      	ldr	r2, [r7, #12]
 80165e6:	429a      	cmp	r2, r3
 80165e8:	d20c      	bcs.n	8016604 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	681a      	ldr	r2, [r3, #0]
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	1ad2      	subs	r2, r2, r3
 80165f2:	683b      	ldr	r3, [r7, #0]
 80165f4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	0018      	movs	r0, r3
 80165fa:	f7ff ffad 	bl	8016558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80165fe:	2300      	movs	r3, #0
 8016600:	617b      	str	r3, [r7, #20]
 8016602:	e004      	b.n	801660e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	2200      	movs	r2, #0
 8016608:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801660a:	2301      	movs	r3, #1
 801660c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801660e:	f000 fa51 	bl	8016ab4 <vPortExitCritical>

	return xReturn;
 8016612:	697b      	ldr	r3, [r7, #20]
}
 8016614:	0018      	movs	r0, r3
 8016616:	46bd      	mov	sp, r7
 8016618:	b006      	add	sp, #24
 801661a:	bd80      	pop	{r7, pc}
 801661c:	200004fc 	.word	0x200004fc
 8016620:	20000510 	.word	0x20000510

08016624 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016624:	b580      	push	{r7, lr}
 8016626:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016628:	4b02      	ldr	r3, [pc, #8]	@ (8016634 <vTaskMissedYield+0x10>)
 801662a:	2201      	movs	r2, #1
 801662c:	601a      	str	r2, [r3, #0]
}
 801662e:	46c0      	nop			@ (mov r8, r8)
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}
 8016634:	2000050c 	.word	0x2000050c

08016638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016640:	f000 f84e 	bl	80166e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016644:	4b03      	ldr	r3, [pc, #12]	@ (8016654 <prvIdleTask+0x1c>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2b01      	cmp	r3, #1
 801664a:	d9f9      	bls.n	8016640 <prvIdleTask+0x8>
			{
				taskYIELD();
 801664c:	f000 fa10 	bl	8016a70 <vPortYield>
		prvCheckTasksWaitingTermination();
 8016650:	e7f6      	b.n	8016640 <prvIdleTask+0x8>
 8016652:	46c0      	nop			@ (mov r8, r8)
 8016654:	200003fc 	.word	0x200003fc

08016658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801665e:	2300      	movs	r3, #0
 8016660:	607b      	str	r3, [r7, #4]
 8016662:	e00c      	b.n	801667e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	0013      	movs	r3, r2
 8016668:	009b      	lsls	r3, r3, #2
 801666a:	189b      	adds	r3, r3, r2
 801666c:	009b      	lsls	r3, r3, #2
 801666e:	4a14      	ldr	r2, [pc, #80]	@ (80166c0 <prvInitialiseTaskLists+0x68>)
 8016670:	189b      	adds	r3, r3, r2
 8016672:	0018      	movs	r0, r3
 8016674:	f7fe fd5e 	bl	8015134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	3301      	adds	r3, #1
 801667c:	607b      	str	r3, [r7, #4]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2b06      	cmp	r3, #6
 8016682:	d9ef      	bls.n	8016664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016684:	4b0f      	ldr	r3, [pc, #60]	@ (80166c4 <prvInitialiseTaskLists+0x6c>)
 8016686:	0018      	movs	r0, r3
 8016688:	f7fe fd54 	bl	8015134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801668c:	4b0e      	ldr	r3, [pc, #56]	@ (80166c8 <prvInitialiseTaskLists+0x70>)
 801668e:	0018      	movs	r0, r3
 8016690:	f7fe fd50 	bl	8015134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016694:	4b0d      	ldr	r3, [pc, #52]	@ (80166cc <prvInitialiseTaskLists+0x74>)
 8016696:	0018      	movs	r0, r3
 8016698:	f7fe fd4c 	bl	8015134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801669c:	4b0c      	ldr	r3, [pc, #48]	@ (80166d0 <prvInitialiseTaskLists+0x78>)
 801669e:	0018      	movs	r0, r3
 80166a0:	f7fe fd48 	bl	8015134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80166a4:	4b0b      	ldr	r3, [pc, #44]	@ (80166d4 <prvInitialiseTaskLists+0x7c>)
 80166a6:	0018      	movs	r0, r3
 80166a8:	f7fe fd44 	bl	8015134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80166ac:	4b0a      	ldr	r3, [pc, #40]	@ (80166d8 <prvInitialiseTaskLists+0x80>)
 80166ae:	4a05      	ldr	r2, [pc, #20]	@ (80166c4 <prvInitialiseTaskLists+0x6c>)
 80166b0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80166b2:	4b0a      	ldr	r3, [pc, #40]	@ (80166dc <prvInitialiseTaskLists+0x84>)
 80166b4:	4a04      	ldr	r2, [pc, #16]	@ (80166c8 <prvInitialiseTaskLists+0x70>)
 80166b6:	601a      	str	r2, [r3, #0]
}
 80166b8:	46c0      	nop			@ (mov r8, r8)
 80166ba:	46bd      	mov	sp, r7
 80166bc:	b002      	add	sp, #8
 80166be:	bd80      	pop	{r7, pc}
 80166c0:	200003fc 	.word	0x200003fc
 80166c4:	20000488 	.word	0x20000488
 80166c8:	2000049c 	.word	0x2000049c
 80166cc:	200004b8 	.word	0x200004b8
 80166d0:	200004cc 	.word	0x200004cc
 80166d4:	200004e4 	.word	0x200004e4
 80166d8:	200004b0 	.word	0x200004b0
 80166dc:	200004b4 	.word	0x200004b4

080166e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80166e6:	e01a      	b.n	801671e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80166e8:	f000 f9d2 	bl	8016a90 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166ec:	4b10      	ldr	r3, [pc, #64]	@ (8016730 <prvCheckTasksWaitingTermination+0x50>)
 80166ee:	68db      	ldr	r3, [r3, #12]
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	3304      	adds	r3, #4
 80166f8:	0018      	movs	r0, r3
 80166fa:	f7fe fd9c 	bl	8015236 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80166fe:	4b0d      	ldr	r3, [pc, #52]	@ (8016734 <prvCheckTasksWaitingTermination+0x54>)
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	1e5a      	subs	r2, r3, #1
 8016704:	4b0b      	ldr	r3, [pc, #44]	@ (8016734 <prvCheckTasksWaitingTermination+0x54>)
 8016706:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016708:	4b0b      	ldr	r3, [pc, #44]	@ (8016738 <prvCheckTasksWaitingTermination+0x58>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	1e5a      	subs	r2, r3, #1
 801670e:	4b0a      	ldr	r3, [pc, #40]	@ (8016738 <prvCheckTasksWaitingTermination+0x58>)
 8016710:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8016712:	f000 f9cf 	bl	8016ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	0018      	movs	r0, r3
 801671a:	f000 f80f 	bl	801673c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801671e:	4b06      	ldr	r3, [pc, #24]	@ (8016738 <prvCheckTasksWaitingTermination+0x58>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d1e0      	bne.n	80166e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016726:	46c0      	nop			@ (mov r8, r8)
 8016728:	46c0      	nop			@ (mov r8, r8)
 801672a:	46bd      	mov	sp, r7
 801672c:	b002      	add	sp, #8
 801672e:	bd80      	pop	{r7, pc}
 8016730:	200004cc 	.word	0x200004cc
 8016734:	200004f8 	.word	0x200004f8
 8016738:	200004e0 	.word	0x200004e0

0801673c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016748:	0018      	movs	r0, r3
 801674a:	f000 fae9 	bl	8016d20 <vPortFree>
			vPortFree( pxTCB );
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	0018      	movs	r0, r3
 8016752:	f000 fae5 	bl	8016d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016756:	46c0      	nop			@ (mov r8, r8)
 8016758:	46bd      	mov	sp, r7
 801675a:	b002      	add	sp, #8
 801675c:	bd80      	pop	{r7, pc}
	...

08016760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016766:	4b0b      	ldr	r3, [pc, #44]	@ (8016794 <prvResetNextTaskUnblockTime+0x34>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d104      	bne.n	801677a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016770:	4b09      	ldr	r3, [pc, #36]	@ (8016798 <prvResetNextTaskUnblockTime+0x38>)
 8016772:	2201      	movs	r2, #1
 8016774:	4252      	negs	r2, r2
 8016776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016778:	e008      	b.n	801678c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801677a:	4b06      	ldr	r3, [pc, #24]	@ (8016794 <prvResetNextTaskUnblockTime+0x34>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	68db      	ldr	r3, [r3, #12]
 8016780:	68db      	ldr	r3, [r3, #12]
 8016782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	685a      	ldr	r2, [r3, #4]
 8016788:	4b03      	ldr	r3, [pc, #12]	@ (8016798 <prvResetNextTaskUnblockTime+0x38>)
 801678a:	601a      	str	r2, [r3, #0]
}
 801678c:	46c0      	nop			@ (mov r8, r8)
 801678e:	46bd      	mov	sp, r7
 8016790:	b002      	add	sp, #8
 8016792:	bd80      	pop	{r7, pc}
 8016794:	200004b0 	.word	0x200004b0
 8016798:	20000518 	.word	0x20000518

0801679c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80167a2:	4b04      	ldr	r3, [pc, #16]	@ (80167b4 <xTaskGetCurrentTaskHandle+0x18>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80167a8:	687b      	ldr	r3, [r7, #4]
	}
 80167aa:	0018      	movs	r0, r3
 80167ac:	46bd      	mov	sp, r7
 80167ae:	b002      	add	sp, #8
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	46c0      	nop			@ (mov r8, r8)
 80167b4:	200003f8 	.word	0x200003f8

080167b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b082      	sub	sp, #8
 80167bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80167be:	4b0a      	ldr	r3, [pc, #40]	@ (80167e8 <xTaskGetSchedulerState+0x30>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d102      	bne.n	80167cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80167c6:	2301      	movs	r3, #1
 80167c8:	607b      	str	r3, [r7, #4]
 80167ca:	e008      	b.n	80167de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80167cc:	4b07      	ldr	r3, [pc, #28]	@ (80167ec <xTaskGetSchedulerState+0x34>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d102      	bne.n	80167da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80167d4:	2302      	movs	r3, #2
 80167d6:	607b      	str	r3, [r7, #4]
 80167d8:	e001      	b.n	80167de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80167da:	2300      	movs	r3, #0
 80167dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80167de:	687b      	ldr	r3, [r7, #4]
	}
 80167e0:	0018      	movs	r0, r3
 80167e2:	46bd      	mov	sp, r7
 80167e4:	b002      	add	sp, #8
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	20000504 	.word	0x20000504
 80167ec:	20000520 	.word	0x20000520

080167f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80167fc:	2300      	movs	r3, #0
 80167fe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d046      	beq.n	8016894 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016806:	4b26      	ldr	r3, [pc, #152]	@ (80168a0 <xTaskPriorityDisinherit+0xb0>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	68ba      	ldr	r2, [r7, #8]
 801680c:	429a      	cmp	r2, r3
 801680e:	d002      	beq.n	8016816 <xTaskPriorityDisinherit+0x26>
 8016810:	b672      	cpsid	i
 8016812:	46c0      	nop			@ (mov r8, r8)
 8016814:	e7fd      	b.n	8016812 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801681a:	2b00      	cmp	r3, #0
 801681c:	d102      	bne.n	8016824 <xTaskPriorityDisinherit+0x34>
 801681e:	b672      	cpsid	i
 8016820:	46c0      	nop			@ (mov r8, r8)
 8016822:	e7fd      	b.n	8016820 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016828:	1e5a      	subs	r2, r3, #1
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801682e:	68bb      	ldr	r3, [r7, #8]
 8016830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016836:	429a      	cmp	r2, r3
 8016838:	d02c      	beq.n	8016894 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801683e:	2b00      	cmp	r3, #0
 8016840:	d128      	bne.n	8016894 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	3304      	adds	r3, #4
 8016846:	0018      	movs	r0, r3
 8016848:	f7fe fcf5 	bl	8015236 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016858:	2207      	movs	r2, #7
 801685a:	1ad2      	subs	r2, r2, r3
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016864:	4b0f      	ldr	r3, [pc, #60]	@ (80168a4 <xTaskPriorityDisinherit+0xb4>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	429a      	cmp	r2, r3
 801686a:	d903      	bls.n	8016874 <xTaskPriorityDisinherit+0x84>
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016870:	4b0c      	ldr	r3, [pc, #48]	@ (80168a4 <xTaskPriorityDisinherit+0xb4>)
 8016872:	601a      	str	r2, [r3, #0]
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016878:	0013      	movs	r3, r2
 801687a:	009b      	lsls	r3, r3, #2
 801687c:	189b      	adds	r3, r3, r2
 801687e:	009b      	lsls	r3, r3, #2
 8016880:	4a09      	ldr	r2, [pc, #36]	@ (80168a8 <xTaskPriorityDisinherit+0xb8>)
 8016882:	189a      	adds	r2, r3, r2
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	3304      	adds	r3, #4
 8016888:	0019      	movs	r1, r3
 801688a:	0010      	movs	r0, r2
 801688c:	f7fe fc7b 	bl	8015186 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016890:	2301      	movs	r3, #1
 8016892:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016894:	68fb      	ldr	r3, [r7, #12]
	}
 8016896:	0018      	movs	r0, r3
 8016898:	46bd      	mov	sp, r7
 801689a:	b004      	add	sp, #16
 801689c:	bd80      	pop	{r7, pc}
 801689e:	46c0      	nop			@ (mov r8, r8)
 80168a0:	200003f8 	.word	0x200003f8
 80168a4:	20000500 	.word	0x20000500
 80168a8:	200003fc 	.word	0x200003fc

080168ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80168b6:	4b21      	ldr	r3, [pc, #132]	@ (801693c <prvAddCurrentTaskToDelayedList+0x90>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80168bc:	4b20      	ldr	r3, [pc, #128]	@ (8016940 <prvAddCurrentTaskToDelayedList+0x94>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	3304      	adds	r3, #4
 80168c2:	0018      	movs	r0, r3
 80168c4:	f7fe fcb7 	bl	8015236 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	3301      	adds	r3, #1
 80168cc:	d10b      	bne.n	80168e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d008      	beq.n	80168e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80168d4:	4b1a      	ldr	r3, [pc, #104]	@ (8016940 <prvAddCurrentTaskToDelayedList+0x94>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	1d1a      	adds	r2, r3, #4
 80168da:	4b1a      	ldr	r3, [pc, #104]	@ (8016944 <prvAddCurrentTaskToDelayedList+0x98>)
 80168dc:	0011      	movs	r1, r2
 80168de:	0018      	movs	r0, r3
 80168e0:	f7fe fc51 	bl	8015186 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80168e4:	e026      	b.n	8016934 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80168e6:	68fa      	ldr	r2, [r7, #12]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	18d3      	adds	r3, r2, r3
 80168ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80168ee:	4b14      	ldr	r3, [pc, #80]	@ (8016940 <prvAddCurrentTaskToDelayedList+0x94>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	68ba      	ldr	r2, [r7, #8]
 80168f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80168f6:	68ba      	ldr	r2, [r7, #8]
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d209      	bcs.n	8016912 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80168fe:	4b12      	ldr	r3, [pc, #72]	@ (8016948 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016900:	681a      	ldr	r2, [r3, #0]
 8016902:	4b0f      	ldr	r3, [pc, #60]	@ (8016940 <prvAddCurrentTaskToDelayedList+0x94>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	3304      	adds	r3, #4
 8016908:	0019      	movs	r1, r3
 801690a:	0010      	movs	r0, r2
 801690c:	f7fe fc5d 	bl	80151ca <vListInsert>
}
 8016910:	e010      	b.n	8016934 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016912:	4b0e      	ldr	r3, [pc, #56]	@ (801694c <prvAddCurrentTaskToDelayedList+0xa0>)
 8016914:	681a      	ldr	r2, [r3, #0]
 8016916:	4b0a      	ldr	r3, [pc, #40]	@ (8016940 <prvAddCurrentTaskToDelayedList+0x94>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	3304      	adds	r3, #4
 801691c:	0019      	movs	r1, r3
 801691e:	0010      	movs	r0, r2
 8016920:	f7fe fc53 	bl	80151ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016924:	4b0a      	ldr	r3, [pc, #40]	@ (8016950 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	68ba      	ldr	r2, [r7, #8]
 801692a:	429a      	cmp	r2, r3
 801692c:	d202      	bcs.n	8016934 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801692e:	4b08      	ldr	r3, [pc, #32]	@ (8016950 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016930:	68ba      	ldr	r2, [r7, #8]
 8016932:	601a      	str	r2, [r3, #0]
}
 8016934:	46c0      	nop			@ (mov r8, r8)
 8016936:	46bd      	mov	sp, r7
 8016938:	b004      	add	sp, #16
 801693a:	bd80      	pop	{r7, pc}
 801693c:	200004fc 	.word	0x200004fc
 8016940:	200003f8 	.word	0x200003f8
 8016944:	200004e4 	.word	0x200004e4
 8016948:	200004b4 	.word	0x200004b4
 801694c:	200004b0 	.word	0x200004b0
 8016950:	20000518 	.word	0x20000518

08016954 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b084      	sub	sp, #16
 8016958:	af00      	add	r7, sp, #0
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	3b04      	subs	r3, #4
 8016964:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2280      	movs	r2, #128	@ 0x80
 801696a:	0452      	lsls	r2, r2, #17
 801696c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	3b04      	subs	r3, #4
 8016972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8016974:	68ba      	ldr	r2, [r7, #8]
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	3b04      	subs	r3, #4
 801697e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016980:	4a08      	ldr	r2, [pc, #32]	@ (80169a4 <pxPortInitialiseStack+0x50>)
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	3b14      	subs	r3, #20
 801698a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801698c:	687a      	ldr	r2, [r7, #4]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	3b20      	subs	r3, #32
 8016996:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016998:	68fb      	ldr	r3, [r7, #12]
}
 801699a:	0018      	movs	r0, r3
 801699c:	46bd      	mov	sp, r7
 801699e:	b004      	add	sp, #16
 80169a0:	bd80      	pop	{r7, pc}
 80169a2:	46c0      	nop			@ (mov r8, r8)
 80169a4:	080169a9 	.word	0x080169a9

080169a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80169ae:	2300      	movs	r3, #0
 80169b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80169b2:	4b08      	ldr	r3, [pc, #32]	@ (80169d4 <prvTaskExitError+0x2c>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	3301      	adds	r3, #1
 80169b8:	d002      	beq.n	80169c0 <prvTaskExitError+0x18>
 80169ba:	b672      	cpsid	i
 80169bc:	46c0      	nop			@ (mov r8, r8)
 80169be:	e7fd      	b.n	80169bc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80169c0:	b672      	cpsid	i
	while( ulDummy == 0 )
 80169c2:	46c0      	nop			@ (mov r8, r8)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d0fc      	beq.n	80169c4 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80169ca:	46c0      	nop			@ (mov r8, r8)
 80169cc:	46c0      	nop			@ (mov r8, r8)
 80169ce:	46bd      	mov	sp, r7
 80169d0:	b002      	add	sp, #8
 80169d2:	bd80      	pop	{r7, pc}
 80169d4:	200000c0 	.word	0x200000c0

080169d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80169dc:	46c0      	nop			@ (mov r8, r8)
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
	...

080169f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80169f0:	4a0b      	ldr	r2, [pc, #44]	@ (8016a20 <pxCurrentTCBConst2>)
 80169f2:	6813      	ldr	r3, [r2, #0]
 80169f4:	6818      	ldr	r0, [r3, #0]
 80169f6:	3020      	adds	r0, #32
 80169f8:	f380 8809 	msr	PSP, r0
 80169fc:	2002      	movs	r0, #2
 80169fe:	f380 8814 	msr	CONTROL, r0
 8016a02:	f3bf 8f6f 	isb	sy
 8016a06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8016a08:	46ae      	mov	lr, r5
 8016a0a:	bc08      	pop	{r3}
 8016a0c:	bc04      	pop	{r2}
 8016a0e:	b662      	cpsie	i
 8016a10:	4718      	bx	r3
 8016a12:	46c0      	nop			@ (mov r8, r8)
 8016a14:	46c0      	nop			@ (mov r8, r8)
 8016a16:	46c0      	nop			@ (mov r8, r8)
 8016a18:	46c0      	nop			@ (mov r8, r8)
 8016a1a:	46c0      	nop			@ (mov r8, r8)
 8016a1c:	46c0      	nop			@ (mov r8, r8)
 8016a1e:	46c0      	nop			@ (mov r8, r8)

08016a20 <pxCurrentTCBConst2>:
 8016a20:	200003f8 	.word	0x200003f8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8016a24:	46c0      	nop			@ (mov r8, r8)
 8016a26:	46c0      	nop			@ (mov r8, r8)

08016a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8016a68 <xPortStartScheduler+0x40>)
 8016a2e:	681a      	ldr	r2, [r3, #0]
 8016a30:	4b0d      	ldr	r3, [pc, #52]	@ (8016a68 <xPortStartScheduler+0x40>)
 8016a32:	21ff      	movs	r1, #255	@ 0xff
 8016a34:	0409      	lsls	r1, r1, #16
 8016a36:	430a      	orrs	r2, r1
 8016a38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8016a68 <xPortStartScheduler+0x40>)
 8016a3c:	681a      	ldr	r2, [r3, #0]
 8016a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8016a68 <xPortStartScheduler+0x40>)
 8016a40:	21ff      	movs	r1, #255	@ 0xff
 8016a42:	0609      	lsls	r1, r1, #24
 8016a44:	430a      	orrs	r2, r1
 8016a46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a48:	f000 f898 	bl	8016b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a4c:	4b07      	ldr	r3, [pc, #28]	@ (8016a6c <xPortStartScheduler+0x44>)
 8016a4e:	2200      	movs	r2, #0
 8016a50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8016a52:	f7ff ffcd 	bl	80169f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a56:	f7ff fcaf 	bl	80163b8 <vTaskSwitchContext>
	prvTaskExitError();
 8016a5a:	f7ff ffa5 	bl	80169a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a5e:	2300      	movs	r3, #0
}
 8016a60:	0018      	movs	r0, r3
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	46c0      	nop			@ (mov r8, r8)
 8016a68:	e000ed20 	.word	0xe000ed20
 8016a6c:	200000c0 	.word	0x200000c0

08016a70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016a74:	4b05      	ldr	r3, [pc, #20]	@ (8016a8c <vPortYield+0x1c>)
 8016a76:	2280      	movs	r2, #128	@ 0x80
 8016a78:	0552      	lsls	r2, r2, #21
 8016a7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8016a7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8016a80:	f3bf 8f6f 	isb	sy
}
 8016a84:	46c0      	nop			@ (mov r8, r8)
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	46c0      	nop			@ (mov r8, r8)
 8016a8c:	e000ed04 	.word	0xe000ed04

08016a90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8016a94:	b672      	cpsid	i
	uxCriticalNesting++;
 8016a96:	4b06      	ldr	r3, [pc, #24]	@ (8016ab0 <vPortEnterCritical+0x20>)
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	1c5a      	adds	r2, r3, #1
 8016a9c:	4b04      	ldr	r3, [pc, #16]	@ (8016ab0 <vPortEnterCritical+0x20>)
 8016a9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8016aa0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8016aa4:	f3bf 8f6f 	isb	sy
}
 8016aa8:	46c0      	nop			@ (mov r8, r8)
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
 8016aae:	46c0      	nop			@ (mov r8, r8)
 8016ab0:	200000c0 	.word	0x200000c0

08016ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016ab8:	4b09      	ldr	r3, [pc, #36]	@ (8016ae0 <vPortExitCritical+0x2c>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d102      	bne.n	8016ac6 <vPortExitCritical+0x12>
 8016ac0:	b672      	cpsid	i
 8016ac2:	46c0      	nop			@ (mov r8, r8)
 8016ac4:	e7fd      	b.n	8016ac2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8016ac6:	4b06      	ldr	r3, [pc, #24]	@ (8016ae0 <vPortExitCritical+0x2c>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	1e5a      	subs	r2, r3, #1
 8016acc:	4b04      	ldr	r3, [pc, #16]	@ (8016ae0 <vPortExitCritical+0x2c>)
 8016ace:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8016ad0:	4b03      	ldr	r3, [pc, #12]	@ (8016ae0 <vPortExitCritical+0x2c>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d100      	bne.n	8016ada <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8016ad8:	b662      	cpsie	i
	}
}
 8016ada:	46c0      	nop			@ (mov r8, r8)
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}
 8016ae0:	200000c0 	.word	0x200000c0

08016ae4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8016ae4:	f3ef 8010 	mrs	r0, PRIMASK
 8016ae8:	b672      	cpsid	i
 8016aea:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8016aec:	46c0      	nop			@ (mov r8, r8)
 8016aee:	0018      	movs	r0, r3

08016af0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8016af0:	f380 8810 	msr	PRIMASK, r0
 8016af4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8016af6:	46c0      	nop			@ (mov r8, r8)
	...

08016b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b00:	f3ef 8009 	mrs	r0, PSP
 8016b04:	4b0e      	ldr	r3, [pc, #56]	@ (8016b40 <pxCurrentTCBConst>)
 8016b06:	681a      	ldr	r2, [r3, #0]
 8016b08:	3820      	subs	r0, #32
 8016b0a:	6010      	str	r0, [r2, #0]
 8016b0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8016b0e:	4644      	mov	r4, r8
 8016b10:	464d      	mov	r5, r9
 8016b12:	4656      	mov	r6, sl
 8016b14:	465f      	mov	r7, fp
 8016b16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8016b18:	b508      	push	{r3, lr}
 8016b1a:	b672      	cpsid	i
 8016b1c:	f7ff fc4c 	bl	80163b8 <vTaskSwitchContext>
 8016b20:	b662      	cpsie	i
 8016b22:	bc0c      	pop	{r2, r3}
 8016b24:	6811      	ldr	r1, [r2, #0]
 8016b26:	6808      	ldr	r0, [r1, #0]
 8016b28:	3010      	adds	r0, #16
 8016b2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8016b2c:	46a0      	mov	r8, r4
 8016b2e:	46a9      	mov	r9, r5
 8016b30:	46b2      	mov	sl, r6
 8016b32:	46bb      	mov	fp, r7
 8016b34:	f380 8809 	msr	PSP, r0
 8016b38:	3820      	subs	r0, #32
 8016b3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8016b3c:	4718      	bx	r3
 8016b3e:	46c0      	nop			@ (mov r8, r8)

08016b40 <pxCurrentTCBConst>:
 8016b40:	200003f8 	.word	0x200003f8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8016b44:	46c0      	nop			@ (mov r8, r8)
 8016b46:	46c0      	nop			@ (mov r8, r8)

08016b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8016b4e:	f7ff ffc9 	bl	8016ae4 <ulSetInterruptMaskFromISR>
 8016b52:	0003      	movs	r3, r0
 8016b54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016b56:	f7ff fb7f 	bl	8016258 <xTaskIncrementTick>
 8016b5a:	1e03      	subs	r3, r0, #0
 8016b5c:	d003      	beq.n	8016b66 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016b5e:	4b06      	ldr	r3, [pc, #24]	@ (8016b78 <SysTick_Handler+0x30>)
 8016b60:	2280      	movs	r2, #128	@ 0x80
 8016b62:	0552      	lsls	r2, r2, #21
 8016b64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	0018      	movs	r0, r3
 8016b6a:	f7ff ffc1 	bl	8016af0 <vClearInterruptMaskFromISR>
}
 8016b6e:	46c0      	nop			@ (mov r8, r8)
 8016b70:	46bd      	mov	sp, r7
 8016b72:	b002      	add	sp, #8
 8016b74:	bd80      	pop	{r7, pc}
 8016b76:	46c0      	nop			@ (mov r8, r8)
 8016b78:	e000ed04 	.word	0xe000ed04

08016b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016b80:	4b0b      	ldr	r3, [pc, #44]	@ (8016bb0 <vPortSetupTimerInterrupt+0x34>)
 8016b82:	2200      	movs	r2, #0
 8016b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016b86:	4b0b      	ldr	r3, [pc, #44]	@ (8016bb4 <vPortSetupTimerInterrupt+0x38>)
 8016b88:	2200      	movs	r2, #0
 8016b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8016bb8 <vPortSetupTimerInterrupt+0x3c>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	22fa      	movs	r2, #250	@ 0xfa
 8016b92:	0091      	lsls	r1, r2, #2
 8016b94:	0018      	movs	r0, r3
 8016b96:	f7ef fb19 	bl	80061cc <__udivsi3>
 8016b9a:	0003      	movs	r3, r0
 8016b9c:	001a      	movs	r2, r3
 8016b9e:	4b07      	ldr	r3, [pc, #28]	@ (8016bbc <vPortSetupTimerInterrupt+0x40>)
 8016ba0:	3a01      	subs	r2, #1
 8016ba2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8016ba4:	4b02      	ldr	r3, [pc, #8]	@ (8016bb0 <vPortSetupTimerInterrupt+0x34>)
 8016ba6:	2207      	movs	r2, #7
 8016ba8:	601a      	str	r2, [r3, #0]
}
 8016baa:	46c0      	nop			@ (mov r8, r8)
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	e000e010 	.word	0xe000e010
 8016bb4:	e000e018 	.word	0xe000e018
 8016bb8:	20000028 	.word	0x20000028
 8016bbc:	e000e014 	.word	0xe000e014

08016bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b086      	sub	sp, #24
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016bc8:	2300      	movs	r3, #0
 8016bca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8016bcc:	f7ff faac 	bl	8016128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8016d08 <pvPortMalloc+0x148>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d101      	bne.n	8016bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016bd8:	f000 f8f2 	bl	8016dc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8016d0c <pvPortMalloc+0x14c>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	4013      	ands	r3, r2
 8016be4:	d000      	beq.n	8016be8 <pvPortMalloc+0x28>
 8016be6:	e080      	b.n	8016cea <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d013      	beq.n	8016c16 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8016bee:	2208      	movs	r2, #8
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	189b      	adds	r3, r3, r2
 8016bf4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2207      	movs	r2, #7
 8016bfa:	4013      	ands	r3, r2
 8016bfc:	d00b      	beq.n	8016c16 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2207      	movs	r2, #7
 8016c02:	4393      	bics	r3, r2
 8016c04:	3308      	adds	r3, #8
 8016c06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2207      	movs	r2, #7
 8016c0c:	4013      	ands	r3, r2
 8016c0e:	d002      	beq.n	8016c16 <pvPortMalloc+0x56>
 8016c10:	b672      	cpsid	i
 8016c12:	46c0      	nop			@ (mov r8, r8)
 8016c14:	e7fd      	b.n	8016c12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d066      	beq.n	8016cea <pvPortMalloc+0x12a>
 8016c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8016d10 <pvPortMalloc+0x150>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d861      	bhi.n	8016cea <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016c26:	4b3b      	ldr	r3, [pc, #236]	@ (8016d14 <pvPortMalloc+0x154>)
 8016c28:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8016c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8016d14 <pvPortMalloc+0x154>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c30:	e004      	b.n	8016c3c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8016c32:	697b      	ldr	r3, [r7, #20]
 8016c34:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016c36:	697b      	ldr	r3, [r7, #20]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d903      	bls.n	8016c4e <pvPortMalloc+0x8e>
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d1f1      	bne.n	8016c32 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8016d08 <pvPortMalloc+0x148>)
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	697a      	ldr	r2, [r7, #20]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d048      	beq.n	8016cea <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016c58:	693b      	ldr	r3, [r7, #16]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2208      	movs	r2, #8
 8016c5e:	189b      	adds	r3, r3, r2
 8016c60:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016c62:	697b      	ldr	r3, [r7, #20]
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	693b      	ldr	r3, [r7, #16]
 8016c68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016c6a:	697b      	ldr	r3, [r7, #20]
 8016c6c:	685a      	ldr	r2, [r3, #4]
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	1ad2      	subs	r2, r2, r3
 8016c72:	2308      	movs	r3, #8
 8016c74:	005b      	lsls	r3, r3, #1
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d917      	bls.n	8016caa <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016c7a:	697a      	ldr	r2, [r7, #20]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	18d3      	adds	r3, r2, r3
 8016c80:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	2207      	movs	r2, #7
 8016c86:	4013      	ands	r3, r2
 8016c88:	d002      	beq.n	8016c90 <pvPortMalloc+0xd0>
 8016c8a:	b672      	cpsid	i
 8016c8c:	46c0      	nop			@ (mov r8, r8)
 8016c8e:	e7fd      	b.n	8016c8c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	685a      	ldr	r2, [r3, #4]
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	1ad2      	subs	r2, r2, r3
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	0018      	movs	r0, r3
 8016ca6:	f000 f8eb 	bl	8016e80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016caa:	4b19      	ldr	r3, [pc, #100]	@ (8016d10 <pvPortMalloc+0x150>)
 8016cac:	681a      	ldr	r2, [r3, #0]
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	1ad2      	subs	r2, r2, r3
 8016cb4:	4b16      	ldr	r3, [pc, #88]	@ (8016d10 <pvPortMalloc+0x150>)
 8016cb6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016cb8:	4b15      	ldr	r3, [pc, #84]	@ (8016d10 <pvPortMalloc+0x150>)
 8016cba:	681a      	ldr	r2, [r3, #0]
 8016cbc:	4b16      	ldr	r3, [pc, #88]	@ (8016d18 <pvPortMalloc+0x158>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	d203      	bcs.n	8016ccc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016cc4:	4b12      	ldr	r3, [pc, #72]	@ (8016d10 <pvPortMalloc+0x150>)
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	4b13      	ldr	r3, [pc, #76]	@ (8016d18 <pvPortMalloc+0x158>)
 8016cca:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016ccc:	697b      	ldr	r3, [r7, #20]
 8016cce:	685a      	ldr	r2, [r3, #4]
 8016cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8016d0c <pvPortMalloc+0x14c>)
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	431a      	orrs	r2, r3
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	2200      	movs	r2, #0
 8016cde:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8016d1c <pvPortMalloc+0x15c>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	1c5a      	adds	r2, r3, #1
 8016ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8016d1c <pvPortMalloc+0x15c>)
 8016ce8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016cea:	f7ff fa29 	bl	8016140 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2207      	movs	r2, #7
 8016cf2:	4013      	ands	r3, r2
 8016cf4:	d002      	beq.n	8016cfc <pvPortMalloc+0x13c>
 8016cf6:	b672      	cpsid	i
 8016cf8:	46c0      	nop			@ (mov r8, r8)
 8016cfa:	e7fd      	b.n	8016cf8 <pvPortMalloc+0x138>
	return pvReturn;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
}
 8016cfe:	0018      	movs	r0, r3
 8016d00:	46bd      	mov	sp, r7
 8016d02:	b006      	add	sp, #24
 8016d04:	bd80      	pop	{r7, pc}
 8016d06:	46c0      	nop			@ (mov r8, r8)
 8016d08:	20002084 	.word	0x20002084
 8016d0c:	20002098 	.word	0x20002098
 8016d10:	20002088 	.word	0x20002088
 8016d14:	2000207c 	.word	0x2000207c
 8016d18:	2000208c 	.word	0x2000208c
 8016d1c:	20002090 	.word	0x20002090

08016d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b084      	sub	sp, #16
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d03c      	beq.n	8016dac <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016d32:	2308      	movs	r3, #8
 8016d34:	425b      	negs	r3, r3
 8016d36:	68fa      	ldr	r2, [r7, #12]
 8016d38:	18d3      	adds	r3, r2, r3
 8016d3a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	685a      	ldr	r2, [r3, #4]
 8016d44:	4b1b      	ldr	r3, [pc, #108]	@ (8016db4 <vPortFree+0x94>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4013      	ands	r3, r2
 8016d4a:	d102      	bne.n	8016d52 <vPortFree+0x32>
 8016d4c:	b672      	cpsid	i
 8016d4e:	46c0      	nop			@ (mov r8, r8)
 8016d50:	e7fd      	b.n	8016d4e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016d52:	68bb      	ldr	r3, [r7, #8]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d002      	beq.n	8016d60 <vPortFree+0x40>
 8016d5a:	b672      	cpsid	i
 8016d5c:	46c0      	nop			@ (mov r8, r8)
 8016d5e:	e7fd      	b.n	8016d5c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	685a      	ldr	r2, [r3, #4]
 8016d64:	4b13      	ldr	r3, [pc, #76]	@ (8016db4 <vPortFree+0x94>)
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	4013      	ands	r3, r2
 8016d6a:	d01f      	beq.n	8016dac <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d11b      	bne.n	8016dac <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	685a      	ldr	r2, [r3, #4]
 8016d78:	4b0e      	ldr	r3, [pc, #56]	@ (8016db4 <vPortFree+0x94>)
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	43db      	mvns	r3, r3
 8016d7e:	401a      	ands	r2, r3
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016d84:	f7ff f9d0 	bl	8016128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	685a      	ldr	r2, [r3, #4]
 8016d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8016db8 <vPortFree+0x98>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	18d2      	adds	r2, r2, r3
 8016d92:	4b09      	ldr	r3, [pc, #36]	@ (8016db8 <vPortFree+0x98>)
 8016d94:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	0018      	movs	r0, r3
 8016d9a:	f000 f871 	bl	8016e80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016d9e:	4b07      	ldr	r3, [pc, #28]	@ (8016dbc <vPortFree+0x9c>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	1c5a      	adds	r2, r3, #1
 8016da4:	4b05      	ldr	r3, [pc, #20]	@ (8016dbc <vPortFree+0x9c>)
 8016da6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8016da8:	f7ff f9ca 	bl	8016140 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016dac:	46c0      	nop			@ (mov r8, r8)
 8016dae:	46bd      	mov	sp, r7
 8016db0:	b004      	add	sp, #16
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	20002098 	.word	0x20002098
 8016db8:	20002088 	.word	0x20002088
 8016dbc:	20002094 	.word	0x20002094

08016dc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016dc6:	4b27      	ldr	r3, [pc, #156]	@ (8016e64 <prvHeapInit+0xa4>)
 8016dc8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016dca:	4b27      	ldr	r3, [pc, #156]	@ (8016e68 <prvHeapInit+0xa8>)
 8016dcc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	2207      	movs	r2, #7
 8016dd2:	4013      	ands	r3, r2
 8016dd4:	d00c      	beq.n	8016df0 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	3307      	adds	r3, #7
 8016dda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2207      	movs	r2, #7
 8016de0:	4393      	bics	r3, r2
 8016de2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016de4:	68ba      	ldr	r2, [r7, #8]
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	1ad2      	subs	r2, r2, r3
 8016dea:	4b1f      	ldr	r3, [pc, #124]	@ (8016e68 <prvHeapInit+0xa8>)
 8016dec:	18d3      	adds	r3, r2, r3
 8016dee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016df4:	4b1d      	ldr	r3, [pc, #116]	@ (8016e6c <prvHeapInit+0xac>)
 8016df6:	687a      	ldr	r2, [r7, #4]
 8016df8:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8016e6c <prvHeapInit+0xac>)
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	68ba      	ldr	r2, [r7, #8]
 8016e04:	18d3      	adds	r3, r2, r3
 8016e06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016e08:	2208      	movs	r2, #8
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	1a9b      	subs	r3, r3, r2
 8016e0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	2207      	movs	r2, #7
 8016e14:	4393      	bics	r3, r2
 8016e16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016e18:	68fa      	ldr	r2, [r7, #12]
 8016e1a:	4b15      	ldr	r3, [pc, #84]	@ (8016e70 <prvHeapInit+0xb0>)
 8016e1c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8016e1e:	4b14      	ldr	r3, [pc, #80]	@ (8016e70 <prvHeapInit+0xb0>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	2200      	movs	r2, #0
 8016e24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016e26:	4b12      	ldr	r3, [pc, #72]	@ (8016e70 <prvHeapInit+0xb0>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	68fa      	ldr	r2, [r7, #12]
 8016e36:	1ad2      	subs	r2, r2, r3
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8016e70 <prvHeapInit+0xb0>)
 8016e3e:	681a      	ldr	r2, [r3, #0]
 8016e40:	683b      	ldr	r3, [r7, #0]
 8016e42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	685a      	ldr	r2, [r3, #4]
 8016e48:	4b0a      	ldr	r3, [pc, #40]	@ (8016e74 <prvHeapInit+0xb4>)
 8016e4a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	685a      	ldr	r2, [r3, #4]
 8016e50:	4b09      	ldr	r3, [pc, #36]	@ (8016e78 <prvHeapInit+0xb8>)
 8016e52:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016e54:	4b09      	ldr	r3, [pc, #36]	@ (8016e7c <prvHeapInit+0xbc>)
 8016e56:	2280      	movs	r2, #128	@ 0x80
 8016e58:	0612      	lsls	r2, r2, #24
 8016e5a:	601a      	str	r2, [r3, #0]
}
 8016e5c:	46c0      	nop			@ (mov r8, r8)
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	b004      	add	sp, #16
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	00001b58 	.word	0x00001b58
 8016e68:	20000524 	.word	0x20000524
 8016e6c:	2000207c 	.word	0x2000207c
 8016e70:	20002084 	.word	0x20002084
 8016e74:	2000208c 	.word	0x2000208c
 8016e78:	20002088 	.word	0x20002088
 8016e7c:	20002098 	.word	0x20002098

08016e80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016e88:	4b27      	ldr	r3, [pc, #156]	@ (8016f28 <prvInsertBlockIntoFreeList+0xa8>)
 8016e8a:	60fb      	str	r3, [r7, #12]
 8016e8c:	e002      	b.n	8016e94 <prvInsertBlockIntoFreeList+0x14>
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	60fb      	str	r3, [r7, #12]
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	687a      	ldr	r2, [r7, #4]
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d8f7      	bhi.n	8016e8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	685b      	ldr	r3, [r3, #4]
 8016ea6:	68ba      	ldr	r2, [r7, #8]
 8016ea8:	18d3      	adds	r3, r2, r3
 8016eaa:	687a      	ldr	r2, [r7, #4]
 8016eac:	429a      	cmp	r2, r3
 8016eae:	d108      	bne.n	8016ec2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	685a      	ldr	r2, [r3, #4]
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	18d2      	adds	r2, r2, r3
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	68ba      	ldr	r2, [r7, #8]
 8016ecc:	18d2      	adds	r2, r2, r3
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	d118      	bne.n	8016f08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	681a      	ldr	r2, [r3, #0]
 8016eda:	4b14      	ldr	r3, [pc, #80]	@ (8016f2c <prvInsertBlockIntoFreeList+0xac>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	d00d      	beq.n	8016efe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	685a      	ldr	r2, [r3, #4]
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	685b      	ldr	r3, [r3, #4]
 8016eec:	18d2      	adds	r2, r2, r3
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	681a      	ldr	r2, [r3, #0]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	601a      	str	r2, [r3, #0]
 8016efc:	e008      	b.n	8016f10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016efe:	4b0b      	ldr	r3, [pc, #44]	@ (8016f2c <prvInsertBlockIntoFreeList+0xac>)
 8016f00:	681a      	ldr	r2, [r3, #0]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	601a      	str	r2, [r3, #0]
 8016f06:	e003      	b.n	8016f10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	681a      	ldr	r2, [r3, #0]
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016f10:	68fa      	ldr	r2, [r7, #12]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d002      	beq.n	8016f1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f1e:	46c0      	nop			@ (mov r8, r8)
 8016f20:	46bd      	mov	sp, r7
 8016f22:	b004      	add	sp, #16
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	46c0      	nop			@ (mov r8, r8)
 8016f28:	2000207c 	.word	0x2000207c
 8016f2c:	20002084 	.word	0x20002084

08016f30 <MX_TCPP_Init>:
/* Private variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/

void MX_TCPP_Init(void)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	af00      	add	r7, sp, #0

#ifndef tcpp01_PORT0_DB_OUT_TO_VCC
  HAL_GPIO_WritePin(TCPP01_PORT0_DB_OUT_GPIO_PORT, TCPP01_PORT0_DB_OUT_GPIO_PIN, GPIO_PIN_SET);
 8016f34:	4b08      	ldr	r3, [pc, #32]	@ (8016f58 <MX_TCPP_Init+0x28>)
 8016f36:	2201      	movs	r2, #1
 8016f38:	2140      	movs	r1, #64	@ 0x40
 8016f3a:	0018      	movs	r0, r3
 8016f3c:	f7f2 fed0 	bl	8009ce0 <HAL_GPIO_WritePin>
#endif
#ifndef TCPP01_PORT0_VCC_OUT_TO_VCC
  HAL_GPIO_WritePin(TCPP01_PORT0_VCC_OUT_GPIO_PORT, TCPP01_PORT0_VCC_OUT_GPIO_PIN, GPIO_PIN_SET);
 8016f40:	2380      	movs	r3, #128	@ 0x80
 8016f42:	019b      	lsls	r3, r3, #6
 8016f44:	4805      	ldr	r0, [pc, #20]	@ (8016f5c <MX_TCPP_Init+0x2c>)
 8016f46:	2201      	movs	r2, #1
 8016f48:	0019      	movs	r1, r3
 8016f4a:	f7f2 fec9 	bl	8009ce0 <HAL_GPIO_WritePin>
#endif

  ADC_Start();
 8016f4e:	f000 f807 	bl	8016f60 <ADC_Start>
}
 8016f52:	46c0      	nop			@ (mov r8, r8)
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}
 8016f58:	50000800 	.word	0x50000800
 8016f5c:	50000400 	.word	0x50000400

08016f60 <ADC_Start>:
#endif

extern ADC_HandleTypeDef            hadc1;

void ADC_Start()
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8016f64:	4b03      	ldr	r3, [pc, #12]	@ (8016f74 <ADC_Start+0x14>)
 8016f66:	0018      	movs	r0, r3
 8016f68:	f7f2 f9f4 	bl	8009354 <HAL_ADC_Start>
}
 8016f6c:	46c0      	nop			@ (mov r8, r8)
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}
 8016f72:	46c0      	nop			@ (mov r8, r8)
 8016f74:	2000023c 	.word	0x2000023c

08016f78 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8016f7c:	f7fa fbe0 	bl	8011740 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8016f80:	f000 f816 	bl	8016fb0 <USBPD_DPM_InitCore>
 8016f84:	1e03      	subs	r3, r0, #0
 8016f86:	d001      	beq.n	8016f8c <MX_USBPD_Init+0x14>
  {
    while(1);
 8016f88:	46c0      	nop			@ (mov r8, r8)
 8016f8a:	e7fd      	b.n	8016f88 <MX_USBPD_Init+0x10>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8016f8c:	f000 fb62 	bl	8017654 <USBPD_DPM_UserInit>
 8016f90:	1e03      	subs	r3, r0, #0
 8016f92:	d001      	beq.n	8016f98 <MX_USBPD_Init+0x20>
  {
    while(1);
 8016f94:	46c0      	nop			@ (mov r8, r8)
 8016f96:	e7fd      	b.n	8016f94 <MX_USBPD_Init+0x1c>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 8016f98:	f000 f8e0 	bl	801715c <USBPD_DPM_InitOS>
 8016f9c:	1e03      	subs	r3, r0, #0
 8016f9e:	d001      	beq.n	8016fa4 <MX_USBPD_Init+0x2c>
  {
    while(1);
 8016fa0:	46c0      	nop			@ (mov r8, r8)
 8016fa2:	e7fd      	b.n	8016fa0 <MX_USBPD_Init+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8016fa4:	b662      	cpsie	i
}
 8016fa6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 8016fa8:	46c0      	nop			@ (mov r8, r8)
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
	...

08016fb0 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8016fb0:	b5b0      	push	{r4, r5, r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8016fb6:	1dfb      	adds	r3, r7, #7
 8016fb8:	2200      	movs	r2, #0
 8016fba:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8016fbc:	4b62      	ldr	r3, [pc, #392]	@ (8017148 <USBPD_DPM_InitCore+0x198>)
 8016fbe:	0018      	movs	r0, r3
 8016fc0:	f7ea fa8c 	bl	80014dc <USBPD_PE_CheckLIB>
 8016fc4:	0003      	movs	r3, r0
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d003      	beq.n	8016fd2 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 8016fca:	1dfb      	adds	r3, r7, #7
 8016fcc:	2202      	movs	r2, #2
 8016fce:	701a      	strb	r2, [r3, #0]
    goto error;
 8016fd0:	e0b4      	b.n	801713c <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8016fd2:	f7ea fa91 	bl	80014f8 <USBPD_PE_GetMemoryConsumption>
 8016fd6:	0003      	movs	r3, r0
 8016fd8:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8016fda:	1dbb      	adds	r3, r7, #6
 8016fdc:	2200      	movs	r2, #0
 8016fde:	701a      	strb	r2, [r3, #0]
 8016fe0:	e0a6      	b.n	8017130 <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8016fe2:	1dbb      	adds	r3, r7, #6
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	4a59      	ldr	r2, [pc, #356]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 8016fe8:	009b      	lsls	r3, r3, #2
 8016fea:	18d3      	adds	r3, r2, r3
 8016fec:	785a      	ldrb	r2, [r3, #1]
 8016fee:	2108      	movs	r1, #8
 8016ff0:	438a      	bics	r2, r1
 8016ff2:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8016ff4:	1dbb      	adds	r3, r7, #6
 8016ff6:	781a      	ldrb	r2, [r3, #0]
 8016ff8:	1dbb      	adds	r3, r7, #6
 8016ffa:	7818      	ldrb	r0, [r3, #0]
 8016ffc:	4954      	ldr	r1, [pc, #336]	@ (8017150 <USBPD_DPM_InitCore+0x1a0>)
 8016ffe:	0013      	movs	r3, r2
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	189b      	adds	r3, r3, r2
 8017004:	009b      	lsls	r3, r3, #2
 8017006:	18cb      	adds	r3, r1, r3
 8017008:	791b      	ldrb	r3, [r3, #4]
 801700a:	079b      	lsls	r3, r3, #30
 801700c:	0f9b      	lsrs	r3, r3, #30
 801700e:	b2d9      	uxtb	r1, r3
 8017010:	4b4e      	ldr	r3, [pc, #312]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 8017012:	0082      	lsls	r2, r0, #2
 8017014:	2003      	movs	r0, #3
 8017016:	4001      	ands	r1, r0
 8017018:	000c      	movs	r4, r1
 801701a:	5cd1      	ldrb	r1, [r2, r3]
 801701c:	2003      	movs	r0, #3
 801701e:	4381      	bics	r1, r0
 8017020:	1c08      	adds	r0, r1, #0
 8017022:	1c21      	adds	r1, r4, #0
 8017024:	4301      	orrs	r1, r0
 8017026:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8017028:	1dbb      	adds	r3, r7, #6
 801702a:	781a      	ldrb	r2, [r3, #0]
 801702c:	1dbb      	adds	r3, r7, #6
 801702e:	7818      	ldrb	r0, [r3, #0]
 8017030:	4947      	ldr	r1, [pc, #284]	@ (8017150 <USBPD_DPM_InitCore+0x1a0>)
 8017032:	0013      	movs	r3, r2
 8017034:	005b      	lsls	r3, r3, #1
 8017036:	189b      	adds	r3, r3, r2
 8017038:	009b      	lsls	r3, r3, #2
 801703a:	18cb      	adds	r3, r1, r3
 801703c:	791b      	ldrb	r3, [r3, #4]
 801703e:	075b      	lsls	r3, r3, #29
 8017040:	0fdb      	lsrs	r3, r3, #31
 8017042:	b2d9      	uxtb	r1, r3
 8017044:	4b41      	ldr	r3, [pc, #260]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 8017046:	0082      	lsls	r2, r0, #2
 8017048:	2001      	movs	r0, #1
 801704a:	4001      	ands	r1, r0
 801704c:	008c      	lsls	r4, r1, #2
 801704e:	5cd1      	ldrb	r1, [r2, r3]
 8017050:	2004      	movs	r0, #4
 8017052:	4381      	bics	r1, r0
 8017054:	1c08      	adds	r0, r1, #0
 8017056:	1c21      	adds	r1, r4, #0
 8017058:	4301      	orrs	r1, r0
 801705a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801705c:	1dbb      	adds	r3, r7, #6
 801705e:	781a      	ldrb	r2, [r3, #0]
 8017060:	4b3a      	ldr	r3, [pc, #232]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 8017062:	0092      	lsls	r2, r2, #2
 8017064:	5cd1      	ldrb	r1, [r2, r3]
 8017066:	2010      	movs	r0, #16
 8017068:	4381      	bics	r1, r0
 801706a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801706c:	1dbb      	adds	r3, r7, #6
 801706e:	781a      	ldrb	r2, [r3, #0]
 8017070:	4b36      	ldr	r3, [pc, #216]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 8017072:	0092      	lsls	r2, r2, #2
 8017074:	5cd1      	ldrb	r1, [r2, r3]
 8017076:	203f      	movs	r0, #63	@ 0x3f
 8017078:	4001      	ands	r1, r0
 801707a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801707c:	1dbb      	adds	r3, r7, #6
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	4a32      	ldr	r2, [pc, #200]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 8017082:	009b      	lsls	r3, r3, #2
 8017084:	18d3      	adds	r3, r2, r3
 8017086:	785a      	ldrb	r2, [r3, #1]
 8017088:	2160      	movs	r1, #96	@ 0x60
 801708a:	438a      	bics	r2, r1
 801708c:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801708e:	1dbb      	adds	r3, r7, #6
 8017090:	781b      	ldrb	r3, [r3, #0]
 8017092:	4a2e      	ldr	r2, [pc, #184]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 8017094:	009b      	lsls	r3, r3, #2
 8017096:	18d3      	adds	r3, r2, r3
 8017098:	785a      	ldrb	r2, [r3, #1]
 801709a:	217f      	movs	r1, #127	@ 0x7f
 801709c:	400a      	ands	r2, r1
 801709e:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 80170a0:	1dbb      	adds	r3, r7, #6
 80170a2:	781a      	ldrb	r2, [r3, #0]
 80170a4:	0013      	movs	r3, r2
 80170a6:	005b      	lsls	r3, r3, #1
 80170a8:	189b      	adds	r3, r3, r2
 80170aa:	009b      	lsls	r3, r3, #2
 80170ac:	4a28      	ldr	r2, [pc, #160]	@ (8017150 <USBPD_DPM_InitCore+0x1a0>)
 80170ae:	189c      	adds	r4, r3, r2
 80170b0:	1dbb      	adds	r3, r7, #6
 80170b2:	781b      	ldrb	r3, [r3, #0]
 80170b4:	009a      	lsls	r2, r3, #2
 80170b6:	4b25      	ldr	r3, [pc, #148]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 80170b8:	18d2      	adds	r2, r2, r3
 80170ba:	4926      	ldr	r1, [pc, #152]	@ (8017154 <USBPD_DPM_InitCore+0x1a4>)
 80170bc:	1dbb      	adds	r3, r7, #6
 80170be:	7818      	ldrb	r0, [r3, #0]
 80170c0:	0013      	movs	r3, r2
 80170c2:	0022      	movs	r2, r4
 80170c4:	f7e9 f820 	bl	8000108 <USBPD_CAD_Init>
 80170c8:	1e03      	subs	r3, r0, #0
 80170ca:	d003      	beq.n	80170d4 <USBPD_DPM_InitCore+0x124>
 80170cc:	1dfb      	adds	r3, r7, #7
 80170ce:	2202      	movs	r2, #2
 80170d0:	701a      	strb	r2, [r3, #0]
 80170d2:	e033      	b.n	801713c <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 80170d4:	1dbb      	adds	r3, r7, #6
 80170d6:	781a      	ldrb	r2, [r3, #0]
 80170d8:	0013      	movs	r3, r2
 80170da:	005b      	lsls	r3, r3, #1
 80170dc:	189b      	adds	r3, r3, r2
 80170de:	009b      	lsls	r3, r3, #2
 80170e0:	4a1b      	ldr	r2, [pc, #108]	@ (8017150 <USBPD_DPM_InitCore+0x1a0>)
 80170e2:	1899      	adds	r1, r3, r2
 80170e4:	1dbb      	adds	r3, r7, #6
 80170e6:	781b      	ldrb	r3, [r3, #0]
 80170e8:	009a      	lsls	r2, r3, #2
 80170ea:	4b18      	ldr	r3, [pc, #96]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 80170ec:	18d2      	adds	r2, r2, r3
 80170ee:	1dfc      	adds	r4, r7, #7
 80170f0:	4d19      	ldr	r5, [pc, #100]	@ (8017158 <USBPD_DPM_InitCore+0x1a8>)
 80170f2:	1dbb      	adds	r3, r7, #6
 80170f4:	7818      	ldrb	r0, [r3, #0]
 80170f6:	002b      	movs	r3, r5
 80170f8:	f7e9 f8e4 	bl	80002c4 <USBPD_PE_Init>
 80170fc:	0003      	movs	r3, r0
 80170fe:	7023      	strb	r3, [r4, #0]
 8017100:	1dfb      	adds	r3, r7, #7
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d119      	bne.n	801713c <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8017108:	1dbb      	adds	r3, r7, #6
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	4a0f      	ldr	r2, [pc, #60]	@ (801714c <USBPD_DPM_InitCore+0x19c>)
 801710e:	009b      	lsls	r3, r3, #2
 8017110:	18d3      	adds	r3, r2, r3
 8017112:	785a      	ldrb	r2, [r3, #1]
 8017114:	2108      	movs	r1, #8
 8017116:	430a      	orrs	r2, r1
 8017118:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801711a:	1dbb      	adds	r3, r7, #6
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	2101      	movs	r1, #1
 8017120:	0018      	movs	r0, r3
 8017122:	f7e9 f81e 	bl	8000162 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8017126:	1dbb      	adds	r3, r7, #6
 8017128:	1dba      	adds	r2, r7, #6
 801712a:	7812      	ldrb	r2, [r2, #0]
 801712c:	3201      	adds	r2, #1
 801712e:	701a      	strb	r2, [r3, #0]
 8017130:	1dbb      	adds	r3, r7, #6
 8017132:	781b      	ldrb	r3, [r3, #0]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d100      	bne.n	801713a <USBPD_DPM_InitCore+0x18a>
 8017138:	e753      	b.n	8016fe2 <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801713a:	46c0      	nop			@ (mov r8, r8)
  return _retr;
 801713c:	1dfb      	adds	r3, r7, #7
 801713e:	781b      	ldrb	r3, [r3, #0]
}
 8017140:	0018      	movs	r0, r3
 8017142:	46bd      	mov	sp, r7
 8017144:	b002      	add	sp, #8
 8017146:	bdb0      	pop	{r4, r5, r7, pc}
 8017148:	30410000 	.word	0x30410000
 801714c:	200020ac 	.word	0x200020ac
 8017150:	200000c4 	.word	0x200000c4
 8017154:	08019b98 	.word	0x08019b98
 8017158:	08019ba0 	.word	0x08019ba0

0801715c <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801715c:	b5b0      	push	{r4, r5, r7, lr}
 801715e:	b090      	sub	sp, #64	@ 0x40
 8017160:	af00      	add	r7, sp, #0
  OS_INIT();
 8017162:	243f      	movs	r4, #63	@ 0x3f
 8017164:	193b      	adds	r3, r7, r4
 8017166:	2200      	movs	r2, #0
 8017168:	701a      	strb	r2, [r3, #0]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 801716a:	2530      	movs	r5, #48	@ 0x30
 801716c:	197b      	adds	r3, r7, r5
 801716e:	4a38      	ldr	r2, [pc, #224]	@ (8017250 <USBPD_DPM_InitOS+0xf4>)
 8017170:	ca03      	ldmia	r2!, {r0, r1}
 8017172:	c303      	stmia	r3!, {r0, r1}
 8017174:	197b      	adds	r3, r7, r5
 8017176:	2100      	movs	r1, #0
 8017178:	0018      	movs	r0, r3
 801717a:	f7fd feee 	bl	8014f5a <osMessageCreate>
 801717e:	0002      	movs	r2, r0
 8017180:	4b34      	ldr	r3, [pc, #208]	@ (8017254 <USBPD_DPM_InitOS+0xf8>)
 8017182:	601a      	str	r2, [r3, #0]
 8017184:	4b33      	ldr	r3, [pc, #204]	@ (8017254 <USBPD_DPM_InitOS+0xf8>)
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d103      	bne.n	8017194 <USBPD_DPM_InitOS+0x38>
 801718c:	193b      	adds	r3, r7, r4
 801718e:	2202      	movs	r2, #2
 8017190:	701a      	strb	r2, [r3, #0]
 8017192:	e056      	b.n	8017242 <USBPD_DPM_InitOS+0xe6>
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 8017194:	251c      	movs	r5, #28
 8017196:	197b      	adds	r3, r7, r5
 8017198:	4a2f      	ldr	r2, [pc, #188]	@ (8017258 <USBPD_DPM_InitOS+0xfc>)
 801719a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801719c:	c313      	stmia	r3!, {r0, r1, r4}
 801719e:	ca03      	ldmia	r2!, {r0, r1}
 80171a0:	c303      	stmia	r3!, {r0, r1}
 80171a2:	197b      	adds	r3, r7, r5
 80171a4:	2100      	movs	r1, #0
 80171a6:	0018      	movs	r0, r3
 80171a8:	f7fd fe93 	bl	8014ed2 <osThreadCreate>
 80171ac:	0002      	movs	r2, r0
 80171ae:	4b2b      	ldr	r3, [pc, #172]	@ (801725c <USBPD_DPM_InitOS+0x100>)
 80171b0:	601a      	str	r2, [r3, #0]
 80171b2:	4b2a      	ldr	r3, [pc, #168]	@ (801725c <USBPD_DPM_InitOS+0x100>)
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d104      	bne.n	80171c4 <USBPD_DPM_InitOS+0x68>
 80171ba:	233f      	movs	r3, #63	@ 0x3f
 80171bc:	18fb      	adds	r3, r7, r3
 80171be:	2202      	movs	r2, #2
 80171c0:	701a      	strb	r2, [r3, #0]
 80171c2:	e03e      	b.n	8017242 <USBPD_DPM_InitOS+0xe6>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 80171c4:	2300      	movs	r3, #0
 80171c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80171c8:	e037      	b.n	801723a <USBPD_DPM_InitOS+0xde>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 80171ca:	2414      	movs	r4, #20
 80171cc:	193b      	adds	r3, r7, r4
 80171ce:	4a20      	ldr	r2, [pc, #128]	@ (8017250 <USBPD_DPM_InitOS+0xf4>)
 80171d0:	ca03      	ldmia	r2!, {r0, r1}
 80171d2:	c303      	stmia	r3!, {r0, r1}
 80171d4:	193b      	adds	r3, r7, r4
 80171d6:	2100      	movs	r1, #0
 80171d8:	0018      	movs	r0, r3
 80171da:	f7fd febe 	bl	8014f5a <osMessageCreate>
 80171de:	0001      	movs	r1, r0
 80171e0:	4b1f      	ldr	r3, [pc, #124]	@ (8017260 <USBPD_DPM_InitOS+0x104>)
 80171e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80171e4:	0092      	lsls	r2, r2, #2
 80171e6:	50d1      	str	r1, [r2, r3]
 80171e8:	4b1d      	ldr	r3, [pc, #116]	@ (8017260 <USBPD_DPM_InitOS+0x104>)
 80171ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80171ec:	0092      	lsls	r2, r2, #2
 80171ee:	58d3      	ldr	r3, [r2, r3]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d104      	bne.n	80171fe <USBPD_DPM_InitOS+0xa2>
 80171f4:	233f      	movs	r3, #63	@ 0x3f
 80171f6:	18fb      	adds	r3, r7, r3
 80171f8:	2202      	movs	r2, #2
 80171fa:	701a      	strb	r2, [r3, #0]
 80171fc:	e021      	b.n	8017242 <USBPD_DPM_InitOS+0xe6>

    if (index == USBPD_PORT_0)
 80171fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017200:	2b00      	cmp	r3, #0
 8017202:	d117      	bne.n	8017234 <USBPD_DPM_InitOS+0xd8>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 8017204:	003b      	movs	r3, r7
 8017206:	4a17      	ldr	r2, [pc, #92]	@ (8017264 <USBPD_DPM_InitOS+0x108>)
 8017208:	ca13      	ldmia	r2!, {r0, r1, r4}
 801720a:	c313      	stmia	r3!, {r0, r1, r4}
 801720c:	ca03      	ldmia	r2!, {r0, r1}
 801720e:	c303      	stmia	r3!, {r0, r1}
 8017210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017212:	003b      	movs	r3, r7
 8017214:	0011      	movs	r1, r2
 8017216:	0018      	movs	r0, r3
 8017218:	f7fd fe5b 	bl	8014ed2 <osThreadCreate>
 801721c:	0002      	movs	r2, r0
 801721e:	4b12      	ldr	r3, [pc, #72]	@ (8017268 <USBPD_DPM_InitOS+0x10c>)
 8017220:	601a      	str	r2, [r3, #0]
 8017222:	4b11      	ldr	r3, [pc, #68]	@ (8017268 <USBPD_DPM_InitOS+0x10c>)
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d104      	bne.n	8017234 <USBPD_DPM_InitOS+0xd8>
 801722a:	233f      	movs	r3, #63	@ 0x3f
 801722c:	18fb      	adds	r3, r7, r3
 801722e:	2202      	movs	r2, #2
 8017230:	701a      	strb	r2, [r3, #0]
 8017232:	e006      	b.n	8017242 <USBPD_DPM_InitOS+0xe6>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8017234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017236:	3301      	adds	r3, #1
 8017238:	63bb      	str	r3, [r7, #56]	@ 0x38
 801723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801723c:	2b00      	cmp	r3, #0
 801723e:	d0c4      	beq.n	80171ca <USBPD_DPM_InitOS+0x6e>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 8017240:	46c0      	nop			@ (mov r8, r8)

  return _retr;
 8017242:	233f      	movs	r3, #63	@ 0x3f
 8017244:	18fb      	adds	r3, r7, r3
 8017246:	781b      	ldrb	r3, [r3, #0]
}
 8017248:	0018      	movs	r0, r3
 801724a:	46bd      	mov	sp, r7
 801724c:	b010      	add	sp, #64	@ 0x40
 801724e:	bdb0      	pop	{r4, r5, r7, pc}
 8017250:	080198fc 	.word	0x080198fc
 8017254:	200020a0 	.word	0x200020a0
 8017258:	08019908 	.word	0x08019908
 801725c:	200020a4 	.word	0x200020a4
 8017260:	200020a8 	.word	0x200020a8
 8017264:	08019924 	.word	0x08019924
 8017268:	2000209c 	.word	0x2000209c

0801726c <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b082      	sub	sp, #8
 8017270:	af00      	add	r7, sp, #0
 8017272:	0002      	movs	r2, r0
 8017274:	1dfb      	adds	r3, r7, #7
 8017276:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 8017278:	1dfb      	adds	r3, r7, #7
 801727a:	781a      	ldrb	r2, [r3, #0]
 801727c:	4b05      	ldr	r3, [pc, #20]	@ (8017294 <USBPD_PE_TaskWakeUp+0x28>)
 801727e:	0092      	lsls	r2, r2, #2
 8017280:	58d3      	ldr	r3, [r2, r3]
 8017282:	4905      	ldr	r1, [pc, #20]	@ (8017298 <USBPD_PE_TaskWakeUp+0x2c>)
 8017284:	2200      	movs	r2, #0
 8017286:	0018      	movs	r0, r3
 8017288:	f7fd fe7a 	bl	8014f80 <osMessagePut>
}
 801728c:	46c0      	nop			@ (mov r8, r8)
 801728e:	46bd      	mov	sp, r7
 8017290:	b002      	add	sp, #8
 8017292:	bd80      	pop	{r7, pc}
 8017294:	200020a8 	.word	0x200020a8
 8017298:	0000ffff 	.word	0x0000ffff

0801729c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 80172a0:	4b04      	ldr	r3, [pc, #16]	@ (80172b4 <USBPD_DPM_CADTaskWakeUp+0x18>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	4904      	ldr	r1, [pc, #16]	@ (80172b8 <USBPD_DPM_CADTaskWakeUp+0x1c>)
 80172a6:	2200      	movs	r2, #0
 80172a8:	0018      	movs	r0, r3
 80172aa:	f7fd fe69 	bl	8014f80 <osMessagePut>
}
 80172ae:	46c0      	nop			@ (mov r8, r8)
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}
 80172b4:	200020a0 	.word	0x200020a0
 80172b8:	0000ffff 	.word	0x0000ffff

080172bc <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 80172bc:	b590      	push	{r4, r7, lr}
 80172be:	b089      	sub	sp, #36	@ 0x24
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 80172c4:	697a      	ldr	r2, [r7, #20]
 80172c6:	231f      	movs	r3, #31
 80172c8:	18fb      	adds	r3, r7, r3
 80172ca:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 80172cc:	231f      	movs	r3, #31
 80172ce:	18fb      	adds	r3, r7, r3
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	4a11      	ldr	r2, [pc, #68]	@ (8017318 <USBPD_PE_Task+0x5c>)
 80172d4:	009b      	lsls	r3, r3, #2
 80172d6:	18d3      	adds	r3, r2, r3
 80172d8:	785b      	ldrb	r3, [r3, #1]
 80172da:	06db      	lsls	r3, r3, #27
 80172dc:	0fdb      	lsrs	r3, r3, #31
 80172de:	b2db      	uxtb	r3, r3
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d105      	bne.n	80172f0 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 80172e4:	f7fd fe1d 	bl	8014f22 <osThreadGetId>
 80172e8:	0003      	movs	r3, r0
 80172ea:	0018      	movs	r0, r3
 80172ec:	f7fd fef4 	bl	80150d8 <osThreadSuspend>
    }

    _timing = USBPD_PE_StateMachine_SNK(_port);
 80172f0:	241f      	movs	r4, #31
 80172f2:	193b      	adds	r3, r7, r4
 80172f4:	781b      	ldrb	r3, [r3, #0]
 80172f6:	0018      	movs	r0, r3
 80172f8:	f7ea fd96 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 80172fc:	0003      	movs	r3, r0
 80172fe:	61bb      	str	r3, [r7, #24]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 8017300:	193b      	adds	r3, r7, r4
 8017302:	781a      	ldrb	r2, [r3, #0]
 8017304:	4b05      	ldr	r3, [pc, #20]	@ (801731c <USBPD_PE_Task+0x60>)
 8017306:	0092      	lsls	r2, r2, #2
 8017308:	58d1      	ldr	r1, [r2, r3]
 801730a:	003b      	movs	r3, r7
 801730c:	69ba      	ldr	r2, [r7, #24]
 801730e:	0018      	movs	r0, r3
 8017310:	f7fd fe72 	bl	8014ff8 <osMessageGet>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8017314:	e7da      	b.n	80172cc <USBPD_PE_Task+0x10>
 8017316:	46c0      	nop			@ (mov r8, r8)
 8017318:	200020ac 	.word	0x200020ac
 801731c:	200020a8 	.word	0x200020a8

08017320 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b088      	sub	sp, #32
 8017324:	af00      	add	r7, sp, #0
 8017326:	6178      	str	r0, [r7, #20]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 8017328:	f7e8 ff22 	bl	8000170 <USBPD_CAD_Process>
 801732c:	0003      	movs	r3, r0
 801732e:	61fb      	str	r3, [r7, #28]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 8017330:	4b04      	ldr	r3, [pc, #16]	@ (8017344 <USBPD_CAD_Task+0x24>)
 8017332:	6819      	ldr	r1, [r3, #0]
 8017334:	003b      	movs	r3, r7
 8017336:	69fa      	ldr	r2, [r7, #28]
 8017338:	0018      	movs	r0, r3
 801733a:	f7fd fe5d 	bl	8014ff8 <osMessageGet>
    _timing = USBPD_CAD_Process();
 801733e:	46c0      	nop			@ (mov r8, r8)
 8017340:	e7f2      	b.n	8017328 <USBPD_CAD_Task+0x8>
 8017342:	46c0      	nop			@ (mov r8, r8)
 8017344:	200020a0 	.word	0x200020a0

08017348 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b084      	sub	sp, #16
 801734c:	af00      	add	r7, sp, #0
 801734e:	603a      	str	r2, [r7, #0]
 8017350:	1dfb      	adds	r3, r7, #7
 8017352:	1c02      	adds	r2, r0, #0
 8017354:	701a      	strb	r2, [r3, #0]
 8017356:	1dbb      	adds	r3, r7, #6
 8017358:	1c0a      	adds	r2, r1, #0
 801735a:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 801735c:	1dbb      	adds	r3, r7, #6
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	2b04      	cmp	r3, #4
 8017362:	d009      	beq.n	8017378 <USBPD_DPM_CADCallback+0x30>
 8017364:	dd00      	ble.n	8017368 <USBPD_DPM_CADCallback+0x20>
 8017366:	e06f      	b.n	8017448 <USBPD_DPM_CADCallback+0x100>
 8017368:	2b03      	cmp	r3, #3
 801736a:	d01d      	beq.n	80173a8 <USBPD_DPM_CADCallback+0x60>
 801736c:	dc6c      	bgt.n	8017448 <USBPD_DPM_CADCallback+0x100>
 801736e:	2b01      	cmp	r3, #1
 8017370:	d01a      	beq.n	80173a8 <USBPD_DPM_CADCallback+0x60>
 8017372:	2b02      	cmp	r3, #2
 8017374:	d00c      	beq.n	8017390 <USBPD_DPM_CADCallback+0x48>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8017376:	e067      	b.n	8017448 <USBPD_DPM_CADCallback+0x100>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8017378:	1dfb      	adds	r3, r7, #7
 801737a:	781b      	ldrb	r3, [r3, #0]
 801737c:	2104      	movs	r1, #4
 801737e:	0018      	movs	r0, r3
 8017380:	f000 f984 	bl	801768c <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8017384:	1dfb      	adds	r3, r7, #7
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	0018      	movs	r0, r3
 801738a:	f000 f867 	bl	801745c <DPM_StartPETask>
      break;
 801738e:	e05c      	b.n	801744a <USBPD_DPM_CADCallback+0x102>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 8017390:	1dfb      	adds	r3, r7, #7
 8017392:	781b      	ldrb	r3, [r3, #0]
 8017394:	2102      	movs	r1, #2
 8017396:	0018      	movs	r0, r3
 8017398:	f000 f978 	bl	801768c <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801739c:	1dfb      	adds	r3, r7, #7
 801739e:	781b      	ldrb	r3, [r3, #0]
 80173a0:	0018      	movs	r0, r3
 80173a2:	f000 f85b 	bl	801745c <DPM_StartPETask>
      break;
 80173a6:	e050      	b.n	801744a <USBPD_DPM_CADCallback+0x102>
      uint8_t _timeout = 0;
 80173a8:	230f      	movs	r3, #15
 80173aa:	18fb      	adds	r3, r7, r3
 80173ac:	2200      	movs	r2, #0
 80173ae:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 80173b0:	1dfb      	adds	r3, r7, #7
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	0018      	movs	r0, r3
 80173b6:	f7ff ff59 	bl	801726c <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 80173ba:	e015      	b.n	80173e8 <USBPD_DPM_CADCallback+0xa0>
        (void)OS_DELAY(1);
 80173bc:	2001      	movs	r0, #1
 80173be:	f7fd fdb8 	bl	8014f32 <osDelay>
        _timeout++;
 80173c2:	210f      	movs	r1, #15
 80173c4:	187b      	adds	r3, r7, r1
 80173c6:	781a      	ldrb	r2, [r3, #0]
 80173c8:	187b      	adds	r3, r7, r1
 80173ca:	3201      	adds	r2, #1
 80173cc:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 80173ce:	187b      	adds	r3, r7, r1
 80173d0:	781b      	ldrb	r3, [r3, #0]
 80173d2:	2b1e      	cmp	r3, #30
 80173d4:	d908      	bls.n	80173e8 <USBPD_DPM_CADCallback+0xa0>
          (void)OS_TASK_SUSPEND(DPM_PEThreadId_Table[PortNum]);
 80173d6:	1dfb      	adds	r3, r7, #7
 80173d8:	781a      	ldrb	r2, [r3, #0]
 80173da:	4b1e      	ldr	r3, [pc, #120]	@ (8017454 <USBPD_DPM_CADCallback+0x10c>)
 80173dc:	0092      	lsls	r2, r2, #2
 80173de:	58d3      	ldr	r3, [r2, r3]
 80173e0:	0018      	movs	r0, r3
 80173e2:	f7fd fe79 	bl	80150d8 <osThreadSuspend>
          break;
 80173e6:	e00a      	b.n	80173fe <USBPD_DPM_CADCallback+0xb6>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 80173e8:	1dfb      	adds	r3, r7, #7
 80173ea:	781a      	ldrb	r2, [r3, #0]
 80173ec:	4b19      	ldr	r3, [pc, #100]	@ (8017454 <USBPD_DPM_CADCallback+0x10c>)
 80173ee:	0092      	lsls	r2, r2, #2
 80173f0:	58d3      	ldr	r3, [r2, r3]
 80173f2:	0018      	movs	r0, r3
 80173f4:	f7fe fcba 	bl	8015d6c <eTaskGetState>
 80173f8:	0003      	movs	r3, r0
 80173fa:	2b03      	cmp	r3, #3
 80173fc:	d1de      	bne.n	80173bc <USBPD_DPM_CADCallback+0x74>
      USBPD_PE_StateMachine_Stop(PortNum);
 80173fe:	1dfb      	adds	r3, r7, #7
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	0018      	movs	r0, r3
 8017404:	f7e9 f829 	bl	800045a <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8017408:	1dfb      	adds	r3, r7, #7
 801740a:	781a      	ldrb	r2, [r3, #0]
 801740c:	4b12      	ldr	r3, [pc, #72]	@ (8017458 <USBPD_DPM_CADCallback+0x110>)
 801740e:	0092      	lsls	r2, r2, #2
 8017410:	5cd1      	ldrb	r1, [r2, r3]
 8017412:	2010      	movs	r0, #16
 8017414:	4381      	bics	r1, r0
 8017416:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8017418:	1dfb      	adds	r3, r7, #7
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	4a0e      	ldr	r2, [pc, #56]	@ (8017458 <USBPD_DPM_CADCallback+0x110>)
 801741e:	009b      	lsls	r3, r3, #2
 8017420:	18d3      	adds	r3, r2, r3
 8017422:	785a      	ldrb	r2, [r3, #1]
 8017424:	2107      	movs	r1, #7
 8017426:	438a      	bics	r2, r1
 8017428:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801742a:	1dbb      	adds	r3, r7, #6
 801742c:	781a      	ldrb	r2, [r3, #0]
 801742e:	1dfb      	adds	r3, r7, #7
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	0011      	movs	r1, r2
 8017434:	0018      	movs	r0, r3
 8017436:	f000 f929 	bl	801768c <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 801743a:	1dfb      	adds	r3, r7, #7
 801743c:	781b      	ldrb	r3, [r3, #0]
 801743e:	2169      	movs	r1, #105	@ 0x69
 8017440:	0018      	movs	r0, r3
 8017442:	f000 f930 	bl	80176a6 <USBPD_DPM_Notification>
      break;
 8017446:	e000      	b.n	801744a <USBPD_DPM_CADCallback+0x102>
      break;
 8017448:	46c0      	nop			@ (mov r8, r8)
  }
}
 801744a:	46c0      	nop			@ (mov r8, r8)
 801744c:	46bd      	mov	sp, r7
 801744e:	b004      	add	sp, #16
 8017450:	bd80      	pop	{r7, pc}
 8017452:	46c0      	nop			@ (mov r8, r8)
 8017454:	2000209c 	.word	0x2000209c
 8017458:	200020ac 	.word	0x200020ac

0801745c <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	0002      	movs	r2, r0
 8017464:	1dfb      	adds	r3, r7, #7
 8017466:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8017468:	1dfb      	adds	r3, r7, #7
 801746a:	781b      	ldrb	r3, [r3, #0]
 801746c:	0018      	movs	r0, r3
 801746e:	f7e8 ffee 	bl	800044e <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 8017472:	1dfb      	adds	r3, r7, #7
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	2b01      	cmp	r3, #1
 8017478:	d808      	bhi.n	801748c <DPM_StartPETask+0x30>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 801747a:	1dfb      	adds	r3, r7, #7
 801747c:	781a      	ldrb	r2, [r3, #0]
 801747e:	4b0a      	ldr	r3, [pc, #40]	@ (80174a8 <DPM_StartPETask+0x4c>)
 8017480:	0092      	lsls	r2, r2, #2
 8017482:	58d3      	ldr	r3, [r2, r3]
 8017484:	0018      	movs	r0, r3
 8017486:	f7fd fe35 	bl	80150f4 <osThreadResume>
      break;
 801748a:	e002      	b.n	8017492 <DPM_StartPETask+0x36>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 801748c:	f000 f80e 	bl	80174ac <USBPD_DPM_ErrorHandler>
      break;
 8017490:	46c0      	nop			@ (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8017492:	1dfb      	adds	r3, r7, #7
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	2168      	movs	r1, #104	@ 0x68
 8017498:	0018      	movs	r0, r3
 801749a:	f000 f904 	bl	80176a6 <USBPD_DPM_Notification>
}
 801749e:	46c0      	nop			@ (mov r8, r8)
 80174a0:	46bd      	mov	sp, r7
 80174a2:	b002      	add	sp, #8
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	46c0      	nop			@ (mov r8, r8)
 80174a8:	2000209c 	.word	0x2000209c

080174ac <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 80174b0:	46c0      	nop			@ (mov r8, r8)
 80174b2:	e7fd      	b.n	80174b0 <USBPD_DPM_ErrorHandler+0x4>

080174b4 <USBPD_PWR_IF_Init>:
  * @brief  Initialize structures and variables related to power board profiles
  *         used by Sink and Source, for all available ports.
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_Init(void)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b082      	sub	sp, #8
 80174b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_PWR_IF_Init */
	  USBPD_StatusTypeDef _status = USBPD_OK;
 80174ba:	1dfb      	adds	r3, r7, #7
 80174bc:	2200      	movs	r2, #0
 80174be:	701a      	strb	r2, [r3, #0]

	  PWR_Port_PDO_Storage[USBPD_PORT_0].SinkPDO.ListOfPDO = (uint32_t *)PORT0_PDO_ListSNK;
 80174c0:	4b05      	ldr	r3, [pc, #20]	@ (80174d8 <USBPD_PWR_IF_Init+0x24>)
 80174c2:	4a06      	ldr	r2, [pc, #24]	@ (80174dc <USBPD_PWR_IF_Init+0x28>)
 80174c4:	609a      	str	r2, [r3, #8]
	  PWR_Port_PDO_Storage[USBPD_PORT_0].SinkPDO.NumberOfPDO = &USBPD_NbPDO[0];
 80174c6:	4b04      	ldr	r3, [pc, #16]	@ (80174d8 <USBPD_PWR_IF_Init+0x24>)
 80174c8:	4a05      	ldr	r2, [pc, #20]	@ (80174e0 <USBPD_PWR_IF_Init+0x2c>)
 80174ca:	60da      	str	r2, [r3, #12]

	  return _status;
 80174cc:	1dfb      	adds	r3, r7, #7
 80174ce:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_Init */
}
 80174d0:	0018      	movs	r0, r3
 80174d2:	46bd      	mov	sp, r7
 80174d4:	b002      	add	sp, #8
 80174d6:	bd80      	pop	{r7, pc}
 80174d8:	200020b0 	.word	0x200020b0
 80174dc:	20000128 	.word	0x20000128
 80174e0:	20000124 	.word	0x20000124

080174e4 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	0002      	movs	r2, r0
 80174ec:	1dfb      	adds	r3, r7, #7
 80174ee:	701a      	strb	r2, [r3, #0]
 80174f0:	1dbb      	adds	r3, r7, #6
 80174f2:	1c0a      	adds	r2, r1, #0
 80174f4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 80174f6:	230f      	movs	r3, #15
 80174f8:	18fb      	adds	r3, r7, r3
 80174fa:	2202      	movs	r2, #2
 80174fc:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 80174fe:	1dfb      	adds	r3, r7, #7
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d001      	beq.n	801750a <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8017506:	2302      	movs	r3, #2
 8017508:	e024      	b.n	8017554 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801750a:	1dfb      	adds	r3, r7, #7
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	2208      	movs	r2, #8
 8017510:	18ba      	adds	r2, r7, r2
 8017512:	0011      	movs	r1, r2
 8017514:	0018      	movs	r0, r3
 8017516:	f001 fa83 	bl	8018a20 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 801751a:	1dbb      	adds	r3, r7, #6
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d10a      	bne.n	8017538 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	4a0d      	ldr	r2, [pc, #52]	@ (801755c <USBPD_PWR_IF_SupplyReady+0x78>)
 8017526:	4293      	cmp	r3, r2
 8017528:	d801      	bhi.n	801752e <USBPD_PWR_IF_SupplyReady+0x4a>
 801752a:	2200      	movs	r2, #0
 801752c:	e000      	b.n	8017530 <USBPD_PWR_IF_SupplyReady+0x4c>
 801752e:	2202      	movs	r2, #2
 8017530:	230f      	movs	r3, #15
 8017532:	18fb      	adds	r3, r7, r3
 8017534:	701a      	strb	r2, [r3, #0]
 8017536:	e00a      	b.n	801754e <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8017538:	68ba      	ldr	r2, [r7, #8]
 801753a:	23af      	movs	r3, #175	@ 0xaf
 801753c:	011b      	lsls	r3, r3, #4
 801753e:	429a      	cmp	r2, r3
 8017540:	d901      	bls.n	8017546 <USBPD_PWR_IF_SupplyReady+0x62>
 8017542:	2200      	movs	r2, #0
 8017544:	e000      	b.n	8017548 <USBPD_PWR_IF_SupplyReady+0x64>
 8017546:	2202      	movs	r2, #2
 8017548:	230f      	movs	r3, #15
 801754a:	18fb      	adds	r3, r7, r3
 801754c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801754e:	230f      	movs	r3, #15
 8017550:	18fb      	adds	r3, r7, r3
 8017552:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8017554:	0018      	movs	r0, r3
 8017556:	46bd      	mov	sp, r7
 8017558:	b004      	add	sp, #16
 801755a:	bd80      	pop	{r7, pc}
 801755c:	000002ed 	.word	0x000002ed

08017560 <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8017560:	b590      	push	{r4, r7, lr}
 8017562:	b085      	sub	sp, #20
 8017564:	af00      	add	r7, sp, #0
 8017566:	60ba      	str	r2, [r7, #8]
 8017568:	607b      	str	r3, [r7, #4]
 801756a:	230f      	movs	r3, #15
 801756c:	18fb      	adds	r3, r7, r3
 801756e:	1c02      	adds	r2, r0, #0
 8017570:	701a      	strb	r2, [r3, #0]
 8017572:	240e      	movs	r4, #14
 8017574:	193b      	adds	r3, r7, r4
 8017576:	1c0a      	adds	r2, r1, #0
 8017578:	701a      	strb	r2, [r3, #0]
    {
      *Size = PORT0_NB_SINKPDO;
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	2201      	movs	r2, #1
 801757e:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * PORT0_NB_SINKPDO);
 8017580:	490d      	ldr	r1, [pc, #52]	@ (80175b8 <USBPD_PWR_IF_GetPortPDOs+0x58>)
 8017582:	68bb      	ldr	r3, [r7, #8]
 8017584:	2204      	movs	r2, #4
 8017586:	0018      	movs	r0, r3
 8017588:	f002 f97a 	bl	8019880 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */
    if (DataId == USBPD_CORE_DATATYPE_SRC_PDO)
 801758c:	193b      	adds	r3, r7, r4
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d103      	bne.n	801759c <USBPD_PWR_IF_GetPortPDOs+0x3c>
    {
  #if defined (_GUI_INTERFACE)
      *Size = USBPD_NbPDO[1];
      memcpy(Ptr,PORT0_PDO_ListSRC, sizeof(uint32_t) * USBPD_NbPDO[1]);
  #else
      *Size = PORT0_NB_SOURCEPDO;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2200      	movs	r2, #0
 8017598:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * PORT0_NB_SINKPDO);
  #endif /* _GUI_INTERFACE */
    }

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 801759a:	e008      	b.n	80175ae <USBPD_PWR_IF_GetPortPDOs+0x4e>
      *Size = PORT0_NB_SINKPDO;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2201      	movs	r2, #1
 80175a0:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * PORT0_NB_SINKPDO);
 80175a2:	4905      	ldr	r1, [pc, #20]	@ (80175b8 <USBPD_PWR_IF_GetPortPDOs+0x58>)
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	2204      	movs	r2, #4
 80175a8:	0018      	movs	r0, r3
 80175aa:	f002 f969 	bl	8019880 <memcpy>
}
 80175ae:	46c0      	nop			@ (mov r8, r8)
 80175b0:	46bd      	mov	sp, r7
 80175b2:	b005      	add	sp, #20
 80175b4:	bd90      	pop	{r4, r7, pc}
 80175b6:	46c0      	nop			@ (mov r8, r8)
 80175b8:	20000128 	.word	0x20000128

080175bc <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	0002      	movs	r2, r0
 80175c4:	1dfb      	adds	r3, r7, #7
 80175c6:	701a      	strb	r2, [r3, #0]
 80175c8:	1dbb      	adds	r3, r7, #6
 80175ca:	1c0a      	adds	r2, r1, #0
 80175cc:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 80175ce:	230f      	movs	r3, #15
 80175d0:	18fb      	adds	r3, r7, r3
 80175d2:	2200      	movs	r2, #0
 80175d4:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 80175d6:	1dfb      	adds	r3, r7, #7
 80175d8:	781b      	ldrb	r3, [r3, #0]
 80175da:	0018      	movs	r0, r3
 80175dc:	f7fa ff0e 	bl	80123fc <HW_IF_PWR_GetVoltage>
 80175e0:	0003      	movs	r3, r0
 80175e2:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 80175e4:	1dbb      	adds	r3, r7, #6
 80175e6:	781b      	ldrb	r3, [r3, #0]
 80175e8:	2b02      	cmp	r3, #2
 80175ea:	d018      	beq.n	801761e <USBPD_PWR_IF_GetVBUSStatus+0x62>
 80175ec:	dc21      	bgt.n	8017632 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d002      	beq.n	80175f8 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 80175f2:	2b01      	cmp	r3, #1
 80175f4:	d009      	beq.n	801760a <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 80175f6:	e01c      	b.n	8017632 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	4a15      	ldr	r2, [pc, #84]	@ (8017650 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 80175fc:	4293      	cmp	r3, r2
 80175fe:	d81a      	bhi.n	8017636 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8017600:	230f      	movs	r3, #15
 8017602:	18fb      	adds	r3, r7, r3
 8017604:	2201      	movs	r2, #1
 8017606:	701a      	strb	r2, [r3, #0]
    break;
 8017608:	e015      	b.n	8017636 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801760a:	68ba      	ldr	r2, [r7, #8]
 801760c:	23af      	movs	r3, #175	@ 0xaf
 801760e:	011b      	lsls	r3, r3, #4
 8017610:	429a      	cmp	r2, r3
 8017612:	d312      	bcc.n	801763a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 8017614:	230f      	movs	r3, #15
 8017616:	18fb      	adds	r3, r7, r3
 8017618:	2201      	movs	r2, #1
 801761a:	701a      	strb	r2, [r3, #0]
    break;
 801761c:	e00d      	b.n	801763a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801761e:	68ba      	ldr	r2, [r7, #8]
 8017620:	23af      	movs	r3, #175	@ 0xaf
 8017622:	011b      	lsls	r3, r3, #4
 8017624:	429a      	cmp	r2, r3
 8017626:	d20a      	bcs.n	801763e <USBPD_PWR_IF_GetVBUSStatus+0x82>
 8017628:	230f      	movs	r3, #15
 801762a:	18fb      	adds	r3, r7, r3
 801762c:	2201      	movs	r2, #1
 801762e:	701a      	strb	r2, [r3, #0]
    break;
 8017630:	e005      	b.n	801763e <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 8017632:	46c0      	nop			@ (mov r8, r8)
 8017634:	e004      	b.n	8017640 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8017636:	46c0      	nop			@ (mov r8, r8)
 8017638:	e002      	b.n	8017640 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801763a:	46c0      	nop			@ (mov r8, r8)
 801763c:	e000      	b.n	8017640 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801763e:	46c0      	nop			@ (mov r8, r8)
  }
  return _status;
 8017640:	230f      	movs	r3, #15
 8017642:	18fb      	adds	r3, r7, r3
 8017644:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8017646:	0018      	movs	r0, r3
 8017648:	46bd      	mov	sp, r7
 801764a:	b004      	add	sp, #16
 801764c:	bd80      	pop	{r7, pc}
 801764e:	46c0      	nop			@ (mov r8, r8)
 8017650:	000002ed 	.word	0x000002ed

08017654 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
	{
	 /* PWR_IF initialization */
	 if(USBPD_OK != USBPD_PWR_IF_Init())
 8017658:	f7ff ff2c 	bl	80174b4 <USBPD_PWR_IF_Init>
 801765c:	1e03      	subs	r3, r0, #0
 801765e:	d001      	beq.n	8017664 <USBPD_DPM_UserInit+0x10>
	 {
	 return USBPD_ERROR;
 8017660:	2302      	movs	r3, #2
 8017662:	e00e      	b.n	8017682 <USBPD_DPM_UserInit+0x2e>
	 }
	 /* VDM initialisation */
	 if(USBPD_TRUE == DPM_Settings[USBPD_PORT_0].PE_VDMSupport)
 8017664:	4b08      	ldr	r3, [pc, #32]	@ (8017688 <USBPD_DPM_UserInit+0x34>)
 8017666:	791b      	ldrb	r3, [r3, #4]
 8017668:	2220      	movs	r2, #32
 801766a:	4013      	ands	r3, r2
 801766c:	b2db      	uxtb	r3, r3
 801766e:	2b00      	cmp	r3, #0
 8017670:	d006      	beq.n	8017680 <USBPD_DPM_UserInit+0x2c>
	 {
	 if (USBPD_OK != USBPD_VDM_UserInit(USBPD_PORT_0))
 8017672:	2000      	movs	r0, #0
 8017674:	f001 fa24 	bl	8018ac0 <USBPD_VDM_UserInit>
 8017678:	1e03      	subs	r3, r0, #0
 801767a:	d001      	beq.n	8017680 <USBPD_DPM_UserInit+0x2c>
	 {
	 return USBPD_ERROR;
 801767c:	2302      	movs	r3, #2
 801767e:	e000      	b.n	8017682 <USBPD_DPM_UserInit+0x2e>
	 }
	 }
	 return USBPD_OK;
 8017680:	2300      	movs	r3, #0
	}
/* USER CODE END USBPD_DPM_UserInit */
}
 8017682:	0018      	movs	r0, r3
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	200000c4 	.word	0x200000c4

0801768c <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
 8017692:	0002      	movs	r2, r0
 8017694:	1dfb      	adds	r3, r7, #7
 8017696:	701a      	strb	r2, [r3, #0]
 8017698:	1dbb      	adds	r3, r7, #6
 801769a:	1c0a      	adds	r2, r1, #0
 801769c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801769e:	46c0      	nop			@ (mov r8, r8)
 80176a0:	46bd      	mov	sp, r7
 80176a2:	b002      	add	sp, #8
 80176a4:	bd80      	pop	{r7, pc}

080176a6 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 80176a6:	b580      	push	{r7, lr}
 80176a8:	b082      	sub	sp, #8
 80176aa:	af00      	add	r7, sp, #0
 80176ac:	0002      	movs	r2, r0
 80176ae:	1dfb      	adds	r3, r7, #7
 80176b0:	701a      	strb	r2, [r3, #0]
 80176b2:	1dbb      	adds	r3, r7, #6
 80176b4:	1c0a      	adds	r2, r1, #0
 80176b6:	701a      	strb	r2, [r3, #0]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 80176b8:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 80176ba:	46c0      	nop			@ (mov r8, r8)
 80176bc:	46bd      	mov	sp, r7
 80176be:	b002      	add	sp, #8
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 80176c2:	b580      	push	{r7, lr}
 80176c4:	b082      	sub	sp, #8
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	6039      	str	r1, [r7, #0]
 80176ca:	0011      	movs	r1, r2
 80176cc:	1dfb      	adds	r3, r7, #7
 80176ce:	1c02      	adds	r2, r0, #0
 80176d0:	701a      	strb	r2, [r3, #0]
 80176d2:	1dbb      	adds	r3, r7, #6
 80176d4:	1c0a      	adds	r2, r1, #0
 80176d6:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 80176d8:	46c0      	nop			@ (mov r8, r8)
 80176da:	46bd      	mov	sp, r7
 80176dc:	b002      	add	sp, #8
 80176de:	bd80      	pop	{r7, pc}

080176e0 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80176e0:	b590      	push	{r4, r7, lr}
 80176e2:	b087      	sub	sp, #28
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	60ba      	str	r2, [r7, #8]
 80176e8:	607b      	str	r3, [r7, #4]
 80176ea:	230f      	movs	r3, #15
 80176ec:	18fb      	adds	r3, r7, r3
 80176ee:	1c02      	adds	r2, r0, #0
 80176f0:	701a      	strb	r2, [r3, #0]
 80176f2:	200e      	movs	r0, #14
 80176f4:	183b      	adds	r3, r7, r0
 80176f6:	1c0a      	adds	r2, r1, #0
 80176f8:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 80176fa:	183b      	adds	r3, r7, r0
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	2b14      	cmp	r3, #20
 8017700:	d02b      	beq.n	801775a <USBPD_DPM_GetDataInfo+0x7a>
 8017702:	dc5a      	bgt.n	80177ba <USBPD_DPM_GetDataInfo+0xda>
 8017704:	2b01      	cmp	r3, #1
 8017706:	d002      	beq.n	801770e <USBPD_DPM_GetDataInfo+0x2e>
 8017708:	2b03      	cmp	r3, #3
 801770a:	d011      	beq.n	8017730 <USBPD_DPM_GetDataInfo+0x50>
    }
    break;
#endif /* USBPD_CORE_SNK_EXTENDED_CAPA */
  default:
	    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 801770c:	e055      	b.n	80177ba <USBPD_DPM_GetDataInfo+0xda>
    USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801770e:	687c      	ldr	r4, [r7, #4]
 8017710:	68ba      	ldr	r2, [r7, #8]
 8017712:	230e      	movs	r3, #14
 8017714:	18fb      	adds	r3, r7, r3
 8017716:	7819      	ldrb	r1, [r3, #0]
 8017718:	230f      	movs	r3, #15
 801771a:	18fb      	adds	r3, r7, r3
 801771c:	7818      	ldrb	r0, [r3, #0]
 801771e:	0023      	movs	r3, r4
 8017720:	f7ff ff1e 	bl	8017560 <USBPD_PWR_IF_GetPortPDOs>
    *Size *= 4;
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	009a      	lsls	r2, r3, #2
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	601a      	str	r2, [r3, #0]
    break;
 801772e:	e045      	b.n	80177bc <USBPD_DPM_GetDataInfo+0xdc>
    *Size = 4;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2204      	movs	r2, #4
 8017734:	601a      	str	r2, [r3, #0]
    (void)memcpy((uint8_t*)Ptr, (uint8_t *)&DPM_Ports[PortNum].DPM_RequestedVoltage, *Size);
 8017736:	230f      	movs	r3, #15
 8017738:	18fb      	adds	r3, r7, r3
 801773a:	781a      	ldrb	r2, [r3, #0]
 801773c:	0013      	movs	r3, r2
 801773e:	011b      	lsls	r3, r3, #4
 8017740:	1a9b      	subs	r3, r3, r2
 8017742:	00db      	lsls	r3, r3, #3
 8017744:	3370      	adds	r3, #112	@ 0x70
 8017746:	001a      	movs	r2, r3
 8017748:	4b1e      	ldr	r3, [pc, #120]	@ (80177c4 <USBPD_DPM_GetDataInfo+0xe4>)
 801774a:	18d1      	adds	r1, r2, r3
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681a      	ldr	r2, [r3, #0]
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	0018      	movs	r0, r3
 8017754:	f002 f894 	bl	8019880 <memcpy>
    break;
 8017758:	e030      	b.n	80177bc <USBPD_DPM_GetDataInfo+0xdc>
      *Size = sizeof(USBPD_RevisionDO_TypeDef);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	2204      	movs	r2, #4
 801775e:	601a      	str	r2, [r3, #0]
      USBPD_RevisionDO_TypeDef rev =
 8017760:	2300      	movs	r3, #0
 8017762:	617b      	str	r3, [r7, #20]
 8017764:	2016      	movs	r0, #22
 8017766:	183b      	adds	r3, r7, r0
 8017768:	781a      	ldrb	r2, [r3, #0]
 801776a:	210f      	movs	r1, #15
 801776c:	438a      	bics	r2, r1
 801776e:	1c11      	adds	r1, r2, #0
 8017770:	2207      	movs	r2, #7
 8017772:	430a      	orrs	r2, r1
 8017774:	701a      	strb	r2, [r3, #0]
 8017776:	183b      	adds	r3, r7, r0
 8017778:	781a      	ldrb	r2, [r3, #0]
 801777a:	210f      	movs	r1, #15
 801777c:	400a      	ands	r2, r1
 801777e:	1c11      	adds	r1, r2, #0
 8017780:	2210      	movs	r2, #16
 8017782:	430a      	orrs	r2, r1
 8017784:	701a      	strb	r2, [r3, #0]
 8017786:	2017      	movs	r0, #23
 8017788:	183b      	adds	r3, r7, r0
 801778a:	781a      	ldrb	r2, [r3, #0]
 801778c:	210f      	movs	r1, #15
 801778e:	438a      	bics	r2, r1
 8017790:	1c11      	adds	r1, r2, #0
 8017792:	2201      	movs	r2, #1
 8017794:	430a      	orrs	r2, r1
 8017796:	701a      	strb	r2, [r3, #0]
 8017798:	183b      	adds	r3, r7, r0
 801779a:	781a      	ldrb	r2, [r3, #0]
 801779c:	210f      	movs	r1, #15
 801779e:	400a      	ands	r2, r1
 80177a0:	1c11      	adds	r1, r2, #0
 80177a2:	2230      	movs	r2, #48	@ 0x30
 80177a4:	430a      	orrs	r2, r1
 80177a6:	701a      	strb	r2, [r3, #0]
      memcpy((uint8_t *)Ptr, &rev, *Size);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	2314      	movs	r3, #20
 80177ae:	18f9      	adds	r1, r7, r3
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	0018      	movs	r0, r3
 80177b4:	f002 f864 	bl	8019880 <memcpy>
      break;
 80177b8:	e000      	b.n	80177bc <USBPD_DPM_GetDataInfo+0xdc>
    break;
 80177ba:	46c0      	nop			@ (mov r8, r8)
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 80177bc:	46c0      	nop			@ (mov r8, r8)
 80177be:	46bd      	mov	sp, r7
 80177c0:	b007      	add	sp, #28
 80177c2:	bd90      	pop	{r4, r7, pc}
 80177c4:	200020c4 	.word	0x200020c4

080177c8 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b08a      	sub	sp, #40	@ 0x28
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	60ba      	str	r2, [r7, #8]
 80177d0:	607b      	str	r3, [r7, #4]
 80177d2:	230f      	movs	r3, #15
 80177d4:	18fb      	adds	r3, r7, r3
 80177d6:	1c02      	adds	r2, r0, #0
 80177d8:	701a      	strb	r2, [r3, #0]
 80177da:	200e      	movs	r0, #14
 80177dc:	183b      	adds	r3, r7, r0
 80177de:	1c0a      	adds	r2, r1, #0
 80177e0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 80177e2:	183b      	adds	r3, r7, r0
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	3b04      	subs	r3, #4
 80177e8:	2b10      	cmp	r3, #16
 80177ea:	d900      	bls.n	80177ee <USBPD_DPM_SetDataInfo+0x26>
 80177ec:	e07a      	b.n	80178e4 <USBPD_DPM_SetDataInfo+0x11c>
 80177ee:	009a      	lsls	r2, r3, #2
 80177f0:	4b41      	ldr	r3, [pc, #260]	@ (80178f8 <USBPD_DPM_SetDataInfo+0x130>)
 80177f2:	18d3      	adds	r3, r2, r3
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	469f      	mov	pc, r3
  {
  case USBPD_CORE_DATATYPE_RCV_REQ_PDO :  /*!< Storage of Received Sink Request PDO value                */
    if (Size == 4)
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2b04      	cmp	r3, #4
 80177fc:	d174      	bne.n	80178e8 <USBPD_DPM_SetDataInfo+0x120>
    {
      memcpy((uint8_t *)&DPM_Ports[PortNum].DPM_RcvRequestDOMsg,  Ptr, 4);
 80177fe:	230f      	movs	r3, #15
 8017800:	18fb      	adds	r3, r7, r3
 8017802:	781a      	ldrb	r2, [r3, #0]
 8017804:	0013      	movs	r3, r2
 8017806:	011b      	lsls	r3, r3, #4
 8017808:	1a9b      	subs	r3, r3, r2
 801780a:	00db      	lsls	r3, r3, #3
 801780c:	3340      	adds	r3, #64	@ 0x40
 801780e:	001a      	movs	r2, r3
 8017810:	4b3a      	ldr	r3, [pc, #232]	@ (80178fc <USBPD_DPM_SetDataInfo+0x134>)
 8017812:	18d3      	adds	r3, r2, r3
 8017814:	68b9      	ldr	r1, [r7, #8]
 8017816:	2204      	movs	r2, #4
 8017818:	0018      	movs	r0, r3
 801781a:	f002 f831 	bl	8019880 <memcpy>
    }
    break;
 801781e:	e063      	b.n	80178e8 <USBPD_DPM_SetDataInfo+0x120>

    /* Case Received Source PDO values Data information : */
  case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
    if (Size <= (USBPD_MAX_NB_PDO * 4))
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b1c      	cmp	r3, #28
 8017824:	d862      	bhi.n	80178ec <USBPD_DPM_SetDataInfo+0x124>
    {
      uint8_t* rdo;
      DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4);
 8017826:	230f      	movs	r3, #15
 8017828:	18fb      	adds	r3, r7, r3
 801782a:	781a      	ldrb	r2, [r3, #0]
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	0899      	lsrs	r1, r3, #2
 8017830:	4832      	ldr	r0, [pc, #200]	@ (80178fc <USBPD_DPM_SetDataInfo+0x134>)
 8017832:	0013      	movs	r3, r2
 8017834:	011b      	lsls	r3, r3, #4
 8017836:	1a9b      	subs	r3, r3, r2
 8017838:	00db      	lsls	r3, r3, #3
 801783a:	18c3      	adds	r3, r0, r3
 801783c:	333c      	adds	r3, #60	@ 0x3c
 801783e:	6019      	str	r1, [r3, #0]
      /* Copy PDO data in DPM Handle field */
      for (uint32_t index = 0; index < (Size / 4); index++)
 8017840:	2300      	movs	r3, #0
 8017842:	627b      	str	r3, [r7, #36]	@ 0x24
 8017844:	e019      	b.n	801787a <USBPD_DPM_SetDataInfo+0xb2>
      {
        rdo = (uint8_t*)&DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index];
 8017846:	230f      	movs	r3, #15
 8017848:	18fb      	adds	r3, r7, r3
 801784a:	781a      	ldrb	r2, [r3, #0]
 801784c:	0013      	movs	r3, r2
 801784e:	011b      	lsls	r3, r3, #4
 8017850:	1a9b      	subs	r3, r3, r2
 8017852:	005b      	lsls	r3, r3, #1
 8017854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017856:	189b      	adds	r3, r3, r2
 8017858:	3308      	adds	r3, #8
 801785a:	009a      	lsls	r2, r3, #2
 801785c:	4b27      	ldr	r3, [pc, #156]	@ (80178fc <USBPD_DPM_SetDataInfo+0x134>)
 801785e:	18d3      	adds	r3, r2, r3
 8017860:	61bb      	str	r3, [r7, #24]
        (void)memcpy(rdo, (Ptr + (index * 4u)), (4u * sizeof(uint8_t)));
 8017862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017864:	009b      	lsls	r3, r3, #2
 8017866:	68ba      	ldr	r2, [r7, #8]
 8017868:	18d1      	adds	r1, r2, r3
 801786a:	69bb      	ldr	r3, [r7, #24]
 801786c:	2204      	movs	r2, #4
 801786e:	0018      	movs	r0, r3
 8017870:	f002 f806 	bl	8019880 <memcpy>
      for (uint32_t index = 0; index < (Size / 4); index++)
 8017874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017876:	3301      	adds	r3, #1
 8017878:	627b      	str	r3, [r7, #36]	@ 0x24
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	089b      	lsrs	r3, r3, #2
 801787e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017880:	429a      	cmp	r2, r3
 8017882:	d3e0      	bcc.n	8017846 <USBPD_DPM_SetDataInfo+0x7e>
      }
    }
    break;
 8017884:	e032      	b.n	80178ec <USBPD_DPM_SetDataInfo+0x124>

  case USBPD_CORE_PPS_STATUS :
    {
      uint8_t*  ext_capa;
      ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvPPSStatus;
 8017886:	230f      	movs	r3, #15
 8017888:	18fb      	adds	r3, r7, r3
 801788a:	781a      	ldrb	r2, [r3, #0]
 801788c:	0013      	movs	r3, r2
 801788e:	011b      	lsls	r3, r3, #4
 8017890:	1a9b      	subs	r3, r3, r2
 8017892:	00db      	lsls	r3, r3, #3
 8017894:	3348      	adds	r3, #72	@ 0x48
 8017896:	001a      	movs	r2, r3
 8017898:	4b18      	ldr	r3, [pc, #96]	@ (80178fc <USBPD_DPM_SetDataInfo+0x134>)
 801789a:	18d3      	adds	r3, r2, r3
 801789c:	61fb      	str	r3, [r7, #28]
      memcpy(ext_capa, Ptr, Size);
 801789e:	687a      	ldr	r2, [r7, #4]
 80178a0:	68b9      	ldr	r1, [r7, #8]
 80178a2:	69fb      	ldr	r3, [r7, #28]
 80178a4:	0018      	movs	r0, r3
 80178a6:	f001 ffeb 	bl	8019880 <memcpy>
    }

case USBPD_CORE_REVISION:
  {
    /* Does nothing: User have to implement a global revision variable */
    USBPD_RevisionDO_TypeDef rev = {0};
 80178aa:	2300      	movs	r3, #0
 80178ac:	617b      	str	r3, [r7, #20]
    memcpy((uint8_t *)&rev, Ptr, sizeof(USBPD_RevisionDO_TypeDef));
 80178ae:	68b9      	ldr	r1, [r7, #8]
 80178b0:	2314      	movs	r3, #20
 80178b2:	18fb      	adds	r3, r7, r3
 80178b4:	2204      	movs	r2, #4
 80178b6:	0018      	movs	r0, r3
 80178b8:	f001 ffe2 	bl	8019880 <memcpy>
    break;
 80178bc:	e017      	b.n	80178ee <USBPD_DPM_SetDataInfo+0x126>

#if defined(USBPDCORE_SNK_CAPA_EXT)
  case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t*  _snk_ext_capa;
      _snk_ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvSNKExtendedCapa;
 80178be:	230f      	movs	r3, #15
 80178c0:	18fb      	adds	r3, r7, r3
 80178c2:	781a      	ldrb	r2, [r3, #0]
 80178c4:	0013      	movs	r3, r2
 80178c6:	011b      	lsls	r3, r3, #4
 80178c8:	1a9b      	subs	r3, r3, r2
 80178ca:	00db      	lsls	r3, r3, #3
 80178cc:	3348      	adds	r3, #72	@ 0x48
 80178ce:	001a      	movs	r2, r3
 80178d0:	4b0a      	ldr	r3, [pc, #40]	@ (80178fc <USBPD_DPM_SetDataInfo+0x134>)
 80178d2:	18d3      	adds	r3, r2, r3
 80178d4:	3304      	adds	r3, #4
 80178d6:	623b      	str	r3, [r7, #32]
      memcpy(_snk_ext_capa, Ptr, Size);
 80178d8:	687a      	ldr	r2, [r7, #4]
 80178da:	68b9      	ldr	r1, [r7, #8]
 80178dc:	6a3b      	ldr	r3, [r7, #32]
 80178de:	0018      	movs	r0, r3
 80178e0:	f001 ffce 	bl	8019880 <memcpy>
    }
#endif /* USBPDCORE_SNK_CAPA_EXT */

  default:
	    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
  break;
 80178e4:	46c0      	nop			@ (mov r8, r8)
 80178e6:	e002      	b.n	80178ee <USBPD_DPM_SetDataInfo+0x126>
    break;
 80178e8:	46c0      	nop			@ (mov r8, r8)
 80178ea:	e000      	b.n	80178ee <USBPD_DPM_SetDataInfo+0x126>
    break;
 80178ec:	46c0      	nop			@ (mov r8, r8)
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 80178ee:	46c0      	nop			@ (mov r8, r8)
 80178f0:	46bd      	mov	sp, r7
 80178f2:	b00a      	add	sp, #40	@ 0x28
 80178f4:	bd80      	pop	{r7, pc}
 80178f6:	46c0      	nop			@ (mov r8, r8)
 80178f8:	08019be0 	.word	0x08019be0
 80178fc:	200020c4 	.word	0x200020c4

08017900 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8017900:	b5b0      	push	{r4, r5, r7, lr}
 8017902:	b09a      	sub	sp, #104	@ 0x68
 8017904:	af02      	add	r7, sp, #8
 8017906:	60b9      	str	r1, [r7, #8]
 8017908:	607a      	str	r2, [r7, #4]
 801790a:	240f      	movs	r4, #15
 801790c:	193b      	adds	r3, r7, r4
 801790e:	1c02      	adds	r2, r0, #0
 8017910:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  USBPD_PDO_TypeDef  fixed_pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 8017912:	193b      	adds	r3, r7, r4
 8017914:	781a      	ldrb	r2, [r3, #0]
 8017916:	0013      	movs	r3, r2
 8017918:	011b      	lsls	r3, r3, #4
 801791a:	1a9b      	subs	r3, r3, r2
 801791c:	00db      	lsls	r3, r3, #3
 801791e:	4a4e      	ldr	r2, [pc, #312]	@ (8017a58 <USBPD_DPM_SNK_EvaluateCapabilities+0x158>)
 8017920:	189b      	adds	r3, r3, r2
 8017922:	65fb      	str	r3, [r7, #92]	@ 0x5c
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8017924:	193b      	adds	r3, r7, r4
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	2254      	movs	r2, #84	@ 0x54
 801792a:	435a      	muls	r2, r3
 801792c:	4b4b      	ldr	r3, [pc, #300]	@ (8017a5c <USBPD_DPM_SNK_EvaluateCapabilities+0x15c>)
 801792e:	18d3      	adds	r3, r2, r3
 8017930:	65bb      	str	r3, [r7, #88]	@ 0x58
  USBPD_DPM_SNKPowerRequestDetails_TypeDef snkpowerrequestdetails;
  uint32_t pdoindex, size;
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  snkpowerrequestdetails.RequestedVoltageInmVunits = 20000;
 8017932:	2138      	movs	r1, #56	@ 0x38
 8017934:	187b      	adds	r3, r7, r1
 8017936:	4a4a      	ldr	r2, [pc, #296]	@ (8017a60 <USBPD_DPM_SNK_EvaluateCapabilities+0x160>)
 8017938:	601a      	str	r2, [r3, #0]
  snkpowerrequestdetails.OperatingCurrentInmAunits = 1500;
 801793a:	187b      	adds	r3, r7, r1
 801793c:	4a49      	ldr	r2, [pc, #292]	@ (8017a64 <USBPD_DPM_SNK_EvaluateCapabilities+0x164>)
 801793e:	609a      	str	r2, [r3, #8]

  /* USBPD_DPM_EvaluateCapabilities: Port Partner Requests Max Voltage */

  /* Find the Pdo index for the requested voltage */
  pdoindex = DPM_FindVoltageIndex(PortNum, &snkpowerrequestdetails, USBPD_DPM_PDO_Sel_Method);
 8017940:	193b      	adds	r3, r7, r4
 8017942:	7818      	ldrb	r0, [r3, #0]
 8017944:	4b48      	ldr	r3, [pc, #288]	@ (8017a68 <USBPD_DPM_SNK_EvaluateCapabilities+0x168>)
 8017946:	781a      	ldrb	r2, [r3, #0]
 8017948:	187b      	adds	r3, r7, r1
 801794a:	0019      	movs	r1, r3
 801794c:	f000 fcce 	bl	80182ec <DPM_FindVoltageIndex>
 8017950:	0003      	movs	r3, r0
 8017952:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Initialize RDO */
  rdo.d32 = 0;
 8017954:	2300      	movs	r3, #0
 8017956:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs or function returned DPM_NO_SRC_PDO_FOUND*/
  if (pdoindex >= pdhandle->DPM_NumberOfRcvSRCPDO)
 8017958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801795a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801795c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801795e:	429a      	cmp	r2, r3
 8017960:	d365      	bcc.n	8017a2e <USBPD_DPM_SNK_EvaluateCapabilities+0x12e>
  {
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *) "PE_EvaluateCapability: could not find desired voltage", sizeof("PE_EvaluateCapability: could not find desired voltage"));
#endif /* _TRACE */
    fixed_pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 8017962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017964:	6a1b      	ldr	r3, [r3, #32]
 8017966:	653b      	str	r3, [r7, #80]	@ 0x50
    /* Read SNK PDO list for retrieving useful data to fill in RDO */
    USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t*)&snkpdolist[0], &size);
 8017968:	2334      	movs	r3, #52	@ 0x34
 801796a:	18f9      	adds	r1, r7, r3
 801796c:	2518      	movs	r5, #24
 801796e:	197a      	adds	r2, r7, r5
 8017970:	193b      	adds	r3, r7, r4
 8017972:	7818      	ldrb	r0, [r3, #0]
 8017974:	000b      	movs	r3, r1
 8017976:	2101      	movs	r1, #1
 8017978:	f7ff fdf2 	bl	8017560 <USBPD_PWR_IF_GetPortPDOs>
    /* Store value of 1st SNK PDO (Fixed) in local variable */
    snk_fixed_pdo.d32 = snkpdolist[0];
 801797c:	197b      	adds	r3, r7, r5
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	617b      	str	r3, [r7, #20]
    rdo.FixedVariableRDO.ObjectPosition = 1;
 8017982:	254f      	movs	r5, #79	@ 0x4f
 8017984:	197b      	adds	r3, r7, r5
 8017986:	781a      	ldrb	r2, [r3, #0]
 8017988:	2170      	movs	r1, #112	@ 0x70
 801798a:	438a      	bics	r2, r1
 801798c:	1c11      	adds	r1, r2, #0
 801798e:	2210      	movs	r2, #16
 8017990:	430a      	orrs	r2, r1
 8017992:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8017994:	2050      	movs	r0, #80	@ 0x50
 8017996:	183b      	adds	r3, r7, r0
 8017998:	881b      	ldrh	r3, [r3, #0]
 801799a:	059b      	lsls	r3, r3, #22
 801799c:	0d9b      	lsrs	r3, r3, #22
 801799e:	b29b      	uxth	r3, r3
 80179a0:	059b      	lsls	r3, r3, #22
 80179a2:	0d9b      	lsrs	r3, r3, #22
 80179a4:	029b      	lsls	r3, r3, #10
 80179a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80179a8:	4930      	ldr	r1, [pc, #192]	@ (8017a6c <USBPD_DPM_SNK_EvaluateCapabilities+0x16c>)
 80179aa:	400a      	ands	r2, r1
 80179ac:	4313      	orrs	r3, r2
 80179ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 80179b0:	183b      	adds	r3, r7, r0
 80179b2:	881b      	ldrh	r3, [r3, #0]
 80179b4:	059b      	lsls	r3, r3, #22
 80179b6:	0d9b      	lsrs	r3, r3, #22
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	234c      	movs	r3, #76	@ 0x4c
 80179bc:	18fb      	adds	r3, r7, r3
 80179be:	0592      	lsls	r2, r2, #22
 80179c0:	0d90      	lsrs	r0, r2, #22
 80179c2:	881a      	ldrh	r2, [r3, #0]
 80179c4:	0a92      	lsrs	r2, r2, #10
 80179c6:	0292      	lsls	r2, r2, #10
 80179c8:	1c11      	adds	r1, r2, #0
 80179ca:	1c02      	adds	r2, r0, #0
 80179cc:	430a      	orrs	r2, r1
 80179ce:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch = 1;
 80179d0:	197b      	adds	r3, r7, r5
 80179d2:	781a      	ldrb	r2, [r3, #0]
 80179d4:	2104      	movs	r1, #4
 80179d6:	430a      	orrs	r2, r1
 80179d8:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 80179da:	2317      	movs	r3, #23
 80179dc:	18fb      	adds	r3, r7, r3
 80179de:	781b      	ldrb	r3, [r3, #0]
 80179e0:	075b      	lsls	r3, r3, #29
 80179e2:	0fdb      	lsrs	r3, r3, #31
 80179e4:	b2da      	uxtb	r2, r3
 80179e6:	197b      	adds	r3, r7, r5
 80179e8:	2101      	movs	r1, #1
 80179ea:	400a      	ands	r2, r1
 80179ec:	1890      	adds	r0, r2, r2
 80179ee:	781a      	ldrb	r2, [r3, #0]
 80179f0:	2102      	movs	r1, #2
 80179f2:	438a      	bics	r2, r1
 80179f4:	1c11      	adds	r1, r2, #0
 80179f6:	1c02      	adds	r2, r0, #0
 80179f8:	430a      	orrs	r2, r1
 80179fa:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 80179fc:	193b      	adds	r3, r7, r4
 80179fe:	781a      	ldrb	r2, [r3, #0]
 8017a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017a02:	6859      	ldr	r1, [r3, #4]
 8017a04:	4814      	ldr	r0, [pc, #80]	@ (8017a58 <USBPD_DPM_SNK_EvaluateCapabilities+0x158>)
 8017a06:	0013      	movs	r3, r2
 8017a08:	011b      	lsls	r3, r3, #4
 8017a0a:	1a9b      	subs	r3, r3, r2
 8017a0c:	00db      	lsls	r3, r3, #3
 8017a0e:	18c3      	adds	r3, r0, r3
 8017a10:	3374      	adds	r3, #116	@ 0x74
 8017a12:	6019      	str	r1, [r3, #0]

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 8017a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a18:	665a      	str	r2, [r3, #100]	@ 0x64
    *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	601a      	str	r2, [r3, #0]
    *PtrRequestData     = rdo.d32;
 8017a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017a22:	68bb      	ldr	r3, [r7, #8]
 8017a24:	601a      	str	r2, [r3, #0]
    pdhandle->DPM_RequestedVoltage = 5000;
 8017a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a28:	4a11      	ldr	r2, [pc, #68]	@ (8017a70 <USBPD_DPM_SNK_EvaluateCapabilities+0x170>)
 8017a2a:	671a      	str	r2, [r3, #112]	@ 0x70
 8017a2c:	e011      	b.n	8017a52 <USBPD_DPM_SNK_EvaluateCapabilities+0x152>
    return;
  }
  DPM_SNK_BuildRDOfromSelectedPDO(PortNum, pdoindex, &snkpowerrequestdetails,&rdo, PtrPowerObjectType);
 8017a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a30:	b2d9      	uxtb	r1, r3
 8017a32:	234c      	movs	r3, #76	@ 0x4c
 8017a34:	18fc      	adds	r4, r7, r3
 8017a36:	2338      	movs	r3, #56	@ 0x38
 8017a38:	18fa      	adds	r2, r7, r3
 8017a3a:	230f      	movs	r3, #15
 8017a3c:	18fb      	adds	r3, r7, r3
 8017a3e:	7818      	ldrb	r0, [r3, #0]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	9300      	str	r3, [sp, #0]
 8017a44:	0023      	movs	r3, r4
 8017a46:	f000 fd51 	bl	80184ec <DPM_SNK_BuildRDOfromSelectedPDO>

  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 8017a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	601a      	str	r2, [r3, #0]
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8017a52:	46bd      	mov	sp, r7
 8017a54:	b018      	add	sp, #96	@ 0x60
 8017a56:	bdb0      	pop	{r4, r5, r7, pc}
 8017a58:	200020c4 	.word	0x200020c4
 8017a5c:	200000d0 	.word	0x200000d0
 8017a60:	00004e20 	.word	0x00004e20
 8017a64:	000005dc 	.word	0x000005dc
 8017a68:	200020c0 	.word	0x200020c0
 8017a6c:	fff003ff 	.word	0xfff003ff
 8017a70:	00001388 	.word	0x00001388

08017a74 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8017a74:	b590      	push	{r4, r7, lr}
 8017a76:	b083      	sub	sp, #12
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	0004      	movs	r4, r0
 8017a7c:	0008      	movs	r0, r1
 8017a7e:	603a      	str	r2, [r7, #0]
 8017a80:	0019      	movs	r1, r3
 8017a82:	1dfb      	adds	r3, r7, #7
 8017a84:	1c22      	adds	r2, r4, #0
 8017a86:	701a      	strb	r2, [r3, #0]
 8017a88:	1dbb      	adds	r3, r7, #6
 8017a8a:	1c02      	adds	r2, r0, #0
 8017a8c:	701a      	strb	r2, [r3, #0]
 8017a8e:	1d3b      	adds	r3, r7, #4
 8017a90:	1c0a      	adds	r2, r1, #0
 8017a92:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8017a94:	46c0      	nop			@ (mov r8, r8)
 8017a96:	46bd      	mov	sp, r7
 8017a98:	b003      	add	sp, #12
 8017a9a:	bd90      	pop	{r4, r7, pc}

08017a9c <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b082      	sub	sp, #8
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	0002      	movs	r2, r0
 8017aa4:	1dfb      	adds	r3, r7, #7
 8017aa6:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8017aa8:	1dfb      	adds	r3, r7, #7
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	0018      	movs	r0, r3
 8017aae:	f7e8 fbf5 	bl	800029c <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8017ab2:	46c0      	nop			@ (mov r8, r8)
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	b002      	add	sp, #8
 8017ab8:	bd80      	pop	{r7, pc}
	...

08017abc <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b084      	sub	sp, #16
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	0002      	movs	r2, r0
 8017ac4:	1dfb      	adds	r3, r7, #7
 8017ac6:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8017ac8:	230f      	movs	r3, #15
 8017aca:	18fb      	adds	r3, r7, r3
 8017acc:	220c      	movs	r2, #12
 8017ace:	701a      	strb	r2, [r3, #0]
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8017ad0:	1dfb      	adds	r3, r7, #7
 8017ad2:	781a      	ldrb	r2, [r3, #0]
 8017ad4:	4b19      	ldr	r3, [pc, #100]	@ (8017b3c <USBPD_DPM_EvaluateDataRoleSwap+0x80>)
 8017ad6:	2154      	movs	r1, #84	@ 0x54
 8017ad8:	434a      	muls	r2, r1
 8017ada:	5cd3      	ldrb	r3, [r2, r3]
 8017adc:	075b      	lsls	r3, r3, #29
 8017ade:	0fdb      	lsrs	r3, r3, #31
 8017ae0:	b2db      	uxtb	r3, r3
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	d109      	bne.n	8017afa <USBPD_DPM_EvaluateDataRoleSwap+0x3e>
 8017ae6:	1dfb      	adds	r3, r7, #7
 8017ae8:	781a      	ldrb	r2, [r3, #0]
 8017aea:	4b15      	ldr	r3, [pc, #84]	@ (8017b40 <USBPD_DPM_EvaluateDataRoleSwap+0x84>)
 8017aec:	0092      	lsls	r2, r2, #2
 8017aee:	5cd3      	ldrb	r3, [r2, r3]
 8017af0:	071b      	lsls	r3, r3, #28
 8017af2:	0fdb      	lsrs	r3, r3, #31
 8017af4:	b2db      	uxtb	r3, r3
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d014      	beq.n	8017b24 <USBPD_DPM_EvaluateDataRoleSwap+0x68>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8017afa:	1dfb      	adds	r3, r7, #7
 8017afc:	781a      	ldrb	r2, [r3, #0]
 8017afe:	4b0f      	ldr	r3, [pc, #60]	@ (8017b3c <USBPD_DPM_EvaluateDataRoleSwap+0x80>)
 8017b00:	2154      	movs	r1, #84	@ 0x54
 8017b02:	434a      	muls	r2, r1
 8017b04:	5cd3      	ldrb	r3, [r2, r3]
 8017b06:	071b      	lsls	r3, r3, #28
 8017b08:	0fdb      	lsrs	r3, r3, #31
 8017b0a:	b2db      	uxtb	r3, r3
 8017b0c:	2b01      	cmp	r3, #1
 8017b0e:	d10d      	bne.n	8017b2c <USBPD_DPM_EvaluateDataRoleSwap+0x70>
 8017b10:	1dfb      	adds	r3, r7, #7
 8017b12:	781a      	ldrb	r2, [r3, #0]
 8017b14:	4b0a      	ldr	r3, [pc, #40]	@ (8017b40 <USBPD_DPM_EvaluateDataRoleSwap+0x84>)
 8017b16:	0092      	lsls	r2, r2, #2
 8017b18:	5cd3      	ldrb	r3, [r2, r3]
 8017b1a:	071b      	lsls	r3, r3, #28
 8017b1c:	0fdb      	lsrs	r3, r3, #31
 8017b1e:	b2db      	uxtb	r3, r3
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d103      	bne.n	8017b2c <USBPD_DPM_EvaluateDataRoleSwap+0x70>
    {
      status = USBPD_ACCEPT;
 8017b24:	230f      	movs	r3, #15
 8017b26:	18fb      	adds	r3, r7, r3
 8017b28:	220a      	movs	r2, #10
 8017b2a:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 8017b2c:	230f      	movs	r3, #15
 8017b2e:	18fb      	adds	r3, r7, r3
 8017b30:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8017b32:	0018      	movs	r0, r3
 8017b34:	46bd      	mov	sp, r7
 8017b36:	b004      	add	sp, #16
 8017b38:	bd80      	pop	{r7, pc}
 8017b3a:	46c0      	nop			@ (mov r8, r8)
 8017b3c:	200000d0 	.word	0x200000d0
 8017b40:	200020ac 	.word	0x200020ac

08017b44 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b082      	sub	sp, #8
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	0002      	movs	r2, r0
 8017b4c:	1dfb      	adds	r3, r7, #7
 8017b4e:	701a      	strb	r2, [r3, #0]
 8017b50:	1dbb      	adds	r3, r7, #6
 8017b52:	1c0a      	adds	r2, r1, #0
 8017b54:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8017b56:	1dbb      	adds	r3, r7, #6
 8017b58:	781a      	ldrb	r2, [r3, #0]
 8017b5a:	1dfb      	adds	r3, r7, #7
 8017b5c:	781b      	ldrb	r3, [r3, #0]
 8017b5e:	0011      	movs	r1, r2
 8017b60:	0018      	movs	r0, r3
 8017b62:	f7ff fcbf 	bl	80174e4 <USBPD_PWR_IF_SupplyReady>
 8017b66:	0003      	movs	r3, r0
 8017b68:	425a      	negs	r2, r3
 8017b6a:	4153      	adcs	r3, r2
 8017b6c:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8017b6e:	0018      	movs	r0, r3
 8017b70:	46bd      	mov	sp, r7
 8017b72:	b002      	add	sp, #8
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO>:
  * @param  PtrRequestedVoltage Pointer on Voltage value that could be reached if SRC PDO is requested (only valid if USBPD_TRUE is returned) in mV
  * @param  PtrRequestedPower   Pointer on Power value that could be reached if SRC PDO is requested (only valid if USBPD_TRUE is returned) in mW
  * @retval USBPD_FALSE of USBPD_TRUE (USBPD_TRUE returned in SRC PDO is considered matching with SNK profile)
  */
uint32_t USBPD_DPM_SNK_EvaluateMatchWithSRCPDO(uint8_t PortNum, uint32_t SrcPDO, uint32_t* PtrRequestedVoltage, uint32_t* PtrRequestedPower)
{
 8017b76:	b5b0      	push	{r4, r5, r7, lr}
 8017b78:	b09e      	sub	sp, #120	@ 0x78
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
 8017b80:	603b      	str	r3, [r7, #0]
 8017b82:	240f      	movs	r4, #15
 8017b84:	193b      	adds	r3, r7, r4
 8017b86:	1c02      	adds	r2, r0, #0
 8017b88:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef  srcpdo, snkpdo;
  uint32_t match = USBPD_FALSE;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t maxrequestedpower, currentrequestedpower;
  uint32_t maxrequestedvoltage, currentrequestedvoltage;
  uint32_t snkoppower250mw, srcmaxpower250mw;

  /* Retrieve SNK PDO list from PWR_IF storage : PDO values + nb of u32 written by PWR_IF (nb of PDOs) */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t*)snkpdo_array, &nbsnkpdo);
 8017b8e:	2330      	movs	r3, #48	@ 0x30
 8017b90:	18f9      	adds	r1, r7, r3
 8017b92:	2314      	movs	r3, #20
 8017b94:	18fa      	adds	r2, r7, r3
 8017b96:	193b      	adds	r3, r7, r4
 8017b98:	7818      	ldrb	r0, [r3, #0]
 8017b9a:	000b      	movs	r3, r1
 8017b9c:	2101      	movs	r1, #1
 8017b9e:	f7ff fcdf 	bl	8017560 <USBPD_PWR_IF_GetPortPDOs>
  if (0 == nbsnkpdo)
 8017ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d102      	bne.n	8017bae <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x38>
  {
    return(USBPD_FALSE);
 8017ba8:	2300      	movs	r3, #0
 8017baa:	f000 fb9b 	bl	80182e4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x76e>
  }
  /* Set default output values */
  maxrequestedpower    = 0;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  maxrequestedvoltage  = 0;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Check SRC PDO value according to its type */
  srcpdo.d32 = SrcPDO;
 8017bb6:	68bb      	ldr	r3, [r7, #8]
 8017bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  switch(srcpdo.GenericPDO.PowerObject)
 8017bba:	233b      	movs	r3, #59	@ 0x3b
 8017bbc:	18fb      	adds	r3, r7, r3
 8017bbe:	781b      	ldrb	r3, [r3, #0]
 8017bc0:	061b      	lsls	r3, r3, #24
 8017bc2:	0f9b      	lsrs	r3, r3, #30
 8017bc4:	b2db      	uxtb	r3, r3
 8017bc6:	2b03      	cmp	r3, #3
 8017bc8:	d100      	bne.n	8017bcc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x56>
 8017bca:	e2b4      	b.n	8018136 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x5c0>
 8017bcc:	dd01      	ble.n	8017bd2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x5c>
 8017bce:	f000 fb7b 	bl	80182c8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x752>
 8017bd2:	2b02      	cmp	r3, #2
 8017bd4:	d100      	bne.n	8017bd8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x62>
 8017bd6:	e105      	b.n	8017de4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x26e>
 8017bd8:	dd01      	ble.n	8017bde <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x68>
 8017bda:	f000 fb75 	bl	80182c8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x752>
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d004      	beq.n	8017bec <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x76>
 8017be2:	2b01      	cmp	r3, #1
 8017be4:	d100      	bne.n	8017be8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x72>
 8017be6:	e1d8      	b.n	8017f9a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x424>
 8017be8:	f000 fb6e 	bl	80182c8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x752>
  {
    /* SRC Fixed Supply PDO */
    case USBPD_CORE_PDO_TYPE_FIXED:
      srcvoltage50mv = srcpdo.SRCFixedPDO.VoltageIn50mVunits;
 8017bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017bee:	031b      	lsls	r3, r3, #12
 8017bf0:	0d9b      	lsrs	r3, r3, #22
 8017bf2:	b29a      	uxth	r2, r3
 8017bf4:	233e      	movs	r3, #62	@ 0x3e
 8017bf6:	18fb      	adds	r3, r7, r3
 8017bf8:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent10ma = srcpdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8017bfa:	2338      	movs	r3, #56	@ 0x38
 8017bfc:	18fb      	adds	r3, r7, r3
 8017bfe:	881b      	ldrh	r3, [r3, #0]
 8017c00:	059b      	lsls	r3, r3, #22
 8017c02:	0d9b      	lsrs	r3, r3, #22
 8017c04:	b29a      	uxth	r2, r3
 8017c06:	2350      	movs	r3, #80	@ 0x50
 8017c08:	18fb      	adds	r3, r7, r3
 8017c0a:	801a      	strh	r2, [r3, #0]
      /* Loop through SNK PDO list */
      for (i=0; i<nbsnkpdo; i++)
 8017c0c:	2372      	movs	r3, #114	@ 0x72
 8017c0e:	18fb      	adds	r3, r7, r3
 8017c10:	2200      	movs	r2, #0
 8017c12:	801a      	strh	r2, [r3, #0]
 8017c14:	e0de      	b.n	8017dd4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x25e>
      {
        currentrequestedpower = 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	66bb      	str	r3, [r7, #104]	@ 0x68
        currentrequestedvoltage = 0;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 8017c1e:	2372      	movs	r3, #114	@ 0x72
 8017c20:	18fb      	adds	r3, r7, r3
 8017c22:	881a      	ldrh	r2, [r3, #0]
 8017c24:	2314      	movs	r3, #20
 8017c26:	18fb      	adds	r3, r7, r3
 8017c28:	0092      	lsls	r2, r2, #2
 8017c2a:	58d3      	ldr	r3, [r2, r3]
 8017c2c:	637b      	str	r3, [r7, #52]	@ 0x34
        switch(snkpdo.GenericPDO.PowerObject)
 8017c2e:	2337      	movs	r3, #55	@ 0x37
 8017c30:	18fb      	adds	r3, r7, r3
 8017c32:	781b      	ldrb	r3, [r3, #0]
 8017c34:	061b      	lsls	r3, r3, #24
 8017c36:	0f9b      	lsrs	r3, r3, #30
 8017c38:	b2db      	uxtb	r3, r3
 8017c3a:	2b03      	cmp	r3, #3
 8017c3c:	d100      	bne.n	8017c40 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0xca>
 8017c3e:	e0b0      	b.n	8017da2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x22c>
 8017c40:	dd00      	ble.n	8017c44 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0xce>
 8017c42:	e0b0      	b.n	8017da6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x230>
 8017c44:	2b02      	cmp	r3, #2
 8017c46:	d036      	beq.n	8017cb6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x140>
 8017c48:	dd00      	ble.n	8017c4c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0xd6>
 8017c4a:	e0ac      	b.n	8017da6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x230>
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d003      	beq.n	8017c58 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0xe2>
 8017c50:	2b01      	cmp	r3, #1
 8017c52:	d100      	bne.n	8017c56 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0xe0>
 8017c54:	e06b      	b.n	8017d2e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1b8>
            break;
            /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
          default:
            break;
 8017c56:	e0a6      	b.n	8017da6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x230>
            snkvoltage50mv = snkpdo.SNKFixedPDO.VoltageIn50mVunits;
 8017c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c5a:	031b      	lsls	r3, r3, #12
 8017c5c:	0d9b      	lsrs	r3, r3, #22
 8017c5e:	b29a      	uxth	r2, r3
 8017c60:	213c      	movs	r1, #60	@ 0x3c
 8017c62:	187b      	adds	r3, r7, r1
 8017c64:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma = snkpdo.SNKFixedPDO.OperationalCurrentIn10mAunits;
 8017c66:	2334      	movs	r3, #52	@ 0x34
 8017c68:	18fb      	adds	r3, r7, r3
 8017c6a:	881b      	ldrh	r3, [r3, #0]
 8017c6c:	059b      	lsls	r3, r3, #22
 8017c6e:	0d9b      	lsrs	r3, r3, #22
 8017c70:	b29a      	uxth	r2, r3
 8017c72:	204a      	movs	r0, #74	@ 0x4a
 8017c74:	183b      	adds	r3, r7, r0
 8017c76:	801a      	strh	r2, [r3, #0]
            if (  (snkvoltage50mv == srcvoltage50mv)
 8017c78:	187a      	adds	r2, r7, r1
 8017c7a:	233e      	movs	r3, #62	@ 0x3e
 8017c7c:	18fb      	adds	r3, r7, r3
 8017c7e:	8812      	ldrh	r2, [r2, #0]
 8017c80:	881b      	ldrh	r3, [r3, #0]
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d000      	beq.n	8017c88 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x112>
 8017c86:	e090      	b.n	8017daa <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x234>
                &&(snkopcurrent10ma <= srcmaxcurrent10ma))
 8017c88:	183a      	adds	r2, r7, r0
 8017c8a:	2350      	movs	r3, #80	@ 0x50
 8017c8c:	18fb      	adds	r3, r7, r3
 8017c8e:	8812      	ldrh	r2, [r2, #0]
 8017c90:	881b      	ldrh	r3, [r3, #0]
 8017c92:	429a      	cmp	r2, r3
 8017c94:	d900      	bls.n	8017c98 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x122>
 8017c96:	e088      	b.n	8017daa <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x234>
              currentrequestedpower = (snkvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 8017c98:	187b      	adds	r3, r7, r1
 8017c9a:	881b      	ldrh	r3, [r3, #0]
 8017c9c:	183a      	adds	r2, r7, r0
 8017c9e:	8812      	ldrh	r2, [r2, #0]
 8017ca0:	4353      	muls	r3, r2
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	da00      	bge.n	8017ca8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x132>
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	105b      	asrs	r3, r3, #1
 8017caa:	66bb      	str	r3, [r7, #104]	@ 0x68
              currentrequestedvoltage = snkvoltage50mv;
 8017cac:	233c      	movs	r3, #60	@ 0x3c
 8017cae:	18fb      	adds	r3, r7, r3
 8017cb0:	881b      	ldrh	r3, [r3, #0]
 8017cb2:	663b      	str	r3, [r7, #96]	@ 0x60
            break;
 8017cb4:	e079      	b.n	8017daa <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x234>
            snkmaxvoltage50mv = snkpdo.SNKVariablePDO.MaxVoltageIn50mVunits;
 8017cb6:	2336      	movs	r3, #54	@ 0x36
 8017cb8:	18fb      	adds	r3, r7, r3
 8017cba:	881b      	ldrh	r3, [r3, #0]
 8017cbc:	049b      	lsls	r3, r3, #18
 8017cbe:	0d9b      	lsrs	r3, r3, #22
 8017cc0:	b29a      	uxth	r2, r3
 8017cc2:	204e      	movs	r0, #78	@ 0x4e
 8017cc4:	183b      	adds	r3, r7, r0
 8017cc6:	801a      	strh	r2, [r3, #0]
            snkminvoltage50mv = snkpdo.SNKVariablePDO.MinVoltageIn50mVunits;
 8017cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cca:	031b      	lsls	r3, r3, #12
 8017ccc:	0d9b      	lsrs	r3, r3, #22
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	244c      	movs	r4, #76	@ 0x4c
 8017cd2:	193b      	adds	r3, r7, r4
 8017cd4:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma  = snkpdo.SNKVariablePDO.OperationalCurrentIn10mAunits;
 8017cd6:	2334      	movs	r3, #52	@ 0x34
 8017cd8:	18fb      	adds	r3, r7, r3
 8017cda:	881b      	ldrh	r3, [r3, #0]
 8017cdc:	059b      	lsls	r3, r3, #22
 8017cde:	0d9b      	lsrs	r3, r3, #22
 8017ce0:	b29a      	uxth	r2, r3
 8017ce2:	214a      	movs	r1, #74	@ 0x4a
 8017ce4:	187b      	adds	r3, r7, r1
 8017ce6:	801a      	strh	r2, [r3, #0]
            if (  (snkmaxvoltage50mv >= srcvoltage50mv)
 8017ce8:	183a      	adds	r2, r7, r0
 8017cea:	203e      	movs	r0, #62	@ 0x3e
 8017cec:	183b      	adds	r3, r7, r0
 8017cee:	8812      	ldrh	r2, [r2, #0]
 8017cf0:	881b      	ldrh	r3, [r3, #0]
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d35b      	bcc.n	8017dae <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x238>
                &&(snkminvoltage50mv <= srcvoltage50mv)
 8017cf6:	193a      	adds	r2, r7, r4
 8017cf8:	183b      	adds	r3, r7, r0
 8017cfa:	8812      	ldrh	r2, [r2, #0]
 8017cfc:	881b      	ldrh	r3, [r3, #0]
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	d855      	bhi.n	8017dae <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x238>
                &&(snkopcurrent10ma  <= srcmaxcurrent10ma))
 8017d02:	187a      	adds	r2, r7, r1
 8017d04:	2350      	movs	r3, #80	@ 0x50
 8017d06:	18fb      	adds	r3, r7, r3
 8017d08:	8812      	ldrh	r2, [r2, #0]
 8017d0a:	881b      	ldrh	r3, [r3, #0]
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d84e      	bhi.n	8017dae <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x238>
              currentrequestedpower = (srcvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 8017d10:	183b      	adds	r3, r7, r0
 8017d12:	881b      	ldrh	r3, [r3, #0]
 8017d14:	187a      	adds	r2, r7, r1
 8017d16:	8812      	ldrh	r2, [r2, #0]
 8017d18:	4353      	muls	r3, r2
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	da00      	bge.n	8017d20 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x1aa>
 8017d1e:	3301      	adds	r3, #1
 8017d20:	105b      	asrs	r3, r3, #1
 8017d22:	66bb      	str	r3, [r7, #104]	@ 0x68
              currentrequestedvoltage = srcvoltage50mv;
 8017d24:	233e      	movs	r3, #62	@ 0x3e
 8017d26:	18fb      	adds	r3, r7, r3
 8017d28:	881b      	ldrh	r3, [r3, #0]
 8017d2a:	663b      	str	r3, [r7, #96]	@ 0x60
            break;
 8017d2c:	e03f      	b.n	8017dae <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x238>
            snkmaxvoltage50mv = snkpdo.SNKBatteryPDO.MaxVoltageIn50mVunits;
 8017d2e:	2336      	movs	r3, #54	@ 0x36
 8017d30:	18fb      	adds	r3, r7, r3
 8017d32:	881b      	ldrh	r3, [r3, #0]
 8017d34:	049b      	lsls	r3, r3, #18
 8017d36:	0d9b      	lsrs	r3, r3, #22
 8017d38:	b29a      	uxth	r2, r3
 8017d3a:	214e      	movs	r1, #78	@ 0x4e
 8017d3c:	187b      	adds	r3, r7, r1
 8017d3e:	801a      	strh	r2, [r3, #0]
            snkminvoltage50mv = snkpdo.SNKBatteryPDO.MinVoltageIn50mVunits;
 8017d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d42:	031b      	lsls	r3, r3, #12
 8017d44:	0d9b      	lsrs	r3, r3, #22
 8017d46:	b29a      	uxth	r2, r3
 8017d48:	204c      	movs	r0, #76	@ 0x4c
 8017d4a:	183b      	adds	r3, r7, r0
 8017d4c:	801a      	strh	r2, [r3, #0]
            snkoppower250mw   = snkpdo.SNKBatteryPDO.OperationalPowerIn250mWunits;
 8017d4e:	2334      	movs	r3, #52	@ 0x34
 8017d50:	18fb      	adds	r3, r7, r3
 8017d52:	881b      	ldrh	r3, [r3, #0]
 8017d54:	059b      	lsls	r3, r3, #22
 8017d56:	0d9b      	lsrs	r3, r3, #22
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	647b      	str	r3, [r7, #68]	@ 0x44
            if (  (snkmaxvoltage50mv >= srcvoltage50mv)
 8017d5c:	187a      	adds	r2, r7, r1
 8017d5e:	243e      	movs	r4, #62	@ 0x3e
 8017d60:	193b      	adds	r3, r7, r4
 8017d62:	8812      	ldrh	r2, [r2, #0]
 8017d64:	881b      	ldrh	r3, [r3, #0]
 8017d66:	429a      	cmp	r2, r3
 8017d68:	d323      	bcc.n	8017db2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23c>
                &&(snkminvoltage50mv <= srcvoltage50mv)
 8017d6a:	183a      	adds	r2, r7, r0
 8017d6c:	193b      	adds	r3, r7, r4
 8017d6e:	8812      	ldrh	r2, [r2, #0]
 8017d70:	881b      	ldrh	r3, [r3, #0]
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d81d      	bhi.n	8017db2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23c>
                &&(snkoppower250mw <= ((srcvoltage50mv * srcmaxcurrent10ma)/500)))  /* to get value in 250 mw units */
 8017d76:	193b      	adds	r3, r7, r4
 8017d78:	881b      	ldrh	r3, [r3, #0]
 8017d7a:	2250      	movs	r2, #80	@ 0x50
 8017d7c:	18ba      	adds	r2, r7, r2
 8017d7e:	8812      	ldrh	r2, [r2, #0]
 8017d80:	4353      	muls	r3, r2
 8017d82:	22fa      	movs	r2, #250	@ 0xfa
 8017d84:	0051      	lsls	r1, r2, #1
 8017d86:	0018      	movs	r0, r3
 8017d88:	f7ee faaa 	bl	80062e0 <__divsi3>
 8017d8c:	0003      	movs	r3, r0
 8017d8e:	001a      	movs	r2, r3
 8017d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d92:	4293      	cmp	r3, r2
 8017d94:	d80d      	bhi.n	8017db2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23c>
              currentrequestedvoltage = srcvoltage50mv;
 8017d96:	193b      	adds	r3, r7, r4
 8017d98:	881b      	ldrh	r3, [r3, #0]
 8017d9a:	663b      	str	r3, [r7, #96]	@ 0x60
              currentrequestedpower = snkoppower250mw;
 8017d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
            break;
 8017da0:	e007      	b.n	8017db2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23c>
            break;
 8017da2:	46c0      	nop			@ (mov r8, r8)
 8017da4:	e006      	b.n	8017db4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23e>
            break;
 8017da6:	46c0      	nop			@ (mov r8, r8)
 8017da8:	e004      	b.n	8017db4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23e>
            break;
 8017daa:	46c0      	nop			@ (mov r8, r8)
 8017dac:	e002      	b.n	8017db4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23e>
            break;
 8017dae:	46c0      	nop			@ (mov r8, r8)
 8017db0:	e000      	b.n	8017db4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x23e>
            break;
 8017db2:	46c0      	nop			@ (mov r8, r8)
        }
        if (currentrequestedpower > maxrequestedpower)
 8017db4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017db8:	429a      	cmp	r2, r3
 8017dba:	d905      	bls.n	8017dc8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x252>
        {
          match = USBPD_TRUE;
 8017dbc:	2301      	movs	r3, #1
 8017dbe:	677b      	str	r3, [r7, #116]	@ 0x74
          maxrequestedpower   = currentrequestedpower;
 8017dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
          maxrequestedvoltage = currentrequestedvoltage;
 8017dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017dc6:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i=0; i<nbsnkpdo; i++)
 8017dc8:	2172      	movs	r1, #114	@ 0x72
 8017dca:	187b      	adds	r3, r7, r1
 8017dcc:	881a      	ldrh	r2, [r3, #0]
 8017dce:	187b      	adds	r3, r7, r1
 8017dd0:	3201      	adds	r2, #1
 8017dd2:	801a      	strh	r2, [r3, #0]
 8017dd4:	2372      	movs	r3, #114	@ 0x72
 8017dd6:	18fb      	adds	r3, r7, r3
 8017dd8:	881a      	ldrh	r2, [r3, #0]
 8017dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ddc:	429a      	cmp	r2, r3
 8017dde:	d200      	bcs.n	8017de2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x26c>
 8017de0:	e719      	b.n	8017c16 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0xa0>
        }
      }
      break;
 8017de2:	e273      	b.n	80182cc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x756>
    /* SRC Variable Supply (non-battery) PDO */
    case USBPD_CORE_PDO_TYPE_VARIABLE:
      srcmaxvoltage50mv = srcpdo.SRCVariablePDO.MaxVoltageIn50mVunits;
 8017de4:	233a      	movs	r3, #58	@ 0x3a
 8017de6:	18fb      	adds	r3, r7, r3
 8017de8:	881b      	ldrh	r3, [r3, #0]
 8017dea:	049b      	lsls	r3, r3, #18
 8017dec:	0d9b      	lsrs	r3, r3, #22
 8017dee:	b29a      	uxth	r2, r3
 8017df0:	2354      	movs	r3, #84	@ 0x54
 8017df2:	18fb      	adds	r3, r7, r3
 8017df4:	801a      	strh	r2, [r3, #0]
      srcminvoltage50mv = srcpdo.SRCVariablePDO.MinVoltageIn50mVunits;
 8017df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017df8:	031b      	lsls	r3, r3, #12
 8017dfa:	0d9b      	lsrs	r3, r3, #22
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	2352      	movs	r3, #82	@ 0x52
 8017e00:	18fb      	adds	r3, r7, r3
 8017e02:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent10ma = srcpdo.SRCVariablePDO.MaxCurrentIn10mAunits;
 8017e04:	2338      	movs	r3, #56	@ 0x38
 8017e06:	18fb      	adds	r3, r7, r3
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	059b      	lsls	r3, r3, #22
 8017e0c:	0d9b      	lsrs	r3, r3, #22
 8017e0e:	b29a      	uxth	r2, r3
 8017e10:	2350      	movs	r3, #80	@ 0x50
 8017e12:	18fb      	adds	r3, r7, r3
 8017e14:	801a      	strh	r2, [r3, #0]
      /* Loop through SNK PDO list */
      for (i=0; i<nbsnkpdo; i++)
 8017e16:	2372      	movs	r3, #114	@ 0x72
 8017e18:	18fb      	adds	r3, r7, r3
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	801a      	strh	r2, [r3, #0]
 8017e1e:	e0b4      	b.n	8017f8a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x414>
      {
        currentrequestedpower = 0;
 8017e20:	2300      	movs	r3, #0
 8017e22:	66bb      	str	r3, [r7, #104]	@ 0x68
        currentrequestedvoltage = 0;
 8017e24:	2300      	movs	r3, #0
 8017e26:	663b      	str	r3, [r7, #96]	@ 0x60
        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 8017e28:	2372      	movs	r3, #114	@ 0x72
 8017e2a:	18fb      	adds	r3, r7, r3
 8017e2c:	881a      	ldrh	r2, [r3, #0]
 8017e2e:	2314      	movs	r3, #20
 8017e30:	18fb      	adds	r3, r7, r3
 8017e32:	0092      	lsls	r2, r2, #2
 8017e34:	58d3      	ldr	r3, [r2, r3]
 8017e36:	637b      	str	r3, [r7, #52]	@ 0x34
        switch(snkpdo.GenericPDO.PowerObject)
 8017e38:	2337      	movs	r3, #55	@ 0x37
 8017e3a:	18fb      	adds	r3, r7, r3
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	061b      	lsls	r3, r3, #24
 8017e40:	0f9b      	lsrs	r3, r3, #30
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	2b03      	cmp	r3, #3
 8017e46:	d100      	bne.n	8017e4a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x2d4>
 8017e48:	e086      	b.n	8017f58 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3e2>
 8017e4a:	dd00      	ble.n	8017e4e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x2d8>
 8017e4c:	e086      	b.n	8017f5c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3e6>
 8017e4e:	2b02      	cmp	r3, #2
 8017e50:	d007      	beq.n	8017e62 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x2ec>
 8017e52:	dd00      	ble.n	8017e56 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x2e0>
 8017e54:	e082      	b.n	8017f5c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3e6>
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d100      	bne.n	8017e5c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x2e6>
 8017e5a:	e081      	b.n	8017f60 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3ea>
 8017e5c:	2b01      	cmp	r3, #1
 8017e5e:	d03e      	beq.n	8017ede <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x368>
            break;
            /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
          default:
            break;
 8017e60:	e07c      	b.n	8017f5c <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3e6>
            snkmaxvoltage50mv = snkpdo.SNKVariablePDO.MaxVoltageIn50mVunits;
 8017e62:	2336      	movs	r3, #54	@ 0x36
 8017e64:	18fb      	adds	r3, r7, r3
 8017e66:	881b      	ldrh	r3, [r3, #0]
 8017e68:	049b      	lsls	r3, r3, #18
 8017e6a:	0d9b      	lsrs	r3, r3, #22
 8017e6c:	b29a      	uxth	r2, r3
 8017e6e:	204e      	movs	r0, #78	@ 0x4e
 8017e70:	183b      	adds	r3, r7, r0
 8017e72:	801a      	strh	r2, [r3, #0]
            snkminvoltage50mv = snkpdo.SNKVariablePDO.MinVoltageIn50mVunits;
 8017e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e76:	031b      	lsls	r3, r3, #12
 8017e78:	0d9b      	lsrs	r3, r3, #22
 8017e7a:	b29a      	uxth	r2, r3
 8017e7c:	244c      	movs	r4, #76	@ 0x4c
 8017e7e:	193b      	adds	r3, r7, r4
 8017e80:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma  = snkpdo.SNKVariablePDO.OperationalCurrentIn10mAunits;
 8017e82:	2334      	movs	r3, #52	@ 0x34
 8017e84:	18fb      	adds	r3, r7, r3
 8017e86:	881b      	ldrh	r3, [r3, #0]
 8017e88:	059b      	lsls	r3, r3, #22
 8017e8a:	0d9b      	lsrs	r3, r3, #22
 8017e8c:	b29a      	uxth	r2, r3
 8017e8e:	214a      	movs	r1, #74	@ 0x4a
 8017e90:	187b      	adds	r3, r7, r1
 8017e92:	801a      	strh	r2, [r3, #0]
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 8017e94:	183a      	adds	r2, r7, r0
 8017e96:	2054      	movs	r0, #84	@ 0x54
 8017e98:	183b      	adds	r3, r7, r0
 8017e9a:	8812      	ldrh	r2, [r2, #0]
 8017e9c:	881b      	ldrh	r3, [r3, #0]
 8017e9e:	429a      	cmp	r2, r3
 8017ea0:	d200      	bcs.n	8017ea4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x32e>
 8017ea2:	e05f      	b.n	8017f64 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3ee>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 8017ea4:	193a      	adds	r2, r7, r4
 8017ea6:	2352      	movs	r3, #82	@ 0x52
 8017ea8:	18fb      	adds	r3, r7, r3
 8017eaa:	8812      	ldrh	r2, [r2, #0]
 8017eac:	881b      	ldrh	r3, [r3, #0]
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d858      	bhi.n	8017f64 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3ee>
                &&(snkopcurrent10ma <= srcmaxcurrent10ma))
 8017eb2:	187a      	adds	r2, r7, r1
 8017eb4:	2350      	movs	r3, #80	@ 0x50
 8017eb6:	18fb      	adds	r3, r7, r3
 8017eb8:	8812      	ldrh	r2, [r2, #0]
 8017eba:	881b      	ldrh	r3, [r3, #0]
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d851      	bhi.n	8017f64 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3ee>
              currentrequestedpower = (srcmaxvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 8017ec0:	183b      	adds	r3, r7, r0
 8017ec2:	881b      	ldrh	r3, [r3, #0]
 8017ec4:	187a      	adds	r2, r7, r1
 8017ec6:	8812      	ldrh	r2, [r2, #0]
 8017ec8:	4353      	muls	r3, r2
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	da00      	bge.n	8017ed0 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x35a>
 8017ece:	3301      	adds	r3, #1
 8017ed0:	105b      	asrs	r3, r3, #1
 8017ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 8017ed4:	2354      	movs	r3, #84	@ 0x54
 8017ed6:	18fb      	adds	r3, r7, r3
 8017ed8:	881b      	ldrh	r3, [r3, #0]
 8017eda:	663b      	str	r3, [r7, #96]	@ 0x60
            break;
 8017edc:	e042      	b.n	8017f64 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3ee>
            snkmaxvoltage50mv = snkpdo.SNKBatteryPDO.MaxVoltageIn50mVunits;
 8017ede:	2336      	movs	r3, #54	@ 0x36
 8017ee0:	18fb      	adds	r3, r7, r3
 8017ee2:	881b      	ldrh	r3, [r3, #0]
 8017ee4:	049b      	lsls	r3, r3, #18
 8017ee6:	0d9b      	lsrs	r3, r3, #22
 8017ee8:	b29a      	uxth	r2, r3
 8017eea:	214e      	movs	r1, #78	@ 0x4e
 8017eec:	187b      	adds	r3, r7, r1
 8017eee:	801a      	strh	r2, [r3, #0]
            snkminvoltage50mv = snkpdo.SNKBatteryPDO.MinVoltageIn50mVunits;
 8017ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ef2:	031b      	lsls	r3, r3, #12
 8017ef4:	0d9b      	lsrs	r3, r3, #22
 8017ef6:	b29a      	uxth	r2, r3
 8017ef8:	204c      	movs	r0, #76	@ 0x4c
 8017efa:	183b      	adds	r3, r7, r0
 8017efc:	801a      	strh	r2, [r3, #0]
            snkoppower250mw   = snkpdo.SNKBatteryPDO.OperationalPowerIn250mWunits;
 8017efe:	2334      	movs	r3, #52	@ 0x34
 8017f00:	18fb      	adds	r3, r7, r3
 8017f02:	881b      	ldrh	r3, [r3, #0]
 8017f04:	059b      	lsls	r3, r3, #22
 8017f06:	0d9b      	lsrs	r3, r3, #22
 8017f08:	b29b      	uxth	r3, r3
 8017f0a:	647b      	str	r3, [r7, #68]	@ 0x44
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 8017f0c:	187a      	adds	r2, r7, r1
 8017f0e:	2454      	movs	r4, #84	@ 0x54
 8017f10:	193b      	adds	r3, r7, r4
 8017f12:	8812      	ldrh	r2, [r2, #0]
 8017f14:	881b      	ldrh	r3, [r3, #0]
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d326      	bcc.n	8017f68 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f2>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 8017f1a:	183a      	adds	r2, r7, r0
 8017f1c:	2352      	movs	r3, #82	@ 0x52
 8017f1e:	18fb      	adds	r3, r7, r3
 8017f20:	8812      	ldrh	r2, [r2, #0]
 8017f22:	881b      	ldrh	r3, [r3, #0]
 8017f24:	429a      	cmp	r2, r3
 8017f26:	d81f      	bhi.n	8017f68 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f2>
                &&(snkoppower250mw <= ((srcmaxvoltage50mv * srcmaxcurrent10ma)/500)))  /* to get value in 250 mw units */
 8017f28:	193b      	adds	r3, r7, r4
 8017f2a:	881b      	ldrh	r3, [r3, #0]
 8017f2c:	2250      	movs	r2, #80	@ 0x50
 8017f2e:	18ba      	adds	r2, r7, r2
 8017f30:	8812      	ldrh	r2, [r2, #0]
 8017f32:	4353      	muls	r3, r2
 8017f34:	22fa      	movs	r2, #250	@ 0xfa
 8017f36:	0051      	lsls	r1, r2, #1
 8017f38:	0018      	movs	r0, r3
 8017f3a:	f7ee f9d1 	bl	80062e0 <__divsi3>
 8017f3e:	0003      	movs	r3, r0
 8017f40:	001a      	movs	r2, r3
 8017f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d80f      	bhi.n	8017f68 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f2>
              currentrequestedpower   = snkoppower250mw * 250; /* to get value in mw */
 8017f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f4a:	22fa      	movs	r2, #250	@ 0xfa
 8017f4c:	4353      	muls	r3, r2
 8017f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 8017f50:	193b      	adds	r3, r7, r4
 8017f52:	881b      	ldrh	r3, [r3, #0]
 8017f54:	663b      	str	r3, [r7, #96]	@ 0x60
            break;
 8017f56:	e007      	b.n	8017f68 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f2>
            break;
 8017f58:	46c0      	nop			@ (mov r8, r8)
 8017f5a:	e006      	b.n	8017f6a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f4>
            break;
 8017f5c:	46c0      	nop			@ (mov r8, r8)
 8017f5e:	e004      	b.n	8017f6a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f4>
            break;
 8017f60:	46c0      	nop			@ (mov r8, r8)
 8017f62:	e002      	b.n	8017f6a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f4>
            break;
 8017f64:	46c0      	nop			@ (mov r8, r8)
 8017f66:	e000      	b.n	8017f6a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x3f4>
            break;
 8017f68:	46c0      	nop			@ (mov r8, r8)
        }
        if (currentrequestedpower > maxrequestedpower)
 8017f6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8017f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d905      	bls.n	8017f7e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x408>
        {
          match = USBPD_TRUE;
 8017f72:	2301      	movs	r3, #1
 8017f74:	677b      	str	r3, [r7, #116]	@ 0x74
          maxrequestedpower   = currentrequestedpower;
 8017f76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
          maxrequestedvoltage = currentrequestedvoltage;
 8017f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017f7c:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i=0; i<nbsnkpdo; i++)
 8017f7e:	2172      	movs	r1, #114	@ 0x72
 8017f80:	187b      	adds	r3, r7, r1
 8017f82:	881a      	ldrh	r2, [r3, #0]
 8017f84:	187b      	adds	r3, r7, r1
 8017f86:	3201      	adds	r2, #1
 8017f88:	801a      	strh	r2, [r3, #0]
 8017f8a:	2372      	movs	r3, #114	@ 0x72
 8017f8c:	18fb      	adds	r3, r7, r3
 8017f8e:	881a      	ldrh	r2, [r3, #0]
 8017f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d200      	bcs.n	8017f98 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x422>
 8017f96:	e743      	b.n	8017e20 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x2aa>
        }
      }
      break;
 8017f98:	e198      	b.n	80182cc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x756>
    /* SRC Battery Supply PDO */
    case USBPD_CORE_PDO_TYPE_BATTERY:
      srcmaxvoltage50mv = srcpdo.SRCBatteryPDO.MaxVoltageIn50mVunits;
 8017f9a:	233a      	movs	r3, #58	@ 0x3a
 8017f9c:	18fb      	adds	r3, r7, r3
 8017f9e:	881b      	ldrh	r3, [r3, #0]
 8017fa0:	049b      	lsls	r3, r3, #18
 8017fa2:	0d9b      	lsrs	r3, r3, #22
 8017fa4:	b29a      	uxth	r2, r3
 8017fa6:	2354      	movs	r3, #84	@ 0x54
 8017fa8:	18fb      	adds	r3, r7, r3
 8017faa:	801a      	strh	r2, [r3, #0]
      srcminvoltage50mv = srcpdo.SRCBatteryPDO.MinVoltageIn50mVunits;
 8017fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fae:	031b      	lsls	r3, r3, #12
 8017fb0:	0d9b      	lsrs	r3, r3, #22
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	2352      	movs	r3, #82	@ 0x52
 8017fb6:	18fb      	adds	r3, r7, r3
 8017fb8:	801a      	strh	r2, [r3, #0]
      srcmaxpower250mw  = srcpdo.SRCBatteryPDO.MaxAllowablePowerIn250mWunits;
 8017fba:	2338      	movs	r3, #56	@ 0x38
 8017fbc:	18fb      	adds	r3, r7, r3
 8017fbe:	881b      	ldrh	r3, [r3, #0]
 8017fc0:	059b      	lsls	r3, r3, #22
 8017fc2:	0d9b      	lsrs	r3, r3, #22
 8017fc4:	b29b      	uxth	r3, r3
 8017fc6:	643b      	str	r3, [r7, #64]	@ 0x40
      /* Loop through SNK PDO list */
      for (i=0; i<nbsnkpdo; i++)
 8017fc8:	2372      	movs	r3, #114	@ 0x72
 8017fca:	18fb      	adds	r3, r7, r3
 8017fcc:	2200      	movs	r2, #0
 8017fce:	801a      	strh	r2, [r3, #0]
 8017fd0:	e0a9      	b.n	8018126 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x5b0>
      {
        currentrequestedpower = 0;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
        currentrequestedvoltage = 0;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	663b      	str	r3, [r7, #96]	@ 0x60
        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 8017fda:	2372      	movs	r3, #114	@ 0x72
 8017fdc:	18fb      	adds	r3, r7, r3
 8017fde:	881a      	ldrh	r2, [r3, #0]
 8017fe0:	2314      	movs	r3, #20
 8017fe2:	18fb      	adds	r3, r7, r3
 8017fe4:	0092      	lsls	r2, r2, #2
 8017fe6:	58d3      	ldr	r3, [r2, r3]
 8017fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        switch(snkpdo.GenericPDO.PowerObject)
 8017fea:	2337      	movs	r3, #55	@ 0x37
 8017fec:	18fb      	adds	r3, r7, r3
 8017fee:	781b      	ldrb	r3, [r3, #0]
 8017ff0:	061b      	lsls	r3, r3, #24
 8017ff2:	0f9b      	lsrs	r3, r3, #30
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	2b03      	cmp	r3, #3
 8017ff8:	d100      	bne.n	8017ffc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x486>
 8017ffa:	e07b      	b.n	80180f4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x57e>
 8017ffc:	dd00      	ble.n	8018000 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x48a>
 8017ffe:	e07b      	b.n	80180f8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x582>
 8018000:	2b02      	cmp	r3, #2
 8018002:	d007      	beq.n	8018014 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x49e>
 8018004:	dd00      	ble.n	8018008 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x492>
 8018006:	e077      	b.n	80180f8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x582>
 8018008:	2b00      	cmp	r3, #0
 801800a:	d100      	bne.n	801800e <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x498>
 801800c:	e076      	b.n	80180fc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x586>
 801800e:	2b01      	cmp	r3, #1
 8018010:	d03f      	beq.n	8018092 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x51c>
            break;
            /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
          default:
            break;
 8018012:	e071      	b.n	80180f8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x582>
            snkmaxvoltage50mv = snkpdo.SNKVariablePDO.MaxVoltageIn50mVunits;
 8018014:	2336      	movs	r3, #54	@ 0x36
 8018016:	18fb      	adds	r3, r7, r3
 8018018:	881b      	ldrh	r3, [r3, #0]
 801801a:	049b      	lsls	r3, r3, #18
 801801c:	0d9b      	lsrs	r3, r3, #22
 801801e:	b29a      	uxth	r2, r3
 8018020:	204e      	movs	r0, #78	@ 0x4e
 8018022:	183b      	adds	r3, r7, r0
 8018024:	801a      	strh	r2, [r3, #0]
            snkminvoltage50mv = snkpdo.SNKVariablePDO.MinVoltageIn50mVunits;
 8018026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018028:	031b      	lsls	r3, r3, #12
 801802a:	0d9b      	lsrs	r3, r3, #22
 801802c:	b29a      	uxth	r2, r3
 801802e:	244c      	movs	r4, #76	@ 0x4c
 8018030:	193b      	adds	r3, r7, r4
 8018032:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma  = snkpdo.SNKVariablePDO.OperationalCurrentIn10mAunits;
 8018034:	2334      	movs	r3, #52	@ 0x34
 8018036:	18fb      	adds	r3, r7, r3
 8018038:	881b      	ldrh	r3, [r3, #0]
 801803a:	059b      	lsls	r3, r3, #22
 801803c:	0d9b      	lsrs	r3, r3, #22
 801803e:	b29a      	uxth	r2, r3
 8018040:	214a      	movs	r1, #74	@ 0x4a
 8018042:	187b      	adds	r3, r7, r1
 8018044:	801a      	strh	r2, [r3, #0]
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 8018046:	183a      	adds	r2, r7, r0
 8018048:	2054      	movs	r0, #84	@ 0x54
 801804a:	183b      	adds	r3, r7, r0
 801804c:	8812      	ldrh	r2, [r2, #0]
 801804e:	881b      	ldrh	r3, [r3, #0]
 8018050:	429a      	cmp	r2, r3
 8018052:	d355      	bcc.n	8018100 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58a>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 8018054:	193a      	adds	r2, r7, r4
 8018056:	2352      	movs	r3, #82	@ 0x52
 8018058:	18fb      	adds	r3, r7, r3
 801805a:	8812      	ldrh	r2, [r2, #0]
 801805c:	881b      	ldrh	r3, [r3, #0]
 801805e:	429a      	cmp	r2, r3
 8018060:	d84e      	bhi.n	8018100 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58a>
                &&(srcmaxvoltage50mv * snkopcurrent10ma <= srcmaxpower250mw))
 8018062:	183b      	adds	r3, r7, r0
 8018064:	881b      	ldrh	r3, [r3, #0]
 8018066:	187a      	adds	r2, r7, r1
 8018068:	8812      	ldrh	r2, [r2, #0]
 801806a:	4353      	muls	r3, r2
 801806c:	001a      	movs	r2, r3
 801806e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018070:	4293      	cmp	r3, r2
 8018072:	d345      	bcc.n	8018100 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58a>
              currentrequestedpower = (srcmaxvoltage50mv * snkopcurrent10ma) / 2; /* to get value in mw */
 8018074:	183b      	adds	r3, r7, r0
 8018076:	881b      	ldrh	r3, [r3, #0]
 8018078:	187a      	adds	r2, r7, r1
 801807a:	8812      	ldrh	r2, [r2, #0]
 801807c:	4353      	muls	r3, r2
 801807e:	2b00      	cmp	r3, #0
 8018080:	da00      	bge.n	8018084 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x50e>
 8018082:	3301      	adds	r3, #1
 8018084:	105b      	asrs	r3, r3, #1
 8018086:	66bb      	str	r3, [r7, #104]	@ 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 8018088:	2354      	movs	r3, #84	@ 0x54
 801808a:	18fb      	adds	r3, r7, r3
 801808c:	881b      	ldrh	r3, [r3, #0]
 801808e:	663b      	str	r3, [r7, #96]	@ 0x60
            break;
 8018090:	e036      	b.n	8018100 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58a>
            snkmaxvoltage50mv = snkpdo.SNKBatteryPDO.MaxVoltageIn50mVunits;
 8018092:	2336      	movs	r3, #54	@ 0x36
 8018094:	18fb      	adds	r3, r7, r3
 8018096:	881b      	ldrh	r3, [r3, #0]
 8018098:	049b      	lsls	r3, r3, #18
 801809a:	0d9b      	lsrs	r3, r3, #22
 801809c:	b29a      	uxth	r2, r3
 801809e:	214e      	movs	r1, #78	@ 0x4e
 80180a0:	187b      	adds	r3, r7, r1
 80180a2:	801a      	strh	r2, [r3, #0]
            snkminvoltage50mv = snkpdo.SNKBatteryPDO.MinVoltageIn50mVunits;
 80180a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180a6:	031b      	lsls	r3, r3, #12
 80180a8:	0d9b      	lsrs	r3, r3, #22
 80180aa:	b29a      	uxth	r2, r3
 80180ac:	204c      	movs	r0, #76	@ 0x4c
 80180ae:	183b      	adds	r3, r7, r0
 80180b0:	801a      	strh	r2, [r3, #0]
            snkoppower250mw   = snkpdo.SNKBatteryPDO.OperationalPowerIn250mWunits;
 80180b2:	2334      	movs	r3, #52	@ 0x34
 80180b4:	18fb      	adds	r3, r7, r3
 80180b6:	881b      	ldrh	r3, [r3, #0]
 80180b8:	059b      	lsls	r3, r3, #22
 80180ba:	0d9b      	lsrs	r3, r3, #22
 80180bc:	b29b      	uxth	r3, r3
 80180be:	647b      	str	r3, [r7, #68]	@ 0x44
            if (  (snkmaxvoltage50mv >= srcmaxvoltage50mv)
 80180c0:	187a      	adds	r2, r7, r1
 80180c2:	2154      	movs	r1, #84	@ 0x54
 80180c4:	187b      	adds	r3, r7, r1
 80180c6:	8812      	ldrh	r2, [r2, #0]
 80180c8:	881b      	ldrh	r3, [r3, #0]
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d31a      	bcc.n	8018104 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58e>
                &&(snkminvoltage50mv <= srcminvoltage50mv)
 80180ce:	183a      	adds	r2, r7, r0
 80180d0:	2352      	movs	r3, #82	@ 0x52
 80180d2:	18fb      	adds	r3, r7, r3
 80180d4:	8812      	ldrh	r2, [r2, #0]
 80180d6:	881b      	ldrh	r3, [r3, #0]
 80180d8:	429a      	cmp	r2, r3
 80180da:	d813      	bhi.n	8018104 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58e>
                &&(snkoppower250mw <= srcmaxpower250mw))
 80180dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80180de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d80f      	bhi.n	8018104 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58e>
              currentrequestedpower   = snkoppower250mw * 250; /* to get value in mw */
 80180e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80180e6:	22fa      	movs	r2, #250	@ 0xfa
 80180e8:	4353      	muls	r3, r2
 80180ea:	66bb      	str	r3, [r7, #104]	@ 0x68
              currentrequestedvoltage = srcmaxvoltage50mv;
 80180ec:	187b      	adds	r3, r7, r1
 80180ee:	881b      	ldrh	r3, [r3, #0]
 80180f0:	663b      	str	r3, [r7, #96]	@ 0x60
            break;
 80180f2:	e007      	b.n	8018104 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x58e>
            break;
 80180f4:	46c0      	nop			@ (mov r8, r8)
 80180f6:	e006      	b.n	8018106 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x590>
            break;
 80180f8:	46c0      	nop			@ (mov r8, r8)
 80180fa:	e004      	b.n	8018106 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x590>
            break;
 80180fc:	46c0      	nop			@ (mov r8, r8)
 80180fe:	e002      	b.n	8018106 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x590>
            break;
 8018100:	46c0      	nop			@ (mov r8, r8)
 8018102:	e000      	b.n	8018106 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x590>
            break;
 8018104:	46c0      	nop			@ (mov r8, r8)
        }
        if (currentrequestedpower > maxrequestedpower)
 8018106:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8018108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801810a:	429a      	cmp	r2, r3
 801810c:	d905      	bls.n	801811a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x5a4>
        {
          match = USBPD_TRUE;
 801810e:	2301      	movs	r3, #1
 8018110:	677b      	str	r3, [r7, #116]	@ 0x74
          maxrequestedpower   = currentrequestedpower;
 8018112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018114:	66fb      	str	r3, [r7, #108]	@ 0x6c
          maxrequestedvoltage = currentrequestedvoltage;
 8018116:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018118:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i=0; i<nbsnkpdo; i++)
 801811a:	2172      	movs	r1, #114	@ 0x72
 801811c:	187b      	adds	r3, r7, r1
 801811e:	881a      	ldrh	r2, [r3, #0]
 8018120:	187b      	adds	r3, r7, r1
 8018122:	3201      	adds	r2, #1
 8018124:	801a      	strh	r2, [r3, #0]
 8018126:	2372      	movs	r3, #114	@ 0x72
 8018128:	18fb      	adds	r3, r7, r3
 801812a:	881a      	ldrh	r2, [r3, #0]
 801812c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801812e:	429a      	cmp	r2, r3
 8018130:	d200      	bcs.n	8018134 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x5be>
 8018132:	e74e      	b.n	8017fd2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x45c>
        }
      }
      break;
 8018134:	e0ca      	b.n	80182cc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x756>
    /* Augmented Power Data Object (APDO) */
    case USBPD_CORE_PDO_TYPE_APDO:
      {
        uint16_t srcmaxvoltage100mv, srcmaxcurrent50ma;
        srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 8018136:	233a      	movs	r3, #58	@ 0x3a
 8018138:	18fb      	adds	r3, r7, r3
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	05db      	lsls	r3, r3, #23
 801813e:	0e1b      	lsrs	r3, r3, #24
 8018140:	b2da      	uxtb	r2, r3
 8018142:	235e      	movs	r3, #94	@ 0x5e
 8018144:	18fb      	adds	r3, r7, r3
 8018146:	801a      	strh	r2, [r3, #0]
        srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 8018148:	2338      	movs	r3, #56	@ 0x38
 801814a:	18fb      	adds	r3, r7, r3
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	065b      	lsls	r3, r3, #25
 8018150:	0e5b      	lsrs	r3, r3, #25
 8018152:	b2da      	uxtb	r2, r3
 8018154:	235c      	movs	r3, #92	@ 0x5c
 8018156:	18fb      	adds	r3, r7, r3
 8018158:	801a      	strh	r2, [r3, #0]
        /* Loop through SNK PDO list */
        for (i=0; i<nbsnkpdo; i++)
 801815a:	2372      	movs	r3, #114	@ 0x72
 801815c:	18fb      	adds	r3, r7, r3
 801815e:	2200      	movs	r2, #0
 8018160:	801a      	strh	r2, [r3, #0]
 8018162:	e0a9      	b.n	80182b8 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x742>
        {
          currentrequestedpower = 0;
 8018164:	2300      	movs	r3, #0
 8018166:	66bb      	str	r3, [r7, #104]	@ 0x68
          currentrequestedvoltage = 0;
 8018168:	2300      	movs	r3, #0
 801816a:	663b      	str	r3, [r7, #96]	@ 0x60
          /* Retrieve SNK PDO value according to its type */
          snkpdo.d32 = snkpdo_array[i];
 801816c:	2372      	movs	r3, #114	@ 0x72
 801816e:	18fb      	adds	r3, r7, r3
 8018170:	881a      	ldrh	r2, [r3, #0]
 8018172:	2314      	movs	r3, #20
 8018174:	18fb      	adds	r3, r7, r3
 8018176:	0092      	lsls	r2, r2, #2
 8018178:	58d3      	ldr	r3, [r2, r3]
 801817a:	637b      	str	r3, [r7, #52]	@ 0x34
          switch(snkpdo.GenericPDO.PowerObject)
 801817c:	2337      	movs	r3, #55	@ 0x37
 801817e:	18fb      	adds	r3, r7, r3
 8018180:	781b      	ldrb	r3, [r3, #0]
 8018182:	061b      	lsls	r3, r3, #24
 8018184:	0f9b      	lsrs	r3, r3, #30
 8018186:	b2db      	uxtb	r3, r3
 8018188:	2b02      	cmp	r3, #2
 801818a:	dc03      	bgt.n	8018194 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x61e>
 801818c:	2b00      	cmp	r3, #0
 801818e:	db00      	blt.n	8018192 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x61c>
 8018190:	e07f      	b.n	8018292 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x71c>
                  }
                }
              }
              break;
            default:
              break;
 8018192:	e081      	b.n	8018298 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x722>
          switch(snkpdo.GenericPDO.PowerObject)
 8018194:	2b03      	cmp	r3, #3
 8018196:	d000      	beq.n	801819a <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x624>
              break;
 8018198:	e07e      	b.n	8018298 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x722>
                snkminvoltage100mv = snkpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801819a:	2134      	movs	r1, #52	@ 0x34
 801819c:	187b      	adds	r3, r7, r1
 801819e:	785a      	ldrb	r2, [r3, #1]
 80181a0:	245a      	movs	r4, #90	@ 0x5a
 80181a2:	193b      	adds	r3, r7, r4
 80181a4:	801a      	strh	r2, [r3, #0]
                snkmaxvoltage100mv = snkpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 80181a6:	2336      	movs	r3, #54	@ 0x36
 80181a8:	18fb      	adds	r3, r7, r3
 80181aa:	881b      	ldrh	r3, [r3, #0]
 80181ac:	05db      	lsls	r3, r3, #23
 80181ae:	0e1b      	lsrs	r3, r3, #24
 80181b0:	b2da      	uxtb	r2, r3
 80181b2:	2558      	movs	r5, #88	@ 0x58
 80181b4:	197b      	adds	r3, r7, r5
 80181b6:	801a      	strh	r2, [r3, #0]
                snkmaxcurrent50ma = snkpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 80181b8:	187b      	adds	r3, r7, r1
 80181ba:	781b      	ldrb	r3, [r3, #0]
 80181bc:	065b      	lsls	r3, r3, #25
 80181be:	0e5b      	lsrs	r3, r3, #25
 80181c0:	b2da      	uxtb	r2, r3
 80181c2:	2056      	movs	r0, #86	@ 0x56
 80181c4:	183b      	adds	r3, r7, r0
 80181c6:	801a      	strh	r2, [r3, #0]
                if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage))
 80181c8:	193b      	adds	r3, r7, r4
 80181ca:	881b      	ldrh	r3, [r3, #0]
 80181cc:	2264      	movs	r2, #100	@ 0x64
 80181ce:	4353      	muls	r3, r2
 80181d0:	b29b      	uxth	r3, r3
 80181d2:	001a      	movs	r2, r3
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	429a      	cmp	r2, r3
 80181da:	d85c      	bhi.n	8018296 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x720>
                 && ((*PtrRequestedVoltage) <= PWR_DECODE_100MV(snkmaxvoltage100mv))
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	197a      	adds	r2, r7, r5
 80181e2:	8812      	ldrh	r2, [r2, #0]
 80181e4:	2164      	movs	r1, #100	@ 0x64
 80181e6:	434a      	muls	r2, r1
 80181e8:	b292      	uxth	r2, r2
 80181ea:	4293      	cmp	r3, r2
 80181ec:	d853      	bhi.n	8018296 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x720>
                 && (snkmaxcurrent50ma <= srcmaxcurrent50ma))
 80181ee:	183a      	adds	r2, r7, r0
 80181f0:	235c      	movs	r3, #92	@ 0x5c
 80181f2:	18fb      	adds	r3, r7, r3
 80181f4:	8812      	ldrh	r2, [r2, #0]
 80181f6:	881b      	ldrh	r3, [r3, #0]
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d84c      	bhi.n	8018296 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x720>
                  if (0 != *PtrRequestedPower)
 80181fc:	683b      	ldr	r3, [r7, #0]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d017      	beq.n	8018234 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x6be>
                    currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma)) / 1000; /* to get value in mw */
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	183a      	adds	r2, r7, r0
 801820a:	8812      	ldrh	r2, [r2, #0]
 801820c:	2132      	movs	r1, #50	@ 0x32
 801820e:	434a      	muls	r2, r1
 8018210:	b292      	uxth	r2, r2
 8018212:	4353      	muls	r3, r2
 8018214:	22fa      	movs	r2, #250	@ 0xfa
 8018216:	0091      	lsls	r1, r2, #2
 8018218:	0018      	movs	r0, r3
 801821a:	f7ed ffd7 	bl	80061cc <__udivsi3>
 801821e:	0003      	movs	r3, r0
 8018220:	66bb      	str	r3, [r7, #104]	@ 0x68
                    currentrequestedvoltage = (*PtrRequestedVoltage / 50);
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	2132      	movs	r1, #50	@ 0x32
 8018228:	0018      	movs	r0, r3
 801822a:	f7ed ffcf 	bl	80061cc <__udivsi3>
 801822e:	0003      	movs	r3, r0
 8018230:	663b      	str	r3, [r7, #96]	@ 0x60
              break;
 8018232:	e030      	b.n	8018296 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x720>
                    *PtrRequestedVoltage = MIN(PWR_DECODE_100MV(srcmaxvoltage100mv), PWR_DECODE_100MV(snkmaxvoltage100mv));
 8018234:	2358      	movs	r3, #88	@ 0x58
 8018236:	18fb      	adds	r3, r7, r3
 8018238:	881b      	ldrh	r3, [r3, #0]
 801823a:	2264      	movs	r2, #100	@ 0x64
 801823c:	4353      	muls	r3, r2
 801823e:	b299      	uxth	r1, r3
 8018240:	235e      	movs	r3, #94	@ 0x5e
 8018242:	18fb      	adds	r3, r7, r3
 8018244:	881b      	ldrh	r3, [r3, #0]
 8018246:	2264      	movs	r2, #100	@ 0x64
 8018248:	4353      	muls	r3, r2
 801824a:	b29b      	uxth	r3, r3
 801824c:	1c18      	adds	r0, r3, #0
 801824e:	b28a      	uxth	r2, r1
 8018250:	b283      	uxth	r3, r0
 8018252:	429a      	cmp	r2, r3
 8018254:	d900      	bls.n	8018258 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x6e2>
 8018256:	1c01      	adds	r1, r0, #0
 8018258:	b28b      	uxth	r3, r1
 801825a:	001a      	movs	r2, r3
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	601a      	str	r2, [r3, #0]
                    currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma)) / 1000; /* to get value in mw */
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	2256      	movs	r2, #86	@ 0x56
 8018266:	18ba      	adds	r2, r7, r2
 8018268:	8812      	ldrh	r2, [r2, #0]
 801826a:	2132      	movs	r1, #50	@ 0x32
 801826c:	434a      	muls	r2, r1
 801826e:	b292      	uxth	r2, r2
 8018270:	4353      	muls	r3, r2
 8018272:	22fa      	movs	r2, #250	@ 0xfa
 8018274:	0091      	lsls	r1, r2, #2
 8018276:	0018      	movs	r0, r3
 8018278:	f7ed ffa8 	bl	80061cc <__udivsi3>
 801827c:	0003      	movs	r3, r0
 801827e:	66bb      	str	r3, [r7, #104]	@ 0x68
                    currentrequestedvoltage = (*PtrRequestedVoltage / 50);
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	2132      	movs	r1, #50	@ 0x32
 8018286:	0018      	movs	r0, r3
 8018288:	f7ed ffa0 	bl	80061cc <__udivsi3>
 801828c:	0003      	movs	r3, r0
 801828e:	663b      	str	r3, [r7, #96]	@ 0x60
              break;
 8018290:	e001      	b.n	8018296 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x720>
              break;
 8018292:	46c0      	nop			@ (mov r8, r8)
 8018294:	e000      	b.n	8018298 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x722>
              break;
 8018296:	46c0      	nop			@ (mov r8, r8)
          }
          if (currentrequestedpower > maxrequestedpower)
 8018298:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801829a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801829c:	429a      	cmp	r2, r3
 801829e:	d905      	bls.n	80182ac <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x736>
          {
            match = USBPD_TRUE;
 80182a0:	2301      	movs	r3, #1
 80182a2:	677b      	str	r3, [r7, #116]	@ 0x74
            maxrequestedpower   = currentrequestedpower;
 80182a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80182a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
            maxrequestedvoltage = currentrequestedvoltage;
 80182a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80182aa:	667b      	str	r3, [r7, #100]	@ 0x64
        for (i=0; i<nbsnkpdo; i++)
 80182ac:	2172      	movs	r1, #114	@ 0x72
 80182ae:	187b      	adds	r3, r7, r1
 80182b0:	881a      	ldrh	r2, [r3, #0]
 80182b2:	187b      	adds	r3, r7, r1
 80182b4:	3201      	adds	r2, #1
 80182b6:	801a      	strh	r2, [r3, #0]
 80182b8:	2372      	movs	r3, #114	@ 0x72
 80182ba:	18fb      	adds	r3, r7, r3
 80182bc:	881a      	ldrh	r2, [r3, #0]
 80182be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182c0:	429a      	cmp	r2, r3
 80182c2:	d200      	bcs.n	80182c6 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x750>
 80182c4:	e74e      	b.n	8018164 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x5ee>
          }
        }
      }
      break;
 80182c6:	e001      	b.n	80182cc <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x756>
    default:
      return(USBPD_FALSE);
 80182c8:	2300      	movs	r3, #0
 80182ca:	e00b      	b.n	80182e4 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x76e>
  }
  if (maxrequestedpower > 0)
 80182cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d007      	beq.n	80182e2 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO+0x76c>
  {
    *PtrRequestedPower   = maxrequestedpower;
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80182d6:	601a      	str	r2, [r3, #0]
    *PtrRequestedVoltage = maxrequestedvoltage * 50; /* value in mV */
 80182d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182da:	2232      	movs	r2, #50	@ 0x32
 80182dc:	435a      	muls	r2, r3
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	601a      	str	r2, [r3, #0]
  }
  return(match);
 80182e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 80182e4:	0018      	movs	r0, r3
 80182e6:	46bd      	mov	sp, r7
 80182e8:	b01e      	add	sp, #120	@ 0x78
 80182ea:	bdb0      	pop	{r4, r5, r7, pc}

080182ec <DPM_FindVoltageIndex>:
  * @param  PortNum Port number
  * @param  PtrRequestPowerDetails  Sink requested power details structure pointer
  * @retval Index of PDO within source capabilities message (DPM_NO_SRC_PDO_FOUND indicating not found)
  */
static uint32_t DPM_FindVoltageIndex(uint32_t PortNum, USBPD_DPM_SNKPowerRequestDetails_TypeDef* PtrRequestPowerDetails, uint8_t Method)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b090      	sub	sp, #64	@ 0x40
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	60f8      	str	r0, [r7, #12]
 80182f4:	60b9      	str	r1, [r7, #8]
 80182f6:	1dfb      	adds	r3, r7, #7
 80182f8:	701a      	strb	r2, [r3, #0]
  uint32_t nbpdo;
  uint32_t allowablepower;
  uint32_t selpower;
  uint32_t allowablecurrent;
  uint32_t selcurrent;
  uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 80182fa:	23ff      	movs	r3, #255	@ 0xff
 80182fc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t temp_index;
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	2254      	movs	r2, #84	@ 0x54
 8018302:	435a      	muls	r2, r3
 8018304:	4b74      	ldr	r3, [pc, #464]	@ (80184d8 <DPM_FindVoltageIndex+0x1ec>)
 8018306:	18d3      	adds	r3, r2, r3
 8018308:	62bb      	str	r3, [r7, #40]	@ 0x28

  allowablepower = 0;
 801830a:	2300      	movs	r3, #0
 801830c:	613b      	str	r3, [r7, #16]
  selpower       = 0;
 801830e:	2300      	movs	r3, #0
 8018310:	63bb      	str	r3, [r7, #56]	@ 0x38
  reqvoltage     = 0;
 8018312:	2300      	movs	r3, #0
 8018314:	63fb      	str	r3, [r7, #60]	@ 0x3c
  voltage        = 20000;
 8018316:	4b71      	ldr	r3, [pc, #452]	@ (80184dc <DPM_FindVoltageIndex+0x1f0>)
 8018318:	617b      	str	r3, [r7, #20]
  selcurrent     = 1500;
 801831a:	4b71      	ldr	r3, [pc, #452]	@ (80184e0 <DPM_FindVoltageIndex+0x1f4>)
 801831c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 801831e:	4971      	ldr	r1, [pc, #452]	@ (80184e4 <DPM_FindVoltageIndex+0x1f8>)
 8018320:	68fa      	ldr	r2, [r7, #12]
 8018322:	0013      	movs	r3, r2
 8018324:	011b      	lsls	r3, r3, #4
 8018326:	1a9b      	subs	r3, r3, r2
 8018328:	00db      	lsls	r3, r3, #3
 801832a:	18cb      	adds	r3, r1, r3
 801832c:	333c      	adds	r3, #60	@ 0x3c
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	627b      	str	r3, [r7, #36]	@ 0x24
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 8018332:	68fa      	ldr	r2, [r7, #12]
 8018334:	0013      	movs	r3, r2
 8018336:	011b      	lsls	r3, r3, #4
 8018338:	1a9b      	subs	r3, r3, r2
 801833a:	00db      	lsls	r3, r3, #3
 801833c:	3320      	adds	r3, #32
 801833e:	001a      	movs	r2, r3
 8018340:	4b68      	ldr	r3, [pc, #416]	@ (80184e4 <DPM_FindVoltageIndex+0x1f8>)
 8018342:	18d3      	adds	r3, r2, r3
 8018344:	623b      	str	r3, [r7, #32]

  /* search the best PDO in the list of source PDOs */
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 8018346:	2300      	movs	r3, #0
 8018348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801834a:	e09a      	b.n	8018482 <DPM_FindVoltageIndex+0x196>
  {
    pdo.d32 = ptpdoarray[temp_index];
 801834c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801834e:	009b      	lsls	r3, r3, #2
 8018350:	6a3a      	ldr	r2, [r7, #32]
 8018352:	18d3      	adds	r3, r2, r3
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	61bb      	str	r3, [r7, #24]

    /* Check if the received source PDO is matching any of the SNK PDO */
    allowablepower = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	613b      	str	r3, [r7, #16]
    if (USBPD_TRUE == USBPD_DPM_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	b2d8      	uxtb	r0, r3
 8018360:	69b9      	ldr	r1, [r7, #24]
 8018362:	2310      	movs	r3, #16
 8018364:	18fb      	adds	r3, r7, r3
 8018366:	2214      	movs	r2, #20
 8018368:	18ba      	adds	r2, r7, r2
 801836a:	f7ff fc04 	bl	8017b76 <USBPD_DPM_SNK_EvaluateMatchWithSRCPDO>
 801836e:	0003      	movs	r3, r0
 8018370:	2b01      	cmp	r3, #1
 8018372:	d000      	beq.n	8018376 <DPM_FindVoltageIndex+0x8a>
 8018374:	e082      	b.n	801847c <DPM_FindVoltageIndex+0x190>
    {
      allowablecurrent = (allowablepower / voltage) * 1000U;
 8018376:	693b      	ldr	r3, [r7, #16]
 8018378:	697a      	ldr	r2, [r7, #20]
 801837a:	0011      	movs	r1, r2
 801837c:	0018      	movs	r0, r3
 801837e:	f7ed ff25 	bl	80061cc <__udivsi3>
 8018382:	0003      	movs	r3, r0
 8018384:	001a      	movs	r2, r3
 8018386:	0013      	movs	r3, r2
 8018388:	015b      	lsls	r3, r3, #5
 801838a:	1a9b      	subs	r3, r3, r2
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	189b      	adds	r3, r3, r2
 8018390:	00db      	lsls	r3, r3, #3
 8018392:	61fb      	str	r3, [r7, #28]

      /* Choose the best PDO depending on the user preferences */
      switch (Method)
 8018394:	1dfb      	adds	r3, r7, #7
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	2b05      	cmp	r3, #5
 801839a:	d85b      	bhi.n	8018454 <DPM_FindVoltageIndex+0x168>
 801839c:	009a      	lsls	r2, r3, #2
 801839e:	4b52      	ldr	r3, [pc, #328]	@ (80184e8 <DPM_FindVoltageIndex+0x1fc>)
 80183a0:	18d3      	adds	r3, r2, r3
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	469f      	mov	pc, r3
      {
        case PDO_SEL_METHOD_MAX_PWR:
          if (allowablepower > selpower)
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d25b      	bcs.n	8018466 <DPM_FindVoltageIndex+0x17a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 80183ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183b0:	633b      	str	r3, [r7, #48]	@ 0x30
            selpower   = allowablepower;
 80183b2:	693b      	ldr	r3, [r7, #16]
 80183b4:	63bb      	str	r3, [r7, #56]	@ 0x38
            reqvoltage = voltage;
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            selcurrent = allowablecurrent;
 80183ba:	69fb      	ldr	r3, [r7, #28]
 80183bc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          break;
 80183be:	e052      	b.n	8018466 <DPM_FindVoltageIndex+0x17a>

        case PDO_SEL_METHOD_MIN_PWR:
          if ((allowablepower < selpower) || (selpower == 0))
 80183c0:	693b      	ldr	r3, [r7, #16]
 80183c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80183c4:	429a      	cmp	r2, r3
 80183c6:	d802      	bhi.n	80183ce <DPM_FindVoltageIndex+0xe2>
 80183c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d14d      	bne.n	801846a <DPM_FindVoltageIndex+0x17e>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 80183ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183d0:	633b      	str	r3, [r7, #48]	@ 0x30
            selpower   = allowablepower;
 80183d2:	693b      	ldr	r3, [r7, #16]
 80183d4:	63bb      	str	r3, [r7, #56]	@ 0x38
            reqvoltage = voltage;
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            selcurrent = allowablecurrent;
 80183da:	69fb      	ldr	r3, [r7, #28]
 80183dc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          break;
 80183de:	e044      	b.n	801846a <DPM_FindVoltageIndex+0x17e>

        case PDO_SEL_METHOD_MAX_VOLT:
          if (voltage > reqvoltage)
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d242      	bcs.n	801846e <DPM_FindVoltageIndex+0x182>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 80183e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183ea:	633b      	str	r3, [r7, #48]	@ 0x30
            selpower   = allowablepower;
 80183ec:	693b      	ldr	r3, [r7, #16]
 80183ee:	63bb      	str	r3, [r7, #56]	@ 0x38
            reqvoltage = voltage;
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            selcurrent = allowablecurrent;
 80183f4:	69fb      	ldr	r3, [r7, #28]
 80183f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          break;
 80183f8:	e039      	b.n	801846e <DPM_FindVoltageIndex+0x182>

        case PDO_SEL_METHOD_MIN_VOLT:
          if ((voltage < reqvoltage) || (reqvoltage == 0))
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80183fe:	429a      	cmp	r2, r3
 8018400:	d802      	bhi.n	8018408 <DPM_FindVoltageIndex+0x11c>
 8018402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018404:	2b00      	cmp	r3, #0
 8018406:	d134      	bne.n	8018472 <DPM_FindVoltageIndex+0x186>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8018408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801840a:	633b      	str	r3, [r7, #48]	@ 0x30
            selpower   = allowablepower;
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	63bb      	str	r3, [r7, #56]	@ 0x38
            reqvoltage = voltage;
 8018410:	697b      	ldr	r3, [r7, #20]
 8018412:	63fb      	str	r3, [r7, #60]	@ 0x3c
            selcurrent = allowablecurrent;
 8018414:	69fb      	ldr	r3, [r7, #28]
 8018416:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          break;
 8018418:	e02b      	b.n	8018472 <DPM_FindVoltageIndex+0x186>

        case PDO_SEL_METHOD_MAX_CUR:
          if (allowablecurrent > selcurrent)
 801841a:	69fa      	ldr	r2, [r7, #28]
 801841c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801841e:	429a      	cmp	r2, r3
 8018420:	d929      	bls.n	8018476 <DPM_FindVoltageIndex+0x18a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8018422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018424:	633b      	str	r3, [r7, #48]	@ 0x30
            selpower   = allowablepower;
 8018426:	693b      	ldr	r3, [r7, #16]
 8018428:	63bb      	str	r3, [r7, #56]	@ 0x38
            reqvoltage = voltage;
 801842a:	697b      	ldr	r3, [r7, #20]
 801842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            selcurrent = allowablecurrent;
 801842e:	69fb      	ldr	r3, [r7, #28]
 8018430:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          break;
 8018432:	e020      	b.n	8018476 <DPM_FindVoltageIndex+0x18a>

        case PDO_SEL_METHOD_MIN_CUR:
          if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 8018434:	69fa      	ldr	r2, [r7, #28]
 8018436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018438:	429a      	cmp	r2, r3
 801843a:	d302      	bcc.n	8018442 <DPM_FindVoltageIndex+0x156>
 801843c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801843e:	2b00      	cmp	r3, #0
 8018440:	d11b      	bne.n	801847a <DPM_FindVoltageIndex+0x18e>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8018442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018444:	633b      	str	r3, [r7, #48]	@ 0x30
            selpower   = allowablepower;
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	63bb      	str	r3, [r7, #56]	@ 0x38
            reqvoltage = voltage;
 801844a:	697b      	ldr	r3, [r7, #20]
 801844c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            selcurrent = allowablecurrent;
 801844e:	69fb      	ldr	r3, [r7, #28]
 8018450:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          break;
 8018452:	e012      	b.n	801847a <DPM_FindVoltageIndex+0x18e>

        default:
          /* Default behavior: last PDO is selected */
          curr_index = temp_index;
 8018454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018456:	633b      	str	r3, [r7, #48]	@ 0x30
          selpower   = allowablepower;
 8018458:	693b      	ldr	r3, [r7, #16]
 801845a:	63bb      	str	r3, [r7, #56]	@ 0x38
          reqvoltage = voltage;
 801845c:	697b      	ldr	r3, [r7, #20]
 801845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          selcurrent = allowablecurrent;
 8018460:	69fb      	ldr	r3, [r7, #28]
 8018462:	637b      	str	r3, [r7, #52]	@ 0x34
 8018464:	e00a      	b.n	801847c <DPM_FindVoltageIndex+0x190>
          break;
 8018466:	46c0      	nop			@ (mov r8, r8)
 8018468:	e008      	b.n	801847c <DPM_FindVoltageIndex+0x190>
          break;
 801846a:	46c0      	nop			@ (mov r8, r8)
 801846c:	e006      	b.n	801847c <DPM_FindVoltageIndex+0x190>
          break;
 801846e:	46c0      	nop			@ (mov r8, r8)
 8018470:	e004      	b.n	801847c <DPM_FindVoltageIndex+0x190>
          break;
 8018472:	46c0      	nop			@ (mov r8, r8)
 8018474:	e002      	b.n	801847c <DPM_FindVoltageIndex+0x190>
          break;
 8018476:	46c0      	nop			@ (mov r8, r8)
 8018478:	e000      	b.n	801847c <DPM_FindVoltageIndex+0x190>
          break;
 801847a:	46c0      	nop			@ (mov r8, r8)
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 801847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801847e:	3301      	adds	r3, #1
 8018480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018486:	429a      	cmp	r2, r3
 8018488:	d200      	bcs.n	801848c <DPM_FindVoltageIndex+0x1a0>
 801848a:	e75f      	b.n	801834c <DPM_FindVoltageIndex+0x60>
      }
    }
  }

  /* If a suitable PDO was found */
  if (curr_index != DPM_NO_SRC_PDO_FOUND)
 801848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801848e:	2bff      	cmp	r3, #255	@ 0xff
 8018490:	d01c      	beq.n	80184cc <DPM_FindVoltageIndex+0x1e0>
  {
    /* Fill the request power details */
    PtrRequestPowerDetails->MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8018492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018494:	685a      	ldr	r2, [r3, #4]
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	605a      	str	r2, [r3, #4]
    PtrRequestPowerDetails->OperatingCurrentInmAunits    = (1000U * selpower) / reqvoltage;
 801849a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801849c:	0013      	movs	r3, r2
 801849e:	015b      	lsls	r3, r3, #5
 80184a0:	1a9b      	subs	r3, r3, r2
 80184a2:	009b      	lsls	r3, r3, #2
 80184a4:	189b      	adds	r3, r3, r2
 80184a6:	00db      	lsls	r3, r3, #3
 80184a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80184aa:	0018      	movs	r0, r3
 80184ac:	f7ed fe8e 	bl	80061cc <__udivsi3>
 80184b0:	0003      	movs	r3, r0
 80184b2:	001a      	movs	r2, r3
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	609a      	str	r2, [r3, #8]
    PtrRequestPowerDetails->MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 80184b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184ba:	699a      	ldr	r2, [r3, #24]
 80184bc:	68bb      	ldr	r3, [r7, #8]
 80184be:	60da      	str	r2, [r3, #12]
    PtrRequestPowerDetails->OperatingPowerInmWunits      = selpower;
 80184c0:	68bb      	ldr	r3, [r7, #8]
 80184c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80184c4:	611a      	str	r2, [r3, #16]
    PtrRequestPowerDetails->RequestedVoltageInmVunits    = reqvoltage;
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80184ca:	601a      	str	r2, [r3, #0]
  }

  return curr_index;
 80184cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80184ce:	0018      	movs	r0, r3
 80184d0:	46bd      	mov	sp, r7
 80184d2:	b010      	add	sp, #64	@ 0x40
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	46c0      	nop			@ (mov r8, r8)
 80184d8:	200000d0 	.word	0x200000d0
 80184dc:	00004e20 	.word	0x00004e20
 80184e0:	000005dc 	.word	0x000005dc
 80184e4:	200020c4 	.word	0x200020c4
 80184e8:	08019c24 	.word	0x08019c24

080184ec <DPM_SNK_BuildRDOfromSelectedPDO>:
  * @retval None
  */
void DPM_SNK_BuildRDOfromSelectedPDO(uint8_t PortNum, uint8_t IndexSrcPDO,
                                     USBPD_DPM_SNKPowerRequestDetails_TypeDef *PtrRequestPowerDetails,
                                     USBPD_SNKRDO_TypeDef* Rdo, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 80184ec:	b5b0      	push	{r4, r5, r7, lr}
 80184ee:	b094      	sub	sp, #80	@ 0x50
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	60ba      	str	r2, [r7, #8]
 80184f4:	607b      	str	r3, [r7, #4]
 80184f6:	240f      	movs	r4, #15
 80184f8:	193b      	adds	r3, r7, r4
 80184fa:	1c02      	adds	r2, r0, #0
 80184fc:	701a      	strb	r2, [r3, #0]
 80184fe:	230e      	movs	r3, #14
 8018500:	18fb      	adds	r3, r7, r3
 8018502:	1c0a      	adds	r2, r1, #0
 8018504:	701a      	strb	r2, [r3, #0]
  uint32_t mv = 0, mw = 0, ma = 0, size;
 8018506:	2300      	movs	r3, #0
 8018508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801850a:	2300      	movs	r3, #0
 801850c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801850e:	2300      	movs	r3, #0
 8018510:	647b      	str	r3, [r7, #68]	@ 0x44
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 8018512:	193b      	adds	r3, r7, r4
 8018514:	781a      	ldrb	r2, [r3, #0]
 8018516:	0013      	movs	r3, r2
 8018518:	011b      	lsls	r3, r3, #4
 801851a:	1a9b      	subs	r3, r3, r2
 801851c:	00db      	lsls	r3, r3, #3
 801851e:	4ae6      	ldr	r2, [pc, #920]	@ (80188b8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 8018520:	189b      	adds	r3, r3, r2
 8018522:	643b      	str	r3, [r7, #64]	@ 0x40
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8018524:	193b      	adds	r3, r7, r4
 8018526:	781b      	ldrb	r3, [r3, #0]
 8018528:	2254      	movs	r2, #84	@ 0x54
 801852a:	435a      	muls	r2, r3
 801852c:	4be3      	ldr	r3, [pc, #908]	@ (80188bc <DPM_SNK_BuildRDOfromSelectedPDO+0x3d0>)
 801852e:	18d3      	adds	r3, r2, r3
 8018530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;
  /* Initialize RDO */
  rdo.d32 = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	633b      	str	r3, [r7, #48]	@ 0x30
  /* Read SNK PDO list for retrieving useful data to fill in RDO */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t*)&snkpdolist[0], &size);
 8018536:	2338      	movs	r3, #56	@ 0x38
 8018538:	18f9      	adds	r1, r7, r3
 801853a:	2514      	movs	r5, #20
 801853c:	197a      	adds	r2, r7, r5
 801853e:	193b      	adds	r3, r7, r4
 8018540:	7818      	ldrb	r0, [r3, #0]
 8018542:	000b      	movs	r3, r1
 8018544:	2101      	movs	r1, #1
 8018546:	f7ff f80b 	bl	8017560 <USBPD_PWR_IF_GetPortPDOs>
  /* Store value of 1st SNK PDO (Fixed) in local variable */
  snk_fixed_pdo.d32 = snkpdolist[0];
 801854a:	197b      	adds	r3, r7, r5
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	613b      	str	r3, [r7, #16]
  /* Set common fields in RDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 8018550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018552:	6a1b      	ldr	r3, [r3, #32]
 8018554:	637b      	str	r3, [r7, #52]	@ 0x34
  rdo.GenericRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 8018556:	2313      	movs	r3, #19
 8018558:	18fb      	adds	r3, r7, r3
 801855a:	781b      	ldrb	r3, [r3, #0]
 801855c:	075b      	lsls	r3, r3, #29
 801855e:	0fdb      	lsrs	r3, r3, #31
 8018560:	b2da      	uxtb	r2, r3
 8018562:	2333      	movs	r3, #51	@ 0x33
 8018564:	18fb      	adds	r3, r7, r3
 8018566:	2101      	movs	r1, #1
 8018568:	400a      	ands	r2, r1
 801856a:	1890      	adds	r0, r2, r2
 801856c:	781a      	ldrb	r2, [r3, #0]
 801856e:	2102      	movs	r1, #2
 8018570:	438a      	bics	r2, r1
 8018572:	1c11      	adds	r1, r2, #0
 8018574:	1c02      	adds	r2, r0, #0
 8018576:	430a      	orrs	r2, r1
 8018578:	701a      	strb	r2, [r3, #0]
  if (USBPD_SPECIFICATION_REV2 < DPM_Params[PortNum].PE_SpecRevision)
 801857a:	193b      	adds	r3, r7, r4
 801857c:	781a      	ldrb	r2, [r3, #0]
 801857e:	4bd0      	ldr	r3, [pc, #832]	@ (80188c0 <DPM_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 8018580:	0092      	lsls	r2, r2, #2
 8018582:	5cd3      	ldrb	r3, [r2, r3]
 8018584:	079b      	lsls	r3, r3, #30
 8018586:	0f9b      	lsrs	r3, r3, #30
 8018588:	b2db      	uxtb	r3, r3
 801858a:	2b01      	cmp	r3, #1
 801858c:	d931      	bls.n	80185f2 <DPM_SNK_BuildRDOfromSelectedPDO+0x106>
  {
    rdo.FixedVariableRDO.UnchunkedExtendedMessage = DPM_Settings[PortNum].PE_PD3_Support.d.PE_UnchunkSupport;
 801858e:	193b      	adds	r3, r7, r4
 8018590:	781a      	ldrb	r2, [r3, #0]
 8018592:	49cc      	ldr	r1, [pc, #816]	@ (80188c4 <DPM_SNK_BuildRDOfromSelectedPDO+0x3d8>)
 8018594:	2008      	movs	r0, #8
 8018596:	0013      	movs	r3, r2
 8018598:	005b      	lsls	r3, r3, #1
 801859a:	189b      	adds	r3, r3, r2
 801859c:	009b      	lsls	r3, r3, #2
 801859e:	18cb      	adds	r3, r1, r3
 80185a0:	181b      	adds	r3, r3, r0
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	07db      	lsls	r3, r3, #31
 80185a6:	0fdb      	lsrs	r3, r3, #31
 80185a8:	b2da      	uxtb	r2, r3
 80185aa:	2332      	movs	r3, #50	@ 0x32
 80185ac:	18fb      	adds	r3, r7, r3
 80185ae:	01d0      	lsls	r0, r2, #7
 80185b0:	781a      	ldrb	r2, [r3, #0]
 80185b2:	217f      	movs	r1, #127	@ 0x7f
 80185b4:	400a      	ands	r2, r1
 80185b6:	1c11      	adds	r1, r2, #0
 80185b8:	1c02      	adds	r2, r0, #0
 80185ba:	430a      	orrs	r2, r1
 80185bc:	701a      	strb	r2, [r3, #0]
    DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_FALSE;
 80185be:	193b      	adds	r3, r7, r4
 80185c0:	781b      	ldrb	r3, [r3, #0]
 80185c2:	4abf      	ldr	r2, [pc, #764]	@ (80188c0 <DPM_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 80185c4:	009b      	lsls	r3, r3, #2
 80185c6:	18d3      	adds	r3, r2, r3
 80185c8:	78da      	ldrb	r2, [r3, #3]
 80185ca:	2102      	movs	r1, #2
 80185cc:	438a      	bics	r2, r1
 80185ce:	70da      	strb	r2, [r3, #3]
    /* Set unchuncked bit if supported by port partner;*/
    if (USBPD_TRUE == pdo.SRCFixedPDO.UnchunkedExtendedMessage)
 80185d0:	2337      	movs	r3, #55	@ 0x37
 80185d2:	18fb      	adds	r3, r7, r3
 80185d4:	781b      	ldrb	r3, [r3, #0]
 80185d6:	2201      	movs	r2, #1
 80185d8:	4013      	ands	r3, r2
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d008      	beq.n	80185f2 <DPM_SNK_BuildRDOfromSelectedPDO+0x106>
    {
      DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_TRUE;
 80185e0:	193b      	adds	r3, r7, r4
 80185e2:	781b      	ldrb	r3, [r3, #0]
 80185e4:	4ab6      	ldr	r2, [pc, #728]	@ (80188c0 <DPM_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 80185e6:	009b      	lsls	r3, r3, #2
 80185e8:	18d3      	adds	r3, r2, r3
 80185ea:	78da      	ldrb	r2, [r3, #3]
 80185ec:	2102      	movs	r1, #2
 80185ee:	430a      	orrs	r2, r1
 80185f0:	70da      	strb	r2, [r3, #3]
    }
  }
  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs */
  if ((size < 1) || (IndexSrcPDO >= pdhandle->DPM_NumberOfRcvSRCPDO))
 80185f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d006      	beq.n	8018606 <DPM_SNK_BuildRDOfromSelectedPDO+0x11a>
 80185f8:	230e      	movs	r3, #14
 80185fa:	18fb      	adds	r3, r7, r3
 80185fc:	781a      	ldrb	r2, [r3, #0]
 80185fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018602:	429a      	cmp	r2, r3
 8018604:	d34d      	bcc.n	80186a2 <DPM_SNK_BuildRDOfromSelectedPDO+0x1b6>
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
#ifdef _TRACE
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)"DPM_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection",
                    sizeof("DPM_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection"));
#endif /* _TRACE */
    rdo.FixedVariableRDO.ObjectPosition = 1;
 8018606:	2433      	movs	r4, #51	@ 0x33
 8018608:	193b      	adds	r3, r7, r4
 801860a:	781a      	ldrb	r2, [r3, #0]
 801860c:	2170      	movs	r1, #112	@ 0x70
 801860e:	438a      	bics	r2, r1
 8018610:	1c11      	adds	r1, r2, #0
 8018612:	2210      	movs	r2, #16
 8018614:	430a      	orrs	r2, r1
 8018616:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8018618:	2034      	movs	r0, #52	@ 0x34
 801861a:	183b      	adds	r3, r7, r0
 801861c:	881b      	ldrh	r3, [r3, #0]
 801861e:	059b      	lsls	r3, r3, #22
 8018620:	0d9b      	lsrs	r3, r3, #22
 8018622:	b29b      	uxth	r3, r3
 8018624:	059b      	lsls	r3, r3, #22
 8018626:	0d9b      	lsrs	r3, r3, #22
 8018628:	029b      	lsls	r3, r3, #10
 801862a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801862c:	49a6      	ldr	r1, [pc, #664]	@ (80188c8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3dc>)
 801862e:	400a      	ands	r2, r1
 8018630:	4313      	orrs	r3, r2
 8018632:	633b      	str	r3, [r7, #48]	@ 0x30
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8018634:	183b      	adds	r3, r7, r0
 8018636:	881b      	ldrh	r3, [r3, #0]
 8018638:	059b      	lsls	r3, r3, #22
 801863a:	0d9b      	lsrs	r3, r3, #22
 801863c:	b29a      	uxth	r2, r3
 801863e:	2330      	movs	r3, #48	@ 0x30
 8018640:	18fb      	adds	r3, r7, r3
 8018642:	0592      	lsls	r2, r2, #22
 8018644:	0d90      	lsrs	r0, r2, #22
 8018646:	881a      	ldrh	r2, [r3, #0]
 8018648:	0a92      	lsrs	r2, r2, #10
 801864a:	0292      	lsls	r2, r2, #10
 801864c:	1c11      	adds	r1, r2, #0
 801864e:	1c02      	adds	r2, r0, #0
 8018650:	430a      	orrs	r2, r1
 8018652:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch           = 1;
 8018654:	193b      	adds	r3, r7, r4
 8018656:	781a      	ldrb	r2, [r3, #0]
 8018658:	2104      	movs	r1, #4
 801865a:	430a      	orrs	r2, r1
 801865c:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801865e:	2313      	movs	r3, #19
 8018660:	18fb      	adds	r3, r7, r3
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	075b      	lsls	r3, r3, #29
 8018666:	0fdb      	lsrs	r3, r3, #31
 8018668:	b2da      	uxtb	r2, r3
 801866a:	193b      	adds	r3, r7, r4
 801866c:	2101      	movs	r1, #1
 801866e:	400a      	ands	r2, r1
 8018670:	1890      	adds	r0, r2, r2
 8018672:	781a      	ldrb	r2, [r3, #0]
 8018674:	2102      	movs	r1, #2
 8018676:	438a      	bics	r2, r1
 8018678:	1c11      	adds	r1, r2, #0
 801867a:	1c02      	adds	r2, r0, #0
 801867c:	430a      	orrs	r2, r1
 801867e:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent           = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8018680:	230f      	movs	r3, #15
 8018682:	18fb      	adds	r3, r7, r3
 8018684:	781a      	ldrb	r2, [r3, #0]
 8018686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018688:	6859      	ldr	r1, [r3, #4]
 801868a:	488b      	ldr	r0, [pc, #556]	@ (80188b8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 801868c:	0013      	movs	r3, r2
 801868e:	011b      	lsls	r3, r3, #4
 8018690:	1a9b      	subs	r3, r3, r2
 8018692:	00db      	lsls	r3, r3, #3
 8018694:	18c3      	adds	r3, r0, r3
 8018696:	3374      	adds	r3, #116	@ 0x74
 8018698:	6019      	str	r1, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801869a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801869c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801869e:	665a      	str	r2, [r3, #100]	@ 0x64
 80186a0:	e175      	b.n	801898e <DPM_SNK_BuildRDOfromSelectedPDO+0x4a2>
    return;
  }
  /* Set the Object position */
  rdo.GenericRDO.ObjectPosition               = IndexSrcPDO + 1;
 80186a2:	240e      	movs	r4, #14
 80186a4:	193b      	adds	r3, r7, r4
 80186a6:	781b      	ldrb	r3, [r3, #0]
 80186a8:	3301      	adds	r3, #1
 80186aa:	b2db      	uxtb	r3, r3
 80186ac:	1c1a      	adds	r2, r3, #0
 80186ae:	2307      	movs	r3, #7
 80186b0:	4013      	ands	r3, r2
 80186b2:	b2da      	uxtb	r2, r3
 80186b4:	2533      	movs	r5, #51	@ 0x33
 80186b6:	197b      	adds	r3, r7, r5
 80186b8:	2107      	movs	r1, #7
 80186ba:	400a      	ands	r2, r1
 80186bc:	0110      	lsls	r0, r2, #4
 80186be:	781a      	ldrb	r2, [r3, #0]
 80186c0:	2170      	movs	r1, #112	@ 0x70
 80186c2:	438a      	bics	r2, r1
 80186c4:	1c11      	adds	r1, r2, #0
 80186c6:	1c02      	adds	r2, r0, #0
 80186c8:	430a      	orrs	r2, r1
 80186ca:	701a      	strb	r2, [r3, #0]
  rdo.GenericRDO.NoUSBSuspend                 = 0;
 80186cc:	197b      	adds	r3, r7, r5
 80186ce:	781a      	ldrb	r2, [r3, #0]
 80186d0:	2101      	movs	r1, #1
 80186d2:	438a      	bics	r2, r1
 80186d4:	701a      	strb	r2, [r3, #0]
  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO];
 80186d6:	193b      	adds	r3, r7, r4
 80186d8:	781a      	ldrb	r2, [r3, #0]
 80186da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186dc:	3208      	adds	r2, #8
 80186de:	0092      	lsls	r2, r2, #2
 80186e0:	58d3      	ldr	r3, [r2, r3]
 80186e2:	637b      	str	r3, [r7, #52]	@ 0x34
  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 80186e4:	2137      	movs	r1, #55	@ 0x37
 80186e6:	187b      	adds	r3, r7, r1
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	061b      	lsls	r3, r3, #24
 80186ec:	0f9b      	lsrs	r3, r3, #30
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	001a      	movs	r2, r3
 80186f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80186f4:	601a      	str	r2, [r3, #0]
  /* Retrieve request details from SRC PDO selection */
  mv = PtrRequestPowerDetails->RequestedVoltageInmVunits;
 80186f6:	68bb      	ldr	r3, [r7, #8]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  ma = PtrRequestPowerDetails->OperatingCurrentInmAunits;
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	689b      	ldr	r3, [r3, #8]
 8018700:	647b      	str	r3, [r7, #68]	@ 0x44
  switch(pdo.GenericPDO.PowerObject)
 8018702:	187b      	adds	r3, r7, r1
 8018704:	781b      	ldrb	r3, [r3, #0]
 8018706:	061b      	lsls	r3, r3, #24
 8018708:	0f9b      	lsrs	r3, r3, #30
 801870a:	b2db      	uxtb	r3, r3
 801870c:	2b03      	cmp	r3, #3
 801870e:	d100      	bne.n	8018712 <DPM_SNK_BuildRDOfromSelectedPDO+0x226>
 8018710:	e0dc      	b.n	80188cc <DPM_SNK_BuildRDOfromSelectedPDO+0x3e0>
 8018712:	dd00      	ble.n	8018716 <DPM_SNK_BuildRDOfromSelectedPDO+0x22a>
 8018714:	e123      	b.n	801895e <DPM_SNK_BuildRDOfromSelectedPDO+0x472>
 8018716:	2b02      	cmp	r3, #2
 8018718:	d006      	beq.n	8018728 <DPM_SNK_BuildRDOfromSelectedPDO+0x23c>
 801871a:	dd00      	ble.n	801871e <DPM_SNK_BuildRDOfromSelectedPDO+0x232>
 801871c:	e11f      	b.n	801895e <DPM_SNK_BuildRDOfromSelectedPDO+0x472>
 801871e:	2b00      	cmp	r3, #0
 8018720:	d002      	beq.n	8018728 <DPM_SNK_BuildRDOfromSelectedPDO+0x23c>
 8018722:	2b01      	cmp	r3, #1
 8018724:	d063      	beq.n	80187ee <DPM_SNK_BuildRDOfromSelectedPDO+0x302>
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50;
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20;
    }
    break;
  default:
    break;
 8018726:	e11a      	b.n	801895e <DPM_SNK_BuildRDOfromSelectedPDO+0x472>
      ma = USBPD_MIN(ma, puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 8018728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801872a:	685a      	ldr	r2, [r3, #4]
 801872c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801872e:	4293      	cmp	r3, r2
 8018730:	d900      	bls.n	8018734 <DPM_SNK_BuildRDOfromSelectedPDO+0x248>
 8018732:	0013      	movs	r3, r2
 8018734:	647b      	str	r3, [r7, #68]	@ 0x44
      mw = (ma * mv)/1000; /* mW */
 8018736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018738:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801873a:	4353      	muls	r3, r2
 801873c:	22fa      	movs	r2, #250	@ 0xfa
 801873e:	0091      	lsls	r1, r2, #2
 8018740:	0018      	movs	r0, r3
 8018742:	f7ed fd43 	bl	80061cc <__udivsi3>
 8018746:	0003      	movs	r3, r0
 8018748:	64bb      	str	r3, [r7, #72]	@ 0x48
      DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 801874a:	230f      	movs	r3, #15
 801874c:	18fb      	adds	r3, r7, r3
 801874e:	781a      	ldrb	r2, [r3, #0]
 8018750:	4959      	ldr	r1, [pc, #356]	@ (80188b8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 8018752:	0013      	movs	r3, r2
 8018754:	011b      	lsls	r3, r3, #4
 8018756:	1a9b      	subs	r3, r3, r2
 8018758:	00db      	lsls	r3, r3, #3
 801875a:	18cb      	adds	r3, r1, r3
 801875c:	3374      	adds	r3, #116	@ 0x74
 801875e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018760:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10;
 8018762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018764:	210a      	movs	r1, #10
 8018766:	0018      	movs	r0, r3
 8018768:	f7ed fd30 	bl	80061cc <__udivsi3>
 801876c:	0003      	movs	r3, r0
 801876e:	059b      	lsls	r3, r3, #22
 8018770:	0d9b      	lsrs	r3, r3, #22
 8018772:	b29b      	uxth	r3, r3
 8018774:	059b      	lsls	r3, r3, #22
 8018776:	0d9b      	lsrs	r3, r3, #22
 8018778:	029b      	lsls	r3, r3, #10
 801877a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801877c:	4952      	ldr	r1, [pc, #328]	@ (80188c8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3dc>)
 801877e:	400a      	ands	r2, r1
 8018780:	4313      	orrs	r3, r2
 8018782:	633b      	str	r3, [r7, #48]	@ 0x30
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10;
 8018784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018786:	210a      	movs	r1, #10
 8018788:	0018      	movs	r0, r3
 801878a:	f7ed fd1f 	bl	80061cc <__udivsi3>
 801878e:	0003      	movs	r3, r0
 8018790:	059b      	lsls	r3, r3, #22
 8018792:	0d9b      	lsrs	r3, r3, #22
 8018794:	b29a      	uxth	r2, r3
 8018796:	2430      	movs	r4, #48	@ 0x30
 8018798:	193b      	adds	r3, r7, r4
 801879a:	0592      	lsls	r2, r2, #22
 801879c:	0d90      	lsrs	r0, r2, #22
 801879e:	881a      	ldrh	r2, [r3, #0]
 80187a0:	0a92      	lsrs	r2, r2, #10
 80187a2:	0292      	lsls	r2, r2, #10
 80187a4:	1c11      	adds	r1, r2, #0
 80187a6:	1c02      	adds	r2, r0, #0
 80187a8:	430a      	orrs	r2, r1
 80187aa:	801a      	strh	r2, [r3, #0]
      if(mw < puser->DPM_SNKRequestedPower.OperatingPowerInmWunits)
 80187ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187ae:	695b      	ldr	r3, [r3, #20]
 80187b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d300      	bcc.n	80187b8 <DPM_SNK_BuildRDOfromSelectedPDO+0x2cc>
 80187b6:	e0d4      	b.n	8018962 <DPM_SNK_BuildRDOfromSelectedPDO+0x476>
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits / 10;
 80187b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	210a      	movs	r1, #10
 80187be:	0018      	movs	r0, r3
 80187c0:	f7ed fd04 	bl	80061cc <__udivsi3>
 80187c4:	0003      	movs	r3, r0
 80187c6:	059b      	lsls	r3, r3, #22
 80187c8:	0d9b      	lsrs	r3, r3, #22
 80187ca:	b29a      	uxth	r2, r3
 80187cc:	193b      	adds	r3, r7, r4
 80187ce:	0592      	lsls	r2, r2, #22
 80187d0:	0d90      	lsrs	r0, r2, #22
 80187d2:	881a      	ldrh	r2, [r3, #0]
 80187d4:	0a92      	lsrs	r2, r2, #10
 80187d6:	0292      	lsls	r2, r2, #10
 80187d8:	1c11      	adds	r1, r2, #0
 80187da:	1c02      	adds	r2, r0, #0
 80187dc:	430a      	orrs	r2, r1
 80187de:	801a      	strh	r2, [r3, #0]
        rdo.FixedVariableRDO.CapabilityMismatch = 1;
 80187e0:	2333      	movs	r3, #51	@ 0x33
 80187e2:	18fb      	adds	r3, r7, r3
 80187e4:	781a      	ldrb	r2, [r3, #0]
 80187e6:	2104      	movs	r1, #4
 80187e8:	430a      	orrs	r2, r1
 80187ea:	701a      	strb	r2, [r3, #0]
    break;
 80187ec:	e0b9      	b.n	8018962 <DPM_SNK_BuildRDOfromSelectedPDO+0x476>
      mw = USBPD_MIN(PtrRequestPowerDetails->OperatingPowerInmWunits, puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits); /* mW */
 80187ee:	68bb      	ldr	r3, [r7, #8]
 80187f0:	6919      	ldr	r1, [r3, #16]
 80187f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187f4:	699a      	ldr	r2, [r3, #24]
 80187f6:	000b      	movs	r3, r1
 80187f8:	4293      	cmp	r3, r2
 80187fa:	d900      	bls.n	80187fe <DPM_SNK_BuildRDOfromSelectedPDO+0x312>
 80187fc:	0013      	movs	r3, r2
 80187fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      ma = (1000 * mw) / mv; /* mA */
 8018800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018802:	0013      	movs	r3, r2
 8018804:	015b      	lsls	r3, r3, #5
 8018806:	1a9b      	subs	r3, r3, r2
 8018808:	009b      	lsls	r3, r3, #2
 801880a:	189b      	adds	r3, r3, r2
 801880c:	00db      	lsls	r3, r3, #3
 801880e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8018810:	0018      	movs	r0, r3
 8018812:	f7ed fcdb 	bl	80061cc <__udivsi3>
 8018816:	0003      	movs	r3, r0
 8018818:	647b      	str	r3, [r7, #68]	@ 0x44
      ma = USBPD_MIN(ma, puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 801881a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801881c:	685a      	ldr	r2, [r3, #4]
 801881e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018820:	4293      	cmp	r3, r2
 8018822:	d900      	bls.n	8018826 <DPM_SNK_BuildRDOfromSelectedPDO+0x33a>
 8018824:	0013      	movs	r3, r2
 8018826:	647b      	str	r3, [r7, #68]	@ 0x44
      DPM_Ports[PortNum].DPM_RequestedCurrent       = ma;
 8018828:	230f      	movs	r3, #15
 801882a:	18fb      	adds	r3, r7, r3
 801882c:	781a      	ldrb	r2, [r3, #0]
 801882e:	4922      	ldr	r1, [pc, #136]	@ (80188b8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 8018830:	0013      	movs	r3, r2
 8018832:	011b      	lsls	r3, r3, #4
 8018834:	1a9b      	subs	r3, r3, r2
 8018836:	00db      	lsls	r3, r3, #3
 8018838:	18cb      	adds	r3, r1, r3
 801883a:	3374      	adds	r3, #116	@ 0x74
 801883c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801883e:	601a      	str	r2, [r3, #0]
      mw = (ma * mv)/1000; /* mW */
 8018840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018842:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018844:	4353      	muls	r3, r2
 8018846:	22fa      	movs	r2, #250	@ 0xfa
 8018848:	0091      	lsls	r1, r2, #2
 801884a:	0018      	movs	r0, r3
 801884c:	f7ed fcbe 	bl	80061cc <__udivsi3>
 8018850:	0003      	movs	r3, r0
 8018852:	64bb      	str	r3, [r7, #72]	@ 0x48
      rdo.BatteryRDO.OperatingPowerIn250mWunits     = mw / 250;
 8018854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018856:	21fa      	movs	r1, #250	@ 0xfa
 8018858:	0018      	movs	r0, r3
 801885a:	f7ed fcb7 	bl	80061cc <__udivsi3>
 801885e:	0003      	movs	r3, r0
 8018860:	059b      	lsls	r3, r3, #22
 8018862:	0d9b      	lsrs	r3, r3, #22
 8018864:	b29b      	uxth	r3, r3
 8018866:	059b      	lsls	r3, r3, #22
 8018868:	0d9b      	lsrs	r3, r3, #22
 801886a:	029b      	lsls	r3, r3, #10
 801886c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801886e:	4916      	ldr	r1, [pc, #88]	@ (80188c8 <DPM_SNK_BuildRDOfromSelectedPDO+0x3dc>)
 8018870:	400a      	ands	r2, r1
 8018872:	4313      	orrs	r3, r2
 8018874:	633b      	str	r3, [r7, #48]	@ 0x30
      rdo.BatteryRDO.MaxOperatingPowerIn250mWunits  = mw / 250;
 8018876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018878:	21fa      	movs	r1, #250	@ 0xfa
 801887a:	0018      	movs	r0, r3
 801887c:	f7ed fca6 	bl	80061cc <__udivsi3>
 8018880:	0003      	movs	r3, r0
 8018882:	059b      	lsls	r3, r3, #22
 8018884:	0d9b      	lsrs	r3, r3, #22
 8018886:	b29a      	uxth	r2, r3
 8018888:	2330      	movs	r3, #48	@ 0x30
 801888a:	18fb      	adds	r3, r7, r3
 801888c:	0592      	lsls	r2, r2, #22
 801888e:	0d90      	lsrs	r0, r2, #22
 8018890:	881a      	ldrh	r2, [r3, #0]
 8018892:	0a92      	lsrs	r2, r2, #10
 8018894:	0292      	lsls	r2, r2, #10
 8018896:	1c11      	adds	r1, r2, #0
 8018898:	1c02      	adds	r2, r0, #0
 801889a:	430a      	orrs	r2, r1
 801889c:	801a      	strh	r2, [r3, #0]
      if(mw < puser->DPM_SNKRequestedPower.OperatingPowerInmWunits)
 801889e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188a0:	695b      	ldr	r3, [r3, #20]
 80188a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80188a4:	429a      	cmp	r2, r3
 80188a6:	d25e      	bcs.n	8018966 <DPM_SNK_BuildRDOfromSelectedPDO+0x47a>
        rdo.BatteryRDO.CapabilityMismatch = 1;
 80188a8:	2333      	movs	r3, #51	@ 0x33
 80188aa:	18fb      	adds	r3, r7, r3
 80188ac:	781a      	ldrb	r2, [r3, #0]
 80188ae:	2104      	movs	r1, #4
 80188b0:	430a      	orrs	r2, r1
 80188b2:	701a      	strb	r2, [r3, #0]
    break;
 80188b4:	e057      	b.n	8018966 <DPM_SNK_BuildRDOfromSelectedPDO+0x47a>
 80188b6:	46c0      	nop			@ (mov r8, r8)
 80188b8:	200020c4 	.word	0x200020c4
 80188bc:	200000d0 	.word	0x200000d0
 80188c0:	200020ac 	.word	0x200020ac
 80188c4:	200000c4 	.word	0x200000c4
 80188c8:	fff003ff 	.word	0xfff003ff
      DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 80188cc:	230f      	movs	r3, #15
 80188ce:	18fb      	adds	r3, r7, r3
 80188d0:	781a      	ldrb	r2, [r3, #0]
 80188d2:	4930      	ldr	r1, [pc, #192]	@ (8018994 <DPM_SNK_BuildRDOfromSelectedPDO+0x4a8>)
 80188d4:	0013      	movs	r3, r2
 80188d6:	011b      	lsls	r3, r3, #4
 80188d8:	1a9b      	subs	r3, r3, r2
 80188da:	00db      	lsls	r3, r3, #3
 80188dc:	18cb      	adds	r3, r1, r3
 80188de:	3374      	adds	r3, #116	@ 0x74
 80188e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80188e2:	601a      	str	r2, [r3, #0]
      rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO + 1;
 80188e4:	230e      	movs	r3, #14
 80188e6:	18fb      	adds	r3, r7, r3
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	3301      	adds	r3, #1
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	1c1a      	adds	r2, r3, #0
 80188f0:	2307      	movs	r3, #7
 80188f2:	4013      	ands	r3, r2
 80188f4:	b2da      	uxtb	r2, r3
 80188f6:	2333      	movs	r3, #51	@ 0x33
 80188f8:	18fb      	adds	r3, r7, r3
 80188fa:	2107      	movs	r1, #7
 80188fc:	400a      	ands	r2, r1
 80188fe:	0110      	lsls	r0, r2, #4
 8018900:	781a      	ldrb	r2, [r3, #0]
 8018902:	2170      	movs	r1, #112	@ 0x70
 8018904:	438a      	bics	r2, r1
 8018906:	1c11      	adds	r1, r2, #0
 8018908:	1c02      	adds	r2, r0, #0
 801890a:	430a      	orrs	r2, r1
 801890c:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50;
 801890e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018910:	2132      	movs	r1, #50	@ 0x32
 8018912:	0018      	movs	r0, r3
 8018914:	f7ed fc5a 	bl	80061cc <__udivsi3>
 8018918:	0003      	movs	r3, r0
 801891a:	1c1a      	adds	r2, r3, #0
 801891c:	237f      	movs	r3, #127	@ 0x7f
 801891e:	4013      	ands	r3, r2
 8018920:	b2da      	uxtb	r2, r3
 8018922:	2330      	movs	r3, #48	@ 0x30
 8018924:	18fb      	adds	r3, r7, r3
 8018926:	217f      	movs	r1, #127	@ 0x7f
 8018928:	400a      	ands	r2, r1
 801892a:	0010      	movs	r0, r2
 801892c:	781a      	ldrb	r2, [r3, #0]
 801892e:	217f      	movs	r1, #127	@ 0x7f
 8018930:	438a      	bics	r2, r1
 8018932:	1c11      	adds	r1, r2, #0
 8018934:	1c02      	adds	r2, r0, #0
 8018936:	430a      	orrs	r2, r1
 8018938:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20;
 801893a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801893c:	2114      	movs	r1, #20
 801893e:	0018      	movs	r0, r3
 8018940:	f7ed fc44 	bl	80061cc <__udivsi3>
 8018944:	0003      	movs	r3, r0
 8018946:	055b      	lsls	r3, r3, #21
 8018948:	0d5b      	lsrs	r3, r3, #21
 801894a:	b29b      	uxth	r3, r3
 801894c:	055b      	lsls	r3, r3, #21
 801894e:	0d5b      	lsrs	r3, r3, #21
 8018950:	025b      	lsls	r3, r3, #9
 8018952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018954:	4910      	ldr	r1, [pc, #64]	@ (8018998 <DPM_SNK_BuildRDOfromSelectedPDO+0x4ac>)
 8018956:	400a      	ands	r2, r1
 8018958:	4313      	orrs	r3, r2
 801895a:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
 801895c:	e004      	b.n	8018968 <DPM_SNK_BuildRDOfromSelectedPDO+0x47c>
    break;
 801895e:	46c0      	nop			@ (mov r8, r8)
 8018960:	e002      	b.n	8018968 <DPM_SNK_BuildRDOfromSelectedPDO+0x47c>
    break;
 8018962:	46c0      	nop			@ (mov r8, r8)
 8018964:	e000      	b.n	8018968 <DPM_SNK_BuildRDOfromSelectedPDO+0x47c>
    break;
 8018966:	46c0      	nop			@ (mov r8, r8)
  }
  pdhandle->DPM_RequestDOMsg = rdo.d32;
 8018968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801896a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801896c:	665a      	str	r2, [r3, #100]	@ 0x64
  pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 801896e:	2333      	movs	r3, #51	@ 0x33
 8018970:	18fb      	adds	r3, r7, r3
 8018972:	781b      	ldrb	r3, [r3, #0]
 8018974:	065b      	lsls	r3, r3, #25
 8018976:	0f5b      	lsrs	r3, r3, #29
 8018978:	b2db      	uxtb	r3, r3
 801897a:	001a      	movs	r2, r3
 801897c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801897e:	669a      	str	r2, [r3, #104]	@ 0x68
  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 8018980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018982:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mv;
 8018988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801898a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801898c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 801898e:	46bd      	mov	sp, r7
 8018990:	b014      	add	sp, #80	@ 0x50
 8018992:	bdb0      	pop	{r4, r5, r7, pc}
 8018994:	200020c4 	.word	0x200020c4
 8018998:	fff001ff 	.word	0xfff001ff

0801899c <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80189a8:	b29b      	uxth	r3, r3
 80189aa:	051b      	lsls	r3, r3, #20
 80189ac:	0d1b      	lsrs	r3, r3, #20
 80189ae:	b29b      	uxth	r3, r3
}
 80189b0:	0018      	movs	r0, r3
 80189b2:	46bd      	mov	sp, r7
 80189b4:	b002      	add	sp, #8
 80189b6:	bd80      	pop	{r7, pc}

080189b8 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b084      	sub	sp, #16
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80189c0:	2300      	movs	r3, #0
 80189c2:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2b01      	cmp	r3, #1
 80189c8:	d902      	bls.n	80189d0 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80189ca:	2302      	movs	r3, #2
 80189cc:	425b      	negs	r3, r3
 80189ce:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80189d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 80189d2:	0018      	movs	r0, r3
 80189d4:	46bd      	mov	sp, r7
 80189d6:	b004      	add	sp, #16
 80189d8:	bd80      	pop	{r7, pc}

080189da <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80189da:	b580      	push	{r7, lr}
 80189dc:	b084      	sub	sp, #16
 80189de:	af00      	add	r7, sp, #0
 80189e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80189e2:	2300      	movs	r3, #0
 80189e4:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	2b01      	cmp	r3, #1
 80189ea:	d902      	bls.n	80189f2 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80189ec:	2302      	movs	r3, #2
 80189ee:	425b      	negs	r3, r3
 80189f0:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 80189f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 80189f4:	0018      	movs	r0, r3
 80189f6:	46bd      	mov	sp, r7
 80189f8:	b004      	add	sp, #16
 80189fa:	bd80      	pop	{r7, pc}

080189fc <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b084      	sub	sp, #16
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8018a04:	230b      	movs	r3, #11
 8018a06:	425b      	negs	r3, r3
 8018a08:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	2b01      	cmp	r3, #1
 8018a0e:	d902      	bls.n	8018a16 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8018a10:	2302      	movs	r3, #2
 8018a12:	425b      	negs	r3, r3
 8018a14:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 8018a16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8018a18:	0018      	movs	r0, r3
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	b004      	add	sp, #16
 8018a1e:	bd80      	pop	{r7, pc}

08018a20 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b086      	sub	sp, #24
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
 8018a28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
	  /* Check if instance is valid */
	  int32_t ret = BSP_ERROR_NONE;
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	617b      	str	r3, [r7, #20]
	  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	d802      	bhi.n	8018a3a <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d106      	bne.n	8018a48 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
	  {
	    ret = BSP_ERROR_WRONG_PARAM;
 8018a3a:	2302      	movs	r3, #2
 8018a3c:	425b      	negs	r3, r3
 8018a3e:	617b      	str	r3, [r7, #20]
	    *pVoltage = 0;
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	2200      	movs	r2, #0
 8018a44:	601a      	str	r2, [r3, #0]
 8018a46:	e028      	b.n	8018a9a <BSP_USBPD_PWR_VBUSGetVoltage+0x7a>
	  else
	  {
	    uint32_t value;
		uint32_t vadc;
		uint32_t voltage;
	    value = LL_ADC_REG_ReadConversionData12(ADC1);
 8018a48:	4b16      	ldr	r3, [pc, #88]	@ (8018aa4 <BSP_USBPD_PWR_VBUSGetVoltage+0x84>)
 8018a4a:	0018      	movs	r0, r3
 8018a4c:	f7ff ffa6 	bl	801899c <LL_ADC_REG_ReadConversionData12>
 8018a50:	0003      	movs	r3, r0
 8018a52:	613b      	str	r3, [r7, #16]
		vadc = (value * VDDA_APPLI) / ADC_FULL_SCALE;
 8018a54:	693b      	ldr	r3, [r7, #16]
 8018a56:	4a14      	ldr	r2, [pc, #80]	@ (8018aa8 <BSP_USBPD_PWR_VBUSGetVoltage+0x88>)
 8018a58:	4353      	muls	r3, r2
 8018a5a:	4914      	ldr	r1, [pc, #80]	@ (8018aac <BSP_USBPD_PWR_VBUSGetVoltage+0x8c>)
 8018a5c:	0018      	movs	r0, r3
 8018a5e:	f7ed fbb5 	bl	80061cc <__udivsi3>
 8018a62:	0003      	movs	r3, r0
 8018a64:	60fb      	str	r3, [r7, #12]
	    voltage = vadc * (200 + 40.2 ) / 40.2 ;
 8018a66:	68f8      	ldr	r0, [r7, #12]
 8018a68:	f7ee ff88 	bl	800797c <__aeabi_ui2d>
 8018a6c:	4a10      	ldr	r2, [pc, #64]	@ (8018ab0 <BSP_USBPD_PWR_VBUSGetVoltage+0x90>)
 8018a6e:	4b11      	ldr	r3, [pc, #68]	@ (8018ab4 <BSP_USBPD_PWR_VBUSGetVoltage+0x94>)
 8018a70:	f7ee f858 	bl	8006b24 <__aeabi_dmul>
 8018a74:	0002      	movs	r2, r0
 8018a76:	000b      	movs	r3, r1
 8018a78:	0010      	movs	r0, r2
 8018a7a:	0019      	movs	r1, r3
 8018a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8018ab8 <BSP_USBPD_PWR_VBUSGetVoltage+0x98>)
 8018a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8018abc <BSP_USBPD_PWR_VBUSGetVoltage+0x9c>)
 8018a80:	f7ed fd38 	bl	80064f4 <__aeabi_ddiv>
 8018a84:	0002      	movs	r2, r0
 8018a86:	000b      	movs	r3, r1
 8018a88:	0010      	movs	r0, r2
 8018a8a:	0019      	movs	r1, r3
 8018a8c:	f7ed fd14 	bl	80064b8 <__aeabi_d2uiz>
 8018a90:	0003      	movs	r3, r0
 8018a92:	60bb      	str	r3, [r7, #8]
	    *pVoltage = voltage;
 8018a94:	683b      	ldr	r3, [r7, #0]
 8018a96:	68ba      	ldr	r2, [r7, #8]
 8018a98:	601a      	str	r2, [r3, #0]
	  }
	  return ret;
 8018a9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8018a9c:	0018      	movs	r0, r3
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	b006      	add	sp, #24
 8018aa2:	bd80      	pop	{r7, pc}
 8018aa4:	40012400 	.word	0x40012400
 8018aa8:	00000ce4 	.word	0x00000ce4
 8018aac:	00000fff 	.word	0x00000fff
 8018ab0:	66666666 	.word	0x66666666
 8018ab4:	406e0666 	.word	0x406e0666
 8018ab8:	9999999a 	.word	0x9999999a
 8018abc:	40441999 	.word	0x40441999

08018ac0 <USBPD_VDM_UserInit>:
  * @brief  VDM Initialization function
  * @param  PortNum     Index of current used port
  * @retval status
  */
USBPD_StatusTypeDef USBPD_VDM_UserInit(uint8_t PortNum)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	0002      	movs	r2, r0
 8018ac8:	1dfb      	adds	r3, r7, #7
 8018aca:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_VDM_UserInit */
    return USBPD_OK;
 8018acc:	2300      	movs	r3, #0
/* USER CODE END USBPD_VDM_UserInit */
}
 8018ace:	0018      	movs	r0, r3
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	b002      	add	sp, #8
 8018ad4:	bd80      	pop	{r7, pc}
	...

08018ad8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8018adc:	4914      	ldr	r1, [pc, #80]	@ (8018b30 <MX_USB_Device_Init+0x58>)
 8018ade:	4b15      	ldr	r3, [pc, #84]	@ (8018b34 <MX_USB_Device_Init+0x5c>)
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	0018      	movs	r0, r3
 8018ae4:	f7fa fd3c 	bl	8013560 <USBD_Init>
 8018ae8:	1e03      	subs	r3, r0, #0
 8018aea:	d001      	beq.n	8018af0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018aec:	f7ef fea6 	bl	800883c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8018af0:	4a11      	ldr	r2, [pc, #68]	@ (8018b38 <MX_USB_Device_Init+0x60>)
 8018af2:	4b10      	ldr	r3, [pc, #64]	@ (8018b34 <MX_USB_Device_Init+0x5c>)
 8018af4:	0011      	movs	r1, r2
 8018af6:	0018      	movs	r0, r3
 8018af8:	f7fa fd6c 	bl	80135d4 <USBD_RegisterClass>
 8018afc:	1e03      	subs	r3, r0, #0
 8018afe:	d001      	beq.n	8018b04 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8018b00:	f7ef fe9c 	bl	800883c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8018b04:	4a0d      	ldr	r2, [pc, #52]	@ (8018b3c <MX_USB_Device_Init+0x64>)
 8018b06:	4b0b      	ldr	r3, [pc, #44]	@ (8018b34 <MX_USB_Device_Init+0x5c>)
 8018b08:	0011      	movs	r1, r2
 8018b0a:	0018      	movs	r0, r3
 8018b0c:	f7fa fc46 	bl	801339c <USBD_CDC_RegisterInterface>
 8018b10:	1e03      	subs	r3, r0, #0
 8018b12:	d001      	beq.n	8018b18 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8018b14:	f7ef fe92 	bl	800883c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018b18:	4b06      	ldr	r3, [pc, #24]	@ (8018b34 <MX_USB_Device_Init+0x5c>)
 8018b1a:	0018      	movs	r0, r3
 8018b1c:	f7fa fd98 	bl	8013650 <USBD_Start>
 8018b20:	1e03      	subs	r3, r0, #0
 8018b22:	d001      	beq.n	8018b28 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8018b24:	f7ef fe8a 	bl	800883c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018b28:	46c0      	nop			@ (mov r8, r8)
 8018b2a:	46bd      	mov	sp, r7
 8018b2c:	bd80      	pop	{r7, pc}
 8018b2e:	46c0      	nop			@ (mov r8, r8)
 8018b30:	20000158 	.word	0x20000158
 8018b34:	2000213c 	.word	0x2000213c
 8018b38:	20000040 	.word	0x20000040
 8018b3c:	20000144 	.word	0x20000144

08018b40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018b44:	4907      	ldr	r1, [pc, #28]	@ (8018b64 <CDC_Init_FS+0x24>)
 8018b46:	4b08      	ldr	r3, [pc, #32]	@ (8018b68 <CDC_Init_FS+0x28>)
 8018b48:	2200      	movs	r2, #0
 8018b4a:	0018      	movs	r0, r3
 8018b4c:	f7fa fc40 	bl	80133d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018b50:	4a06      	ldr	r2, [pc, #24]	@ (8018b6c <CDC_Init_FS+0x2c>)
 8018b52:	4b05      	ldr	r3, [pc, #20]	@ (8018b68 <CDC_Init_FS+0x28>)
 8018b54:	0011      	movs	r1, r2
 8018b56:	0018      	movs	r0, r3
 8018b58:	f7fa fc5d 	bl	8013416 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018b5c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018b5e:	0018      	movs	r0, r3
 8018b60:	46bd      	mov	sp, r7
 8018b62:	bd80      	pop	{r7, pc}
 8018b64:	20002c18 	.word	0x20002c18
 8018b68:	2000213c 	.word	0x2000213c
 8018b6c:	20002418 	.word	0x20002418

08018b70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018b74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018b76:	0018      	movs	r0, r3
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}

08018b7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b082      	sub	sp, #8
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6039      	str	r1, [r7, #0]
 8018b84:	0011      	movs	r1, r2
 8018b86:	1dfb      	adds	r3, r7, #7
 8018b88:	1c02      	adds	r2, r0, #0
 8018b8a:	701a      	strb	r2, [r3, #0]
 8018b8c:	1d3b      	adds	r3, r7, #4
 8018b8e:	1c0a      	adds	r2, r1, #0
 8018b90:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018b92:	1dfb      	adds	r3, r7, #7
 8018b94:	781b      	ldrb	r3, [r3, #0]
 8018b96:	2b23      	cmp	r3, #35	@ 0x23
 8018b98:	d804      	bhi.n	8018ba4 <CDC_Control_FS+0x28>
 8018b9a:	009a      	lsls	r2, r3, #2
 8018b9c:	4b04      	ldr	r3, [pc, #16]	@ (8018bb0 <CDC_Control_FS+0x34>)
 8018b9e:	18d3      	adds	r3, r2, r3
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018ba4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8018ba6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018ba8:	0018      	movs	r0, r3
 8018baa:	46bd      	mov	sp, r7
 8018bac:	b002      	add	sp, #8
 8018bae:	bd80      	pop	{r7, pc}
 8018bb0:	08019c3c 	.word	0x08019c3c

08018bb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b082      	sub	sp, #8
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
 8018bbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018bbe:	687a      	ldr	r2, [r7, #4]
 8018bc0:	4b06      	ldr	r3, [pc, #24]	@ (8018bdc <CDC_Receive_FS+0x28>)
 8018bc2:	0011      	movs	r1, r2
 8018bc4:	0018      	movs	r0, r3
 8018bc6:	f7fa fc26 	bl	8013416 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018bca:	4b04      	ldr	r3, [pc, #16]	@ (8018bdc <CDC_Receive_FS+0x28>)
 8018bcc:	0018      	movs	r0, r3
 8018bce:	f7fa fc8d 	bl	80134ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018bd2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018bd4:	0018      	movs	r0, r3
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	b002      	add	sp, #8
 8018bda:	bd80      	pop	{r7, pc}
 8018bdc:	2000213c 	.word	0x2000213c

08018be0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018be0:	b5b0      	push	{r4, r5, r7, lr}
 8018be2:	b084      	sub	sp, #16
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
 8018be8:	000a      	movs	r2, r1
 8018bea:	1cbb      	adds	r3, r7, #2
 8018bec:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8018bee:	230f      	movs	r3, #15
 8018bf0:	18fb      	adds	r3, r7, r3
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018bf6:	4a11      	ldr	r2, [pc, #68]	@ (8018c3c <CDC_Transmit_FS+0x5c>)
 8018bf8:	23af      	movs	r3, #175	@ 0xaf
 8018bfa:	009b      	lsls	r3, r3, #2
 8018bfc:	58d3      	ldr	r3, [r2, r3]
 8018bfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018c00:	68ba      	ldr	r2, [r7, #8]
 8018c02:	2385      	movs	r3, #133	@ 0x85
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	58d3      	ldr	r3, [r2, r3]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d001      	beq.n	8018c10 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8018c0c:	2301      	movs	r3, #1
 8018c0e:	e010      	b.n	8018c32 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018c10:	1cbb      	adds	r3, r7, #2
 8018c12:	881a      	ldrh	r2, [r3, #0]
 8018c14:	6879      	ldr	r1, [r7, #4]
 8018c16:	4b09      	ldr	r3, [pc, #36]	@ (8018c3c <CDC_Transmit_FS+0x5c>)
 8018c18:	0018      	movs	r0, r3
 8018c1a:	f7fa fbd9 	bl	80133d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018c1e:	250f      	movs	r5, #15
 8018c20:	197c      	adds	r4, r7, r5
 8018c22:	4b06      	ldr	r3, [pc, #24]	@ (8018c3c <CDC_Transmit_FS+0x5c>)
 8018c24:	0018      	movs	r0, r3
 8018c26:	f7fa fc13 	bl	8013450 <USBD_CDC_TransmitPacket>
 8018c2a:	0003      	movs	r3, r0
 8018c2c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8018c2e:	197b      	adds	r3, r7, r5
 8018c30:	781b      	ldrb	r3, [r3, #0]
}
 8018c32:	0018      	movs	r0, r3
 8018c34:	46bd      	mov	sp, r7
 8018c36:	b004      	add	sp, #16
 8018c38:	bdb0      	pop	{r4, r5, r7, pc}
 8018c3a:	46c0      	nop			@ (mov r8, r8)
 8018c3c:	2000213c 	.word	0x2000213c

08018c40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b086      	sub	sp, #24
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	60f8      	str	r0, [r7, #12]
 8018c48:	60b9      	str	r1, [r7, #8]
 8018c4a:	1dfb      	adds	r3, r7, #7
 8018c4c:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8018c4e:	2117      	movs	r1, #23
 8018c50:	187b      	adds	r3, r7, r1
 8018c52:	2200      	movs	r2, #0
 8018c54:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018c56:	187b      	adds	r3, r7, r1
 8018c58:	781b      	ldrb	r3, [r3, #0]
 8018c5a:	b25b      	sxtb	r3, r3
}
 8018c5c:	0018      	movs	r0, r3
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	b006      	add	sp, #24
 8018c62:	bd80      	pop	{r7, pc}

08018c64 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	0002      	movs	r2, r0
 8018c6c:	6039      	str	r1, [r7, #0]
 8018c6e:	1dfb      	adds	r3, r7, #7
 8018c70:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	2212      	movs	r2, #18
 8018c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8018c78:	4b02      	ldr	r3, [pc, #8]	@ (8018c84 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018c7a:	0018      	movs	r0, r3
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	b002      	add	sp, #8
 8018c80:	bd80      	pop	{r7, pc}
 8018c82:	46c0      	nop			@ (mov r8, r8)
 8018c84:	20000178 	.word	0x20000178

08018c88 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	0002      	movs	r2, r0
 8018c90:	6039      	str	r1, [r7, #0]
 8018c92:	1dfb      	adds	r3, r7, #7
 8018c94:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	2204      	movs	r2, #4
 8018c9a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018c9c:	4b02      	ldr	r3, [pc, #8]	@ (8018ca8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018c9e:	0018      	movs	r0, r3
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	b002      	add	sp, #8
 8018ca4:	bd80      	pop	{r7, pc}
 8018ca6:	46c0      	nop			@ (mov r8, r8)
 8018ca8:	2000018c 	.word	0x2000018c

08018cac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	0002      	movs	r2, r0
 8018cb4:	6039      	str	r1, [r7, #0]
 8018cb6:	1dfb      	adds	r3, r7, #7
 8018cb8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8018cba:	1dfb      	adds	r3, r7, #7
 8018cbc:	781b      	ldrb	r3, [r3, #0]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d106      	bne.n	8018cd0 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018cc2:	683a      	ldr	r2, [r7, #0]
 8018cc4:	4908      	ldr	r1, [pc, #32]	@ (8018ce8 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8018cc6:	4b09      	ldr	r3, [pc, #36]	@ (8018cec <USBD_CDC_ProductStrDescriptor+0x40>)
 8018cc8:	0018      	movs	r0, r3
 8018cca:	f7fb ffd8 	bl	8014c7e <USBD_GetString>
 8018cce:	e005      	b.n	8018cdc <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018cd0:	683a      	ldr	r2, [r7, #0]
 8018cd2:	4905      	ldr	r1, [pc, #20]	@ (8018ce8 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8018cd4:	4b05      	ldr	r3, [pc, #20]	@ (8018cec <USBD_CDC_ProductStrDescriptor+0x40>)
 8018cd6:	0018      	movs	r0, r3
 8018cd8:	f7fb ffd1 	bl	8014c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018cdc:	4b02      	ldr	r3, [pc, #8]	@ (8018ce8 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 8018cde:	0018      	movs	r0, r3
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	b002      	add	sp, #8
 8018ce4:	bd80      	pop	{r7, pc}
 8018ce6:	46c0      	nop			@ (mov r8, r8)
 8018ce8:	20003418 	.word	0x20003418
 8018cec:	08019938 	.word	0x08019938

08018cf0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b082      	sub	sp, #8
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	0002      	movs	r2, r0
 8018cf8:	6039      	str	r1, [r7, #0]
 8018cfa:	1dfb      	adds	r3, r7, #7
 8018cfc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018cfe:	683a      	ldr	r2, [r7, #0]
 8018d00:	4904      	ldr	r1, [pc, #16]	@ (8018d14 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8018d02:	4b05      	ldr	r3, [pc, #20]	@ (8018d18 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8018d04:	0018      	movs	r0, r3
 8018d06:	f7fb ffba 	bl	8014c7e <USBD_GetString>
  return USBD_StrDesc;
 8018d0a:	4b02      	ldr	r3, [pc, #8]	@ (8018d14 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 8018d0c:	0018      	movs	r0, r3
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	b002      	add	sp, #8
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	20003418 	.word	0x20003418
 8018d18:	08019950 	.word	0x08019950

08018d1c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b082      	sub	sp, #8
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	0002      	movs	r2, r0
 8018d24:	6039      	str	r1, [r7, #0]
 8018d26:	1dfb      	adds	r3, r7, #7
 8018d28:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	221a      	movs	r2, #26
 8018d2e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018d30:	f000 f84c 	bl	8018dcc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018d34:	4b02      	ldr	r3, [pc, #8]	@ (8018d40 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 8018d36:	0018      	movs	r0, r3
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	b002      	add	sp, #8
 8018d3c:	bd80      	pop	{r7, pc}
 8018d3e:	46c0      	nop			@ (mov r8, r8)
 8018d40:	20000190 	.word	0x20000190

08018d44 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b082      	sub	sp, #8
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	0002      	movs	r2, r0
 8018d4c:	6039      	str	r1, [r7, #0]
 8018d4e:	1dfb      	adds	r3, r7, #7
 8018d50:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8018d52:	1dfb      	adds	r3, r7, #7
 8018d54:	781b      	ldrb	r3, [r3, #0]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d106      	bne.n	8018d68 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018d5a:	683a      	ldr	r2, [r7, #0]
 8018d5c:	4908      	ldr	r1, [pc, #32]	@ (8018d80 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8018d5e:	4b09      	ldr	r3, [pc, #36]	@ (8018d84 <USBD_CDC_ConfigStrDescriptor+0x40>)
 8018d60:	0018      	movs	r0, r3
 8018d62:	f7fb ff8c 	bl	8014c7e <USBD_GetString>
 8018d66:	e005      	b.n	8018d74 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018d68:	683a      	ldr	r2, [r7, #0]
 8018d6a:	4905      	ldr	r1, [pc, #20]	@ (8018d80 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8018d6c:	4b05      	ldr	r3, [pc, #20]	@ (8018d84 <USBD_CDC_ConfigStrDescriptor+0x40>)
 8018d6e:	0018      	movs	r0, r3
 8018d70:	f7fb ff85 	bl	8014c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d74:	4b02      	ldr	r3, [pc, #8]	@ (8018d80 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 8018d76:	0018      	movs	r0, r3
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	b002      	add	sp, #8
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	46c0      	nop			@ (mov r8, r8)
 8018d80:	20003418 	.word	0x20003418
 8018d84:	08019964 	.word	0x08019964

08018d88 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b082      	sub	sp, #8
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	0002      	movs	r2, r0
 8018d90:	6039      	str	r1, [r7, #0]
 8018d92:	1dfb      	adds	r3, r7, #7
 8018d94:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8018d96:	1dfb      	adds	r3, r7, #7
 8018d98:	781b      	ldrb	r3, [r3, #0]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d106      	bne.n	8018dac <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018d9e:	683a      	ldr	r2, [r7, #0]
 8018da0:	4908      	ldr	r1, [pc, #32]	@ (8018dc4 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8018da2:	4b09      	ldr	r3, [pc, #36]	@ (8018dc8 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8018da4:	0018      	movs	r0, r3
 8018da6:	f7fb ff6a 	bl	8014c7e <USBD_GetString>
 8018daa:	e005      	b.n	8018db8 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018dac:	683a      	ldr	r2, [r7, #0]
 8018dae:	4905      	ldr	r1, [pc, #20]	@ (8018dc4 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8018db0:	4b05      	ldr	r3, [pc, #20]	@ (8018dc8 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8018db2:	0018      	movs	r0, r3
 8018db4:	f7fb ff63 	bl	8014c7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018db8:	4b02      	ldr	r3, [pc, #8]	@ (8018dc4 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 8018dba:	0018      	movs	r0, r3
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	b002      	add	sp, #8
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	46c0      	nop			@ (mov r8, r8)
 8018dc4:	20003418 	.word	0x20003418
 8018dc8:	08019970 	.word	0x08019970

08018dcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b084      	sub	sp, #16
 8018dd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018dd2:	4b10      	ldr	r3, [pc, #64]	@ (8018e14 <Get_SerialNum+0x48>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8018e18 <Get_SerialNum+0x4c>)
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018dde:	4b0f      	ldr	r3, [pc, #60]	@ (8018e1c <Get_SerialNum+0x50>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018de4:	68fa      	ldr	r2, [r7, #12]
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	18d3      	adds	r3, r2, r3
 8018dea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d00b      	beq.n	8018e0a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018df2:	490b      	ldr	r1, [pc, #44]	@ (8018e20 <Get_SerialNum+0x54>)
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2208      	movs	r2, #8
 8018df8:	0018      	movs	r0, r3
 8018dfa:	f000 f815 	bl	8018e28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018dfe:	4909      	ldr	r1, [pc, #36]	@ (8018e24 <Get_SerialNum+0x58>)
 8018e00:	68bb      	ldr	r3, [r7, #8]
 8018e02:	2204      	movs	r2, #4
 8018e04:	0018      	movs	r0, r3
 8018e06:	f000 f80f 	bl	8018e28 <IntToUnicode>
  }
}
 8018e0a:	46c0      	nop			@ (mov r8, r8)
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	b004      	add	sp, #16
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	46c0      	nop			@ (mov r8, r8)
 8018e14:	1fff7590 	.word	0x1fff7590
 8018e18:	1fff7594 	.word	0x1fff7594
 8018e1c:	1fff7598 	.word	0x1fff7598
 8018e20:	20000192 	.word	0x20000192
 8018e24:	200001a2 	.word	0x200001a2

08018e28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b086      	sub	sp, #24
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	60b9      	str	r1, [r7, #8]
 8018e32:	1dfb      	adds	r3, r7, #7
 8018e34:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8018e36:	2117      	movs	r1, #23
 8018e38:	187b      	adds	r3, r7, r1
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8018e3e:	187b      	adds	r3, r7, r1
 8018e40:	2200      	movs	r2, #0
 8018e42:	701a      	strb	r2, [r3, #0]
 8018e44:	e02f      	b.n	8018ea6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	0f1b      	lsrs	r3, r3, #28
 8018e4a:	2b09      	cmp	r3, #9
 8018e4c:	d80d      	bhi.n	8018e6a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	0f1b      	lsrs	r3, r3, #28
 8018e52:	b2da      	uxtb	r2, r3
 8018e54:	2317      	movs	r3, #23
 8018e56:	18fb      	adds	r3, r7, r3
 8018e58:	781b      	ldrb	r3, [r3, #0]
 8018e5a:	005b      	lsls	r3, r3, #1
 8018e5c:	0019      	movs	r1, r3
 8018e5e:	68bb      	ldr	r3, [r7, #8]
 8018e60:	185b      	adds	r3, r3, r1
 8018e62:	3230      	adds	r2, #48	@ 0x30
 8018e64:	b2d2      	uxtb	r2, r2
 8018e66:	701a      	strb	r2, [r3, #0]
 8018e68:	e00c      	b.n	8018e84 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	0f1b      	lsrs	r3, r3, #28
 8018e6e:	b2da      	uxtb	r2, r3
 8018e70:	2317      	movs	r3, #23
 8018e72:	18fb      	adds	r3, r7, r3
 8018e74:	781b      	ldrb	r3, [r3, #0]
 8018e76:	005b      	lsls	r3, r3, #1
 8018e78:	0019      	movs	r1, r3
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	185b      	adds	r3, r3, r1
 8018e7e:	3237      	adds	r2, #55	@ 0x37
 8018e80:	b2d2      	uxtb	r2, r2
 8018e82:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	011b      	lsls	r3, r3, #4
 8018e88:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018e8a:	2117      	movs	r1, #23
 8018e8c:	187b      	adds	r3, r7, r1
 8018e8e:	781b      	ldrb	r3, [r3, #0]
 8018e90:	005b      	lsls	r3, r3, #1
 8018e92:	3301      	adds	r3, #1
 8018e94:	68ba      	ldr	r2, [r7, #8]
 8018e96:	18d3      	adds	r3, r2, r3
 8018e98:	2200      	movs	r2, #0
 8018e9a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018e9c:	187b      	adds	r3, r7, r1
 8018e9e:	781a      	ldrb	r2, [r3, #0]
 8018ea0:	187b      	adds	r3, r7, r1
 8018ea2:	3201      	adds	r2, #1
 8018ea4:	701a      	strb	r2, [r3, #0]
 8018ea6:	2317      	movs	r3, #23
 8018ea8:	18fa      	adds	r2, r7, r3
 8018eaa:	1dfb      	adds	r3, r7, #7
 8018eac:	7812      	ldrb	r2, [r2, #0]
 8018eae:	781b      	ldrb	r3, [r3, #0]
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	d3c8      	bcc.n	8018e46 <IntToUnicode+0x1e>
  }
}
 8018eb4:	46c0      	nop			@ (mov r8, r8)
 8018eb6:	46c0      	nop			@ (mov r8, r8)
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	b006      	add	sp, #24
 8018ebc:	bd80      	pop	{r7, pc}
	...

08018ec0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018ec0:	b590      	push	{r4, r7, lr}
 8018ec2:	b099      	sub	sp, #100	@ 0x64
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018ec8:	2414      	movs	r4, #20
 8018eca:	193b      	adds	r3, r7, r4
 8018ecc:	0018      	movs	r0, r3
 8018ece:	234c      	movs	r3, #76	@ 0x4c
 8018ed0:	001a      	movs	r2, r3
 8018ed2:	2100      	movs	r1, #0
 8018ed4:	f000 fc7e 	bl	80197d4 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	4a25      	ldr	r2, [pc, #148]	@ (8018f74 <HAL_PCD_MspInit+0xb4>)
 8018ede:	4293      	cmp	r3, r2
 8018ee0:	d143      	bne.n	8018f6a <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018ee2:	193b      	adds	r3, r7, r4
 8018ee4:	2280      	movs	r2, #128	@ 0x80
 8018ee6:	0452      	lsls	r2, r2, #17
 8018ee8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018eea:	193b      	adds	r3, r7, r4
 8018eec:	2200      	movs	r2, #0
 8018eee:	645a      	str	r2, [r3, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018ef0:	193b      	adds	r3, r7, r4
 8018ef2:	0018      	movs	r0, r3
 8018ef4:	f7f3 fb4a 	bl	800c58c <HAL_RCCEx_PeriphCLKConfig>
 8018ef8:	1e03      	subs	r3, r0, #0
 8018efa:	d001      	beq.n	8018f00 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8018efc:	f7ef fc9e 	bl	800883c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018f00:	4b1d      	ldr	r3, [pc, #116]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f04:	4b1c      	ldr	r3, [pc, #112]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f06:	2180      	movs	r1, #128	@ 0x80
 8018f08:	0189      	lsls	r1, r1, #6
 8018f0a:	430a      	orrs	r2, r1
 8018f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8018f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f12:	2380      	movs	r3, #128	@ 0x80
 8018f14:	019b      	lsls	r3, r3, #6
 8018f16:	4013      	ands	r3, r2
 8018f18:	613b      	str	r3, [r7, #16]
 8018f1a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018f1c:	4b16      	ldr	r3, [pc, #88]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f20:	2380      	movs	r3, #128	@ 0x80
 8018f22:	055b      	lsls	r3, r3, #21
 8018f24:	4013      	ands	r3, r2
 8018f26:	d116      	bne.n	8018f56 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018f28:	4b13      	ldr	r3, [pc, #76]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f2c:	4b12      	ldr	r3, [pc, #72]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f2e:	2180      	movs	r1, #128	@ 0x80
 8018f30:	0549      	lsls	r1, r1, #21
 8018f32:	430a      	orrs	r2, r1
 8018f34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8018f36:	4b10      	ldr	r3, [pc, #64]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f3a:	2380      	movs	r3, #128	@ 0x80
 8018f3c:	055b      	lsls	r3, r3, #21
 8018f3e:	4013      	ands	r3, r2
 8018f40:	60fb      	str	r3, [r7, #12]
 8018f42:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8018f44:	f7f2 fd94 	bl	800ba70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8018f48:	4b0b      	ldr	r3, [pc, #44]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8018f78 <HAL_PCD_MspInit+0xb8>)
 8018f4e:	490b      	ldr	r1, [pc, #44]	@ (8018f7c <HAL_PCD_MspInit+0xbc>)
 8018f50:	400a      	ands	r2, r1
 8018f52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8018f54:	e001      	b.n	8018f5a <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8018f56:	f7f2 fd8b 	bl	800ba70 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 3, 0);
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	2103      	movs	r1, #3
 8018f5e:	2008      	movs	r0, #8
 8018f60:	f7f0 fd2c 	bl	80099bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8018f64:	2008      	movs	r0, #8
 8018f66:	f7f0 fd3e 	bl	80099e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8018f6a:	46c0      	nop			@ (mov r8, r8)
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	b019      	add	sp, #100	@ 0x64
 8018f70:	bd90      	pop	{r4, r7, pc}
 8018f72:	46c0      	nop			@ (mov r8, r8)
 8018f74:	40005c00 	.word	0x40005c00
 8018f78:	40021000 	.word	0x40021000
 8018f7c:	efffffff 	.word	0xefffffff

08018f80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b082      	sub	sp, #8
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018f88:	687a      	ldr	r2, [r7, #4]
 8018f8a:	23b7      	movs	r3, #183	@ 0xb7
 8018f8c:	009b      	lsls	r3, r3, #2
 8018f8e:	58d2      	ldr	r2, [r2, r3]
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	21a7      	movs	r1, #167	@ 0xa7
 8018f94:	0089      	lsls	r1, r1, #2
 8018f96:	468c      	mov	ip, r1
 8018f98:	4463      	add	r3, ip
 8018f9a:	0019      	movs	r1, r3
 8018f9c:	0010      	movs	r0, r2
 8018f9e:	f7fa fbb3 	bl	8013708 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018fa2:	46c0      	nop			@ (mov r8, r8)
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	b002      	add	sp, #8
 8018fa8:	bd80      	pop	{r7, pc}

08018faa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018faa:	b590      	push	{r4, r7, lr}
 8018fac:	b083      	sub	sp, #12
 8018fae:	af00      	add	r7, sp, #0
 8018fb0:	6078      	str	r0, [r7, #4]
 8018fb2:	000a      	movs	r2, r1
 8018fb4:	1cfb      	adds	r3, r7, #3
 8018fb6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018fb8:	687a      	ldr	r2, [r7, #4]
 8018fba:	23b7      	movs	r3, #183	@ 0xb7
 8018fbc:	009b      	lsls	r3, r3, #2
 8018fbe:	58d4      	ldr	r4, [r2, r3]
 8018fc0:	1cfb      	adds	r3, r7, #3
 8018fc2:	781a      	ldrb	r2, [r3, #0]
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	23b4      	movs	r3, #180	@ 0xb4
 8018fc8:	0059      	lsls	r1, r3, #1
 8018fca:	0013      	movs	r3, r2
 8018fcc:	009b      	lsls	r3, r3, #2
 8018fce:	189b      	adds	r3, r3, r2
 8018fd0:	00db      	lsls	r3, r3, #3
 8018fd2:	18c3      	adds	r3, r0, r3
 8018fd4:	185b      	adds	r3, r3, r1
 8018fd6:	681a      	ldr	r2, [r3, #0]
 8018fd8:	1cfb      	adds	r3, r7, #3
 8018fda:	781b      	ldrb	r3, [r3, #0]
 8018fdc:	0019      	movs	r1, r3
 8018fde:	0020      	movs	r0, r4
 8018fe0:	f7fa fbfc 	bl	80137dc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018fe4:	46c0      	nop			@ (mov r8, r8)
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	b003      	add	sp, #12
 8018fea:	bd90      	pop	{r4, r7, pc}

08018fec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b082      	sub	sp, #8
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
 8018ff4:	000a      	movs	r2, r1
 8018ff6:	1cfb      	adds	r3, r7, #3
 8018ff8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018ffa:	687a      	ldr	r2, [r7, #4]
 8018ffc:	23b7      	movs	r3, #183	@ 0xb7
 8018ffe:	009b      	lsls	r3, r3, #2
 8019000:	58d0      	ldr	r0, [r2, r3]
 8019002:	1cfb      	adds	r3, r7, #3
 8019004:	781a      	ldrb	r2, [r3, #0]
 8019006:	6879      	ldr	r1, [r7, #4]
 8019008:	0013      	movs	r3, r2
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	189b      	adds	r3, r3, r2
 801900e:	00db      	lsls	r3, r3, #3
 8019010:	18cb      	adds	r3, r1, r3
 8019012:	3328      	adds	r3, #40	@ 0x28
 8019014:	681a      	ldr	r2, [r3, #0]
 8019016:	1cfb      	adds	r3, r7, #3
 8019018:	781b      	ldrb	r3, [r3, #0]
 801901a:	0019      	movs	r1, r3
 801901c:	f7fa fcc6 	bl	80139ac <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8019020:	46c0      	nop			@ (mov r8, r8)
 8019022:	46bd      	mov	sp, r7
 8019024:	b002      	add	sp, #8
 8019026:	bd80      	pop	{r7, pc}

08019028 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b082      	sub	sp, #8
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019030:	687a      	ldr	r2, [r7, #4]
 8019032:	23b7      	movs	r3, #183	@ 0xb7
 8019034:	009b      	lsls	r3, r3, #2
 8019036:	58d3      	ldr	r3, [r2, r3]
 8019038:	0018      	movs	r0, r3
 801903a:	f7fa fe31 	bl	8013ca0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801903e:	46c0      	nop			@ (mov r8, r8)
 8019040:	46bd      	mov	sp, r7
 8019042:	b002      	add	sp, #8
 8019044:	bd80      	pop	{r7, pc}

08019046 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019046:	b580      	push	{r7, lr}
 8019048:	b084      	sub	sp, #16
 801904a:	af00      	add	r7, sp, #0
 801904c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801904e:	230f      	movs	r3, #15
 8019050:	18fb      	adds	r3, r7, r3
 8019052:	2201      	movs	r2, #1
 8019054:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	79db      	ldrb	r3, [r3, #7]
 801905a:	2b02      	cmp	r3, #2
 801905c:	d001      	beq.n	8019062 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801905e:	f7ef fbed 	bl	800883c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	23b7      	movs	r3, #183	@ 0xb7
 8019066:	009b      	lsls	r3, r3, #2
 8019068:	58d2      	ldr	r2, [r2, r3]
 801906a:	230f      	movs	r3, #15
 801906c:	18fb      	adds	r3, r7, r3
 801906e:	781b      	ldrb	r3, [r3, #0]
 8019070:	0019      	movs	r1, r3
 8019072:	0010      	movs	r0, r2
 8019074:	f7fa fdd1 	bl	8013c1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019078:	687a      	ldr	r2, [r7, #4]
 801907a:	23b7      	movs	r3, #183	@ 0xb7
 801907c:	009b      	lsls	r3, r3, #2
 801907e:	58d3      	ldr	r3, [r2, r3]
 8019080:	0018      	movs	r0, r3
 8019082:	f7fa fd6b 	bl	8013b5c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8019086:	46c0      	nop			@ (mov r8, r8)
 8019088:	46bd      	mov	sp, r7
 801908a:	b004      	add	sp, #16
 801908c:	bd80      	pop	{r7, pc}
	...

08019090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019098:	687a      	ldr	r2, [r7, #4]
 801909a:	23b7      	movs	r3, #183	@ 0xb7
 801909c:	009b      	lsls	r3, r3, #2
 801909e:	58d3      	ldr	r3, [r2, r3]
 80190a0:	0018      	movs	r0, r3
 80190a2:	f7fa fdcb 	bl	8013c3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	7adb      	ldrb	r3, [r3, #11]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d005      	beq.n	80190ba <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190ae:	4b05      	ldr	r3, [pc, #20]	@ (80190c4 <HAL_PCD_SuspendCallback+0x34>)
 80190b0:	691a      	ldr	r2, [r3, #16]
 80190b2:	4b04      	ldr	r3, [pc, #16]	@ (80190c4 <HAL_PCD_SuspendCallback+0x34>)
 80190b4:	2106      	movs	r1, #6
 80190b6:	430a      	orrs	r2, r1
 80190b8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80190ba:	46c0      	nop			@ (mov r8, r8)
 80190bc:	46bd      	mov	sp, r7
 80190be:	b002      	add	sp, #8
 80190c0:	bd80      	pop	{r7, pc}
 80190c2:	46c0      	nop			@ (mov r8, r8)
 80190c4:	e000ed00 	.word	0xe000ed00

080190c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	7adb      	ldrb	r3, [r3, #11]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d007      	beq.n	80190e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190d8:	4b09      	ldr	r3, [pc, #36]	@ (8019100 <HAL_PCD_ResumeCallback+0x38>)
 80190da:	691a      	ldr	r2, [r3, #16]
 80190dc:	4b08      	ldr	r3, [pc, #32]	@ (8019100 <HAL_PCD_ResumeCallback+0x38>)
 80190de:	2106      	movs	r1, #6
 80190e0:	438a      	bics	r2, r1
 80190e2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80190e4:	f000 fa7c 	bl	80195e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80190e8:	687a      	ldr	r2, [r7, #4]
 80190ea:	23b7      	movs	r3, #183	@ 0xb7
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	58d3      	ldr	r3, [r2, r3]
 80190f0:	0018      	movs	r0, r3
 80190f2:	f7fa fdbb 	bl	8013c6c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80190f6:	46c0      	nop			@ (mov r8, r8)
 80190f8:	46bd      	mov	sp, r7
 80190fa:	b002      	add	sp, #8
 80190fc:	bd80      	pop	{r7, pc}
 80190fe:	46c0      	nop			@ (mov r8, r8)
 8019100:	e000ed00 	.word	0xe000ed00

08019104 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b082      	sub	sp, #8
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 801910c:	4a34      	ldr	r2, [pc, #208]	@ (80191e0 <USBD_LL_Init+0xdc>)
 801910e:	23b7      	movs	r3, #183	@ 0xb7
 8019110:	009b      	lsls	r3, r3, #2
 8019112:	6879      	ldr	r1, [r7, #4]
 8019114:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 8019116:	687a      	ldr	r2, [r7, #4]
 8019118:	23b2      	movs	r3, #178	@ 0xb2
 801911a:	009b      	lsls	r3, r3, #2
 801911c:	4930      	ldr	r1, [pc, #192]	@ (80191e0 <USBD_LL_Init+0xdc>)
 801911e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8019120:	4b2f      	ldr	r3, [pc, #188]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019122:	4a30      	ldr	r2, [pc, #192]	@ (80191e4 <USBD_LL_Init+0xe0>)
 8019124:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8019126:	4b2e      	ldr	r3, [pc, #184]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019128:	2208      	movs	r2, #8
 801912a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 801912c:	4b2c      	ldr	r3, [pc, #176]	@ (80191e0 <USBD_LL_Init+0xdc>)
 801912e:	2208      	movs	r2, #8
 8019130:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 8019132:	4b2b      	ldr	r3, [pc, #172]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019134:	2202      	movs	r2, #2
 8019136:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019138:	4b29      	ldr	r3, [pc, #164]	@ (80191e0 <USBD_LL_Init+0xdc>)
 801913a:	2202      	movs	r2, #2
 801913c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 801913e:	4b28      	ldr	r3, [pc, #160]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019140:	2200      	movs	r2, #0
 8019142:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8019144:	4b26      	ldr	r3, [pc, #152]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019146:	2200      	movs	r2, #0
 8019148:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 801914a:	4b25      	ldr	r3, [pc, #148]	@ (80191e0 <USBD_LL_Init+0xdc>)
 801914c:	2200      	movs	r2, #0
 801914e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8019150:	4b23      	ldr	r3, [pc, #140]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019152:	2200      	movs	r2, #0
 8019154:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8019156:	4b22      	ldr	r3, [pc, #136]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019158:	2200      	movs	r2, #0
 801915a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 801915c:	4b20      	ldr	r3, [pc, #128]	@ (80191e0 <USBD_LL_Init+0xdc>)
 801915e:	2200      	movs	r2, #0
 8019160:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8019162:	4b1f      	ldr	r3, [pc, #124]	@ (80191e0 <USBD_LL_Init+0xdc>)
 8019164:	2200      	movs	r2, #0
 8019166:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8019168:	4b1d      	ldr	r3, [pc, #116]	@ (80191e0 <USBD_LL_Init+0xdc>)
 801916a:	0018      	movs	r0, r3
 801916c:	f7f0 ff7a 	bl	800a064 <HAL_PCD_Init>
 8019170:	1e03      	subs	r3, r0, #0
 8019172:	d001      	beq.n	8019178 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8019174:	f7ef fb62 	bl	800883c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019178:	687a      	ldr	r2, [r7, #4]
 801917a:	23b2      	movs	r3, #178	@ 0xb2
 801917c:	009b      	lsls	r3, r3, #2
 801917e:	58d0      	ldr	r0, [r2, r3]
 8019180:	2318      	movs	r3, #24
 8019182:	2200      	movs	r2, #0
 8019184:	2100      	movs	r1, #0
 8019186:	f7f2 fc01 	bl	800b98c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	23b2      	movs	r3, #178	@ 0xb2
 801918e:	009b      	lsls	r3, r3, #2
 8019190:	58d0      	ldr	r0, [r2, r3]
 8019192:	2358      	movs	r3, #88	@ 0x58
 8019194:	2200      	movs	r2, #0
 8019196:	2180      	movs	r1, #128	@ 0x80
 8019198:	f7f2 fbf8 	bl	800b98c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801919c:	687a      	ldr	r2, [r7, #4]
 801919e:	23b2      	movs	r3, #178	@ 0xb2
 80191a0:	009b      	lsls	r3, r3, #2
 80191a2:	58d0      	ldr	r0, [r2, r3]
 80191a4:	23c0      	movs	r3, #192	@ 0xc0
 80191a6:	2200      	movs	r2, #0
 80191a8:	2181      	movs	r1, #129	@ 0x81
 80191aa:	f7f2 fbef 	bl	800b98c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80191ae:	687a      	ldr	r2, [r7, #4]
 80191b0:	23b2      	movs	r3, #178	@ 0xb2
 80191b2:	009b      	lsls	r3, r3, #2
 80191b4:	58d0      	ldr	r0, [r2, r3]
 80191b6:	2388      	movs	r3, #136	@ 0x88
 80191b8:	005b      	lsls	r3, r3, #1
 80191ba:	2200      	movs	r2, #0
 80191bc:	2101      	movs	r1, #1
 80191be:	f7f2 fbe5 	bl	800b98c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80191c2:	687a      	ldr	r2, [r7, #4]
 80191c4:	23b2      	movs	r3, #178	@ 0xb2
 80191c6:	009b      	lsls	r3, r3, #2
 80191c8:	58d0      	ldr	r0, [r2, r3]
 80191ca:	2380      	movs	r3, #128	@ 0x80
 80191cc:	005b      	lsls	r3, r3, #1
 80191ce:	2200      	movs	r2, #0
 80191d0:	2182      	movs	r1, #130	@ 0x82
 80191d2:	f7f2 fbdb 	bl	800b98c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 80191d6:	2300      	movs	r3, #0
}
 80191d8:	0018      	movs	r0, r3
 80191da:	46bd      	mov	sp, r7
 80191dc:	b002      	add	sp, #8
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	20003618 	.word	0x20003618
 80191e4:	40005c00 	.word	0x40005c00

080191e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80191e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191ea:	b085      	sub	sp, #20
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191f0:	210f      	movs	r1, #15
 80191f2:	187b      	adds	r3, r7, r1
 80191f4:	2200      	movs	r2, #0
 80191f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191f8:	260e      	movs	r6, #14
 80191fa:	19bb      	adds	r3, r7, r6
 80191fc:	2200      	movs	r2, #0
 80191fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019200:	687a      	ldr	r2, [r7, #4]
 8019202:	23b2      	movs	r3, #178	@ 0xb2
 8019204:	009b      	lsls	r3, r3, #2
 8019206:	58d3      	ldr	r3, [r2, r3]
 8019208:	000d      	movs	r5, r1
 801920a:	187c      	adds	r4, r7, r1
 801920c:	0018      	movs	r0, r3
 801920e:	f7f1 f823 	bl	800a258 <HAL_PCD_Start>
 8019212:	0003      	movs	r3, r0
 8019214:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019216:	19bc      	adds	r4, r7, r6
 8019218:	197b      	adds	r3, r7, r5
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	0018      	movs	r0, r3
 801921e:	f000 f9e6 	bl	80195ee <USBD_Get_USB_Status>
 8019222:	0003      	movs	r3, r0
 8019224:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019226:	19bb      	adds	r3, r7, r6
 8019228:	781b      	ldrb	r3, [r3, #0]
}
 801922a:	0018      	movs	r0, r3
 801922c:	46bd      	mov	sp, r7
 801922e:	b005      	add	sp, #20
 8019230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019232 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019234:	b085      	sub	sp, #20
 8019236:	af00      	add	r7, sp, #0
 8019238:	6078      	str	r0, [r7, #4]
 801923a:	000c      	movs	r4, r1
 801923c:	0010      	movs	r0, r2
 801923e:	0019      	movs	r1, r3
 8019240:	1cfb      	adds	r3, r7, #3
 8019242:	1c22      	adds	r2, r4, #0
 8019244:	701a      	strb	r2, [r3, #0]
 8019246:	1cbb      	adds	r3, r7, #2
 8019248:	1c02      	adds	r2, r0, #0
 801924a:	701a      	strb	r2, [r3, #0]
 801924c:	003b      	movs	r3, r7
 801924e:	1c0a      	adds	r2, r1, #0
 8019250:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019252:	260f      	movs	r6, #15
 8019254:	19bb      	adds	r3, r7, r6
 8019256:	2200      	movs	r2, #0
 8019258:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801925a:	250e      	movs	r5, #14
 801925c:	197b      	adds	r3, r7, r5
 801925e:	2200      	movs	r2, #0
 8019260:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019262:	687a      	ldr	r2, [r7, #4]
 8019264:	23b2      	movs	r3, #178	@ 0xb2
 8019266:	009b      	lsls	r3, r3, #2
 8019268:	58d0      	ldr	r0, [r2, r3]
 801926a:	19bc      	adds	r4, r7, r6
 801926c:	1cbb      	adds	r3, r7, #2
 801926e:	781d      	ldrb	r5, [r3, #0]
 8019270:	003b      	movs	r3, r7
 8019272:	881a      	ldrh	r2, [r3, #0]
 8019274:	1cfb      	adds	r3, r7, #3
 8019276:	7819      	ldrb	r1, [r3, #0]
 8019278:	002b      	movs	r3, r5
 801927a:	f7f1 f953 	bl	800a524 <HAL_PCD_EP_Open>
 801927e:	0003      	movs	r3, r0
 8019280:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019282:	250e      	movs	r5, #14
 8019284:	197c      	adds	r4, r7, r5
 8019286:	19bb      	adds	r3, r7, r6
 8019288:	781b      	ldrb	r3, [r3, #0]
 801928a:	0018      	movs	r0, r3
 801928c:	f000 f9af 	bl	80195ee <USBD_Get_USB_Status>
 8019290:	0003      	movs	r3, r0
 8019292:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019294:	197b      	adds	r3, r7, r5
 8019296:	781b      	ldrb	r3, [r3, #0]
}
 8019298:	0018      	movs	r0, r3
 801929a:	46bd      	mov	sp, r7
 801929c:	b005      	add	sp, #20
 801929e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192a2:	b085      	sub	sp, #20
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
 80192a8:	000a      	movs	r2, r1
 80192aa:	1cfb      	adds	r3, r7, #3
 80192ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192ae:	210f      	movs	r1, #15
 80192b0:	187b      	adds	r3, r7, r1
 80192b2:	2200      	movs	r2, #0
 80192b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192b6:	260e      	movs	r6, #14
 80192b8:	19bb      	adds	r3, r7, r6
 80192ba:	2200      	movs	r2, #0
 80192bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80192be:	687a      	ldr	r2, [r7, #4]
 80192c0:	23b2      	movs	r3, #178	@ 0xb2
 80192c2:	009b      	lsls	r3, r3, #2
 80192c4:	58d2      	ldr	r2, [r2, r3]
 80192c6:	000d      	movs	r5, r1
 80192c8:	187c      	adds	r4, r7, r1
 80192ca:	1cfb      	adds	r3, r7, #3
 80192cc:	781b      	ldrb	r3, [r3, #0]
 80192ce:	0019      	movs	r1, r3
 80192d0:	0010      	movs	r0, r2
 80192d2:	f7f1 f998 	bl	800a606 <HAL_PCD_EP_Close>
 80192d6:	0003      	movs	r3, r0
 80192d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192da:	19bc      	adds	r4, r7, r6
 80192dc:	197b      	adds	r3, r7, r5
 80192de:	781b      	ldrb	r3, [r3, #0]
 80192e0:	0018      	movs	r0, r3
 80192e2:	f000 f984 	bl	80195ee <USBD_Get_USB_Status>
 80192e6:	0003      	movs	r3, r0
 80192e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80192ea:	19bb      	adds	r3, r7, r6
 80192ec:	781b      	ldrb	r3, [r3, #0]
}
 80192ee:	0018      	movs	r0, r3
 80192f0:	46bd      	mov	sp, r7
 80192f2:	b005      	add	sp, #20
 80192f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192f6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192f8:	b085      	sub	sp, #20
 80192fa:	af00      	add	r7, sp, #0
 80192fc:	6078      	str	r0, [r7, #4]
 80192fe:	000a      	movs	r2, r1
 8019300:	1cfb      	adds	r3, r7, #3
 8019302:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019304:	210f      	movs	r1, #15
 8019306:	187b      	adds	r3, r7, r1
 8019308:	2200      	movs	r2, #0
 801930a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801930c:	260e      	movs	r6, #14
 801930e:	19bb      	adds	r3, r7, r6
 8019310:	2200      	movs	r2, #0
 8019312:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019314:	687a      	ldr	r2, [r7, #4]
 8019316:	23b2      	movs	r3, #178	@ 0xb2
 8019318:	009b      	lsls	r3, r3, #2
 801931a:	58d2      	ldr	r2, [r2, r3]
 801931c:	000d      	movs	r5, r1
 801931e:	187c      	adds	r4, r7, r1
 8019320:	1cfb      	adds	r3, r7, #3
 8019322:	781b      	ldrb	r3, [r3, #0]
 8019324:	0019      	movs	r1, r3
 8019326:	0010      	movs	r0, r2
 8019328:	f7f1 fa4e 	bl	800a7c8 <HAL_PCD_EP_SetStall>
 801932c:	0003      	movs	r3, r0
 801932e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019330:	19bc      	adds	r4, r7, r6
 8019332:	197b      	adds	r3, r7, r5
 8019334:	781b      	ldrb	r3, [r3, #0]
 8019336:	0018      	movs	r0, r3
 8019338:	f000 f959 	bl	80195ee <USBD_Get_USB_Status>
 801933c:	0003      	movs	r3, r0
 801933e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019340:	19bb      	adds	r3, r7, r6
 8019342:	781b      	ldrb	r3, [r3, #0]
}
 8019344:	0018      	movs	r0, r3
 8019346:	46bd      	mov	sp, r7
 8019348:	b005      	add	sp, #20
 801934a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801934c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801934c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801934e:	b085      	sub	sp, #20
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
 8019354:	000a      	movs	r2, r1
 8019356:	1cfb      	adds	r3, r7, #3
 8019358:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801935a:	210f      	movs	r1, #15
 801935c:	187b      	adds	r3, r7, r1
 801935e:	2200      	movs	r2, #0
 8019360:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019362:	260e      	movs	r6, #14
 8019364:	19bb      	adds	r3, r7, r6
 8019366:	2200      	movs	r2, #0
 8019368:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801936a:	687a      	ldr	r2, [r7, #4]
 801936c:	23b2      	movs	r3, #178	@ 0xb2
 801936e:	009b      	lsls	r3, r3, #2
 8019370:	58d2      	ldr	r2, [r2, r3]
 8019372:	000d      	movs	r5, r1
 8019374:	187c      	adds	r4, r7, r1
 8019376:	1cfb      	adds	r3, r7, #3
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	0019      	movs	r1, r3
 801937c:	0010      	movs	r0, r2
 801937e:	f7f1 fa81 	bl	800a884 <HAL_PCD_EP_ClrStall>
 8019382:	0003      	movs	r3, r0
 8019384:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019386:	19bc      	adds	r4, r7, r6
 8019388:	197b      	adds	r3, r7, r5
 801938a:	781b      	ldrb	r3, [r3, #0]
 801938c:	0018      	movs	r0, r3
 801938e:	f000 f92e 	bl	80195ee <USBD_Get_USB_Status>
 8019392:	0003      	movs	r3, r0
 8019394:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019396:	19bb      	adds	r3, r7, r6
 8019398:	781b      	ldrb	r3, [r3, #0]
}
 801939a:	0018      	movs	r0, r3
 801939c:	46bd      	mov	sp, r7
 801939e:	b005      	add	sp, #20
 80193a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080193a2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80193a2:	b580      	push	{r7, lr}
 80193a4:	b084      	sub	sp, #16
 80193a6:	af00      	add	r7, sp, #0
 80193a8:	6078      	str	r0, [r7, #4]
 80193aa:	000a      	movs	r2, r1
 80193ac:	1cfb      	adds	r3, r7, #3
 80193ae:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80193b0:	687a      	ldr	r2, [r7, #4]
 80193b2:	23b2      	movs	r3, #178	@ 0xb2
 80193b4:	009b      	lsls	r3, r3, #2
 80193b6:	58d3      	ldr	r3, [r2, r3]
 80193b8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80193ba:	1cfb      	adds	r3, r7, #3
 80193bc:	781b      	ldrb	r3, [r3, #0]
 80193be:	b25b      	sxtb	r3, r3
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	da0c      	bge.n	80193de <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80193c4:	1cfb      	adds	r3, r7, #3
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	227f      	movs	r2, #127	@ 0x7f
 80193ca:	401a      	ands	r2, r3
 80193cc:	68f9      	ldr	r1, [r7, #12]
 80193ce:	0013      	movs	r3, r2
 80193d0:	009b      	lsls	r3, r3, #2
 80193d2:	189b      	adds	r3, r3, r2
 80193d4:	00db      	lsls	r3, r3, #3
 80193d6:	18cb      	adds	r3, r1, r3
 80193d8:	3316      	adds	r3, #22
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	e00d      	b.n	80193fa <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80193de:	1cfb      	adds	r3, r7, #3
 80193e0:	781b      	ldrb	r3, [r3, #0]
 80193e2:	227f      	movs	r2, #127	@ 0x7f
 80193e4:	401a      	ands	r2, r3
 80193e6:	68f8      	ldr	r0, [r7, #12]
 80193e8:	23ab      	movs	r3, #171	@ 0xab
 80193ea:	0059      	lsls	r1, r3, #1
 80193ec:	0013      	movs	r3, r2
 80193ee:	009b      	lsls	r3, r3, #2
 80193f0:	189b      	adds	r3, r3, r2
 80193f2:	00db      	lsls	r3, r3, #3
 80193f4:	18c3      	adds	r3, r0, r3
 80193f6:	185b      	adds	r3, r3, r1
 80193f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80193fa:	0018      	movs	r0, r3
 80193fc:	46bd      	mov	sp, r7
 80193fe:	b004      	add	sp, #16
 8019400:	bd80      	pop	{r7, pc}

08019402 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019404:	b085      	sub	sp, #20
 8019406:	af00      	add	r7, sp, #0
 8019408:	6078      	str	r0, [r7, #4]
 801940a:	000a      	movs	r2, r1
 801940c:	1cfb      	adds	r3, r7, #3
 801940e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019410:	210f      	movs	r1, #15
 8019412:	187b      	adds	r3, r7, r1
 8019414:	2200      	movs	r2, #0
 8019416:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019418:	260e      	movs	r6, #14
 801941a:	19bb      	adds	r3, r7, r6
 801941c:	2200      	movs	r2, #0
 801941e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019420:	687a      	ldr	r2, [r7, #4]
 8019422:	23b2      	movs	r3, #178	@ 0xb2
 8019424:	009b      	lsls	r3, r3, #2
 8019426:	58d2      	ldr	r2, [r2, r3]
 8019428:	000d      	movs	r5, r1
 801942a:	187c      	adds	r4, r7, r1
 801942c:	1cfb      	adds	r3, r7, #3
 801942e:	781b      	ldrb	r3, [r3, #0]
 8019430:	0019      	movs	r1, r3
 8019432:	0010      	movs	r0, r2
 8019434:	f7f1 f84c 	bl	800a4d0 <HAL_PCD_SetAddress>
 8019438:	0003      	movs	r3, r0
 801943a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801943c:	19bc      	adds	r4, r7, r6
 801943e:	197b      	adds	r3, r7, r5
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	0018      	movs	r0, r3
 8019444:	f000 f8d3 	bl	80195ee <USBD_Get_USB_Status>
 8019448:	0003      	movs	r3, r0
 801944a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801944c:	19bb      	adds	r3, r7, r6
 801944e:	781b      	ldrb	r3, [r3, #0]
}
 8019450:	0018      	movs	r0, r3
 8019452:	46bd      	mov	sp, r7
 8019454:	b005      	add	sp, #20
 8019456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019458 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801945a:	b087      	sub	sp, #28
 801945c:	af00      	add	r7, sp, #0
 801945e:	60f8      	str	r0, [r7, #12]
 8019460:	607a      	str	r2, [r7, #4]
 8019462:	603b      	str	r3, [r7, #0]
 8019464:	230b      	movs	r3, #11
 8019466:	18fb      	adds	r3, r7, r3
 8019468:	1c0a      	adds	r2, r1, #0
 801946a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801946c:	2617      	movs	r6, #23
 801946e:	19bb      	adds	r3, r7, r6
 8019470:	2200      	movs	r2, #0
 8019472:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019474:	2516      	movs	r5, #22
 8019476:	197b      	adds	r3, r7, r5
 8019478:	2200      	movs	r2, #0
 801947a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801947c:	68fa      	ldr	r2, [r7, #12]
 801947e:	23b2      	movs	r3, #178	@ 0xb2
 8019480:	009b      	lsls	r3, r3, #2
 8019482:	58d0      	ldr	r0, [r2, r3]
 8019484:	19bc      	adds	r4, r7, r6
 8019486:	683d      	ldr	r5, [r7, #0]
 8019488:	687a      	ldr	r2, [r7, #4]
 801948a:	230b      	movs	r3, #11
 801948c:	18fb      	adds	r3, r7, r3
 801948e:	7819      	ldrb	r1, [r3, #0]
 8019490:	002b      	movs	r3, r5
 8019492:	f7f1 f95c 	bl	800a74e <HAL_PCD_EP_Transmit>
 8019496:	0003      	movs	r3, r0
 8019498:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801949a:	2516      	movs	r5, #22
 801949c:	197c      	adds	r4, r7, r5
 801949e:	19bb      	adds	r3, r7, r6
 80194a0:	781b      	ldrb	r3, [r3, #0]
 80194a2:	0018      	movs	r0, r3
 80194a4:	f000 f8a3 	bl	80195ee <USBD_Get_USB_Status>
 80194a8:	0003      	movs	r3, r0
 80194aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80194ac:	197b      	adds	r3, r7, r5
 80194ae:	781b      	ldrb	r3, [r3, #0]
}
 80194b0:	0018      	movs	r0, r3
 80194b2:	46bd      	mov	sp, r7
 80194b4:	b007      	add	sp, #28
 80194b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080194b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80194b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194ba:	b087      	sub	sp, #28
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	607a      	str	r2, [r7, #4]
 80194c2:	603b      	str	r3, [r7, #0]
 80194c4:	230b      	movs	r3, #11
 80194c6:	18fb      	adds	r3, r7, r3
 80194c8:	1c0a      	adds	r2, r1, #0
 80194ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194cc:	2617      	movs	r6, #23
 80194ce:	19bb      	adds	r3, r7, r6
 80194d0:	2200      	movs	r2, #0
 80194d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194d4:	2516      	movs	r5, #22
 80194d6:	197b      	adds	r3, r7, r5
 80194d8:	2200      	movs	r2, #0
 80194da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80194dc:	68fa      	ldr	r2, [r7, #12]
 80194de:	23b2      	movs	r3, #178	@ 0xb2
 80194e0:	009b      	lsls	r3, r3, #2
 80194e2:	58d0      	ldr	r0, [r2, r3]
 80194e4:	19bc      	adds	r4, r7, r6
 80194e6:	683d      	ldr	r5, [r7, #0]
 80194e8:	687a      	ldr	r2, [r7, #4]
 80194ea:	230b      	movs	r3, #11
 80194ec:	18fb      	adds	r3, r7, r3
 80194ee:	7819      	ldrb	r1, [r3, #0]
 80194f0:	002b      	movs	r3, r5
 80194f2:	f7f1 f8db 	bl	800a6ac <HAL_PCD_EP_Receive>
 80194f6:	0003      	movs	r3, r0
 80194f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80194fa:	2516      	movs	r5, #22
 80194fc:	197c      	adds	r4, r7, r5
 80194fe:	19bb      	adds	r3, r7, r6
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	0018      	movs	r0, r3
 8019504:	f000 f873 	bl	80195ee <USBD_Get_USB_Status>
 8019508:	0003      	movs	r3, r0
 801950a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801950c:	197b      	adds	r3, r7, r5
 801950e:	781b      	ldrb	r3, [r3, #0]
}
 8019510:	0018      	movs	r0, r3
 8019512:	46bd      	mov	sp, r7
 8019514:	b007      	add	sp, #28
 8019516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019518 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b082      	sub	sp, #8
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
 8019520:	000a      	movs	r2, r1
 8019522:	1cfb      	adds	r3, r7, #3
 8019524:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019526:	687a      	ldr	r2, [r7, #4]
 8019528:	23b2      	movs	r3, #178	@ 0xb2
 801952a:	009b      	lsls	r3, r3, #2
 801952c:	58d2      	ldr	r2, [r2, r3]
 801952e:	1cfb      	adds	r3, r7, #3
 8019530:	781b      	ldrb	r3, [r3, #0]
 8019532:	0019      	movs	r1, r3
 8019534:	0010      	movs	r0, r2
 8019536:	f7f1 f8f1 	bl	800a71c <HAL_PCD_EP_GetRxCount>
 801953a:	0003      	movs	r3, r0
}
 801953c:	0018      	movs	r0, r3
 801953e:	46bd      	mov	sp, r7
 8019540:	b002      	add	sp, #8
 8019542:	bd80      	pop	{r7, pc}

08019544 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b082      	sub	sp, #8
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	000a      	movs	r2, r1
 801954e:	1cfb      	adds	r3, r7, #3
 8019550:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019552:	1cfb      	adds	r3, r7, #3
 8019554:	781b      	ldrb	r3, [r3, #0]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d002      	beq.n	8019560 <HAL_PCDEx_LPM_Callback+0x1c>
 801955a:	2b01      	cmp	r3, #1
 801955c:	d014      	beq.n	8019588 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801955e:	e025      	b.n	80195ac <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	7adb      	ldrb	r3, [r3, #11]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d007      	beq.n	8019578 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 8019568:	f000 f83a 	bl	80195e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801956c:	4b11      	ldr	r3, [pc, #68]	@ (80195b4 <HAL_PCDEx_LPM_Callback+0x70>)
 801956e:	691a      	ldr	r2, [r3, #16]
 8019570:	4b10      	ldr	r3, [pc, #64]	@ (80195b4 <HAL_PCDEx_LPM_Callback+0x70>)
 8019572:	2106      	movs	r1, #6
 8019574:	438a      	bics	r2, r1
 8019576:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 8019578:	687a      	ldr	r2, [r7, #4]
 801957a:	23b7      	movs	r3, #183	@ 0xb7
 801957c:	009b      	lsls	r3, r3, #2
 801957e:	58d3      	ldr	r3, [r2, r3]
 8019580:	0018      	movs	r0, r3
 8019582:	f7fa fb73 	bl	8013c6c <USBD_LL_Resume>
    break;
 8019586:	e011      	b.n	80195ac <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 8019588:	687a      	ldr	r2, [r7, #4]
 801958a:	23b7      	movs	r3, #183	@ 0xb7
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	58d3      	ldr	r3, [r2, r3]
 8019590:	0018      	movs	r0, r3
 8019592:	f7fa fb53 	bl	8013c3c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	7adb      	ldrb	r3, [r3, #11]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d005      	beq.n	80195aa <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801959e:	4b05      	ldr	r3, [pc, #20]	@ (80195b4 <HAL_PCDEx_LPM_Callback+0x70>)
 80195a0:	691a      	ldr	r2, [r3, #16]
 80195a2:	4b04      	ldr	r3, [pc, #16]	@ (80195b4 <HAL_PCDEx_LPM_Callback+0x70>)
 80195a4:	2106      	movs	r1, #6
 80195a6:	430a      	orrs	r2, r1
 80195a8:	611a      	str	r2, [r3, #16]
    break;
 80195aa:	46c0      	nop			@ (mov r8, r8)
}
 80195ac:	46c0      	nop			@ (mov r8, r8)
 80195ae:	46bd      	mov	sp, r7
 80195b0:	b002      	add	sp, #8
 80195b2:	bd80      	pop	{r7, pc}
 80195b4:	e000ed00 	.word	0xe000ed00

080195b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80195c0:	4b02      	ldr	r3, [pc, #8]	@ (80195cc <USBD_static_malloc+0x14>)
}
 80195c2:	0018      	movs	r0, r3
 80195c4:	46bd      	mov	sp, r7
 80195c6:	b002      	add	sp, #8
 80195c8:	bd80      	pop	{r7, pc}
 80195ca:	46c0      	nop			@ (mov r8, r8)
 80195cc:	200038f8 	.word	0x200038f8

080195d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b082      	sub	sp, #8
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]

}
 80195d8:	46c0      	nop			@ (mov r8, r8)
 80195da:	46bd      	mov	sp, r7
 80195dc:	b002      	add	sp, #8
 80195de:	bd80      	pop	{r7, pc}

080195e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80195e4:	f7ee fde6 	bl	80081b4 <SystemClock_Config>
}
 80195e8:	46c0      	nop			@ (mov r8, r8)
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd80      	pop	{r7, pc}

080195ee <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80195ee:	b580      	push	{r7, lr}
 80195f0:	b084      	sub	sp, #16
 80195f2:	af00      	add	r7, sp, #0
 80195f4:	0002      	movs	r2, r0
 80195f6:	1dfb      	adds	r3, r7, #7
 80195f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195fa:	230f      	movs	r3, #15
 80195fc:	18fb      	adds	r3, r7, r3
 80195fe:	2200      	movs	r2, #0
 8019600:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8019602:	1dfb      	adds	r3, r7, #7
 8019604:	781b      	ldrb	r3, [r3, #0]
 8019606:	2b03      	cmp	r3, #3
 8019608:	d017      	beq.n	801963a <USBD_Get_USB_Status+0x4c>
 801960a:	dc1b      	bgt.n	8019644 <USBD_Get_USB_Status+0x56>
 801960c:	2b02      	cmp	r3, #2
 801960e:	d00f      	beq.n	8019630 <USBD_Get_USB_Status+0x42>
 8019610:	dc18      	bgt.n	8019644 <USBD_Get_USB_Status+0x56>
 8019612:	2b00      	cmp	r3, #0
 8019614:	d002      	beq.n	801961c <USBD_Get_USB_Status+0x2e>
 8019616:	2b01      	cmp	r3, #1
 8019618:	d005      	beq.n	8019626 <USBD_Get_USB_Status+0x38>
 801961a:	e013      	b.n	8019644 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801961c:	230f      	movs	r3, #15
 801961e:	18fb      	adds	r3, r7, r3
 8019620:	2200      	movs	r2, #0
 8019622:	701a      	strb	r2, [r3, #0]
    break;
 8019624:	e013      	b.n	801964e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019626:	230f      	movs	r3, #15
 8019628:	18fb      	adds	r3, r7, r3
 801962a:	2203      	movs	r2, #3
 801962c:	701a      	strb	r2, [r3, #0]
    break;
 801962e:	e00e      	b.n	801964e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019630:	230f      	movs	r3, #15
 8019632:	18fb      	adds	r3, r7, r3
 8019634:	2201      	movs	r2, #1
 8019636:	701a      	strb	r2, [r3, #0]
    break;
 8019638:	e009      	b.n	801964e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801963a:	230f      	movs	r3, #15
 801963c:	18fb      	adds	r3, r7, r3
 801963e:	2203      	movs	r2, #3
 8019640:	701a      	strb	r2, [r3, #0]
    break;
 8019642:	e004      	b.n	801964e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8019644:	230f      	movs	r3, #15
 8019646:	18fb      	adds	r3, r7, r3
 8019648:	2203      	movs	r2, #3
 801964a:	701a      	strb	r2, [r3, #0]
    break;
 801964c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801964e:	230f      	movs	r3, #15
 8019650:	18fb      	adds	r3, r7, r3
 8019652:	781b      	ldrb	r3, [r3, #0]
}
 8019654:	0018      	movs	r0, r3
 8019656:	46bd      	mov	sp, r7
 8019658:	b004      	add	sp, #16
 801965a:	bd80      	pop	{r7, pc}

0801965c <malloc>:
 801965c:	b510      	push	{r4, lr}
 801965e:	4b03      	ldr	r3, [pc, #12]	@ (801966c <malloc+0x10>)
 8019660:	0001      	movs	r1, r0
 8019662:	6818      	ldr	r0, [r3, #0]
 8019664:	f000 f826 	bl	80196b4 <_malloc_r>
 8019668:	bd10      	pop	{r4, pc}
 801966a:	46c0      	nop			@ (mov r8, r8)
 801966c:	200001ac 	.word	0x200001ac

08019670 <sbrk_aligned>:
 8019670:	b570      	push	{r4, r5, r6, lr}
 8019672:	4e0f      	ldr	r6, [pc, #60]	@ (80196b0 <sbrk_aligned+0x40>)
 8019674:	000d      	movs	r5, r1
 8019676:	6831      	ldr	r1, [r6, #0]
 8019678:	0004      	movs	r4, r0
 801967a:	2900      	cmp	r1, #0
 801967c:	d102      	bne.n	8019684 <sbrk_aligned+0x14>
 801967e:	f000 f8b1 	bl	80197e4 <_sbrk_r>
 8019682:	6030      	str	r0, [r6, #0]
 8019684:	0029      	movs	r1, r5
 8019686:	0020      	movs	r0, r4
 8019688:	f000 f8ac 	bl	80197e4 <_sbrk_r>
 801968c:	1c43      	adds	r3, r0, #1
 801968e:	d103      	bne.n	8019698 <sbrk_aligned+0x28>
 8019690:	2501      	movs	r5, #1
 8019692:	426d      	negs	r5, r5
 8019694:	0028      	movs	r0, r5
 8019696:	bd70      	pop	{r4, r5, r6, pc}
 8019698:	2303      	movs	r3, #3
 801969a:	1cc5      	adds	r5, r0, #3
 801969c:	439d      	bics	r5, r3
 801969e:	42a8      	cmp	r0, r5
 80196a0:	d0f8      	beq.n	8019694 <sbrk_aligned+0x24>
 80196a2:	1a29      	subs	r1, r5, r0
 80196a4:	0020      	movs	r0, r4
 80196a6:	f000 f89d 	bl	80197e4 <_sbrk_r>
 80196aa:	3001      	adds	r0, #1
 80196ac:	d1f2      	bne.n	8019694 <sbrk_aligned+0x24>
 80196ae:	e7ef      	b.n	8019690 <sbrk_aligned+0x20>
 80196b0:	20003b18 	.word	0x20003b18

080196b4 <_malloc_r>:
 80196b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196b6:	2203      	movs	r2, #3
 80196b8:	1ccb      	adds	r3, r1, #3
 80196ba:	4393      	bics	r3, r2
 80196bc:	3308      	adds	r3, #8
 80196be:	0005      	movs	r5, r0
 80196c0:	001f      	movs	r7, r3
 80196c2:	2b0c      	cmp	r3, #12
 80196c4:	d234      	bcs.n	8019730 <_malloc_r+0x7c>
 80196c6:	270c      	movs	r7, #12
 80196c8:	42b9      	cmp	r1, r7
 80196ca:	d833      	bhi.n	8019734 <_malloc_r+0x80>
 80196cc:	0028      	movs	r0, r5
 80196ce:	f000 f871 	bl	80197b4 <__malloc_lock>
 80196d2:	4e37      	ldr	r6, [pc, #220]	@ (80197b0 <_malloc_r+0xfc>)
 80196d4:	6833      	ldr	r3, [r6, #0]
 80196d6:	001c      	movs	r4, r3
 80196d8:	2c00      	cmp	r4, #0
 80196da:	d12f      	bne.n	801973c <_malloc_r+0x88>
 80196dc:	0039      	movs	r1, r7
 80196de:	0028      	movs	r0, r5
 80196e0:	f7ff ffc6 	bl	8019670 <sbrk_aligned>
 80196e4:	0004      	movs	r4, r0
 80196e6:	1c43      	adds	r3, r0, #1
 80196e8:	d15f      	bne.n	80197aa <_malloc_r+0xf6>
 80196ea:	6834      	ldr	r4, [r6, #0]
 80196ec:	9400      	str	r4, [sp, #0]
 80196ee:	9b00      	ldr	r3, [sp, #0]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d14a      	bne.n	801978a <_malloc_r+0xd6>
 80196f4:	2c00      	cmp	r4, #0
 80196f6:	d052      	beq.n	801979e <_malloc_r+0xea>
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	0028      	movs	r0, r5
 80196fc:	18e3      	adds	r3, r4, r3
 80196fe:	9900      	ldr	r1, [sp, #0]
 8019700:	9301      	str	r3, [sp, #4]
 8019702:	f000 f86f 	bl	80197e4 <_sbrk_r>
 8019706:	9b01      	ldr	r3, [sp, #4]
 8019708:	4283      	cmp	r3, r0
 801970a:	d148      	bne.n	801979e <_malloc_r+0xea>
 801970c:	6823      	ldr	r3, [r4, #0]
 801970e:	0028      	movs	r0, r5
 8019710:	1aff      	subs	r7, r7, r3
 8019712:	0039      	movs	r1, r7
 8019714:	f7ff ffac 	bl	8019670 <sbrk_aligned>
 8019718:	3001      	adds	r0, #1
 801971a:	d040      	beq.n	801979e <_malloc_r+0xea>
 801971c:	6823      	ldr	r3, [r4, #0]
 801971e:	19db      	adds	r3, r3, r7
 8019720:	6023      	str	r3, [r4, #0]
 8019722:	6833      	ldr	r3, [r6, #0]
 8019724:	685a      	ldr	r2, [r3, #4]
 8019726:	2a00      	cmp	r2, #0
 8019728:	d133      	bne.n	8019792 <_malloc_r+0xde>
 801972a:	9b00      	ldr	r3, [sp, #0]
 801972c:	6033      	str	r3, [r6, #0]
 801972e:	e019      	b.n	8019764 <_malloc_r+0xb0>
 8019730:	2b00      	cmp	r3, #0
 8019732:	dac9      	bge.n	80196c8 <_malloc_r+0x14>
 8019734:	230c      	movs	r3, #12
 8019736:	602b      	str	r3, [r5, #0]
 8019738:	2000      	movs	r0, #0
 801973a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801973c:	6821      	ldr	r1, [r4, #0]
 801973e:	1bc9      	subs	r1, r1, r7
 8019740:	d420      	bmi.n	8019784 <_malloc_r+0xd0>
 8019742:	290b      	cmp	r1, #11
 8019744:	d90a      	bls.n	801975c <_malloc_r+0xa8>
 8019746:	19e2      	adds	r2, r4, r7
 8019748:	6027      	str	r7, [r4, #0]
 801974a:	42a3      	cmp	r3, r4
 801974c:	d104      	bne.n	8019758 <_malloc_r+0xa4>
 801974e:	6032      	str	r2, [r6, #0]
 8019750:	6863      	ldr	r3, [r4, #4]
 8019752:	6011      	str	r1, [r2, #0]
 8019754:	6053      	str	r3, [r2, #4]
 8019756:	e005      	b.n	8019764 <_malloc_r+0xb0>
 8019758:	605a      	str	r2, [r3, #4]
 801975a:	e7f9      	b.n	8019750 <_malloc_r+0x9c>
 801975c:	6862      	ldr	r2, [r4, #4]
 801975e:	42a3      	cmp	r3, r4
 8019760:	d10e      	bne.n	8019780 <_malloc_r+0xcc>
 8019762:	6032      	str	r2, [r6, #0]
 8019764:	0028      	movs	r0, r5
 8019766:	f000 f82d 	bl	80197c4 <__malloc_unlock>
 801976a:	0020      	movs	r0, r4
 801976c:	2207      	movs	r2, #7
 801976e:	300b      	adds	r0, #11
 8019770:	1d23      	adds	r3, r4, #4
 8019772:	4390      	bics	r0, r2
 8019774:	1ac2      	subs	r2, r0, r3
 8019776:	4298      	cmp	r0, r3
 8019778:	d0df      	beq.n	801973a <_malloc_r+0x86>
 801977a:	1a1b      	subs	r3, r3, r0
 801977c:	50a3      	str	r3, [r4, r2]
 801977e:	e7dc      	b.n	801973a <_malloc_r+0x86>
 8019780:	605a      	str	r2, [r3, #4]
 8019782:	e7ef      	b.n	8019764 <_malloc_r+0xb0>
 8019784:	0023      	movs	r3, r4
 8019786:	6864      	ldr	r4, [r4, #4]
 8019788:	e7a6      	b.n	80196d8 <_malloc_r+0x24>
 801978a:	9c00      	ldr	r4, [sp, #0]
 801978c:	6863      	ldr	r3, [r4, #4]
 801978e:	9300      	str	r3, [sp, #0]
 8019790:	e7ad      	b.n	80196ee <_malloc_r+0x3a>
 8019792:	001a      	movs	r2, r3
 8019794:	685b      	ldr	r3, [r3, #4]
 8019796:	42a3      	cmp	r3, r4
 8019798:	d1fb      	bne.n	8019792 <_malloc_r+0xde>
 801979a:	2300      	movs	r3, #0
 801979c:	e7da      	b.n	8019754 <_malloc_r+0xa0>
 801979e:	230c      	movs	r3, #12
 80197a0:	0028      	movs	r0, r5
 80197a2:	602b      	str	r3, [r5, #0]
 80197a4:	f000 f80e 	bl	80197c4 <__malloc_unlock>
 80197a8:	e7c6      	b.n	8019738 <_malloc_r+0x84>
 80197aa:	6007      	str	r7, [r0, #0]
 80197ac:	e7da      	b.n	8019764 <_malloc_r+0xb0>
 80197ae:	46c0      	nop			@ (mov r8, r8)
 80197b0:	20003b1c 	.word	0x20003b1c

080197b4 <__malloc_lock>:
 80197b4:	b510      	push	{r4, lr}
 80197b6:	4802      	ldr	r0, [pc, #8]	@ (80197c0 <__malloc_lock+0xc>)
 80197b8:	f000 f850 	bl	801985c <__retarget_lock_acquire_recursive>
 80197bc:	bd10      	pop	{r4, pc}
 80197be:	46c0      	nop			@ (mov r8, r8)
 80197c0:	20003c58 	.word	0x20003c58

080197c4 <__malloc_unlock>:
 80197c4:	b510      	push	{r4, lr}
 80197c6:	4802      	ldr	r0, [pc, #8]	@ (80197d0 <__malloc_unlock+0xc>)
 80197c8:	f000 f849 	bl	801985e <__retarget_lock_release_recursive>
 80197cc:	bd10      	pop	{r4, pc}
 80197ce:	46c0      	nop			@ (mov r8, r8)
 80197d0:	20003c58 	.word	0x20003c58

080197d4 <memset>:
 80197d4:	0003      	movs	r3, r0
 80197d6:	1882      	adds	r2, r0, r2
 80197d8:	4293      	cmp	r3, r2
 80197da:	d100      	bne.n	80197de <memset+0xa>
 80197dc:	4770      	bx	lr
 80197de:	7019      	strb	r1, [r3, #0]
 80197e0:	3301      	adds	r3, #1
 80197e2:	e7f9      	b.n	80197d8 <memset+0x4>

080197e4 <_sbrk_r>:
 80197e4:	2300      	movs	r3, #0
 80197e6:	b570      	push	{r4, r5, r6, lr}
 80197e8:	4d06      	ldr	r5, [pc, #24]	@ (8019804 <_sbrk_r+0x20>)
 80197ea:	0004      	movs	r4, r0
 80197ec:	0008      	movs	r0, r1
 80197ee:	602b      	str	r3, [r5, #0]
 80197f0:	f7ef fa08 	bl	8008c04 <_sbrk>
 80197f4:	1c43      	adds	r3, r0, #1
 80197f6:	d103      	bne.n	8019800 <_sbrk_r+0x1c>
 80197f8:	682b      	ldr	r3, [r5, #0]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d000      	beq.n	8019800 <_sbrk_r+0x1c>
 80197fe:	6023      	str	r3, [r4, #0]
 8019800:	bd70      	pop	{r4, r5, r6, pc}
 8019802:	46c0      	nop			@ (mov r8, r8)
 8019804:	20003c5c 	.word	0x20003c5c

08019808 <__errno>:
 8019808:	4b01      	ldr	r3, [pc, #4]	@ (8019810 <__errno+0x8>)
 801980a:	6818      	ldr	r0, [r3, #0]
 801980c:	4770      	bx	lr
 801980e:	46c0      	nop			@ (mov r8, r8)
 8019810:	200001ac 	.word	0x200001ac

08019814 <__libc_init_array>:
 8019814:	b570      	push	{r4, r5, r6, lr}
 8019816:	2600      	movs	r6, #0
 8019818:	4c0c      	ldr	r4, [pc, #48]	@ (801984c <__libc_init_array+0x38>)
 801981a:	4d0d      	ldr	r5, [pc, #52]	@ (8019850 <__libc_init_array+0x3c>)
 801981c:	1b64      	subs	r4, r4, r5
 801981e:	10a4      	asrs	r4, r4, #2
 8019820:	42a6      	cmp	r6, r4
 8019822:	d109      	bne.n	8019838 <__libc_init_array+0x24>
 8019824:	2600      	movs	r6, #0
 8019826:	f000 f835 	bl	8019894 <_init>
 801982a:	4c0a      	ldr	r4, [pc, #40]	@ (8019854 <__libc_init_array+0x40>)
 801982c:	4d0a      	ldr	r5, [pc, #40]	@ (8019858 <__libc_init_array+0x44>)
 801982e:	1b64      	subs	r4, r4, r5
 8019830:	10a4      	asrs	r4, r4, #2
 8019832:	42a6      	cmp	r6, r4
 8019834:	d105      	bne.n	8019842 <__libc_init_array+0x2e>
 8019836:	bd70      	pop	{r4, r5, r6, pc}
 8019838:	00b3      	lsls	r3, r6, #2
 801983a:	58eb      	ldr	r3, [r5, r3]
 801983c:	4798      	blx	r3
 801983e:	3601      	adds	r6, #1
 8019840:	e7ee      	b.n	8019820 <__libc_init_array+0xc>
 8019842:	00b3      	lsls	r3, r6, #2
 8019844:	58eb      	ldr	r3, [r5, r3]
 8019846:	4798      	blx	r3
 8019848:	3601      	adds	r6, #1
 801984a:	e7f2      	b.n	8019832 <__libc_init_array+0x1e>
 801984c:	08019ccc 	.word	0x08019ccc
 8019850:	08019ccc 	.word	0x08019ccc
 8019854:	08019cd0 	.word	0x08019cd0
 8019858:	08019ccc 	.word	0x08019ccc

0801985c <__retarget_lock_acquire_recursive>:
 801985c:	4770      	bx	lr

0801985e <__retarget_lock_release_recursive>:
 801985e:	4770      	bx	lr

08019860 <__aeabi_memcpy>:
 8019860:	b510      	push	{r4, lr}
 8019862:	f000 f80d 	bl	8019880 <memcpy>
 8019866:	bd10      	pop	{r4, pc}

08019868 <__aeabi_memset>:
 8019868:	000b      	movs	r3, r1
 801986a:	b510      	push	{r4, lr}
 801986c:	0011      	movs	r1, r2
 801986e:	001a      	movs	r2, r3
 8019870:	f7ff ffb0 	bl	80197d4 <memset>
 8019874:	bd10      	pop	{r4, pc}

08019876 <__aeabi_memclr>:
 8019876:	b510      	push	{r4, lr}
 8019878:	2200      	movs	r2, #0
 801987a:	f7ff fff5 	bl	8019868 <__aeabi_memset>
 801987e:	bd10      	pop	{r4, pc}

08019880 <memcpy>:
 8019880:	2300      	movs	r3, #0
 8019882:	b510      	push	{r4, lr}
 8019884:	429a      	cmp	r2, r3
 8019886:	d100      	bne.n	801988a <memcpy+0xa>
 8019888:	bd10      	pop	{r4, pc}
 801988a:	5ccc      	ldrb	r4, [r1, r3]
 801988c:	54c4      	strb	r4, [r0, r3]
 801988e:	3301      	adds	r3, #1
 8019890:	e7f8      	b.n	8019884 <memcpy+0x4>
	...

08019894 <_init>:
 8019894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019896:	46c0      	nop			@ (mov r8, r8)
 8019898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801989a:	bc08      	pop	{r3}
 801989c:	469e      	mov	lr, r3
 801989e:	4770      	bx	lr

080198a0 <_fini>:
 80198a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198a2:	46c0      	nop			@ (mov r8, r8)
 80198a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198a6:	bc08      	pop	{r3}
 80198a8:	469e      	mov	lr, r3
 80198aa:	4770      	bx	lr
